@midio_version("0.1.0")
@version("0.1.0")
import("std", Std_k98ojb)
import("http", Http_q7o96c)

module() main { 
   module(doc: "Contains different tests") tests {
        instance(x: 7.915879394531274, y: 131.51126562500002) expression_9584aa root.Std_k98ojb.Math.Expression {
            expression: "x * y"
        }
        instance(x: -58.08415112304686, y: -142.04427636718748) test_c47d8e root.Std_k98ojb.Testing.Test {
            name: "Test multiply"
        }
        instance(x: 211.02705493164063, y: -56.710978637695305) assertequal_90d9f0 root.Std_k98ojb.Testing.AssertEqual {}
        data_instance(x: -208.9, y: 82.4) data_ad6cab  = 10
        data_instance(x: -203.0, y: 234.6) data_76b715  = 20
        instance(x: 517.4519287109375, y: 131.77780151367188) expression_23f2cc root.Std_k98ojb.Math.Expression {
            expression: "x * y"
        }
        data_instance(x: 317.0, y: 95.6) data_dc12a0  = 5
        data_instance(x: 315.9, y: 238.0) data_e98288  = 10
        instance(x: 986.1184936523435, y: 130.11114501953125) expression_c27b37 root.Std_k98ojb.Math.Expression {
            expression: "x * y"
        }
        data_instance(x: 787.0, y: 103.7) data_7ba3d7  = 4
        data_instance(x: 788.6, y: 234.6) data_a0c3c0  = 8
        instance(x: 527.3333129882813, y: -54.00004577636719) assertequal_33a0ee root.Std_k98ojb.Testing.AssertEqual {}
        instance(x: 961.2222290039063, y: -52.6666259765625) assertequal_7cd470 root.Std_k98ojb.Testing.AssertEqual {}
        expression_9584aa.result -> assertequal_90d9f0.actual
        test_c47d8e.onRun -> assertequal_90d9f0.execute
        data_ad6cab -> expression_9584aa.gen_0
        data_76b715 -> expression_9584aa.gen_1
        200 -> assertequal_90d9f0.expect
        data_dc12a0 -> expression_23f2cc.gen_0
        data_e98288 -> expression_23f2cc.gen_1
        data_7ba3d7 -> expression_c27b37.gen_0
        data_a0c3c0 -> expression_c27b37.gen_1
        assertequal_90d9f0.continue -> assertequal_33a0ee.execute
        expression_23f2cc.result -> assertequal_33a0ee.actual
        50 -> assertequal_33a0ee.expect
        assertequal_33a0ee.continue -> assertequal_7cd470.execute
        expression_c27b37.result -> assertequal_7cd470.actual
        32 -> assertequal_7cd470.expect
    }

    instance(x: -85.77739697265622, y: -46.66654199218749) expression_3e25a9 root.Std_k98ojb.Math.Expression {
        expression: "x * y"
    }
}