[
    {
        "prompts": [
            "Create a flow to find whether a number is divisible by 11.",
            "The flow should create a user-defined function. The body of the function contains one input property of type Number, one 'Data Object' node with number 11, one 'Math Modulo', one 'Math Expression' and one output property of type Bool.\n The arrows are connected as follows: The input property, called n, is connected with arrows to the value propery of the 'Math Modulo' node. The Data Object with number 11 is connected with arrowes to the divisor property og 'Math modulo'. The result output property of the 'Math modulo' node is connected with arrows to the 'Math Expression' node, which contains the expression (n == 0). The result of this 'Math Expression' node is a Bool which is connected with arrows to the output property, that return the Bool from the function. The user-defined function is then created within the main module.",
            "This created user-defined function should then be tested in a seperate module called tests, within the main module. Since the user-defined function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers. "
        ],
        "task_id": 3,
        "specification": {
            "function_signature": "func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n  in(x: 5.110832031250027, y: -25.33331298828125, name: \"n\") property(Number) n_27f29c\n\n  out(x: 668.1112060546875, y: 2.11114501953125, name: \"output\") property(Bool) output_f2630f\n}",
            "preconditions": "- There are no preconditions, the method will always work for any integer input.",
            "postconditions": "- The result is true if the input number is divisible by 11\n- The result is false if the input number is not divisible by 11"
        },
        "MBPP_task_id": 77,
        "library_functions": [
            "root.std.Math.Expression",
            "root.std.Math.Modulo"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property",
            "Data Object"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "test_list": [
                "assert is_Diff (12345) == False",
                "assert is_Diff(1212112) == True",
                "assert is_Diff(1212) == False"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to check whether the given list contains consecutive numbers or not.",
            "The flow should create a user-defined function. The body of the function contains one input property of type any, one 'List Sort' node, one 'List Min' node, one 'List Max' node, one 'List GenerateRange' node, one 'Math Expression' node with the expression 'list1 == list2', and in this case one output property 'result' of type Bool. \n The arrows are connected as follows: The input property, called list, is connected with arrows to the 'List Sort', 'List Min', and 'List Max' nodes. The sorted list output of the 'List Sort' node is connected with arrows to the first input (list1) of the 'Math Expression' node. The outputs of the 'List.Min' and 'List.Max' nodes are connected with arrows to the from and to inputs of the 'List GenerateRange' node, respectively. The generated range output of the 'List GenerateRange' node is connected with arrows to the second input (list2) of the 'Math Expression' node. The result output of the 'Math Expression' node is then connected with arrows to the output property, called output, of the user-defined function. The user-defined function is then created within the main module",
            "The created user-defined function should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 11,
        "specification": {
            "function_signature": "func(doc: \"check whether the given list contains consecutive numbers or not.\") ContainsConsecutiveNumbers {\n  in(x: -425.8101837730135, y: 209.16760512007824, name: \"list\") property(any) list_faf6c2\n\n  out(x: 866.1704038210295, y: 132.1480057664585, name: \"output\") property(Bool) output_a2b59d\n}",
            "preconditions": "- There are no preconditions, the method will always work. Arrays can be empty or non-empty.",
            "postconditions": "- If the array contains consecutive numbers, the result is true\n- If the array does not contain consecutive numbers, the result is false"
        },
        "MBPP_task_id": 472,
        "library_functions": [
            "root.std.List.Sort",
            "root.std.List.Min",
            "root.std.List.Max",
            "root.std.List.GenerateRange",
            "root.std.Math.Expression"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert check_Consecutive([1,2,3,4,5]) == True",
                "assert check_Consecutive([1,2,3,5,6]) == False",
                "assert check_Consecutive([1,2,1]) == False"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to check whether a specified list is sorted or not.",
            "The flow should create a user-defined function, called 'issort_list'. The body of the function contains one input property of type List, named 'list' and one input trigger, named 'execute'. It also includes the following nodes: one 'List GetAt' node, one 'Std For' node, one 'Std IfExpression' node, and getter and setter nodes for storing a local varibale named 'previous'. Lastly, it includes an output variable named 'output' and an output trigger named 'continue'.\n Arrows are connected as follows: The input trigger, named 'list', is conencted to the input property 'list' of the 'List GetAt' and the input property 'items' of the 'Std For' node. The 'List GetAt' node gets the items at index zero and the output property, named 'itemAtIndex' is connected to a setter node, which sets the a variable named 'previous'. The input trigger named 'execute' of this user-defined function is connected to the setter node, so that the node is set at the start of the execution flow. After this, the flow of execution is sent to the 'Std For' node, which loops through the 'items' property, which is set to the input property 'list' of this user-defined function. In each iteration, the flow of execution is sent through an 'Std IfExpression' node. This node takes in 'index', 'current' item in the loop and the 'previous' variable, which is stored in the local variable 'previous' and provided by a getter node. The 'Std IfExpression' node checks if index is zero or previous is lower or equal to the previous item, by using this expression 'index == 0 || previous <= current'. If it evaluates to true, the flow of execution is first sent through a setter node, which sets the variable 'previous' to the 'item' provided by 'Std For'. Then the flow of execution is sent back to the input trigger 'next' of the 'Std For' node, which triggers usage of the next item in the list. However, if the 'Std IfExpression' in the for loop evalutes to true, the flow of execution is sent to the output trigger, named 'continue', which exits the for loops. Regardless of outcome, the output property of the user-defined function, is set value of the 'Std IfExpression'.  Then the 'Std For' node loops through the provided  The user-defined function is then created within the main module.",
            "The created user-defined function 'issort_list' should then be tested inside a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers. "
        ],
        "task_id": 15,
        "specification": {
            "function_signature": "func(doc: \"Checks whether a specified list is sorted or not.\") issort_list {\n  in(x: -465.5555419921875, y: -235.55555725097656, name: \"execute\") trigger() execute_90aaec\n  in(x: -485.5555725097656, y: 30.000091552734403, name: \"list\") property(List) list_ec88cd\n\n  out(x: 1227.7780151367188, y: 5.7777252197265625, name: \"continue\") trigger() continue_a96db6\n  out(x: 1218, y: 147.88906860351565, name: \"output\") property(Bool) output_5bbcd7\n}",
            "preconditions": "- There are no preconditions, the method will always work. Arrays can be empty or have any length.",
            "postconditions": "- If the method returns true, the array is sorted in non-decreasing order\n- If the method returns false, the array is not sorted in non-decreasing order"
        },
        "MBPP_task_id": 567,
        "library_functions": [
            "root.std.List.GetAt",
            "root.std.Std.For",
            "root.std.Std.IfExpression"
        ],
        "visual_node_types": [
            "Function",
            "Setter",
            "Getter",
            "Output Property",
            "Input Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "setter",
            "getter",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
                "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
                "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the difference of the first even and first odd number of a given list.",
            "The flow should create a user-defined function called 'diff_even_odd'. The body of the function contains one input property of type 'List', named 'list'. It also includes the following nodes: one 'Query Filter' node to filter out even numbers from 'list', resulting in 'Even list'; one 'List FirstItem' node to extract the first even number from 'Even list'; another 'Query Filter' node to filter out odd numbers from 'list', resulting in 'Odd list'; another 'List FirstItem' node to extract the first odd number from 'Odd list'; and one 'Math Sub' node to calculate the difference between the first even number and the first odd number. Lastly, it includes an output property named 'difference' of type 'Number'.\n\nArrows are connected as follows: The input property 'list' is connected to both 'Query Filter' nodes. The first 'Query Filter' node uses the condition 'it % 2 == 0' to get the even numbers, and its 'result' is connected to the first 'List FirstItem' node to get 'first_even'. The second 'Query Filter' node uses the condition 'it % 2 != 0' to get the odd numbers, and its 'result' is connected to the second 'List FirstItem' node to get 'first_odd'. The 'item' outputs from both 'List FirstItem' nodes are connected to the 'first' and 'second' inputs of the 'Math Sub' node, respectively. The 'result' output from the 'Math Sub' node is connected to the output property 'difference'.\n\nThe user-defined function is then created within the main module.",
            "The created user-defined function 'diff_even_odd' should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 20,
        "specification": {
            "function_signature": "func(doc: \"finds the difference of the first even and first odd number of a given list.\") diff_even_odd {\n  in(x: -569.8980486478499, y: 438.54324938452424, name: \"list\") property(List) list_542a51\n\n  out(x: 443.494835164272, y: 427.164433987646, name: \"difference\") property(Number) difference_57c890\n}",
            "preconditions": "- The array should not be empty\n- The array should contain at least one even and one odd number",
            "postconditions": "- The difference is the first even number minus the first odd number in the array"
        },
        "MBPP_task_id": 594,
        "library_functions": [
            "root.std.Query.Filter",
            "root.std.List.FirstItem",
            "root.std.Math.Sub"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
                "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
                "assert diff_even_odd([1,5,7,9,10])==9"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find sum and average of first n natural numbers.",
            "The flow should create a user-defined function called 'sum_average'. The body of the function contains one input property of type 'Number', named 'n'. It also includes the following nodes: one 'Math Expression' node to calculate the sum of the first n natural numbers using the formula 'n * (n + 1) / 2', and one 'Math Div' node to calculate the average by dividing the sum by 'n'. Lastly, it includes an output property named 'output' of type 'Any'.\n\nArrows are connected as follows: The input property 'n' is connected to the 'Math Expression' node's 'gen_0' input. The result of the 'Math Expression' node is connected to the 'first' input of the 'Math Div' node and to a data instance for storing the sum. The input property 'n' is also connected to the 'second' input of the 'Math Div' node. The result of the 'Math Div' node is connected to the data instance for storing the average. The data instance containing the sum and average is then connected to the output property 'output'. The user-defined function is then created within the main module.",
            "The created user-defined function 'sum_average' should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 21,
        "specification": {
            "function_signature": "func(doc: \"find sum and average of first n natural numbers.\") sum_average {\n  in(x: -343.0, y: -287.0, name: \"n\") property(Number) n_c88d35\n\n  out(x: 756.0, y: -371.0, name: \"output\") property(List) output_ebef81\n}",
            "preconditions": "- n should be a positive integer",
            "postconditions": "- sum should be the sum of the first n natural numbers\n- average should be the average of the first n natural numbers"
        },
        "MBPP_task_id": 599,
        "library_functions": [
            "root.std.Math.Expression",
            "root.std.Math.Div"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Data Object"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "data_instance"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Function",
                "Data Object",
                "Event"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert sum_average(10)==(55, 5.5)",
                "assert sum_average(15)==(120, 8.0)",
                "assert sum_average(20)==(210, 10.5)"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the first repeated character in a given string.",
            "The flow should create a user-defined function called 'first_repeated_char'. The body of the function contains one input property of type String, named 'string', and one output property of type Any, named 'char'. It also includes one input trigger named 'execute' and one output trigger named 'continue'. Inside the function, use a 'Characters' node to convert the input string into a list of characters, a 'For' node to iterate over each character, and a 'Slice' node to manage portions of the list as needed. Additionally, include a 'List Contains' node to check for repeated characters and an 'If' node to handle the logic. Getter and Setter nodes are used for storing the fist char in local varibale, named 'first'. Connect the nodes appropriately: the input trigger 'execute' is connected to a Setter node, which sets the value of 'first' to null. Then this Setter is connected to the 'For' node to start the iteration. The 'Characters' node outputs to the 'For' node's items input. Within the loop, each character is sent to the 'List Contains' node to check for repetition in a the rest of the list. The 'List contains' node does also use the 'Math Add' and 'Slice' node to get the rest of the list. The result of 'List Contains' is connected to the 'If' node's predicate. If a repetition is found, use a 'Setter' node to set the output property 'char' with the repeated character and trigger 'continue'. If no repetition is found, continue the loop. After the loop completes without finding any repeats, the local variabel 'first' remains null and is then outputed though 'char'. The user-defined function is then created within the main module.",
            "The created user-defined function 'first_repeated_char' should then be tested inside a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers."
        ],
        "task_id": 23,
        "specification": {
            "function_signature": "func(doc: \"finds the first repeated character in a given string.\") first_repeated_char {\n  in(x: -20.83454868200644, y: -110.63145350145422, name: \"input\") property(String) input_71a657\n\n  out(x: 1545.4543910894802, y: 186.48226354870695, name: \"output\") property(Any) output_f2523c\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- If returns char, then returned char is the first repeated character in the input string\n- If returns null, then there are no repeated characters in the input string"
        },
        "MBPP_task_id": 602,
        "library_functions": [
            "root.std.Strings.Characters",
            "root.std.Std.For",
            "root.std.List.Slice",
            "root.std.List.Contains",
            "root.std.Std.If",
            "root.std.Math.Add"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Setter",
            "Getter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "test_list": [
                "assert first_repeated_char(\"abcabc\") == \"a\"",
                "assert first_repeated_char(\"abc\") == null",
                "assert first_repeated_char(\"123123\") == \"1\""
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to move all zeroes to the end of the given list.",
            "",
            ""
        ],
        "task_id": 29,
        "specification": {
            "function_signature": "func(doc: \"Moves all zeroes to the end of the given list.\") move_zero {\n    in(x: -199, y: -152, name: \"execute\") trigger() execute_1ddb9f\n    in(x: -174, y: 160, name: \"list\") property(List) list_0c1a77\n\n    out(x: 838.7, y: 168, name: \"output\") property(List) data_0_0\n    out(x: 817, y: 39, name: \"continue\") trigger() continue_a7f942\n}",
            "preconditions": "- There are no preconditions, the method will always work.",
            "postconditions": "- The length of the output array must be the same as the length of the input array\n- All zeroes in the input array are at the end of the output array\n- The relative order of the non-zero elements should be the same as in the input array\n- The number of zeroes in the input and output arrays should be the same"
        },
        "MBPP_task_id": 632,
        "library_functions": [
            "root.std.Std.For",
            "root.std.List.Concat",
            "root.std.Std.IfExpression",
            "root.std.List.Empty",
            "root.std.List.Add",
            "root.std.Query.Filter"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Setter",
            "Getter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
                "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
                "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
            ]
        }
    },
    {
        "prompts": [
            "Write a python function to check whether a list of numbers contains only one distinct element or not.",
            "",
            ""
        ],
        "task_id": 36,
        "specification": {
            "function_signature": "func(doc: \"Checks whether a list of numbers contains only one distinct element or not.\") unique_Element {\n    in(x: -285, y: -86.5, name: \"list\") property(List) list_3af6ba\n\n    out(x: 557, y: -97, name: \"output\") property(Bool) output_c7097f\n}",
            "preconditions": "- The input array should not be null",
            "postconditions": "- If the method returns true, all elements in the array are equal\n- If the method returns false, there are at least two distinct elements in the array"
        },
        "MBPP_task_id": 760,
        "library_functions": [
            "root.std.Sets.Intersection",
            "root.std.List.Length",
            "root.std.Logic.Equal"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert unique_Element([1,1,1]) == True",
                "assert unique_Element([1,2,1,2]) == False",
                "assert unique_Element([1,2,3,4,5]) == False"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the product of first even and odd number of a given list.",
            "",
            ""
        ],
        "task_id": 40,
        "specification": {
            "function_signature": "func(doc: \"Finds the product of first even and odd number of a given list.\") mul_even_odd {\n    in(x: -277, y: 166.5, name: \"list\") property(List) list_09fcba\n\n    out(x: 800, y: 145.5, name: \"output\") property(Number) output_edc2e3\n}",
            "preconditions": "- The list must have at least one even and one odd number",
            "postconditions": "- The product is the multiplication of the first even and first odd number found in the list"
        },
        "MBPP_task_id": 784,
        "library_functions": [
            "root.std.Math.Mul",
            "root.std.Iteration.Find",
            "root.std.Math.Modulo",
            "root.std.Logic.Equal",
            "root.std.Logic.NotEqual"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
                "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
                "assert mul_even_odd([1,5,7,9,10])==10"
            ]
        }
    }
]