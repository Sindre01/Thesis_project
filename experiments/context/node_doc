#### Function 'Url.UrlEncodeFormData'



## Signature: 

 extern func UrlEncodeFormData {

        in(name: "form data") property(Any) form_data

        out property(String) encoded

    }

## Custom types in scope: 

 None

#### Function 'Url.UrlEncodeString'



## Signature: 

 extern func UrlEncodeString {

        in property(String) string

        out property(String) encoded

    }

## Custom types in scope: 

 None

#### Function 'Url.UrlDecodeString'



## Signature: 

 extern func UrlDecodeString {

        in property(String) encoded

        out property(String) string

    }

## Custom types in scope: 

 None

#### Function 'Http.Response'

Responds to an http request (`req`) provided by an `Http.Endpoint` event.

## Signature: 

 extern func(doc: "Responds to an http request (`req`) provided by an `Http.Endpoint` event.") Response {

        in trigger(consumes: Http.EndpointContext, ) respond

        out trigger continue

        in(defaultValue: 200) property(Number) status

        in property headers

        in property body

    }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any

#### Function 'Http.FetchUrl'

Performs a simple http/https request to the provided `url` and returns the `response` a string or a buffer depending on the value of `resopnseType`, which can be 'text' or 'buffer'. The body input will be converted to json if it is anything other than a String or Null.

## Signature: 

 extern func(doc: "Performs a simple http/https request to the provided `url` and returns the `response` a string or a buffer depending on the value of `resopnseType`, which can be 'text' or 'buffer'. The body input will be converted to json if it is anything other than a String or Null.") FetchUrl {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "url") property(String) url

        in(x: 0, y: 0, name: "response type", editor: "ComboBox(\"text\",\"json\",\"buffer\")", defaultValue: "json") property(Any) responseType

        in(x: 0, y: 0, name: "headers") property headers

        in(x: 0, y: 0, name: "method", editor: "ComboBox(\"GET\",\"POST\",\"HEAD\",\"PUT\",\"DELETE\",\"CONNECT\",\"OPTIONS\",\"TRACE\",\"PATCH\")", defaultValue: "GET") property method

        in(x: 0, y: 0, name: "body") property(Any) body

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "response") property(String) response

        out(x: 0, y: 0, name: "status") property(Number) status

        out(x: 0, y: 0, name: "headers") property(Headers) headers

        out(x: 0, y: 0, name: "on error") trigger() onError

        out(x: 0, y: 0, name: "error") property(String) error

    }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any

#### Function 'Http.GetHttpQueryParam'

Returns the query parameter `name` from a request (`req`) object.

## Signature: 

 extern func(doc: "Returns the query parameter `name` from a request (`req`) object.") GetHttpQueryParam {

        in(x: 0, y: 0, name: "req") property req

        in(x: 0, y: 0, name: "name") property(String) name

        out(x: 0, y: 0, name: "value") property(String) value

    }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any

#### Function 'Http.HttpListenRoute'



## Signature: 

 extern func HttpListenRoute {

        in(x: 0, y: 0, name: "listen") trigger() listen

        in(x: 0, y: 0, name: "path") property path

        in(x: 0, y: 0, name: "method") property method

        out(x: 0, y: 0, name: "listening") trigger() listening

        out(x: 0, y: 0, name: "on request") trigger(produces: Http.EndpointContext) onRequest

    }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any

#### Event 'Http.Endpoint'

Listens for http requests on the provided `path` and `method`. `path` is an url of the form some/path/, which can be parameterized by :name for path items, and ?query_name&another_query_name for query values. Example: 'user/:name?email&joined_date' This creates `name`, `email` and `joined_date` output properties that one can use to get these values from the request. NOTE: All endpoints currently shares a single http server.

## Signature: 

 extern event(doc: "Listens for http requests on the provided `path` and `method`. `path` is an url of the form some/path/, which can be parameterized by :name for path items, and ?query_name&another_query_name for query values. Example: 'user/:name?email&joined_date' This creates `name`, `email` and `joined_date` output properties that one can use to get these values from the request. NOTE: All endpoints currently shares a single http server.") Endpoint {

        parameter(

            compilerPlugin: "Url",

            defaultValue: "/"

        ) path

        parameter(

            editor: "ComboBox(\"GET\",\"POST\",\"HEAD\",\"PUT\",\"DELETE\",\"CONNECT\",\"OPTIONS\",\"TRACE\",\"PATCH\")",

            defaultValue: "GET"

        ) method

        parameter(

            editor: "ComboBox(\"text\",\"buffer\")",

            defaultValue: "text",

            name: "body type",

        ) accept

        out(name: "on request") trigger(produces: Http.EndpointContext) onRequest

        out() property headers

        out() property body

    }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any

#### Function 'Http.Client.OpenNetworkStream'

Opens a new network stream.

## Signature: 

 extern func(doc: "Opens a new network stream.") OpenNetworkStream {

            in trigger open

            in(editor: "ComboBox(\"tcp\",\"tls\")") property(NetworkStreamKind) kind

            in property(String) url

            in property(Number) port

            out trigger(produces: Http.Client.ClientConnection) connected

            out trigger failed

            out property(String) error

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkStreamKind String
type HttpClient Opaque
type ClientConnection Opaque

#### Function 'Http.Client.CreateRequest'



## Signature: 

 extern func CreateRequest {

            in property(String) path

            in property(Http.Method) method

            in property(Http.Headers) headers

            in property(String or Null) body

            out property(Http.Client.Request) request

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkStreamKind String
type HttpClient Opaque
type ClientConnection Opaque
type Body String
type Request Any
type Response Any

#### Function 'Http.Client.StringifyRequest'



## Signature: 

 extern func StringifyRequest {

            in property(Http.Client.Request) request

            out property(String) request

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkStreamKind String
type HttpClient Opaque
type ClientConnection Opaque
type Body String
type Request Any
type Response Any

#### Function 'Http.Client.SendRequest'



## Signature: 

 extern func SendRequest {

            in trigger(borrows: Http.Client.ClientConnection) send

            in property(Http.Client.Request) request

            out(name: "on response") trigger(produces: Http.Client.Response) onResponse

            out trigger failed

            out property(String) error

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkStreamKind String
type HttpClient Opaque
type ClientConnection Opaque
type Body String
type Request Any
type Response Any

#### Function 'Http.Client.ResponseStatus'



## Signature: 

 extern func ResponseStatus {

            in trigger(borrows: Http.Client.Response) get

            out trigger continue

            out property(Number) status

            out(name: "status text") property(String) statusText

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkStreamKind String
type HttpClient Opaque
type ClientConnection Opaque
type Body String
type Request Any
type Response Any

#### Function 'Http.Client.ResponseHeaders'



## Signature: 

 extern func ResponseHeaders {

            in trigger(borrows: Http.Client.Response) get

            out trigger continue

            out property(Http.Headers) headers

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkStreamKind String
type HttpClient Opaque
type ClientConnection Opaque
type Body String
type Request Any
type Response Any

#### Function 'Http.Client.ResponseBody'



## Signature: 

 extern func ResponseBody {

            in trigger(borrows: Http.Client.Response) get

            in(x: 0, y: 0, name: "response type", editor: "ComboBox(\"text\",\"buffer\")") property(String) responseType

            out trigger continue

            out property(Http.Client.Body) body

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkStreamKind String
type HttpClient Opaque
type ClientConnection Opaque
type Body String
type Request Any
type Response Any

#### Function 'Http.Client.ResponseBodyStream'

Streams content from a response body as descrete events.

## Signature: 

 extern func(doc: "Streams content from a response body as descrete events.") ResponseBodyStream {

            in(name: "next frame") trigger(borrows: Http.Client.Response) nextFrame

            in(x: 0, y: 0, name: "response type", editor: "ComboBox(\"text\",\"buffer\")") property(String) responseType

            out(name: "on data") trigger onData

            out property(String) data

            out(name: "on done") trigger onDone

            out trigger failed

            out property(String) error

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkStreamKind String
type HttpClient Opaque
type ClientConnection Opaque
type Body String
type Request Any
type Response Any

#### Function 'Http.Server.BindNetworkListener'

Binds a new network listener. If `port` is Null, the OS will assign a port number to the listener.

## Signature: 

 extern func(doc: "Binds a new network listener. If `port` is Null, the OS will assign a port number to the listener.") BindNetworkListener {

            in trigger open

            in(editor: "ComboBox(\"tcp\")") property(Http.Server.NetworkListenerKind) kind

            in property(String) addr

            in property(Number or Null) port

            out(name: "listener bound") trigger(produces: Http.Server.NetworkListener) listenerBound

            out(name: "bound address") property(String) boundAddr

            out(name: "bound port") property(Number) boundPort

            out(name: "on error") trigger onError

            out property(String) error

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkListenerKind String
type NetworkListener Opaque
type Request Opaque
type Response Opaque
type Body String
type Status Number

#### Function 'Http.Server.AcceptConnections'

Starts accepting incoming connections on the provided `NetworkListener`. The process is forked for each accepted connection.

## Signature: 

 extern func(doc: "Starts accepting incoming connections on the provided `NetworkListener`. The process is forked for each accepted connection.") AcceptConnections {

            in trigger(consumes: Http.Server.NetworkListener) accept

            out(name: "listener started") trigger listenerStarted

            out(name: "client connected") trigger(produces: Http.Server.Request) clientConnected

            out(name: "on error") trigger onError

            out property(String) error

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkListenerKind String
type NetworkListener Opaque
type Request Opaque
type Response Opaque
type Body String
type Status Number

#### Function 'Http.Server.RequestInfo'



## Signature: 

 extern func RequestInfo {

            in trigger(borrows: Http.Server.Request) get

            out trigger continue

            out property(Http.Method) method

            out property(Http.Url) url

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkListenerKind String
type NetworkListener Opaque
type Request Opaque
type Response Opaque
type Body String
type Status Number

#### Function 'Http.Server.RequestBody'



## Signature: 

 extern func RequestBody {

            in trigger(borrows: Http.Server.Request) get

            in(x: 0, y: 0, name: "response type", editor: "ComboBox(\"text\",\"buffer\")") property(String) requestType

            out trigger continue

            out property(Http.Server.Body) body

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkListenerKind String
type NetworkListener Opaque
type Request Opaque
type Response Opaque
type Body String
type Status Number

#### Function 'Http.Server.CreateResponse'



## Signature: 

 extern func CreateResponse {

            in(name: "status") property(Http.Server.Status) Status

            in property(Http.Headers) headers

            in property(String or Null) body

            out property(Http.Server.Response) response

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkListenerKind String
type NetworkListener Opaque
type Request Opaque
type Response Opaque
type Body String
type Status Number

#### Function 'Http.Server.SendResponse'



## Signature: 

 extern func SendResponse {

            in trigger(borrows: Http.Server.Request) execute

            in property(Http.Server.Response) response

            out trigger continue

            out property(Http.Server.Body) body

        }

## Custom types in scope: 

 type Headers Any
type Url String
type EndpointContext Any
type ServerContext Any
type NetworkListenerKind String
type NetworkListener Opaque
type Request Opaque
type Response Opaque
type Body String
type Status Number

#### Function 'Std.CallFunction'

Calls the supplied `handler` function using list of arguments supplied to `inputs`.

## Signature: 

 extern func(doc: "Calls the supplied `handler` function using list of arguments supplied to `inputs`.") CallFunction {

        in(x: 0, y: 0, name: "handler") property(Any) handler

        in(x: 0, y: 0, name: "inputs") property inputs

        out(x: 0, y: 0, name: "outputs") property outputs

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.OrElse'

Return `first` if it is not null, otherwise `second`.

## Signature: 

 extern func(doc: "Return `first` if it is not null, otherwise `second`.") OrElse {

        in(x: 0, y: 0, name: "first") property(Any) first

        in(x: 0, y: 0, name: "second") property(Any) second

        out(x: 0, y: 0, name: "value") property(Any) value

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Switch'

Propagates the first value if the first trigger is called, other wise propagates the second value.

## Signature: 

 extern func(doc: "Propagates the first value if the first trigger is called, other wise propagates the second value.") Switch {

        in(x: 0, y: 0, name: "on first") trigger() onFirst

        in(x: 0, y: 0, name: "on second") trigger() onSecond

        in(x: 0, y: 0, name: "first") property(Any) first

        in(x: 0, y: 0, name: "second") property(Any) second

        out(x: 0, y: 0, name: "continue first") trigger() continueFirst

        out(x: 0, y: 0, name: "continue second") trigger() continueSecond

        out(x: 0, y: 0, name: "value") property(Any) value

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.GenerateUuid'

Generates a uuid

## Signature: 

 extern func(doc: "Generates a uuid") GenerateUuid {

        in(x: 0, y: 0, name: "execute") trigger() execute

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "uuid") property uuid

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Delay'

Pauses execution for `delayFor` ms. All execution is blocked during this time.

## Signature: 

 extern func(doc: "Pauses execution for `delayFor` ms. All execution is blocked during this time.") Delay {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "delay for") property(Number) delayFor

        out(x: 0, y: 0, name: "continue") trigger() continue

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Relay'

Simple makes the `input` value available on the `value` output to multiple consumers. Since this is an executable function, the input value will be cached, so `Relay` can be used for simple caching of expensive computations

## Signature: 

 extern func(doc: "Simple makes the `input` value available on the `value` output to multiple consumers. Since this is an executable function, the input value will be cached, so `Relay` can be used for simple caching of expensive computations") Relay {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "input") property(Any) input

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "value") property(Any) value

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Constant'

Makes the `value` parameter available on the `value` output.

## Signature: 

 extern func(doc: "Makes the `value` parameter available on the `value` output.") Constant {

        parameter value

        out(x: 0, y: 0, name: "value") property(Any) value

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Log'

Write `input` to the Log panel.

## Signature: 

 extern func(doc: "Write `input` to the Log panel.") Log {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "input") property(Any) input

        out(x: 0, y: 0, name: "continue") trigger() continue

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.FormatLog'

Logs a formatted string to the log window, letting you replace {{input name}} with string content.

## Signature: 

 extern func(doc: "Logs a formatted string to the log window, letting you replace {{input name}} with string content.") FormatLog {

        parameter(compilerPlugin: "TemplateString") formatString



        in(x: 0, y: 0, name: "execute") trigger() execute

        out(x: 0, y: 0, name: "continue") trigger() continue

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.ToString'

Converts any `input` type to a String.

## Signature: 

 extern func(doc: "Converts any `input` type to a String.") ToString {

        in(x: 0, y: 0, name: "input") property(Any) input

        out(x: 0, y: 0, name: "output") property(String) output

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.If'

If `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.

## Signature: 

 extern func(doc: "If `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.") If {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "input") property(Bool) predicate

        out(x: 0, y: 0, name: "then") trigger() then

        out(x: 0, y: 0, name: "else") trigger() else

        out(x: 0, y: 0, name: "value") property(Bool) value

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.IfExpression'

IfExpression is a function that allows you to create a conditional expression using a simple expression language provided through the `expression` parameter. Example: `a > b ? a : b` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `value` output.

## Signature: 

 extern func(doc: "IfExpression is a function that allows you to create a conditional expression using a simple expression language provided through the `expression` parameter. Example: `a > b ? a : b` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `value` output.") IfExpression {

        parameter(

            compilerPlugin: "Expression",

            defaultValue: "",

        ) expression



        in trigger execute

        out trigger then

        out trigger else

        out property(Bool) value

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Choose'

If `predicate` is true, the `value` output will have the value of `then`, otherwise, it will have the value of `else`.

## Signature: 

 extern func(doc: "If `predicate` is true, the `value` output will have the value of `then`, otherwise, it will have the value of `else`.") Choose {

        in property(Bool) predicate

        in property(Any) then

        in property(Any) else

        out property(Any) value

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Match'

Switches on the values provided to the `cases` parameter, which accepts a list of values. For each value, an output trigger is created, which is triggered when the `value` property matches that list item.

## Signature: 

 extern func(doc: "Switches on the values provided to the `cases` parameter, which accepts a list of values. For each value, an output trigger is created, which is triggered when the `value` property matches that list item.") Match {

        parameter(

            compilerPlugin: "Match",

            defaultValue: [""],

            editor: "List"

        ) cases

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "value") property value

        out(x: 0, y: 0, name: "no match") trigger() noMatch

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.TypeOf'

Returns the type of `value` as a String.

## Signature: 

 extern func(doc: "Returns the type of `value` as a String.") TypeOf {

        in(x: 0, y: 0, name: "value") property(Any) value

        out(x: 0, y: 0, name: "type name") property(String) typeName

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.PWD'

Returns the path of the working directory.

## Signature: 

 extern func(doc: "Returns the path of the working directory.") PWD {

        out(x: 0, y: 0, name: "current directory") property(String) currentDirectory

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.IterRange'

Create a new process for each index in a range, executing the `onItem` trigger for each of them, with a corresponding `index`.

## Signature: 

 extern func(doc: "Create a new process for each index in a range, executing the `onItem` trigger for each of them, with a corresponding `index`.") IterRange {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "from") property from

        in(x: 0, y: 0, name: "to") property to

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "iteration") trigger() iteration

        out(x: 0, y: 0, name: "index") property index

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.IterList'

Create a new process for each item in a list, executing the `onItem` trigger for each of them, with a corresponding `item`.

## Signature: 

 extern func(doc: "Create a new process for each item in a list, executing the `onItem` trigger for each of them, with a corresponding `item`.") IterList {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "list") property list

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "on item") trigger() onItem

        out(x: 0, y: 0, name: "item") property item

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Fork'

Forks to current process by copying its entire state. The current process continues through the `continue` output trigger, while the forked process continues throug the `forked` output trigger, but in a new process.

## Signature: 

 extern func(doc: "Forks to current process by copying its entire state. The current process continues through the `continue` output trigger, while the forked process continues throug the `forked` output trigger, but in a new process.") Fork {

        in(x: 0, y: 0, name: "execute") trigger() execute

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "forked") trigger() forked

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.ProcessId'

Gets the process id of the executing process.

## Signature: 

 extern func(doc: "Gets the process id of the executing process.") ProcessId {

        out(x: 0, y: 0, name: "pid") property pid

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Count'

Count can be used to make sure a loop in a flow only runs for a certain number of iteartions. The `reset` input trigger resets the count, and the `count` trigger is used to increment it.

## Signature: 

 extern func(doc: "Count can be used to make sure a loop in a flow only runs for a certain number of iteartions. The `reset` input trigger resets the count, and the `count` trigger is used to increment it.") Count {

        in(x: 0, y: 0, name: "reset") trigger() reset

        in(x: 0, y: 0, name: "count") trigger(consumes: Std.CountContext, ) count

        in(x: 0, y: 0, name: "iterations") property(Number) iterations

        out(x: 0, y: 0, name: "on count") trigger(produces: Std.CountContext) onCount

        out(x: 0, y: 0, name: "done") trigger() done

        out(x: 0, y: 0, name: "interation") property(Number) interation

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.For'

For is a loop construct that can be used to iterate over a list of items. The `trigger` input is used to start the loop, the `reset` input is used to reset the loop, and the `next` input is used to move to the next item in the list. The `items` input is used to provide the list of items to iterate over. The `on item` output trigger is used to signal that an item has been processed, the `done` output trigger is used to signal that the loop has finished, the `item` output property is used to provide the current item, and the `index` output property is used to provide the current index.

## Signature: 

 extern func(doc: "For is a loop construct that can be used to iterate over a list of items. The `trigger` input is used to start the loop, the `reset` input is used to reset the loop, and the `next` input is used to move to the next item in the list. The `items` input is used to provide the list of items to iterate over. The `on item` output trigger is used to signal that an item has been processed, the `done` output trigger is used to signal that the loop has finished, the `item` output property is used to provide the current item, and the `index` output property is used to provide the current index.") For {

        in trigger() reset

        in trigger(consumes: Number) next

        in property(List) items

        out(name: "on item") trigger(produces: Number) onItem

        out trigger done

        out property(Any) item

        out property(Number) index

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Event 'Std.Start'

An event which is triggered as soon as the engine starts.

## Signature: 

 extern event(doc: "An event which is triggered as soon as the engine starts.") Start {

        out(name: "on start") trigger() onStart

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'Std.Stop'



## Signature: 

 extern func Stop {

        in trigger stop

        in(name: "exit code") property(Number) exitCode

    }

## Custom types in scope: 

 type CountContext Number
type AnyContext Any

#### Function 'ConsumeContext'

Consumes the context of the `execute` trigger, and makes it available as an output through `value`.

## Signature: 

 extern func(doc: "Consumes the context of the `execute` trigger, and makes it available as an output through `value`.") ConsumeContext {

        in trigger(consumes: AnyContext) execute

        out trigger continue

        out property(Any) value

    }



    extern func(doc: "Returns true if the type of `input` is Number") IsNumber {

        in property(Any) input

        out(name: "is number") property(Bool) isNumber

    }



    extern func(doc: "Returns true if the type of `input` is Bool") IsBool {

        in property(Any) input

        out(name: "is bool") property(Bool) isBool

    }



    extern func(doc: "Returns true if the type of `input` is String") IsString {

        in property(Any) input

        out(name: "is string") property(Bool) isString

    }



    extern func(doc: "Returns true if the type of `input` is Null") IsNull {

        in property(Any) input

        out(name: "is null") property(Bool) isNull

    }



    extern func(doc: "Returns true if the type of `input` is not Null") NotNull {

        in property(Any) input

        out(name: "not null") property(Bool) notNull

    }



    extern func(doc: "Returns true if the type of `input` is List") IsList {

        in property(Any) input

        out(name: "is list") property(Bool) isList

    }



    extern func(doc: "Returns true if the type of `input` is Map") IsMap {

        in property(Any) input

        out(name: "is map") property(Bool) isMap

    }



    extern func(doc: "Returns true if the type of `input` is Buffer") IsBuffer {

        in property(Any) input

        out(name: "is buffer") property(Bool) isBuffer

    }



    extern func(buildTag: "panic", doc: "Causes a native panic to occur with the provided message.") Panic {

        in trigger execute

        in property message

        out trigger continue

    }

}

## Custom types in scope: 

 None

#### Function 'Time.Now'

Gives the current time in nano seconds

## Signature: 

 extern func(doc: "Gives the current time in nano seconds") Now {

        out property(Number) time

    }

## Custom types in scope: 

 type DateTime Opaque

#### Function 'Time.DateNow'

Gives the current time as a `DateTime` object

## Signature: 

 extern func(doc: "Gives the current time as a `DateTime` object") DateNow {

        out property(DateTime) date

    }

## Custom types in scope: 

 type DateTime Opaque

#### Function 'Time.Parse'

Parses an RFC 3339 and ISO 8601 date and time string such as 1996-12-19T16:39:57-08:00.

## Signature: 

 extern func(doc: "Parses an RFC 3339 and ISO 8601 date and time string such as 1996-12-19T16:39:57-08:00.") Parse {

        in(x: 0, y: 0, name: "date string") property(String) dateString

        out(x: 0, y: 0, name: "time") property time

    }

## Custom types in scope: 

 type DateTime Opaque

#### Function 'Time.Format'

Formats a time value as a string using the given format string (as defined in https://docs.rs/chrono/latest/chrono/format/strftime/index.html).

## Signature: 

 extern func(doc: "Formats a time value as a string using the given format string (as defined in https://docs.rs/chrono/latest/chrono/format/strftime/index.html).") Format {

        in(x: 0, y: 0, name: "time") property(DateTime) time

        in(x: 0, y: 0, name: "format") property(String) format

        out(x: 0, y: 0, name: "date string") property(String) dateString

    }

## Custom types in scope: 

 type DateTime Opaque

#### Function 'Time.AddSeconds'

Adds the given amount of `seconds` to the provided `time` object

## Signature: 

 extern func(doc: "Adds the given amount of `seconds` to the provided `time` object") AddSeconds {

        in(x: 0, y: 0, name: "time") property time

        in(x: 0, y: 0, name: "seconds") property(Number) seconds

        out(x: 0, y: 0, name: "time") property time

    }

## Custom types in scope: 

 type DateTime Opaque

#### Function 'Time.AddMinutes'

Adds the given amount of `minutes` to the provided `time` object

## Signature: 

 extern func(doc: "Adds the given amount of `minutes` to the provided `time` object") AddMinutes {

        in(x: 0, y: 0, name: "time") property time

        in(x: 0, y: 0, name: "minutes") property(Number) minutes

        out(x: 0, y: 0, name: "time") property time

    }

## Custom types in scope: 

 type DateTime Opaque

#### Function 'Time.AddHours'

Adds the given amount of `hours` to the provided `time` object

## Signature: 

 extern func(doc: "Adds the given amount of `hours` to the provided `time` object") AddHours {

        in(x: 0, y: 0, name: "time") property time

        in(x: 0, y: 0, name: "hours") property(Number) hours

        out(x: 0, y: 0, name: "time") property time

    }

## Custom types in scope: 

 type DateTime Opaque

#### Function 'Time.AddDays'

Adds the given amount of `days` to the provided `time` object

## Signature: 

 extern func(doc: "Adds the given amount of `days` to the provided `time` object") AddDays {

        in(x: 0, y: 0, name: "time") property time

        in(x: 0, y: 0, name: "days") property(Number) days

        out(x: 0, y: 0, name: "time") property time

    }

## Custom types in scope: 

 type DateTime Opaque

#### Function 'Time.AddWeeks'

Adds the given amount of `weeks` to the provided `time` object

## Signature: 

 extern func(doc: "Adds the given amount of `weeks` to the provided `time` object") AddWeeks {

        in(x: 0, y: 0, name: "time") property time

        in(x: 0, y: 0, name: "weeks") property(Number) weeks

        out(x: 0, y: 0, name: "time") property time

    }

## Custom types in scope: 

 type DateTime Opaque

#### Function 'Strings.Empty'

Creates a new, empty string.

## Signature: 

 extern func(doc: "Creates a new, empty string.") Empty {

        out property(String) empty

    }

## Custom types in scope: 

 None

#### Function 'Strings.Concat'

Concatenates the values in `left` and `right` as strings, making it available on the `result` output.

## Signature: 

 extern func(doc: "Concatenates the values in `left` and `right` as strings, making it available on the `result` output.") Concat {

        in(x: 0, y: 0, name: "left") property(String) left

        in(x: 0, y: 0, name: "right") property(String) right

        out(x: 0, y: 0, name: "result") property(String) result

    }

## Custom types in scope: 

 None

#### Function 'Strings.Template'

Creates a string template letting you replace {{input name}} with string content.

## Signature: 

 extern func(doc: "Creates a string template letting you replace {{input name}} with string content.") Template {

        parameter(compilerPlugin: "TemplateString") template

        out(x: 0, y: 0, name: "output") property(String) output

    }

## Custom types in scope: 

 None

#### Function 'Strings.Length'

Returns the length of the string `input`.

## Signature: 

 extern func(doc: "Returns the length of the string `input`.") Length {

        in(x: 0, y: 0, name: "input") property(String) input

        out(x: 0, y: 0, name: "length") property(Number) length

    }

## Custom types in scope: 

 None

#### Function 'Strings.Substring'

Returns the substring of `input` starting at `start` and ending at `end`. If `end` is not provided, the substring will be from `start` to the end of the string.

## Signature: 

 extern func(doc: "Returns the substring of `input` starting at `start` and ending at `end`. If `end` is not provided, the substring will be from `start` to the end of the string.") Substring {

        in(x: 0, y: 0, name: "input") property(String) input

        in(x: 0, y: 0, name: "start") property(Number) start

        in(x: 0, y: 0, name: "end") property(Number) end

        out(x: 0, y: 0, name: "substring") property(String) substring

    }

## Custom types in scope: 

 None

#### Function 'Strings.Replace'

Returns the string `input` with all occurrences of `search` replaced with `replace`.

## Signature: 

 extern func(doc: "Returns the string `input` with all occurrences of `search` replaced with `replace`.") Replace {

        in(x: 0, y: 0, name: "input") property(String) input

        in(x: 0, y: 0, name: "search") property(String) search

        in(x: 0, y: 0, name: "replace") property(String) replace

        out(x: 0, y: 0, name: "output") property(String) output

    }

## Custom types in scope: 

 None

#### Function 'Strings.ToLower'

Returns the string `input` with all characters converted to lowercase.

## Signature: 

 extern func(doc: "Returns the string `input` with all characters converted to lowercase.") ToLower {

        in(x: 0, y: 0, name: "input") property(String) input

        out(x: 0, y: 0, name: "output") property(String) output

    }

## Custom types in scope: 

 None

#### Function 'Strings.ToUpper'

Returns the string `input` with all characters converted to uppercase.

## Signature: 

 extern func(doc: "Returns the string `input` with all characters converted to uppercase.") ToUpper {

        in(x: 0, y: 0, name: "input") property(String) input

        out(x: 0, y: 0, name: "output") property(String) output

    }

## Custom types in scope: 

 None

#### Function 'Strings.IsLowerCase'

Returns true is all characters in `input` are lower case.

## Signature: 

 extern func(doc: "Returns true is all characters in `input` are lower case.") IsLowerCase {

        in(x: 0, y: 0, name: "input") property(String) input

        out(x: 0, y: 0, name: "output") property(String) output

    }

## Custom types in scope: 

 None

#### Function 'Strings.IsUpperCase'

Returns true is all characters in `input` are upper case.

## Signature: 

 extern func(doc: "Returns true is all characters in `input` are upper case.") IsUpperCase {

        in(x: 0, y: 0, name: "input") property(String) input

        out(x: 0, y: 0, name: "output") property(String) output

    }

## Custom types in scope: 

 None

#### Function 'Strings.Trim'

Returns a trimmed version of `input` where leading an trailing whitespace is removed.

## Signature: 

 extern func(doc: "Returns a trimmed version of `input` where leading an trailing whitespace is removed.") Trim {

        in property(String) input

        out property(String) trimmed

    }

## Custom types in scope: 

 None

#### Function 'Strings.Join'

Combines each string in `string list` by placing `separator` between them.

## Signature: 

 extern func(doc: "Combines each string in `string list` by placing `separator` between them.") Join {

        in(x: 0, y: 0, name: "string list") property(Any) strings

        in(x: 0, y: 0, name: "separator") property(String or Null) separator

        out(x: 0, y: 0, name: "result") property(String) result

    }

## Custom types in scope: 

 None

#### Function 'Strings.Split'



## Signature: 

 extern func Split {

        in property(String) string

        in(name: "split on") property(String) splitOn



        out property(List) strings

    }

## Custom types in scope: 

 None

#### Function 'Strings.Regex.FirstMatch'

Returns the first match for the provided regex `pattern` matching on `input`. For each capture group, a separate output property is created.

## Signature: 

 extern func(doc: "Returns the first match for the provided regex `pattern` matching on `input`. For each capture group, a separate output property is created.") FirstMatch {

            parameter(compilerPlugin: "Regex", aiSystemPrompt: "

                You will generate a regex pattern based on the users prompt, and only return the generated pattern. Here are some examples:



                prompt: Find all the words in the sentence which start with the letter 'a'

                pattern: \\b[aA]\\w+\\b



                prompt: Find all the words in the sentence which end with the letter 'a'

                pattern: \\b\\w+[aA]\\b



                prompt: Match all email addresses and capture the username and domain

                pattern: (\\w+)@(\\w+.\\w+)

            ") pattern



            in(x: 0, y: 0, name: "execute") trigger() execute

            in(x: 0, y: 0, name: "input") property(String) input



            out(x: 0, y: 0, name: "found match") trigger() foundMatch

            out(x: 0, y: 0, name: "no match") trigger() noMatch

        }

## Custom types in scope: 

 None

#### Function 'Strings.Regex.AllMatches'

Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.

## Signature: 

 extern func(doc: "Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.") AllMatches {

            parameter(aiSystemPrompt: "

                You will generate a regex pattern based on the users prompt, and only return the generated pattern. Here are some examples:



                prompt: Find all the words in the sentence which start with the letter 'a'

                pattern: \\b[aA]\\w+\\b



                prompt: Find all the words in the sentence which end with the letter 'a'

                pattern: \\b\\w+[aA]\\b



                prompt: Match all email addresses and capture the username and domain

                pattern: (\\w+)@(\\w+.\\w+)

            ") pattern

            in(x: 0, y: 0, name: "execute") trigger() execute

            in(x: 0, y: 0, name: "input") property(String) input

            out(x: 0, y: 0, name: "continue") trigger() foundMatches

            out property(List) matches

        }

## Custom types in scope: 

 None

#### Function 'Strings.AllMatchesWithRange'

Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.

## Signature: 

 extern func(doc: "Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.") AllMatchesWithRange {

            parameter(aiSystemPrompt: "

                You will generate a regex pattern based on the users prompt, and only return the generated pattern. Here are some examples:



                prompt: Find all the words in the sentence which start with the letter 'a'

                pattern: \\b[aA]\\w+\\b



                prompt: Find all the words in the sentence which end with the letter 'a'

                pattern: \\b\\w+[aA]\\b



                prompt: Match all email addresses and capture the username and domain

                pattern: (\\w+)@(\\w+.\\w+)

            ") pattern

            in(x: 0, y: 0, name: "execute") trigger() execute

            in(x: 0, y: 0, name: "input") property(String) input

            out(x: 0, y: 0, name: "continue") trigger() foundMatches

            out property(List) matches

        }

    }

## Custom types in scope: 

 None

#### Function 'Strings.IsNumeric'

Returns true if `input` is a numeric string.

## Signature: 

 extern func(doc: "Returns true if `input` is a numeric string.") IsNumeric {

        in property(String) input

        out(name: "is numeric") property(Bool) isNumeric

    }

## Custom types in scope: 

 None

#### Function 'Strings.IsAlphabetic'



## Signature: 

 extern func IsAlphabetic {

        in property(String) input

        out(name: "is alphanumeric") property(Bool) isAlphanumeric

    }

## Custom types in scope: 

 None

#### Function 'Strings.IsAlphaNumeric'



## Signature: 

 extern func IsAlphaNumeric {

        in property(String) input

        out property(Bool) isAlphaNumeric

    }

## Custom types in scope: 

 None

#### Function 'Strings.IsWhitespace'



## Signature: 

 extern func IsWhitespace {

        in property(String) input

        out(name: "is whitespace") property(Bool) isWhitespace

    }

## Custom types in scope: 

 None

#### Function 'Strings.IsEmpty'



## Signature: 

 extern func IsEmpty {

        in property(String) input

        out(name: "is empty") property(Bool) isEmpty

    }

## Custom types in scope: 

 None

#### Function 'Strings.Reversed'



## Signature: 

 extern func Reversed {

        in property(String) input

        out property(String) reversed

    }

## Custom types in scope: 

 None

#### Function 'Strings.MatchIndices'

Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at.

## Signature: 

 extern func(doc: "Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at.") MatchIndices {

        in property(String) input

        in property(String) pattern

        out property(List) indicesOfMatches

    }

## Custom types in scope: 

 None

#### Function 'Strings.RightMatchIndices'

Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at, yielded in reverse order.

## Signature: 

 extern func(doc: "Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at, yielded in reverse order.") RightMatchIndices {

        in property(String) input

        in property(String) pattern

        out property(List) indicesOfMatches

    }

## Custom types in scope: 

 None

#### Function 'Strings.Characters'

Returns a list of characters in `input`, though the output 'characters' list.

## Signature: 

 extern func(doc: "Returns a list of characters in `input`, though the output 'characters' list.") Characters {

        in property(String) input

        out property(List) characters

    }

## Custom types in scope: 

 None

#### Function 'Strings.Contains'

Returns true if `input` contains `contains` as a substring.

## Signature: 

 extern func(doc: "Returns true if `input` contains `contains` as a substring.") Contains {

        in property(String) input

        in property(String) contains

        out property(Bool) result

    }

## Custom types in scope: 

 None

#### Function 'Testing.AssertEqual'

Asserts that `expected` and `actual` are equal. The equality check is a deep check, where objects are traversed and matched against each other. `testId` identifies which test this assert is run under, and is provided by the `Testing.Test` event.

## Signature: 

 extern func(doc: "Asserts that `expected` and `actual` are equal. The equality check is a deep check, where objects are traversed and matched against each other. `testId` identifies which test this assert is run under, and is provided by the `Testing.Test` event.") AssertEqual {

        in(x: 0, y: 0, name: "execute") trigger(borrows: Testing.TestContext) execute

        in(x: 0, y: 0, name: "expect") property expect

        in(x: 0, y: 0, name: "actual") property actual

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 type TestContext Any

#### Function 'Testing.AssertTrue'



## Signature: 

 extern func AssertTrue {

        in(x: 0, y: 0, name: "execute") trigger(borrows: Testing.TestContext) execute

        in(x: 0, y: 0, name: "actual") property value

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 type TestContext Any

#### Function 'Testing.AssertFalse'



## Signature: 

 extern func AssertFalse {

        in(x: 0, y: 0, name: "execute") trigger(borrows: Testing.TestContext) execute

        in(x: 0, y: 0, name: "actual") property value

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 type TestContext Any

#### Function 'Testing.Fail'

Causes the test identified by `testId` to fail.

## Signature: 

 extern func(doc: "Causes the test identified by `testId` to fail.") Fail {

        in(x: 0, y: 0, name: "execute") trigger(borrows: Testing.TestContext) execute

        out(x: 0, y: 0, name: "continue") trigger() continue

    }

## Custom types in scope: 

 type TestContext Any

#### Event 'Testing.Test'

Creates a test, which can be run using the cli tool. `id` is used by `Testing.AssertEqual` to identify the running test.

## Signature: 

 extern event(doc: "Creates a test, which can be run using the cli tool. `id` is used by `Testing.AssertEqual` to identify the running test.") Test {

        parameter(defaultValue: "Test name") name

        out(name: "on run") trigger(produces: Testing.TestContext) onRun

    }

## Custom types in scope: 

 type TestContext Any

#### Function 'Data.GetData'

Returns the `data` stored under `key` if the key exists. If the key is present, the `onData` trigger is executed, otherwise the `keyNotFound` trigger is executed.

## Signature: 

 extern func(doc: "Returns the `data` stored under `key` if the key exists. If the key is present, the `onData` trigger is executed, otherwise the `keyNotFound` trigger is executed.") GetData {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "key") property(String) key

        out(x: 0, y: 0, name: "on data") trigger() onData

        out(x: 0, y: 0, name: "keyNotFound") trigger() keyNotFound

        out(x: 0, y: 0, name: "data") property(Any) data

    }

## Custom types in scope: 

 None

#### Function 'Data.SetData'

Associates a `value` with a string `key`, and also passes on a copy of the inserted data through the `inserted_value` output.

## Signature: 

 extern func(doc: "Associates a `value` with a string `key`, and also passes on a copy of the inserted data through the `inserted_value` output.") SetData {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "key") property(String) key

        in(x: 0, y: 0, name: "value") property(Any) value

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "inserted value") property inserted_value

    }

## Custom types in scope: 

 None

#### Function 'Data.RemoveData'

Removes the data at `key`

## Signature: 

 extern func(doc: "Removes the data at `key`") RemoveData {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "key") property(String) key

        out(x: 0, y: 0, name: "continue") trigger() continue

    }

## Custom types in scope: 

 None

#### Event 'Data.OnData'

Allows one to get an event whenever data on a `key` is added, removed or updated.

## Signature: 

 extern event(doc: "Allows one to get an event whenever data on a `key` is added, removed or updated.") OnData {

        parameter key

        out(name: "on added") trigger() onAdded

        out(name: "on removed") trigger() onRemoved

        out(name: "on updated") trigger() onUpdated

    }

## Custom types in scope: 

 None

#### Function 'Json.Parse'

Parses the json provided in the `string` property. The parsed `value` is available on success, and the `onSuccess` trigger is executed. If parsing fails, the `onFailure` trigger is executed, and the error is available on the `error` output.

## Signature: 

 extern func(doc: "Parses the json provided in the `string` property. The parsed `value` is available on success, and the `onSuccess` trigger is executed. If parsing fails, the `onFailure` trigger is executed, and the error is available on the `error` output.") Parse {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "string") property(String) string

        out(x: 0, y: 0, name: "on success") trigger() onSuccess

        out(x: 0, y: 0, name: "value") property(Any) value

        out(x: 0, y: 0, name: "on failure") trigger() onFailure

        out(x: 0, y: 0, name: "error") property error

    }

## Custom types in scope: 

 None

#### Function 'Json.Parsed'

Parses the json provided in the `string` property. Returns null if parsing fails. Use `Json.Parse` if you need to be able to handle a parse error explicitly.

## Signature: 

 extern func(doc: "Parses the json provided in the `string` property. Returns null if parsing fails. Use `Json.Parse` if you need to be able to handle a parse error explicitly.") Parsed {

        in(x: 0, y: 0, name: "string") property(String) string

        out(x: 0, y: 0, name: "value") property(Any) value

    }

## Custom types in scope: 

 None

#### Function 'Json.Stringify'

Converts any object on the `json` input to a String.

## Signature: 

 extern func(doc: "Converts any object on the `json` input to a String.") Stringify {

        in(x: 0, y: 0, name: "json") property(Any) json

        out(x: 0, y: 0, name: "string") property(String) string

    }

## Custom types in scope: 

 None

#### Function 'CSV.Parse'



## Signature: 

 extern func Parse {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "string") property(String) string

        out(x: 0, y: 0, name: "on success") trigger() onSuccess

        out(x: 0, y: 0, name: "value") property(Any) value

        out(x: 0, y: 0, name: "on failure") trigger() onFailure

        out(x: 0, y: 0, name: "error") property error

    }

## Custom types in scope: 

 None

#### Function 'CSV.Stringify'



## Signature: 

 extern func Stringify {

        in(x: 0, y: 0, name: "csv") property(Any) csv

        out(x: 0, y: 0, name: "string") property(String) string

    }

## Custom types in scope: 

 None

#### Function 'List.Empty'

Creates an empty list

## Signature: 

 extern func(doc: "Creates an empty list") Empty {

        out(x: 0, y: 0, name: "empty list") property(List) list

    }

## Custom types in scope: 

 None

#### Function 'List.GetAt'

Gets the item at `index` from `list`, returning Null if the index is out of bounds.

## Signature: 

 extern func(doc: "Gets the item at `index` from `list`, returning Null if the index is out of bounds.") GetAt {

        in(x: 0, y: 0, name: "list") property(List) list

        in(x: 0, y: 0, name: "index") property(Number) index

        out(x: 0, y: 0, name: "itemAtIndex") property(Any) itemAtIndex

    }

## Custom types in scope: 

 None

#### Function 'List.SetAt'

Sets the item at `index` of `list` to `value`

## Signature: 

 extern func(doc: "Sets the item at `index` of `list` to `value`") SetAt {

        in(x: 0, y: 0, name: "list") property(List) list

        in(x: 0, y: 0, name: "index") property(Number) index

        in(x: 0, y: 0, name: "value") property(Number) value

        out(name: "updated list") property(List) updatedList

    }

## Custom types in scope: 

 None

#### Function 'List.Add'

Adds `item` to the `list` by creating a new list with the item added, available on the `listWithItem` output.

## Signature: 

 extern func(doc: "Adds `item` to the `list` by creating a new list with the item added, available on the `listWithItem` output.") Add {

        in(x: 0, y: 0, name: "list") property list

        in(x: 0, y: 0, name: "item") property item

        out(x: 0, y: 0, name: "listWithItem") property listWithItem

    }

## Custom types in scope: 

 None

#### Function 'List.Remove'

Removes the item at `index` from `list` by creating a new list with the item removed, available on the `listWithoutItem` output.

## Signature: 

 extern func(doc: "Removes the item at `index` from `list` by creating a new list with the item removed, available on the `listWithoutItem` output.") Remove {

        in(x: 0, y: 0, name: "list") property list

        in(x: 0, y: 0, name: "index") property index

        out(x: 0, y: 0, name: "listWithoutItem") property listWithoutItem

        out(x: 0, y: 0, name: "removed item") property removedItem

    }

## Custom types in scope: 

 None

#### Function 'List.Length'

Returns the number of items in `list`.

## Signature: 

 extern func(doc: "Returns the number of items in `list`.") Length {

        in(x: 0, y: 0, name: "list") property list

        out(x: 0, y: 0, name: "length") property length

    }

## Custom types in scope: 

 None

#### Function 'List.Contains'

Returns true if `item` is contained in `list`.

## Signature: 

 extern func(doc: "Returns true if `item` is contained in `list`.") Contains {

        in(x: 0, y: 0, name: "list") property list

        in(x: 0, y: 0, name: "item") property(Any) item

        out(x: 0, y: 0, name: "result") property(Bool) is_contained

    }

## Custom types in scope: 

 None

#### Function 'List.Sort'

Returns a sorted version of `list`

## Signature: 

 extern func(doc: "Returns a sorted version of `list`") Sort {

        in(x: 0, y: 0, name: "list") property list

        out(x: 0, y: 0, name: "sorted list") property sorted_list

    }

## Custom types in scope: 

 None

#### Function 'List.SortOn'

Returns a sorted version of `list`. Sorting in done based on the provided `key`, which is retrieved from the objects in the list, which are expected to have that key. If any value in the list is not an object, or doesn't contain the given key, it is treated as less than any other item.

## Signature: 

 extern func(doc: "Returns a sorted version of `list`. Sorting in done based on the provided `key`, which is retrieved from the objects in the list, which are expected to have that key. If any value in the list is not an object, or doesn't contain the given key, it is treated as less than any other item.") SortOn {

        in(x: 0, y: 0, name: "list") property list

        in property(String) key

        out(x: 0, y: 0, name: "sorted list") property sorted_list

    }

## Custom types in scope: 

 None

#### Function 'List.GenerateRange'

A list containing number from `from` to `to`.

## Signature: 

 extern func(doc: "A list containing number from `from` to `to`.") GenerateRange {

        in(x: 0, y: 0, name: "from") property from

        in(x: 0, y: 0, name: "to") property to

        out(x: 0, y: 0, name: "list") property list

    }

## Custom types in scope: 

 None

#### Function 'List.Max'

Finds the largest item in a list of numbers

## Signature: 

 extern func(doc: "Finds the largest item in a list of numbers") Max {

        in(x: 0, y: 0, name: "items") property(List) items

        out property(Number) max

    }

## Custom types in scope: 

 None

#### Function 'List.Min'

Finds the smallest item in a list of numbers

## Signature: 

 extern func(doc: "Finds the smallest item in a list of numbers") Min {

        in(x: 0, y: 0, name: "items") property(List) items

        out property(Number) min

    }

## Custom types in scope: 

 None

#### Function 'List.Slice'

Gets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1

## Signature: 

 extern func(doc: "Gets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1") Slice {

        in(x: 0, y: 0, name: "items") property(List) list

        in property(Number) start

        in property(Number) end

        out property(List) slice

    }

## Custom types in scope: 

 None

#### Function 'List.Reversed'

Reverses the order of the items in `list`

## Signature: 

 extern func(doc: "Reverses the order of the items in `list`") Reversed {

        in(x: 0, y: 0, name: "items") property(List) list

        out property(List) reversed

    }

## Custom types in scope: 

 None

#### Function 'List.Chunks'



## Signature: 

 extern func Chunks {

        in(name: "items") property(List) list

        in(name: "chunk size") property(Number) chunkSize

        out property(List) chunks

    }

## Custom types in scope: 

 None

#### Function 'List.FirstItem'

Returns the first item in 'list', through the `item` output.

## Signature: 

 extern func(doc: "Returns the first item in 'list', through the `item` output.") FirstItem {

        in property(List) list

        out property(Any) item

    }

## Custom types in scope: 

 None

#### Function 'List.LastItem'

Returns the last item in 'list', through the `item` output.

## Signature: 

 extern func(doc: "Returns the last item in 'list', through the `item` output.") LastItem {

        in property(List) list

        out property(Any) item

    }

## Custom types in scope: 

 None

#### Function 'List.IsEmpty'

Returns true if `list` is empty, through the 'isEmpty' output

## Signature: 

 extern func(doc: "Returns true if `list` is empty, through the 'isEmpty' output") IsEmpty {

        in property(List) list

        out(name: "is empty") property(Bool) isEmpty

    }

## Custom types in scope: 

 None

#### Function 'List.NotEmpty'

Returns true if `list` is not empty, through the 'isEmpty' output

## Signature: 

 extern func(doc: "Returns true if `list` is not empty, through the 'isEmpty' output") NotEmpty {

        in property(List) list

        out(name: "is empty") property(Bool) isEmpty

    }

## Custom types in scope: 

 None

#### Function 'List.Flatten'

Converts a list of lists into a flattened list.

## Signature: 

 extern func(doc: "Converts a list of lists into a flattened list.") Flatten {

        in property(List) items

        out property(List) flattened

    }

## Custom types in scope: 

 None

#### Function 'List.Concat'

Concatenates two lists

## Signature: 

 extern func(doc: "Concatenates two lists") Concat {

        in property(List) left

        in property(List) right

        out property(List) result

    }

## Custom types in scope: 

 None

#### Function 'List.GroupByKey'



## Signature: 

 extern func GroupByKey {

        in property(List) list

        in property(String) key

        out property(Any) result

    }

## Custom types in scope: 

 None

#### Function 'Query.Select'

Maps over a list of objects and selects the given set of keys from each object.

## Signature: 

 extern func(doc: "Maps over a list of objects and selects the given set of keys from each object.") Select {

          in property from

          in(editor: "List") property keys

          out property result

      }

## Custom types in scope: 

 None

#### Function 'Query.Pick'

Maps over a list of objects extracts the value for the given field from each item.

## Signature: 

 extern func(doc: "Maps over a list of objects extracts the value for the given field from each item.") Pick {

          in property from

          in property key

          out property result

      }

## Custom types in scope: 

 None

#### Function 'Query.Filter'

Filters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.

## Signature: 

 extern func(doc: "Filters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.") Filter {

          parameter(defaultValue: "it < 10") where

          in property(List) list

          out property(List) result

      }

## Custom types in scope: 

 None

#### Function 'Query.Find'

Finds the first item in a list where the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.

## Signature: 

 extern func(doc: "Finds the first item in a list where the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.") Find {

          parameter(defaultValue: "it < 10") where

          in property(List) list

          out property(Any) item

      }

## Custom types in scope: 

 None

#### Function 'Query.InnerJoinOn'

Join two list of objects together where the given keys match. If there are several pairs of matches, one pair for each match will be present in the list.

## Signature: 

 extern func(doc: "Join two list of objects together where the given keys match. If there are several pairs of matches, one pair for each match will be present in the list.") InnerJoinOn {

          in(name: "left list") property(List) left

          in(name: "left key") property(String) left_key

          in(name: "right list") property(List) right

          in(name: "right key") property(String) right_key

          out property result

      }

## Custom types in scope: 

 None

#### Function 'Structure.Get'

Retrieves the value located at a specified `path` within a `record`. The `path` is a string that represents keys and indices in a nested structure. Keys are denoted by strings, and indices by numbers. If the `path` is valid and the value exists, it triggers `onValue` with the result. If the `path` is invalid or the value does not exist, it triggers `onError`.

## Signature: 

 extern func(doc: "Retrieves the value located at a specified `path` within a `record`. The `path` is a string that represents keys and indices in a nested structure. Keys are denoted by strings, and indices by numbers. If the `path` is valid and the value exists, it triggers `onValue` with the result. If the `path` is invalid or the value does not exist, it triggers `onError`.") Get {

        in trigger execute

        in(x: 0, y: 0, name: "record") property record

        in(x: 0, y: 0, name: "path") property(String) path



        out(name: "on value") trigger onValue

        out(x: 0, y: 0, name: "value") property value



        out(name: "on error") trigger onError

        out property error

    }

## Custom types in scope: 

 None

#### Function 'Structure.Set'

Updates the value at a given `path` within a `record`. The `path` is a string representing where the value should be set within the nested structure of the record. This function creates a new record with the updated value and outputs it as `record_with_value`. Strings in the `path` indicate keys, while numbers indicate indices.

## Signature: 

 extern func(doc: "Updates the value at a given `path` within a `record`. The `path` is a string representing where the value should be set within the nested structure of the record. This function creates a new record with the updated value and outputs it as `record_with_value`. Strings in the `path` indicate keys, while numbers indicate indices.") Set {

        in trigger execute

        in(x: 0, y: 0, name: "record") property(Any) record

        in(x: 0, y: 0, name: "path") property(String) path

        in(x: 0, y: 0, name: "value") property(Any) value



        out trigger continue

        out(x: 0, y: 0, name: "record_with_value") property record_with_value

    }

## Custom types in scope: 

 None

#### Function 'Map.Get'

Gets the `value` stored in `map` on `key`.

## Signature: 

 extern func(doc: "Gets the `value` stored in `map` on `key`.") Get {

        in(x: 0, y: 0, name: "map") property map

        in(x: 0, y: 0, name: "key") property(String) key

        out(x: 0, y: 0, name: "value") property value

    }

## Custom types in scope: 

 None

#### Function 'Map.Set'

Sets the `value` on `key` of `map` by returning a new map with the value, available on the `map_with_value` output.

## Signature: 

 extern func(doc: "Sets the `value` on `key` of `map` by returning a new map with the value, available on the `map_with_value` output.") Set {

        in(x: 0, y: 0, name: "map") property map

        in(x: 0, y: 0, name: "key") property(String) key

        in(x: 0, y: 0, name: "value") property(Any) value

        out(x: 0, y: 0, name: "map_with_value") property map_with_value

    }

## Custom types in scope: 

 None

#### Function 'Map.Empty'

Returns an empty map.

## Signature: 

 extern func(doc: "Returns an empty map.") Empty {

        out(x: 0, y: 0, name: "new map") property new_map

    }

## Custom types in scope: 

 None

#### Function 'Map.Merge'

Merge two maps into one, picking the last maps items for duplicate keys. If a key in `second` is set to Null, it will not replace an existing value for that key.

## Signature: 

 extern func(doc: "Merge two maps into one, picking the last maps items for duplicate keys. If a key in `second` is set to Null, it will not replace an existing value for that key.") Merge {

        in property first

        in property second

        out property merged

    }

## Custom types in scope: 

 None

#### Function 'Map.ContainsKey'

Checks if `map` has a key `key`.

## Signature: 

 extern func(doc: "Checks if `map` has a key `key`.") ContainsKey {

        in(x: 0, y: 0, name: "map") property map

        in(x: 0, y: 0, name: "key") property(String) key

        out(x: 0, y: 0, name: "is contained") property(Bool) is_contained

    }

## Custom types in scope: 

 None

#### Function 'Map.Keys'

Returns a list of all the `keys` in `map`.

## Signature: 

 extern func(doc: "Returns a list of all the `keys` in `map`.") Keys {

        in(x: 0, y: 0, name: "map") property map

        out(x: 0, y: 0, name: "keys") property keys

    }

## Custom types in scope: 

 None

#### Function 'Map.Values'

Returns a list of all the `values` in `map`.

## Signature: 

 extern func(doc: "Returns a list of all the `values` in `map`.") Values {

        in(x: 0, y: 0, name: "map") property map

        out(x: 0, y: 0, name: "values") property values

    }

## Custom types in scope: 

 None

#### Function 'Map.Entries'

Returns a list of all key-values pairs in `map` as a list of lists.

## Signature: 

 extern func(doc: "Returns a list of all key-values pairs in `map` as a list of lists.") Entries {

        in(x: 0, y: 0, name: "map") property map

        out(x: 0, y: 0, name: "entries") property entries

    }

## Custom types in scope: 

 None

#### Function 'Map.WithFields'

Returns a new map with only the fields specified in the `fields` list.

## Signature: 

 extern func(doc: "Returns a new map with only the fields specified in the `fields` list.") WithFields {

        in(x: 0, y: 0, name: "map") property map

        in(x: 0, y: 0, name: "fields") property(List) fields

        out(x: 0, y: 0, name: "new map") property new_map

    }

## Custom types in scope: 

 None

#### Function 'Map.MapEntries'

Calls the given mapping function instance (`handler`) once for each key value pair in `map` returning a new list with the mapped values (`output_list`).

## Signature: 

 extern func(doc: "Calls the given mapping function instance (`handler`) once for each key value pair in `map` returning a new list with the mapped values (`output_list`).") MapEntries {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "map") property map

        in(x: 0, y: 0, name: "handler") property(Any) handler

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "output list") property output_list

    }

## Custom types in scope: 

 None

#### Function 'Iteration.ForEach'

Calls the given function instance (`handler`) once for each item in `items`

## Signature: 

 extern func(doc: "Calls the given function instance (`handler`) once for each item in `items`") ForEach {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "items") property items

        in(x: 0, y: 0, name: "handler") property(Any) handler

        in(x: 0, y: 0, name: "context") property(Any) context

        out(x: 0, y: 0, name: "continue") trigger() continue

    }

## Custom types in scope: 

 None

#### Function 'Iteration.Map'

Calls the given function instance (`handler`) once for each item in `items` returning a new list with the mapped values (`output_list`). Handle is expected to be a function which takes in at least one input (the item), and returns a single item, the mapped value. It can also take a second input, which is the index of the value, and a third value, an optional context value passed from the outside.

## Signature: 

 extern func(doc: "Calls the given function instance (`handler`) once for each item in `items` returning a new list with the mapped values (`output_list`). Handle is expected to be a function which takes in at least one input (the item), and returns a single item, the mapped value. It can also take a second input, which is the index of the value, and a third value, an optional context value passed from the outside.") Map {

        in(x: 0, y: 0, name: "items") property items

        in(x: 0, y: 0, name: "handler") property(Any) handler

        in(x: 0, y: 0, name: "context") property(Any) context

        out(x: 0, y: 0, name: "output list") property output_list

    }

## Custom types in scope: 

 None

#### Function 'Iteration.Zip'

Call the given function instance ('handler') on corresponding pairs of elements from 'left' and 'right' lists. The function applies 'handler(left[i], right[i])' for each index 'i', up to the length of the shorter list. The results are collected into the output property 'zipped'.

## Signature: 

 extern func(doc: "Call the given function instance ('handler') on corresponding pairs of elements from 'left' and 'right' lists. The function applies 'handler(left[i], right[i])' for each index 'i', up to the length of the shorter list. The results are collected into the output property 'zipped'.") Zip {

        in property(List) left

        in property(List) right

        in property(Any) handler

        out property zipped

    }

## Custom types in scope: 

 None

#### Function 'Iteration.Filter'

Filters the input list 'items' using the provided 'handler' function, which is expected to return a boolean value. The filtered list is available on the 'output_list' output.

## Signature: 

 extern func(doc: "Filters the input list 'items' using the provided 'handler' function, which is expected to return a boolean value. The filtered list is available on the 'output_list' output.") Filter {

        in(x: 0, y: 0, name: "items") property items

        in(x: 0, y: 0, name: "handler") property(Any) handler

        in(x: 0, y: 0, name: "context") property(Any) context

        out(x: 0, y: 0, name: "output list") property output_list

    }

## Custom types in scope: 

 None

#### Function 'Iteration.Reduce'

Reduces the list `item` using the provided reducer function, which is expected to accept 2-4 inputs, the first being the accumulated value, and the second the value being accumulated. A third optional input will contain the current index, while the fourth optional input will contain the context input.

## Signature: 

 extern func(doc: "Reduces the list `item` using the provided reducer function, which is expected to accept 2-4 inputs, the first being the accumulated value, and the second the value being accumulated. A third optional input will contain the current index, while the fourth optional input will contain the context input.") Reduce {

        in(x: 0, y: 0, name: "items") property items

        in(name: "initial value") property initialValue

        in(x: 0, y: 0, name: "reducer") property(Any) reducer

        in(x: 0, y: 0, name: "context") property(Any) context

        out(x: 0, y: 0, name: "output") property output

    }

## Custom types in scope: 

 None

#### Function 'Iteration.Find'

Finds an item in the list `items` that satisfies the `predicate` function, and returns the item through the `item` output.

## Signature: 

 extern func(doc: "Finds an item in the list `items` that satisfies the `predicate` function, and returns the item through the `item` output.") Find {

        in property(List) items

        in property predicate

        in property context

        out property item

    }

## Custom types in scope: 

 None

#### Function 'Math.Floor'

Returns the largest integer less than or equal `input`

## Signature: 

 extern func(doc: "Returns the largest integer less than or equal `input`") Floor {

        in(x: 0, y: 0, name: "input") property input

        out(x: 0, y: 0, name: "output") property output

    }

## Custom types in scope: 

 None

#### Function 'Math.Add'

Adds `first` and `second` making the result avilable on the `result` output.

## Signature: 

 extern func(doc: "Adds `first` and `second` making the result avilable on the `result` output.") Add {

        in(x: 0, y: 0, name: "first") property(Number) first

        in(x: 0, y: 0, name: "second") property(Number) second

        out(x: 0, y: 0, name: "result") property(Number) result

    }

## Custom types in scope: 

 None

#### Function 'Math.Sub'

Subtracts `first` and `second` making the result avilable on the `result` output.

## Signature: 

 extern func(doc: "Subtracts `first` and `second` making the result avilable on the `result` output.") Sub {

        in(x: 0, y: 0, name: "first") property(Number) first

        in(x: 0, y: 0, name: "second") property(Number) second

        out(x: 0, y: 0, name: "result") property(Number) result

    }

## Custom types in scope: 

 None

#### Function 'Math.Mul'

Multiplies `first` and `second` making the result avilable on the `result` output.

## Signature: 

 extern func(doc: "Multiplies `first` and `second` making the result avilable on the `result` output.") Mul {

        in(x: 0, y: 0, name: "first") property(Number) first

        in(x: 0, y: 0, name: "second") property(Number) second

        out(x: 0, y: 0, name: "result") property(Number) result

    }

## Custom types in scope: 

 None

#### Function 'Math.Div'

Divides `first` by `second` making the result avilable on the `result` output.

## Signature: 

 extern func(doc: "Divides `first` by `second` making the result avilable on the `result` output.") Div {

        in(x: 0, y: 0, name: "first") property(Number) first

        in(x: 0, y: 0, name: "second") property(Number) second

        out(x: 0, y: 0, name: "result") property(Number) result

    }

## Custom types in scope: 

 None

#### Function 'Math.LessThan'

Checks is `left` less than `right`.

## Signature: 

 extern func(doc: "Checks is `left` less than `right`.") LessThan {

        in(x: 0, y: 0, name: "left") property(Number) left

        in(x: 0, y: 0, name: "right") property(Number) right

        out(x: 0, y: 0, name: "result") property(Bool) result

    }

## Custom types in scope: 

 None

#### Function 'Math.GreaterThan'

Checks if `left` is greater than `right`

## Signature: 

 extern func(doc: "Checks if `left` is greater than `right`") GreaterThan {

        in(x: 0, y: 0, name: "left") property(Number) left

        in(x: 0, y: 0, name: "right") property(Number) right

        out(x: 0, y: 0, name: "result") property(Bool) result

    }

## Custom types in scope: 

 None

#### Function 'Math.LessThanOrEqual'

Checks if 'left' is les than or eqaul to the 'right'

## Signature: 

 extern func(doc: "Checks if 'left' is les than or eqaul to the 'right'") LessThanOrEqual {

        in(x: 0, y: 0, name: "left") property(Number) left

        in(x: 0, y: 0, name: "right") property(Number) right

        out(x: 0, y: 0, name: "result") property(Bool) result

    }

## Custom types in scope: 

 None

#### Function 'Math.GreaterThanOrEqual'

Checks if the 'left' is greater than or equal to the 'right'

## Signature: 

 extern func(doc: "Checks if the 'left' is greater than or equal to the 'right'") GreaterThanOrEqual {

        in(x: 0, y: 0, name: "left") property(Number) left

        in(x: 0, y: 0, name: "right") property(Number) right

        out(x: 0, y: 0, name: "result") property(Bool) result

    }

## Custom types in scope: 

 None

#### Function 'Math.Expression'

Creates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.

## Signature: 

 extern func(doc: "Creates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.") Expression {

        parameter(

            compilerPlugin: "Expression",

            defaultValue: "",

            aiSystemPrompt: "You will generate math expressions based on a user prompt. The expression you generate will consist only of the following operators:

                            - + (plus)

                            - - (minus)

                            - * (multiply)

                            - / (divide)

                            - % (modulo)



                            Inputs that must be provided by the user are represented by valid C identifiers, and should prefer to be as short as possible, without confusing the user about what the input represents.



                            Here are a few examples:



                            Prompt: Calcualte the average of three number

                            Response: (a + b + c) / 3



                            Prompt: Calculate the area of a circle of radius r

                            Response: 3.14 * r * r



                            Prompt: Calculate the area of a rectangle

                            Response: a * b

                            ",

        ) expression

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Abs'

Returns the absolute value of `x`.

## Signature: 

 extern func(doc: "Returns the absolute value of `x`.") Abs {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Sin'

Returns the sine of `x` (in radians).

## Signature: 

 extern func(doc: "Returns the sine of `x` (in radians).") Sin {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Cos'

Returns the cosine of `x` (in radians).

## Signature: 

 extern func(doc: "Returns the cosine of `x` (in radians).") Cos {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Tan'

Returns the tangent of `x` (in radians).

## Signature: 

 extern func(doc: "Returns the tangent of `x` (in radians).") Tan {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Asin'

Returns the arcsine of `x` (in radians).

## Signature: 

 extern func(doc: "Returns the arcsine of `x` (in radians).") Asin {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Acos'

Returns the arccosine of `x` (in radians).

## Signature: 

 extern func(doc: "Returns the arccosine of `x` (in radians).") Acos {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Atan'

Returns the arctangent of `x` (in radians).

## Signature: 

 extern func(doc: "Returns the arctangent of `x` (in radians).") Atan {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Exp'

Returns the natural exponential function of `x`.

## Signature: 

 extern func(doc: "Returns the natural exponential function of `x`.") Exp {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Log'

Returns the natural logarithm (base e) of `x`.

## Signature: 

 extern func(doc: "Returns the natural logarithm (base e) of `x`.") Log {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Log10'

Returns the base-10 logarithm of `x`.

## Signature: 

 extern func(doc: "Returns the base-10 logarithm of `x`.") Log10 {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Pow'

Returns `x` raised to the power of `y`.

## Signature: 

 extern func(doc: "Returns `x` raised to the power of `y`.") Pow {

        in(x: 0, y: 0, name: "x") property x

        in(x: 0, y: 0, name: "y") property y

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Sqrt'

Returns the positive square root of `x`.

## Signature: 

 extern func(doc: "Returns the positive square root of `x`.") Sqrt {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Cbrt'

Returns the cube root of `x`.

## Signature: 

 extern func(doc: "Returns the cube root of `x`.") Cbrt {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.NthRoot'

Returns the `n`th root of `x`.

## Signature: 

 extern func(doc: "Returns the `n`th root of `x`.") NthRoot {

        in(x: 0, y: 0, name: "x") property x

        in(x: 0, y: 0, name: "n") property n

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Ceil'

Returns the smallest integer greater than or equal to `x`.

## Signature: 

 extern func(doc: "Returns the smallest integer greater than or equal to `x`.") Ceil {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Modulo'

Calculates the modulo of `value` and `divisor`, and returns the modulo through the `result` output.

## Signature: 

 extern func(doc: "Calculates the modulo of `value` and `divisor`, and returns the modulo through the `result` output.") Modulo {

        in(x: 0, y: 0, name: "value") property value

        in(x: 0, y: 0, name: "divisor") property divisor

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Round'

Rounds `x` to the nearest integer.

## Signature: 

 extern func(doc: "Rounds `x` to the nearest integer.") Round {

        in(x: 0, y: 0, name: "x") property x

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.RoundTo'

Rounds `x` to `decimals` decimal places.

## Signature: 

 extern func(doc: "Rounds `x` to `decimals` decimal places.") RoundTo {

        in(x: 0, y: 0, name: "x") property x

        in(x: 0, y: 0, name: "decimals") property decimals

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Min'

Returns the smallest of the input numbers.

## Signature: 

 extern func(doc: "Returns the smallest of the input numbers.") Min {

        in(x: 0, y: 0, name: "values") property values

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Max'

Returns the largest of the input numbers.

## Signature: 

 extern func(doc: "Returns the largest of the input numbers.") Max {

        in(x: 0, y: 0, name: "values") property values

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Math.Max2'

Finds the largest of two numbers

## Signature: 

 extern func(doc: "Finds the largest of two numbers") Max2 {

        in(x: 0, y: 0, name: "left") property(Number) left

        in(x: 0, y: 0, name: "right") property(Number) right

        out property(Number) max

    }

## Custom types in scope: 

 None

#### Function 'Math.Min2'

Finds the smallest of two numbers

## Signature: 

 extern func(doc: "Finds the smallest of two numbers") Min2 {

        in(x: 0, y: 0, name: "left") property(Number) left

        in(x: 0, y: 0, name: "right") property(Number) right

        out property(Number) min

    }

## Custom types in scope: 

 None

#### Function 'Math.Random'

Creates a random `value` from `from` to `to` each time the function is `execute`d.

## Signature: 

 extern func(doc: "Creates a random `value` from `from` to `to` each time the function is `execute`d.") Random {

        in(x: 0, y: 0, name: "from") property from

        in(x: 0, y: 0, name: "to") property to

        out(x: 0, y: 0, name: "value") property value

    }

## Custom types in scope: 

 None

#### Function 'Math.NumberFromString'

Converts `string` to a number. If the string is not convertible to a number, Null is returned.

## Signature: 

 extern func(doc: "Converts `string` to a number. If the string is not convertible to a number, Null is returned.") NumberFromString {

        in(x: 0, y: 0, name: "string") property string

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'LinearAlgebra.VecFromList'



## Signature: 

 extern func VecFromList {

        in(name: "Number list") property number_list

        out property(Vector) vector

    }

## Custom types in scope: 

 type Vector Opaque

#### Function 'LinearAlgebra.DotProduct'



## Signature: 

 extern func DotProduct {

        in(name: "left vector") property(Vector) left_vector

        in(name: "right vector") property(Vector) right_vector

        out property(Number) result

    }

## Custom types in scope: 

 type Vector Opaque

#### Function 'LinearAlgebra.L2Norm'



## Signature: 

 extern func L2Norm {

        in property(Vector) vector

        out property(Number) result

    }

## Custom types in scope: 

 type Vector Opaque

#### Function 'LinearAlgebra.KMeans'



## Signature: 

 extern func KMeans {

        in property(List) vectors

        in(name: "num clusters") property(Number) num_clusters

        in(name: "max iterations") property(Number) max_iterations

        out(name: "cluster assignments") property(List) cluster_assignments

        out property(List) centroids

    }

## Custom types in scope: 

 type Vector Opaque

#### Function 'Logic.Equal'

Checks if `left` and `right` are equal by performing a deep scan of the objects.

## Signature: 

 extern func(doc: "Checks if `left` and `right` are equal by performing a deep scan of the objects.") Equal {

        in(x: 0, y: 0, name: "left") property(Any) left

        in(x: 0, y: 0, name: "right") property(Any) right

        out(x: 0, y: 0, name: "result") property(Bool) result

    }

## Custom types in scope: 

 None

#### Function 'Logic.NotEqual'

Checks if `left` and `right` are not equal by performing a deep scan of the objects.

## Signature: 

 extern func(doc: "Checks if `left` and `right` are not equal by performing a deep scan of the objects.") NotEqual {

        in(x: 0, y: 0, name: "left") property(Any) left

        in(x: 0, y: 0, name: "right") property(Any) right

        out(x: 0, y: 0, name: "result") property(Bool) result

    }

## Custom types in scope: 

 None

#### Function 'Logic.Not'

The logic not operator

## Signature: 

 extern func(doc: "The logic not operator") Not {

        in property(Bool) input

        out property(Bool) result

    }

## Custom types in scope: 

 None

#### Function 'Logic.Or'

The logic or operator

## Signature: 

 extern func(doc: "The logic or operator") Or {

        in property(Bool) left

        in property(Bool) right

        out property(Bool) result

    }

## Custom types in scope: 

 None

#### Function 'Logic.And'

The logic and operator

## Signature: 

 extern func(doc: "The logic and operator") And {

        in property(Bool) left

        in property(Bool) right

        out property(Bool) result

    }

## Custom types in scope: 

 None

#### Event 'Scheduling.Schedule'

Schedule can be used to trigger flows based on a timed schedule. It is based on the Cron API, but with support for resolution down to seconds. Note that scheduling is started relative to the current UTC time.

## Signature: 

 extern event(doc: "Schedule can be used to trigger flows based on a timed schedule. It is based on the Cron API, but with support for resolution down to seconds. Note that scheduling is started relative to the current UTC time.") Schedule {

        parameter(name: "second (0-59)", defaultValue: "0") second

        parameter(name: "minute (0-59)", defaultValue: "*") minute

        parameter(name: "hour (0-23)", defaultValue: "*") hour

        parameter(name: "day of the month (1-31)", defaultValue: "*") day_of_month

        parameter(name: "month (1-12)", defaultValue: "*") month

        parameter(name: "day of the week (0-6)", defaultValue: "*") week_day

        parameter(name: "year", defaultValue: "*") year



        out(name: "on tick") trigger onTick

    }

## Custom types in scope: 

 None

#### Event 'Scheduling.ScheduleFromCronExpression'



## Signature: 

 extern event(doc: "Creates a schedule using a cron expression (second minute hour 'day of month' 'month' 'day of week' year). See https://en.wikipedia.org/wiki/Cron for details (note that this page doesn't show with second as the lowest resolution, as we do here.")) ScheduleFromCronExpression {

        parameter(name: "cron expression", defaultValue: "*/5 * * * * * *") cron_expr

        out(name: "on tick") trigger onTick

    }

## Custom types in scope: 

 None

#### Function 'Net.TcpSend'

Sends the provided `line` as a tcp messages to the target of `connection`.

## Signature: 

 extern func(doc: "Sends the provided `line` as a tcp messages to the target of `connection`.") TcpSend {

        in(x: 0, y: 0, name: "send") trigger() send

        in(x: 0, y: 0, name: "connection") property connection

        in(x: 0, y: 0, name: "line") property line

        out(x: 0, y: 0, name: "continue") trigger() continue

    }

## Custom types in scope: 

 None

#### Function 'Net.TcpListen'



## Signature: 

 extern func TcpListen {

        in(x: 0, y: 0, name: "listen") trigger() listen

        in(x: 0, y: 0, name: "address") property address

        in(x: 0, y: 0, name: "port") property port

        out(x: 0, y: 0, name: "listening") trigger() listening

        out(x: 0, y: 0, name: "on connection") trigger() onConnection

        out(x: 0, y: 0, name: "stream") property stream

    }

## Custom types in scope: 

 None

#### Function 'Net.TcpReadLine'



## Signature: 

 extern func TcpReadLine {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "stream") property stream

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "line") property line

    }

## Custom types in scope: 

 None

#### Event 'Net.TcpStream'

Listens for tcp messages by binding a tcp listener to the provided `address`:`port`. The `onLine` trigger is executed for each `line` received on `connection`.

## Signature: 

 extern event(doc: "Listens for tcp messages by binding a tcp listener to the provided `address`:`port`. The `onLine` trigger is executed for each `line` received on `connection`.") TcpStream {

        parameter port

        parameter address

        out(name: "on line") trigger() onLine

        out() property connection

        out() property line

    }

## Custom types in scope: 

 None

#### Function 'Image.FromFile'



## Signature: 

 extern func(buildTag: "file", doc: "Reads the contents of `file` and interprets it as an `image`. The supported image formats can be found here (https://docs.rs/image/latest/image/codecs/index.html#supported-formats)") FromFile {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "file") property file

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.FromBuffer'

Converts the `buffer` to an `image`

## Signature: 

 extern func(doc: "Converts the `buffer` to an `image`") FromBuffer {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "buffer") property buffer

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.ToBuffer'

Converts the `image` to a `buffer`

## Signature: 

 extern func(doc: "Converts the `image` to a `buffer`") ToBuffer {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "buffer") property buffer

    }

## Custom types in scope: 

 None

#### Function 'Image.BoxFilter'

Applies a 3x3 box filter on the image using the provided `kernel`, which expected a flattened 3x3 list of numbers (9 numbers).

## Signature: 

 extern func(doc: "Applies a 3x3 box filter on the image using the provided `kernel`, which expected a flattened 3x3 list of numbers (9 numbers).") BoxFilter {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        in(x: 0, y: 0, name: "kernel", editor: "InputGrid(3,3)") property kernel

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.Blend'

Blends two images together

## Signature: 

 extern func(doc: "Blends two images together") Blend {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image1") property image1

        in(x: 0, y: 0, name: "image2") property image2

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "result") property result

    }

## Custom types in scope: 

 None

#### Function 'Image.Resize'

Resizes the `image` to `width` and `height`, making the result available on the `resized_image` output.

## Signature: 

 extern func(doc: "Resizes the `image` to `width` and `height`, making the result available on the `resized_image` output.") Resize {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        in(x: 0, y: 0, name: "width") property width

        in(x: 0, y: 0, name: "height") property height

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "resized image") property resized_image

    }

## Custom types in scope: 

 None

#### Function 'Image.SaveToFile'



## Signature: 

 extern func(buildTag: "file", doc: "Saves the provided `image` content to a file named `path`, using the file name as an indication of which encoding to use.") SaveToFile {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        in(x: 0, y: 0, name: "path") property path

        out(x: 0, y: 0, name: "continue") trigger() continue

    }

## Custom types in scope: 

 None

#### Function 'Image.Blur'

Blurs the `image` by `amount`. NOTE: This function can become slow when using large values for `amount`. This should be fixed in the future.

## Signature: 

 extern func(doc: "Blurs the `image` by `amount`. NOTE: This function can become slow when using large values for `amount`. This should be fixed in the future.") Blur {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        in(x: 0, y: 0, name: "amount") property amount

        out(x: 0, y: 0, name: "execute") trigger() execute

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.Grayscale'

Converts `image` to grayscale.

## Signature: 

 extern func(doc: "Converts `image` to grayscale.") Grayscale {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.Brighten'

Brightens `image` by `amount`.

## Signature: 

 extern func(doc: "Brightens `image` by `amount`.") Brighten {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        in(x: 0, y: 0, name: "amount") property amount

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.Contrast'

Increases the contrast of `image` by `amount`.

## Signature: 

 extern func(doc: "Increases the contrast of `image` by `amount`.") Contrast {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        in(x: 0, y: 0, name: "amount") property amount

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.FlipHorizontal'

Flips `image` horizontally.

## Signature: 

 extern func(doc: "Flips `image` horizontally.") FlipHorizontal {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.FlipVertical'

Flips `image` vertically.

## Signature: 

 extern func(doc: "Flips `image` vertically.") FlipVertical {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.Rotate90'

Rotates `image` by 90 degress clockwise.

## Signature: 

 extern func(doc: "Rotates `image` by 90 degress clockwise.") Rotate90 {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.Rotate180'

Rotates `image` by 180 degress.

## Signature: 

 extern func(doc: "Rotates `image` by 180 degress.") Rotate180 {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.Rotate270'

Rotates `image` by 270 degress clockwise.

## Signature: 

 extern func(doc: "Rotates `image` by 270 degress clockwise.") Rotate270 {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.Threshold'

Threshold `image` by `threshold`.

## Signature: 

 extern func(doc: "Threshold `image` by `threshold`.") Threshold {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        in(x: 0, y: 0, name: "threshold", editor: "Slider(0,10)") property threshold

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "image") property image

    }

## Custom types in scope: 

 None

#### Function 'Image.Base64Encode'

Base64 encodes `image` into a string.

## Signature: 

 extern func(doc: "Base64 encodes `image` into a string.") Base64Encode {

        in(x: 0, y: 0, name: "execute") trigger() execute

        in(x: 0, y: 0, name: "image") property image

        out(x: 0, y: 0, name: "continue") trigger() continue

        out(x: 0, y: 0, name: "value") property value

    }

## Custom types in scope: 

 None

#### Function 'File.ReadAll'

Reads the entire contents of the file at `path` and returns the contents in the `content` output.

## Signature: 

 extern func(doc: "Reads the entire contents of the file at `path` and returns the contents in the `content` output.") ReadAll {

        in trigger execute

        in property(String) path



        out(name: "on done") trigger onDone

        out property(String) content



        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 None

#### Function 'File.ReadAllToBuffer'

Reads the entire contents of the file at `path` and returns the contents in the `content` output.

## Signature: 

 extern func(doc: "Reads the entire contents of the file at `path` and returns the contents in the `content` output.") ReadAllToBuffer {

        in trigger execute

        in property(String) path



        out(name: "on done") trigger onDone

        out property(Buffer) content



        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 None

#### Function 'File.WriteAll'

Writes the string or buffer to the specified path as is, or converts the value to a string if it is not a String or Buffer and then writes to file.

## Signature: 

 extern func(doc: "Writes the string or buffer to the specified path as is, or converts the value to a string if it is not a String or Buffer and then writes to file.") WriteAll {

        in trigger execute

        in property(String) path

        in property(String or Buffer or Any) content



        out(name: "on done") trigger onDone



        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 None

#### Function 'File.ListDirectory'



## Signature: 

 extern func ListDirectory {

        in trigger execute

        in property(String) path



        out(name: "on done") trigger onDone

        out property(List) files



        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 None

#### Function 'File.CreateDirectory'



## Signature: 

 extern func CreateDirectory {

        in trigger execute

        in property(String) path



        out(name: "on done") trigger onDone



        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 None

#### Function 'File.RemoveFile'



## Signature: 

 extern func RemoveFile {

        in trigger execute

        in property(String) path



        out(name: "on done") trigger onDone



        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 None

#### Function 'Env.GetEnvironmentVariable'



## Signature: 

 extern func GetEnvironmentVariable {

        in trigger execute

        in(name: "variable name") property(String) variable_name



        out(name: "on variable") trigger onVariable

        out property(String) value



        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 None

#### Function 'Env.SetEnvironmentVariable'



## Signature: 

 extern func SetEnvironmentVariable {

        in trigger execute

        in(name: "variable name") property(String) variable_name

        in property(String) value



        out(name: "on success") trigger onSuccess



        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 None

#### Function 'Env.EnvironmentVariable'



## Signature: 

 extern func EnvironmentVariable {

        in(name: "variable name") property(String) variable_name

        out property(String or Null) value

    }

## Custom types in scope: 

 None

#### Function 'Buffer.FromString'



## Signature: 

 extern func FromString {

        in trigger execute

        in property(String) string

        out trigger continue

        out property(Buffer) buffer

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU8'



## Signature: 

 extern func ReadU8 {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI8'



## Signature: 

 extern func ReadI8 {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU16BE'



## Signature: 

 extern func ReadU16BE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU16LE'



## Signature: 

 extern func ReadU16LE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU16NE'



## Signature: 

 extern func ReadU16NE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI16BE'



## Signature: 

 extern func ReadI16BE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI16LE'



## Signature: 

 extern func ReadI16LE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI16NE'



## Signature: 

 extern func ReadI16NE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU32BE'



## Signature: 

 extern func ReadU32BE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU32LE'



## Signature: 

 extern func ReadU32LE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU32NE'



## Signature: 

 extern func ReadU32NE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI32BE'



## Signature: 

 extern func ReadI32BE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI32LE'



## Signature: 

 extern func ReadI32LE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI32NE'



## Signature: 

 extern func ReadI32NE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU64BE'



## Signature: 

 extern func ReadU64BE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU64LE'



## Signature: 

 extern func ReadU64LE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadU64NE'



## Signature: 

 extern func ReadU64NE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI64BE'



## Signature: 

 extern func ReadI64BE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI64LE'



## Signature: 

 extern func ReadI64LE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadI64NE'



## Signature: 

 extern func ReadI64NE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadF32BE'



## Signature: 

 extern func ReadF32BE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadF32LE'



## Signature: 

 extern func ReadF32LE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadF32NE'



## Signature: 

 extern func ReadF32NE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadF64BE'



## Signature: 

 extern func ReadF64BE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadF64LE'



## Signature: 

 extern func ReadF64LE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ReadF64NE'



## Signature: 

 extern func ReadF64NE {

        in trigger execute

        in property(Cursor) buffer

        out trigger continue

        out property(Cursor) cursor

        out property(Number) output

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU8'



## Signature: 

 extern func PutU8 {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI8'



## Signature: 

 extern func PutI8 {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU16BE'



## Signature: 

 extern func PutU16BE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU16LE'



## Signature: 

 extern func PutU16LE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU16NE'



## Signature: 

 extern func PutU16NE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI16BE'



## Signature: 

 extern func PutI16BE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI16LE'



## Signature: 

 extern func PutI16LE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI16NE'



## Signature: 

 extern func PutI16NE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU32BE'



## Signature: 

 extern func PutU32BE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU32LE'



## Signature: 

 extern func PutU32LE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU32NE'



## Signature: 

 extern func PutU32NE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI32BE'



## Signature: 

 extern func PutI32BE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI32LE'



## Signature: 

 extern func PutI32LE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI32NE'



## Signature: 

 extern func PutI32NE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU64BE'



## Signature: 

 extern func PutU64BE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU64LE'



## Signature: 

 extern func PutU64LE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutU64NE'



## Signature: 

 extern func PutU64NE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI64BE'



## Signature: 

 extern func PutI64BE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI64LE'



## Signature: 

 extern func PutI64LE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutI64NE'



## Signature: 

 extern func PutI64NE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutF32BE'



## Signature: 

 extern func PutF32BE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutF32LE'



## Signature: 

 extern func PutF32LE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutF32NE'



## Signature: 

 extern func PutF32NE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutF64BE'



## Signature: 

 extern func PutF64BE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutF64LE'



## Signature: 

 extern func PutF64LE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.PutF64NE'



## Signature: 

 extern func PutF64NE {

        in trigger execute

        in property(Cursor) buffer

        in property(Number) value

        out trigger continue

        out property(Cursor) cursor

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.DecodeUtf8'



## Signature: 

 extern func DecodeUtf8 {

        in trigger execute

        in property(Cursor) buffer

        out(name: "on success") trigger onSuccess

        out property(String) string

        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.EncodeUtf8'



## Signature: 

 extern func EncodeUtf8 {

        in trigger execute

        in property(String) string

        out trigger continue

        out property(Cursor) buffer

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.Concat'

Concatenates two buffers by allocating a new one and copying the contents of `left` and `right`.

## Signature: 

 extern func(doc: "Concatenates two buffers by allocating a new one and copying the contents of `left` and `right`.") Concat {

        in trigger execute

        in property(Cursor) left

        in property(Cursor) right

        out trigger continue

        out property(Cursor) buffer

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.Length'



## Signature: 

 extern func Length {

        in property(Cursor) buffer

        out property(Number) length

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.Empty'



## Signature: 

 extern func Empty {

        out property(Cursor) buffer

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Buffer.ToByteList'



## Signature: 

 extern func ToByteList {

        in property(Cursor) buffer

        out property(Any) list

    }

## Custom types in scope: 

 type Cursor Buffer

#### Function 'Sets.Intersection'

Returns the intersection of the two input lists, `left` and `right`, through the `intersect` output.

## Signature: 

 extern func(doc: "Returns the intersection of the two input lists, `left` and `right`, through the `intersect` output.") Intersection {

        in property(List) left

        in property(List) right

        out property(List) intersect

    }

## Custom types in scope: 

 None

#### Function 'Sets.Union'



## Signature: 

 extern func Union {

        in property(List) left

        in property(List) right

        out property(List) union

    }

## Custom types in scope: 

 None

#### Function 'Sets.Difference'

Returns the difference of the two input lists, `left` and `right`, through the `difference` output.

## Signature: 

 extern func(doc: "Returns the difference of the two input lists, `left` and `right`, through the `difference` output.") Difference {

        in property(List) left

        in property(List) right

        out property(List) difference

    }

## Custom types in scope: 

 None

#### Function 'Process.RunCommand'



## Signature: 

 extern func RunCommand {

        in trigger execute

        in property(String) name

        in property(List or Null) args

        in(name: "env vars") property(Any) env

        in property(String or Null) cwd



        out(name: "on done") trigger onDone

        out property(Number or Null) status

        out property(String) stdout

        out property(String) stderr



        out(name: "on error") trigger onError

        out property(String) error

    }

## Custom types in scope: 

 None

#### Function 'Base64.Encode'



## Signature: 

 extern func Encode {

        in property(String) input

        out property(String) encoded



        parameter(

            editor: "ComboBox(\"standard\",\"url-safe\",\"standard-no-pad\",\"url-safe-no-pad\")",

            defaultValue: "standard"

        ) alphabet

    }

## Custom types in scope: 

 None

#### Function 'Base64.Decode'

Decodes a base64 encoded string back into its original input. If the decoding fails, the `on error` trigger is executed. Use `Base64 Encoded` for a version without triggers.

## Signature: 

 extern func(doc: "Decodes a base64 encoded string back into its original input. If the decoding fails, the `on error` trigger is executed. Use `Base64 Encoded` for a version without triggers.") Decode {

        in trigger execute

        out trigger continue



        in property(String or Buffer) input

        out property(Buffer or String or Null) decoded



        out(name: "on error") trigger onError

        out property(String or Null) error



        parameter(

            editor: "ComboBox(\"standard\",\"url-safe\",\"standard-no-pad\",\"url-safe-no-pad\")",

            defaultValue: "standard"

        ) alphabet

        parameter(

            editor: "ComboBox(\"string\",\"buffer\")",

            defaultValue: "string",

            name: "result type"

        ) resultType

    }

## Custom types in scope: 

 None

#### Function 'Base64.Decoded'

A non triggable version of `Base64 Decode`

## Signature: 

 extern func(doc: "A non triggable version of `Base64 Decode`") Decoded {

        in property(String or Buffer) input

        out property(Buffer or String or Null) decoded



        parameter(

            editor: "ComboBox(\"standard\",\"url-safe\",\"standard-no-pad\",\"url-safe-no-pad\")",

            defaultValue: "standard"

        ) alphabet

        parameter(

            editor: "ComboBox(\"string\",\"buffer\")",

            defaultValue: "string",

            name: "result type"

        ) resultType

    }

## Custom types in scope: 

 None

#### Function 'Hashing.Argon2.HashPassword'



## Signature: 

 extern func HashPassword {

            in property(String) input

            out(name: "phc string") property(String) phc_string

        }

## Custom types in scope: 

 None

#### Function 'Hashing.Argon2.VerifyPassword'



## Signature: 

 extern func VerifyPassword {

            in(name: "password hash") property(String) password_hash

            in property(String) password



            out(name: "phc string") property(String) phc_string

        }

## Custom types in scope: 

 None

#### Function 'Hashing.Argon2.HashKey'



## Signature: 

 extern func HashKey {

            in property(String) password

            in property(String) salt

            in(name: "num bytes") property(Number) num_bytes



            out property(Buffer) key

        }

## Custom types in scope: 

 None

#### Function 'Hashing.Sha2.Hash'



## Signature: 

 extern func Hash {

            in property(String) input

            out property(String or Buffer) hash



            parameter(

                editor: "ComboBox(\"224\",\"256\", \"512_224\", \"512_256\",\"384\",\"512\")",

                defaultValue: "256"

            ) bits

            parameter(

                name: "output type",

                editor: "ComboBox(\"hex-string\",\"buffer\")",

                defaultValue: "hex-string"

            ) output_type

        }

## Custom types in scope: 

 None

#### Function 'Hashing.Sha3.Hash'



## Signature: 

 extern func Hash {

            in property(String) input

            out property(String or Buffer) hash



            parameter(

                editor: "ComboBox(\"SHA3-224\", \"SHA3-256\", \"SHA3-384\", \"SHA3-512\", \"Keccak224\", \"Keccak256\", \"Keccak384\", \"Keccak512\")",

                defaultValue: "SHA3-256"

            ) bits

            parameter(

                name: "output type",

                editor: "ComboBox(\"hex-string\",\"buffer\")",

                defaultValue: "hex-string"

            ) output_type

        }

## Custom types in scope: 

 None

#### Function 'Hashing.HMAC.Compute'



## Signature: 

 extern func Compute {

            parameter(

                name: "hashing function",

                editor: "ComboBox(\"SHA2-256\", \"SHA2-512\")",

                defaultValue: "SHA2-256"

            ) hashing_function



            in property(String) secret

            in property(String) message



            out property(String) hmac

        }

## Custom types in scope: 

 None

#### Function 'Hashing.HMAC.Verify'



## Signature: 

 extern func Verify {

            parameter(

                name: "hashing function",

                editor: "ComboBox(\"SHA2-256\", \"SHA2-512\")",

                defaultValue: "SHA2-256"

            ) hashing_function



            in property(String) secret

            in property(String) message

            in property(String) hmac



            out property(Bool) result

        }

## Custom types in scope: 

 None