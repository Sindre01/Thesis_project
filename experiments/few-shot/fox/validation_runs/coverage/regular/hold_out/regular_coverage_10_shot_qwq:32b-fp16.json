[
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Checks if two integers have opposite signs.\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 70, name: \"b\") property(Number) b_in\n        in(x: -300, y: 100, name: \"execute\") trigger() execute_trig\n\n        out(x: 200, y: 50, name: \"result\") property(Bool) result_out\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_trig\n\n        instance(x: 100, y: 100) ifexpr_opp root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        \n        a_in -> ifexpr_opp.gen_0\n        b_in -> ifexpr_opp.gen_1\n        \n        execute_trig -> ifexpr_opp.execute\n        ifexpr_opp.value -> result_out\n\n        \n        ifexpr_opp.execute -> continue_trig\n    }\n\n    \n\n    instance(x: -50, y: 20) opposite_signs_node root.main.OppositeSigns {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -200, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    instance(x: -50, y: -25) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a substring in a string.\") replace_chars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_str\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_str -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_node root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") ProductOfUniques {\n        in(x: -200, y: 50) property(List) inputList\n        out(x: 400, y: 100) property(Number) result\n\n        \n        instance filterUnique Iteration.Filter {\n            list = inputList\n            context_initial_value = [] \n            handler = buildFilterHandler()\n        }\n\n        \n        instance productReduce Iteration.Reduce {\n            list = filterUnique.result\n            initial_value = 1.0\n            handler = multiplyHandler()\n        }\n        \n        productReduce.result \u2192 result\n    }\n\n    \n    func buildFilterHandler() {\n        in(x: -20, y: 0) property(Number) item\n        in(x: -30, y: 50) property(List) context\n\n        out(x: 150, y: 0) property(Bool) include\n        out(x: 200, y: 50) property(List) newContext\n\n        instance containsNode List.Contains {\n            list = context\n            item = item\n        }\n\n        \n        instance invertNode Std.IfExpression {\n            expression: \"not a\"\n            inputs: [containsNode.result]\n        }\n        invertNode.output \u2192 include\n\n        \n        instance ifNode Std.If { predicate = containsNode.result }\n\n        \n        ifNode.then \u2192 then_out\n        context \u2192 then_out.output\n\n        \n        instance addNode List.Add {\n            list = context\n            item = item\n        }\n        ifNode.else \u2192 addNode.execute\n        addNode.listWithItem \u2192 else_out.output\n\n        \n        then_out.output \u2192 newContext\n        else_out.output \u2192 newContext\n    }\n\n    \n    func multiplyHandler() {\n        in(x: 0, y: 0) property(Number) acc\n        in(x: 100, y: 0) property(Number) item\n\n        out(x: 200, y: 0) property(Number) newAcc\n\n        instance multiplyNode Math.Multiply { a = acc; b = item }\n        multiplyNode.result \u2192 newAcc\n    }\n\n}\n\n\ninstance(x: -174, y: -63) productUniques root.main.ProductOfUniques {}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -240, y: 50, name: \"list1\") property(List) list1_3d8f\n        in(x: -230, y: 100, name: \"list2\") property(List) list2_9a7c\n\n        out(x: 600, y: 75, name: \"result\") property(List) result_1b4d\n\n        instance(x: 150, y: 50) diff_a_b root.Std_k98ojb.Sets.Difference {\n            left: list1_3d8f\n            right: list2_9a7c\n        }\n        \n        instance(x: 150, y: 150) diff_b_a root.Std_k98ojb.Sets.Difference {\n            left: list2_9a7c\n            right: list1_3d8f\n        }\n\n        instance(x: 400, y: 100) concat root.Std_k98ojb.List.Concat {}\n        \n        diff_a_b.difference -> concat.left\n        diff_b_a.difference -> concat.right\n        concat.result -> result_1b4d\n    }\n\n    \n\n    instance(x: -50, y: 75) find_dissimilars_node root.main.find_dissimilars {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 100) property(List) input_list\n        in(x: -200, y: 150) property(Number) rotation_k\n\n        out(x: 800, y: 100) property(List) rotated_list\n\n        \n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        input_list -> list_length.list\n\n        \n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotation_k -> modulo_node.value\n        list_length.length -> modulo_node.divisor\n\n        \n        instance(x: 300, y: 50) eq_zero root.Std_k98ojb.Logic.Equal {}\n        modulo_node.result -> eq_zero.left\n        0 -> eq_zero.right\n\n        \n        instance(x: 400, y: 50) condition_if root.Std_k98ojb.Std.If {}\n        eq_zero.isEqual -> condition_if.predicate\n\n        \n        instance(x: 250, y: 150) sub_node root.Std_k98ojb.Math.Sub {}\n        list_length.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        \n        instance(x: 350, y: 200) slice_end_part root.Std_k98ojb.List.Slice {}\n        input_list -> slice_end_part.list\n        sub_node.result -> slice_end_part.start\n        list_length.length -> slice_end_part.end\n\n        instance(x: 350, y: 250) slice_start_part root.Std_k98ojb.List.Slice {}\n        input_list -> slice_start_part.list\n        0 -> slice_start_part.start\n        sub_node.result -> slice_start_part.end\n\n        \n        instance(x: 450, y: 300) concat_node root.Std_k98ojb.List.Concat {}\n        slice_end_part.sliceResult -> concat_node.firstList\n        slice_start_part.sliceResult -> concat_node.secondList\n\n        \n        input_list -> condition_if.thenInput\n        concat_node.resultList -> condition_if.elseInput\n\n        \n        condition_if.output -> rotated_list\n    }\n}\n\n\ninstance(x: 10, y: 10) rotate_right_instance root.main.rotate_right {}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) listInput\n        out(x: 400, y: 50, name: \"total\") property(Number) sumOutput\n\n        instance(x: 150, y: 50) reduce_7a2c3b root.Std_k98ojb.Iteration.Reduce {}\n        listInput -> reduce_7a2c3b.items\n        0 -> reduce_7a2c3b.initialValue\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) accIn\n            in(x: -100, y: 0, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: -25, name: \"\") property(Number) resultOut\n\n            instance(x: 50, y: -25) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            accIn -> add_4a9f1c.first\n            itemIn -> add_4a9f1c.second\n            add_4a9f1c.result -> resultOut\n        } -> reduce_7a2c3b.reducer\n        \n        reduce_7a2c3b.output -> sumOutput\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") IsPrime {\n        in(x: -300, y: 150, name: \"n\") property(Number) n_in\n        in(x: -400, y: 50, name: \"execute\") trigger() execute_trig\n\n        out(x: 600, y: 200, name: \"isPrime\") property(Bool) result_out\n        out(x: 800, y: 150, name: \"continue\") trigger() cont_trig\n\n        \n        instance if_less_than_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in <= 1\"\n        }\n        execute_trig \u2192 if_less_than_2.execute\n\n        \n        instance set_false_edge1 root.Setter {\n            value: false\n        }\n        if_less_than_2.then \u2192 set_false_edge1.set\n        set_false_edge1.value \u2192 result_out\n        set_false_edge1.continue \u2192 cont_trig\n\n        \n        instance else_after_edge1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"true\"\n        }\n        if_less_than_2.else \u2192 else_after_edge1.execute\n\n        \n        instance check_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"(n_in % 2 == 0) && (n_in != 2)\"\n        }\n        else_after_edge1.then \u2192 check_even.execute\n\n        \n        instance set_false_even root.Setter {\n            value: false\n        }\n        check_even.then \u2192 set_false_even.set\n        set_false_even.value \u2192 result_out\n        set_false_even.continue \u2192 cont_trig\n\n        \n        instance else_after_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"true\"\n        }\n        check_even.else \u2192 else_after_even.execute\n\n        \n        instance handle_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in == 2\"\n        }\n        else_after_even.then \u2192 handle_two.execute\n\n        \n        instance set_true_two root.Setter {\n            value: true\n        }\n        handle_two.then \u2192 set_true_two.set\n        set_true_two.value \u2192 result_out\n        set_true_two.continue \u2192 cont_trig\n\n        \n        instance else_after_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"true\"\n        }\n        handle_two.else \u2192 else_after_two.execute\n\n        \n        instance compute_sqrt root.Std_k98ojb.Math.Pow {\n            x: n_in,\n            y: 0.5\n        }\n        else_after_two.then \u2192 compute_sqrt.compute\n\n        instance floor_sqrt root.Std_k98ojb.Math.Floor {\n            value: compute_sqrt.result\n        }\n\n        \n        instance gen_range root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: floor_sqrt.floorResult\n        }\n        floor_sqrt.output \u2192 gen_range.to\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items: gen_range.list\n        }\n\n        func() predicate_handler {\n            in(x: -200, y: 0, name: \"current\") property(Number) current_i\n\n            out(x: 300, y: 0, name: \"\") property(Bool) output\n\n            instance mod_node root.Std_k98ojb.Math.Modulo {\n                value: n_in,\n                divisor: current_i\n            }\n            instance is_divisible root.Std_k98ojb.Std.IfExpression {\n                expression: \"mod_node.result == 0\"\n            }\n            is_divisible.then \u2192 output.set(true)\n            is_divisible.else \u2192 output.set(false)\n        } \u2192 find_divisor.handler\n\n        \n        instance check_found root.Std_k98ojb.Std.If {\n            condition: \"find_divisor.found != null\"\n        }\n        find_divisor.output \u2192 check_found.conditionInput\n\n        \n        instance set_true_prime root.Setter {\n            value: true\n        }\n        instance set_false_not_prime root.Setter {\n            value: false\n        }\n\n        check_found.then \u2192 set_false_not_prime.set\n        check_found.else \u2192 set_true_prime.set\n\n        [set_true_prime.value, set_false_not_prime.value] \u2192 result_out\n\n        \n        [set_true_prime.continue, set_false_not_prime.continue] \u2192 cont_trig\n    }\n\n    instance(x: -100, y: 50) isprime_node root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") check_opposite_signs {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_input\n        in(x: -180, y: 70, name: \"b\") property(Number) b_input\n\n        out(x: 300, y: 60, name: \"result\") property(Bool) result_output\n\n        instance(x: 50, y: 100) multiply_node root.Std_k98ojb.Math.Mul {}\n        instance(x: 200, y: 100) less_than_zero root.Std_k98ojb.Math.LessThan {}\n\n        a_input -> multiply_node.first\n        b_input -> multiply_node.second\n        multiply_node.result -> less_than_zero.left\n        0 -> less_than_zero.right\n        less_than_zero.result -> result_output\n    }\n\n    \n\n    instance(x: -50, y: 30) check_opposite_signs_instance root.main.check_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is divisible by 11\") IsDivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) check_expr root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 % 11 == 0\"\n        }\n        input_num -> check_expr.gen_0\n        check_expr.value -> output_bool\n    }\n\n    \n\n    instance(x: -34, y: 127) divisible_check root.main.IsDivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another character.\") replace_characters {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        in(x: -180, y: 100, name: \"search\") property(String) search_char\n        in(x: -160, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_char -> replacer_7b3b7b.search\n        replace_char -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_characters {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 0) to_lower_flow root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a list.\") ProductOfUniques {\n        in(x: -200, y: 50, name: \"inputList\") property(List) input_list\n        out(x: 400, y: 100, name: \"result\") property(Number) result_out\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n        \n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {}\n\n        input_list -> reduce_unique.items\n        empty_list.list -> reduce_unique.initial\n\n        \n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(List) acc_in\n            in(x: -100, y: 50, name: \"currentElement\") property(Number) current_in\n\n            out(x: 200, y: 30, name: \"newAcc\") property(List) new_acc_out\n\n            \n            instance contains_node root.Std_k98ojb.List.Contains {}\n            acc_in -> contains_node.list\n            current_in -> contains_node.item\n\n            \n            instance if_node root.Std_k98ojb.Std.If {}\n\n            contains_node.result -> if_node.predicate  \n\n            \n            acc_in -> [if_node.then] -> new_acc_out\n\n            \n            instance add_node root.Std_k98ojb.List.Add {}\n            acc_in -> add_node.list\n            current_in -> add_node.item\n            add_node.listWithItem <- [if_node.else] -> new_acc_out\n        } -> reduce_unique.handler\n\n        \n        instance initial_one root.Std_k98ojb.Math.Expression { expression: \"1\" }\n        \n        instance product_reduce root.Std_k98ojb.Iteration.Reduce {}\n\n        reduce_unique.output_list -> product_reduce.items\n        initial_one.result -> product_reduce.initial\n\n        \n        func() {\n            in(x: -50, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: -50, y: 50, name: \"currentElement\") property(Number) current_in\n\n            out(x: 150, y: 30, name: \"\") property(Number) new_acc_out\n\n            instance multiply_node root.Std_k98ojb.Math.Multiply {}\n            acc_in -> multiply_node.first\n            current_in -> multiply_node.second\n            multiply_node.result -> new_acc_out\n        } -> product_reduce.handler\n\n        \n        product_reduce.output -> result_out\n    }\n\n    \n    instance(x: 10, y: 20) product_instance root.main.ProductOfUniques {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_3a8d\n        in(x: -200, y: 150, name: \"list2\") property(List) list2_7b9f\n\n        out(x: 600, y: 100, name: \"result\") property(List) result_4c3e\n\n        instance(x: 150, y: 50) diffA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 150) diffB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_6d2a root.Std_k98ojb.List.Concat {}\n\n        list1_3a8d -> diffA.left\n        list2_7b9f -> diffA.right\n\n        list2_7b9f -> diffB.left\n        list1_3a8d -> diffB.right\n\n        diffA.difference -> concat_6d2a.left\n        diffB.difference -> concat_6d2a.right\n\n        concat_6d2a.result -> result_4c3e\n    }\n\n    \n\n    instance(x: -50, y: 100) dissimilars_node root.main.find_dissimilars {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 100, name: \"list\") property(List) input_list\n        in(x: -200, y: 150, name: \"k\") property(Number) k_input\n\n        out(x: 600, y: 300, name: \"rotatedList\") property(List) output_list\n\n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {}\n        input_list \u2192 len_node.list\n\n        instance(x:200,y:50) mod_node root.Std_k98ojb.Math.Modulo {}\n        k_input \u2192 mod_node.value\n        len_node.length \u2192 mod_node.divisor\n\n        instance(x:300, y:50) sub_node root.Std_k98ojb.Math.Sub {}\n        len_node.length \u2192 sub_node.first\n        mod_node.result \u2192 sub_node.second\n\n        instance(x:400,y:50) first_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 first_slice.list\n        0 \u2192 first_slice.start\n        sub_node.result \u2192 first_slice.end\n\n        instance(x:400, y:150) second_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 second_slice.list\n        sub_node.result \u2192 second_slice.start\n        -1 \u2192 second_slice.end\n\n        instance(x:500,y:100) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.output \u2192 concat_node.left\n        first_slice.output \u2192 concat_node.right\n\n        concat_node.output \u2192 output_list\n    }\n\n    \n\n    instance(x: -34, y: 127) rotate_right_node root.main.rotate_right {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") SumArray {\n        in(x: -200, y: 50, name: \"list\") property(List) list_input\n        out(x: 400, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance initial_zero root.Std_k98ojb.Number {\n            value: 0\n        }\n\n        instance reduce_node root.Std_k98ojb.Iteration.Reduce {}\n        \n        \n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(Number) acc\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n\n            out(x: 200, y: 0, name: \"\") property(Number) result\n\n            instance add_node root.Std_k98ojb.Math.Add {}\n            acc -> add_node.first\n            item -> add_node.second\n            add_node.result -> result\n        } -> reduce_node.handler\n        \n        \n        initial_zero.value -> reduce_node.initial\n        list_input -> reduce_node.items\n        reduce_node.result -> sum_output\n    }\n\n    instance(x: -50, y: 25) sum_array_instance root.main.SumArray {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -300, y: 100) property(Number) input_num\n        in(x: -250, y: 50) trigger() execute\n\n        out(x: 400, y: 100) property(Bool) is_prime\n        out(x: 600, y: 50) trigger() continue_trigger\n\n        \n        instance(edge_case root.Std.IfExpression {\n            expression: \"input_num <= 1 || (input_num % 2 == 0 && input_num != 2)\"\n        })\n        edge_case.then -> set_false.execute\n        edge_case.else -> proceed_to_sqrt\n\n        \n        instance(set_false root.Setter) {\n            property: is_prime,\n            new_value: false\n        }\n        set_false.continue -> continue_trigger\n\n        \n        instance(proceed_to_sqrt root.TriggerGate)\n        proceed_to_sqrt.trigger -> sqrt_calculation\n\n        \n        instance(pow_node root.Math.Pow) {\n            x: input_num,\n            y: 0.5\n        }\n        pow_node.result -> floor_node.input\n\n        instance(floor_node root.Math.Floor)\n\n        \n        instance(gen_range root.List.GenerateRange) {\n            from: 3,\n            to: floor_node.output\n        }\n\n        \n        instance(div_filter root.Iteration.Filter) {\n            handler: func() {\n                in(current) property(Number)\n\n                out(output) property(Bool)\n                \n                instance(mod_node root.Math.Modulo) {\n                    value: input_num,\n                    divisor: current\n                }\n                mod_node.result -> eq_zero.root.Std.IfExpression {\n                    expression: \"mod_result == 0\"\n                }\n                eq_zero.then -> output.true\n            }\n        }\n        gen_range.list -> div_filter.items\n\n        \n        instance(length_node root.List.Length) {\n            list: div_filter.output_list\n        }\n\n        instance(final_check root.Std.IfExpression) {\n            expression: \"length == 0\"\n        }\n        length_node.length -> final_check.gen_0\n\n        \n        instance(set_result root.Setter) {\n            property: is_prime,\n            new_value: true\n        }\n        final_check.then -> set_result.execute\n\n        instance(set_false_final root.Setter) {\n            property: is_prime,\n            new_value: false\n        }\n        final_check.else -> set_false_final.execute\n\n        \n        set_result.continue -> merge_node\n        set_false_final.continue -> merge_node\n\n        instance(merge_node root.TriggerGate)\n        merge_node.trigger -> continue_trigger\n    }\n\n    instance(x: -100, y: 200) prime_check root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 70, name: \"b\") property(Number) b_in\n\n        out(x: 300, y: 60, name: \"result\") property(Bool) result_out\n\n        instance(x: 50, y: 100) if_expr Std.IfExpression {\n            expression: \"gen_0 * gen_1 < 0\"\n        }\n\n        a_in -> if_expr.gen_0\n        b_in -> if_expr.gen_1\n        if_expr.result -> result_out\n    }\n}\n\ninstance(x: -50, y: 30) opposite_signs_node main.OppositeSigns {}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks if a number is divisible by 11.\") DivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.equals -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 50) check_div root.main.DivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another.\") replaceCharacters {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        in(x: -180, y: 100, name: \"search\") property(String) search_char\n        in(x: -160, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_8f3b7a root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_8f3b7a.input\n        search_char -> replacer_8f3b7a.search\n        replace_char -> replacer_8f3b7a.replace\n        \n        replacer_8f3b7a.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replaceCharacters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -34, y: 127) to_lower_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") ProductOfUnique {\n        in(x: -200, y: 100, name: \"inputList\") property(List) input_ai\n        out(x: 300, y: 50, name: \"result\") property(Number) result_ai\n\n        instance(x: 100, y: 200) sort_node root.Std_k98ojb.List.Sort {\n            list: input_ai\n        }\n\n        instance(x: 400, y: 300) reduce_node root.Std_k98ojb.Iteration.Reduce {\n            items: sort_node.sortedList\n            initialAccumulatedValue: { product: 1, lastElement: null }\n            handler: (accum, current) -> newAcc {\n                instance(x: -200, y: 50) equal_node root.Std_k98ojb.Math.Equal {\n                    a: accum.lastElement\n                    b: current\n                }\n\n                instance(x: 100, y: 100) if_expression root.Std_k98ojb.Std.IfExpression {\n                    condition: \"equal_node.result == false\"\n                    then: {\n                        product: accum.product * current,\n                        lastElement: current\n                    }\n                    else: {\n                        product: accum.product,\n                        lastElement: accum.lastElement\n                    }\n                }\n\n                newAcc = if_expression.result\n            }\n        }\n\n        reduce_node.accumulatedResult.product -> result_ai\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") dissimilar_elements {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_3a8d4b\n        in(x: -200, y: 150, name: \"list2\") property(List) list2_7e9f6c\n\n        out(x: 600, y: 100, name: \"result\") property(List) result_8a3b2d\n\n        instance(x: 100, y: 50) differenceAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) differenceBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_7a2c3f root.Std_k98ojb.List.Concat {}\n\n        list1_3a8d4b -> differenceAB.left\n        list2_7e9f6c -> differenceAB.right\n\n        list2_7e9f6c -> differenceBA.left\n        list1_3a8d4b -> differenceBA.right\n\n        differenceAB.difference -> concat_7a2c3f.left\n        differenceBA.difference -> concat_7a2c3f.right\n\n        concat_7a2c3f.result -> result_8a3b2d\n    }\n\n    \n\n    instance(x: -100, y: 100) dissimilar_elements_def root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified number of positions.\") rotateRight {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -190, y: 150, name: \"rotation\") property(Number) rotation_num\n\n        out(x: 400, y: 100, name: \"rotatedList\") property(List) output_list\n\n        instance length_node root.Std_k98ojb.List.Length {}\n        input_list -> length_node.list\n\n        instance modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotation_num -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        instance sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        instance first_slice root.Std_k98ojb.List.Slice {}\n        input_list -> first_slice.list\n        sub_node.result -> first_slice.start\n        length_node.length -> first_slice.end\n\n        instance second_slice root.Std_k98ojb.List.Slice {}\n        input_list -> second_slice.list\n        0 -> second_slice.start\n        sub_node.result -> second_slice.end\n\n        instance concat_node root.Std_k98ojb.List.Concat {}\n        first_slice.slice -> concat_node.left\n        second_slice.slice -> concat_node.right\n\n        concat_node.concatenated -> output_list\n    }\n\n    instance(x: 50, y: 100) rotate_right_instance root.main.rotateRight {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") SumArray {\n        in(x: -200, y: 150, name: \"numbers\") property(List) list_input\n        out(x: 400, y: 150, name: \"total\") property(Number) total_output\n\n        instance(x: 100, y: 150) reduce_7b3b7b root.Std_k98ojb.Iteration.Reduce {}\n        \n        \n        0 -> reduce_7b3b7b.initial\n        \n        list_input -> reduce_7b3b7b.items\n\n        func() {\n            in(x: -150, y: 0) property(Number) acc\n            in(x: -50, y: 0) property(Number) item\n            \n            out(x: 200, y: 0) property(Number) result\n            \n            instance add_4e8c54 root.Std_k98ojb.Math.Add {}\n            \n            acc -> add_4e8c54.first\n            item -> add_4e8c54.second\n            \n            add_4e8c54.result -> result\n        } -> reduce_7b3b7b.handler\n\n        reduce_7b3b7b.output -> total_output\n    }\n\n    \n\n    instance(x: -100, y: 120) sum_array_node root.main.SumArray {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if a number is prime\") IsPrime {\n        in(x: -200, y: 100, name:\"execute\") trigger() execute\n        in(x: -200, y: 50, name:\"n\") property(Number) n\n\n        out(x: 600, y: 100, name:\"isPrime\") property(Bool)\n        out(x: 800, y: 100, name:\"continue\") trigger() continue_out\n\n        \n        instance firstCheck root.Std_k98ojb.Std.IfExpression {\n            expression = \"n < 2\"\n        }\n        execute -> firstCheck.trigger\n        n -> firstCheck.gen_0\n\n        \n        setter(set_false) = isPrime {\n            new_value = 0 \n        }\n        firstCheck.then -> set_false.execute\n        set_false.continue -> continue_out\n\n        \n        instance pow_node root.Std_k98ojb.Math.Pow {\n            x = n\n            y = 0.5\n        }\n        n -> pow_node.x\n\n        instance floor_node root.Std_k98ojb.Math.Floor {\n            value = pow_node.result\n        }\n        pow_node.result -> floor_node.value\n\n        \n        instance generate_range root.Std_k98ojb.List.GenerateRange {\n            from = 2\n            to = floor_node.output\n        }\n        floor_node.output -> generate_range.to\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items = generate_range.list\n        }\n\n        func handler_modulo() {\n            in(x: -100, y: 50, name:\"current\") property(Number) current_i\n\n            out(x: 200, y: 50, name:\"output\") property(Bool) output_b\n\n            instance modulo_1 root.Std_k98ojb.Math.Modulo {\n                value = n\n                divisor = current_i\n            }\n            instance eq_zero root.Std_k98ojb.Logic.Equal {\n                left = modulo_1.result\n                right = 0\n            }\n            eq_zero.result -> output_b\n        }\n        handler_modulo() -> find_divisor.handler\n\n        \n        instance secondCheck root.Std_k98ojb.Std.IfExpression {\n            expression = \"find_divisor.item != null\"\n        }\n        firstCheck.else -> secondCheck.trigger\n        find_divisor.item -> secondCheck.gen_0\n\n        \n        setter(set_false2) = isPrime {\n            new_value = 0\n        }\n        secondCheck.then -> set_false2.execute\n        set_false2.continue -> continue_out\n\n        \n        setter(set_true) = isPrime {\n            new_value = 1 \n        }\n        secondCheck.else -> set_true.execute\n        set_true.continue -> continue_out\n    }\n\n    instance(x: -300, y: 200) prime_check root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs\") OppositeSign {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 100, name: \"b\") property(Number) b_in\n        in(x: -300, y: 0, name: \"execute\") trigger() execute_in\n\n        out(x: 200, y: 50, name: \"result\") property(Bool) result_out\n        out(x: 300, y: 0, name: \"continue\") trigger() continue_out\n\n        instance(x: -50, y: 75) multiply root.Std_k98ojb.Math.Mul {}\n        a_in -> multiply.x\n        b_in -> multiply.y\n\n        instance(x: 100, y: 75) less_than root.Std_k98ojb.Math.LessThan {}\n        multiply.result -> less_than.left\n        0 -> less_than.right\n\n        execute_in -> multiply.execute\n        less_than.done -> continue_out\n        less_than.result -> result_out\n    }\n\n    instance(x: 0, y: 0) opposite_sign_instance root.main.OppositeSign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Check if number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: 69, name: \"number\") property(Number) input_num\n        out(x: 350, y: 180, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 100) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 100) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -30, y: 50) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a substring in a string.\") replace_chars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_str\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_str -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_node root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a given list.\") ProductOfUniques {\n        in(x: -200, y: 50, name: \"inputList\") property(List) input_list\n        out(x: 400, y: 100, name: \"product\") property(Number) output_product\n\n        \n        instance empty List.Empty {}\n        \n        instance reduce_unique Iteration.Reduce {\n            items = input_list\n            initial_value = empty.list\n            handler = [handler_build_unique]\n        }\n\n        func() handler_build_unique { \n            in(accumulated: List, current_item: Number)\n            \n            instance contains Check if item exists:\n                instance contains_node List.Contains {\n                    list = accumulated\n                    item = current_item\n                }\n                \n            instance ifexpr Std.IfExpression {\n                expression: \"isContained ? accumulated : (add_node.list)\"\n            }\n\n            \n            instance add_node List.Add {\n                list = accumulated\n                item = current_item\n            }\n\n            contains_node.isContained -> ifexpr.a\n            accumulated -> ifexpr.b\n            add_node.list -> ifexpr.c\n\n            out(new_accumulated) = ifexpr.result\n        }\n\n        \n        instance initial_one Constant.Number { value = 1 }\n        \n        instance reduce_product Iteration.Reduce {\n            items = reduce_unique.output_list\n            initial_value = initial_one.value\n            handler = [handler_multiply]\n        }\n\n        func() handler_multiply { \n            in(accumulated: Number, current_item: Number)\n            \n            instance multiply Math.Mul {\n                a = accumulated\n                b = current_item\n            }\n            \n            out(result) = multiply.result\n        }\n\n        reduce_product.output -> output_product\n    }\n\n    instance(x: -100, y: 50) product_node root.main.ProductOfUniques {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -240, y: 50, name: \"list1\") property(List) list1_3d8f\n        in(x: -230, y: 100, name: \"list2\") property(List) list2_9a7c\n\n        out(x: 600, y: 75, name: \"result\") property(List) result_1b4d\n\n        instance(x: 150, y: 50) diff_left root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 120) diff_right root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 85) concat_7e3c root.Std_k98ojb.List.Concat {}\n\n        list1_3d8f -> diff_left.left\n        list2_9a7c -> diff_left.right\n\n        list2_9a7c -> diff_right.left\n        list1_3d8f -> diff_right.right\n\n        diff_left.difference -> concat_7e3c.left\n        diff_right.difference -> concat_7e3c.right\n\n        concat_7e3c.result -> result_1b4d\n    }\n\n    \n\n    instance(x: -90, y: 80) dissimilars_node root.main.find_dissimilars {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates the given list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 150, name: \"k\") property(Number) k_value\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) output_rotated\n\n        instance(x: 30, y: 20) length_node root.Std_k98ojb.List.Length {}\n        input_list \u2192 length_node.list\n        \n        instance(x: 150, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        k_value \u2192 modulo_node.value\n        length_node.length \u2192 modulo_node.divisor\n\n        instance(x: 200, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length \u2192 sub_node.first\n        modulo_node.result \u2192 sub_node.second\n        \n        instance(x: 300, y: 50) second_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 second_slice.list\n        sub_node.result \u2192 second_slice.start\n        length_node.length \u2192 second_slice.end\n\n        instance(x: 300, y: 150) first_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 first_slice.list\n        0 \u2192 first_slice.start\n        sub_node.result \u2192 first_slice.end\n        \n        instance(x: 450, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.sliceResult \u2192 concat_node.left\n        first_slice.sliceResult \u2192 concat_node.right\n\n        concat_node.concatenatedList \u2192 output_rotated\n    }\n\n    \n\n    instance(x: -30, y: 50) rotate_instance root.main.rotate_right {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) listInput\n        out(x: 400, y: 50, name: \"total\") property(Number) sumOutput\n\n        instance(x: 150, y: 50) reduce_7a2c3b root.Std_k98ojb.Iteration.Reduce {}\n        listInput -> reduce_7a2c3b.items\n        0 -> reduce_7a2c3b.initialValue\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) accIn\n            in(x: -100, y: 0, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: -25, name: \"\") property(Number) resultOut\n\n            instance(x: 50, y: -25) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            accIn -> add_4a9f1c.first\n            itemIn -> add_4a9f1c.second\n            add_4a9f1c.result -> resultOut\n        } -> reduce_7a2c3b.reducer\n        \n        reduce_7a2c3b.output -> sumOutput\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -200, y: 50, name: \"n\") property(Number) n_in\n        out(x: 400, y: 100, name: \"is_prime\") property(Bool) result_out\n\n        \n        instance(x: -100, y: 20) edge_case_1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in <= 1\"\n        }\n        \n        setter(x: 50, y: -30, name: \"setter_false\") root.Std_k98ojb.Setter {\n            type: Bool\n        }\n        edge_case_1.then -> setter_false.execute\n        false -> setter_false.new_value\n        setter_false.value -> result_out\n\n        instance(x: 50, y: 20) check_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in == 2\"\n        }\n        \n        setter(x: 150, y: -30, name: \"setter_true\") root.Std_k98ojb.Setter {\n            type: Bool\n        }\n        check_two.then -> setter_true.execute\n        true -> setter_true.new_value\n        setter_true.value -> result_out\n\n        instance(x: 250, y: 20) mod_node root.Std_k98ojb.Math.Modulo {\n            value: n_in,\n            divisor: 2\n        }\n\n        instance(x: 300, y: 20) is_even root.Std_k98ojb.Logic.Equal {\n            a: mod_node.result,\n            b: 0.0\n        }\n\n        instance(x: 350, y: 20) check_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"is_even.equals\"\n        }\n        \n        setter(x: 450, y: -30, name: \"setter_even_false\") root.Std_k98ojb.Setter {\n            type: Bool\n        }\n        check_even.then -> setter_even_false.execute\n        false -> setter_even_false.new_value\n        setter_even_false.value -> result_out\n\n        \n        instance(x: 50, y: 100) pow_node root.Std_k98ojb.Math.Pow {\n            x: n_in,\n            y: 0.5\n        }\n\n        instance(x: 100, y: 100) floor_sqrt root.Std_k98ojb.Math.Floor {\n            value: pow_node.result\n        }\n\n        instance(x: 150, y: 100) range_list root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: floor_sqrt.value\n        }\n\n        \n        instance(x: 200, y: 100) find_divisor root.Std_k98ojb.Iteration.Find {\n            items: range_list.list\n        }\n        \n        func() {\n            in(x: -50, y: 0, name: \"current\") property(Number) current_val\n\n            out(x: 200, y: 0, name: \"\") property(Bool) predicate_out\n\n            instance(x: 50, y: 0) mod_div root.Std_k98ojb.Math.Modulo {\n                value: n_in,\n                divisor: current_val\n            }\n\n            instance(x: 100, y: 0) is_zero root.Std_k98ojb.Logic.Equal {\n                a: mod_div.result,\n                b: 0.0\n            }\n            \n            is_zero.equals -> predicate_out\n        } -> find_divisor.handler\n\n        \n        instance(x: 250, y: 100) has_divisor root.Std_k98ojb.Logic.Exists {\n            item: find_divisor.found\n        }\n\n        instance(x: 300, y: 100) final_if root.Std_k98ojb.Std.IfExpression {\n            expression: \"has_divisor.exists\"\n        }\n        \n        setter(x: 400, y: -50, name: \"setter_final_false\") root.Std_k98ojb.Setter {\n            type: Bool\n        }\n        final_if.then -> setter_final_false.execute\n        false -> setter_final_false.new_value\n\n        setter(x: 400, y: 50, name: \"setter_final_true\") root.Std_k98ojb.Setter {\n            type: Bool\n        }\n        final_if.else -> setter_final_true.execute\n        true -> setter_final_true.new_value\n\n        \n        setter_false.value -> result_out\n        setter_true.value -> result_out\n        setter_even_false.value -> result_out\n        setter_final_false.value -> result_out\n        setter_final_true.value -> result_out\n    }\n\n    instance(x: -100, y: 50) is_prime_node root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks if two integers have opposite signs.\") OppositeSign {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_3f8d4b\n        in(x: -180, y: 80, name: \"b\") property(Number) b_7e9c5a\n\n        out(x: 300, y: 60, name: \"result\") property(Bool) result_2a7f1d\n\n        instance(x: 50, y: 70) multiply_8e3b4d root.Std_k98ojb.Math.Mul {}\n        instance(x: 150, y: 70) lessthan_6a9c2f root.Std_k98ojb.Math.LessThan {}\n\n        a_3f8d4b -> multiply_8e3b4d.first\n        b_7e9c5a -> multiply_8e3b4d.second\n        multiply_8e3b4d.result -> lessthan_6a9c2f.left\n        0 -> lessthan_6a9c2f.right\n        lessthan_6a9c2f.result -> result_2a7f1d\n    }\n\n    \n\n    instance(x: -50, y: 30) opposite_sign_def root.main.OppositeSign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is divisible by 11\") IsDivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.result -> output_bool\n    }\n\n    instance(x: -50, y: 50) check_div root.main.IsDivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another character.\") replace_characters {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        in(x: -180, y: 100, name: \"search\") property(String) search_char\n        in(x: -160, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_char -> replacer_7b3b7b.search\n        replace_char -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_characters {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts given string to lowercase.\") ToLower {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -34, y: 127) to_lower_flow root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc:\"Calculates the product of unique numbers in a list\") ProductOfUniques {\n        in(x: -200, y: 50, name: \"numbers\") property(List) input_list\n        out(x: 600, y: 100, name: \"product\") property(Number) output_product\n\n        \n        instance(x: -300, y: 200) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 100, y: 50) reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            initial_value: empty_list.list\n            items: input_list\n        }\n        \n        \n        func() { \n            in(x: -200, y: 10, name: \"item\") property(Number) current_item;\n            in(x: -200, y: 40, name: \"acc\") property(List) acc_list;\n\n            out(x: 300, y: 50, name: \"\") property(List) new_acc;\n\n            instance(x: 100, y: 20) contains_node root.Std_k98ojb.List.Contains {\n                list: acc_list,\n                element: current_item\n            }\n\n            \n            instance(x: 150, y: 60) if_expression root.Std_k98ojb.Std.IfExpression {\n                expression: \"contains_node.contains == false\"\n            }\n\n            \n            instance(x: 200, y: 30) add_to_list root.Std_k98ojb.List.Add {\n                list: acc_list,\n                element: current_item\n            }\n\n            \n            instance(x: 250, y: 40) switcher root.Std_k98ojb.Std.If {\n                condition: if_expression.result,\n                true_value: add_to_list.newList,\n                false_value: acc_list\n            }\n            \n            switcher.output -> new_acc;\n        } -> reduce_unique.handler\n\n        \n        instance(x: 400, y: 50) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            initial_value: 1.0\n            items: reduce_unique.output\n        }\n\n        \n        func() { \n            in(x: -200, y: 10, name: \"item\") property(Number) current_item;\n            in(x: -200, y: 40, name: \"acc\") property(Number) acc_num;\n\n            out(x: 300, y: 50, name: \"\") property(Number) new_acc;\n\n            instance(x: 100, y: 20) multiply_node root.Std_k98ojb.Math.Multiply {\n                a: acc_num,\n                b: current_item\n            }\n\n            multiply_node.result -> new_acc;\n        } -> reduce_product.handler\n\n        \n        reduce_product.output -> output_product;\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_3d8f\n        in(x: -190, y: 100, name: \"list2\") property(List) list2_7a2c\n\n        out(x: 400, y: 50, name: \"result\") property(List) result_6b3e\n\n        instance(x: 100, y: 50) diffAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diffBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_4a7d root.Std_k98ojb.List.Concat {}\n\n        list1_3d8f -> diffAB.left\n        list2_7a2c -> diffAB.right\n\n        list2_7a2c -> diffBA.left\n        list1_3d8f -> diffBA.right\n\n        diffAB.difference -> concat_4a7d.left\n        diffBA.difference -> concat_4a7d.right\n\n        concat_4a7d.result -> result_6b3e\n    }\n\n    \n\n    instance(x: -50, y: 75) find_dissimilars_node root.main.find_dissimilars {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified number of items.\") RotateRight {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 100, name: \"k\") property(Number) k_input\n\n        out(x: 400, y: 75, name: \"rotatedList\") property(List) rotated_output\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        input_list -> length_node.list\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        k_input -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        \n        instance(x: 400, y: 50) slice1_node root.Std_k98ojb.List.Slice {}\n        input_list -> slice1_node.list\n        sub_node.result -> slice1_node.start\n        length_node.length -> slice1_node.end\n\n        \n        instance(x: 400, y: 150) slice2_node root.Std_k98ojb.List.Slice {}\n        input_list -> slice2_node.list\n        0 -> slice2_node.start\n        sub_node.result -> slice2_node.end\n\n        \n        instance(x: 500, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n        slice1_node.sliceResult -> concat_node.left\n        slice2_node.sliceResult -> concat_node.right\n\n        concat_node.result -> rotated_output\n    }\n\n    \n    instance(x: 50, y: 200) rotate_instance root.main.RotateRight {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) numbers_in;\n        out(x: 300, y: 50, name: \"total\") property(Number) total_out;\n\n        instance reduce_1 Iteration.Reduce {}\n        \n        \n        numbers_in -> reduce_1.items;\n        \n        \n        0 -> reduce_1.initial;\n        \n        \n        func() {\n            in(x: -200, y: 50, name: \"acc\") property(Number) acc_in;\n            in(x: -180, y: 70, name: \"item\") property(Number) item_in;\n\n            out(x: 300, y: 50, name: \"\") property(Number) result_out;\n\n            instance add_node Math.Add {}\n            acc_in -> add_node.first;\n            item_in -> add_node.second;\n            add_node.result -> result_out;\n        } -> reduce_1.handler\n\n        \n        reduce_1.result -> total_out;\n    }\n\n    \n    instance(x: 0, y: 0) array_sum_instance root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if given integer is a prime number.\") IsPrime {\n        in(x: -200, y: 50, name: \"n\") property(Number) n_in\n        out(x: 800, y: 100, name: \"is_prime\") property(Bool) output_bool\n\n        \n        instance(x: 100, y: -50) check_less_than_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in < 2\"\n        }\n\n        \n        instance(x: 300, y: 0) compute_sqrt root.Std_k98ojb.Math.Pow {\n            x: n_in\n            y: 0.5\n        }\n        \n        instance(x: 400, y: 30) floor_sqrt root.Std_k98ojb.Math.Floor { value: compute_sqrt.result }\n\n        \n        instance(x: 500, y: -20) generate_range root.Std_k98ojb.List.GenerateRange {\n            from: 2\n            to: floor_sqrt.floorResult\n        }\n\n        \n        instance(x: 600, y: 40) filter_divisors root.Std_k98ojb.Query.Filter {\n            list: generate_range.list\n            where: \"n_in % it == 0\"\n        }\n        \n        \n        instance(x: 700, y: -10) check_empty root.Std_k98ojb.List.IsEmpty { list: filter_divisors.result }\n\n        \n        instance(x: 650, y: 80) final_result root.Std_k98ojb.Std.If {\n            condition: check_less_than_two.result\n            thenValue: false\n            elseValue: check_empty.isEmpty\n        }\n\n        final_result.thenOrElse -> output_bool\n    }\n}\n\ninstance(x: -100, y: 50) is_prime_node root.main.IsPrime {}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 100, name: \"b\") property(Number) b_in\n\n        out(x: 300, y: 75, name: \"result\") property(Bool) result_out\n\n        instance(x: 100, y: 75) ifexpr_opp root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n\n        a_in -> ifexpr_opp.a\n        b_in -> ifexpr_opp.b\n        ifexpr_opp.value -> result_out\n    }\n\n    instance(x: -50, y: 30) opposite_signs_node root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks if a number is divisible by 11.\") DivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) check root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % 11 == 0\"\n        }\n        input_num -> check.n\n        check.value -> output_bool\n    }\n\n    \n\n    instance(x: -34, y: 127) divisible_node root.main.DivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another.\") replaceCharacters {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        in(x: -180, y: 100, name: \"search\") property(String) search_char\n        in(x: -160, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_8f3b7a root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_8f3b7a.input\n        search_char -> replacer_8f3b7a.search\n        replace_char -> replacer_8f3b7a.replace\n        \n        replacer_8f3b7a.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replaceCharacters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -34, y: 127) to_lower_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates product of unique numbers in a given list.\") ProductUnique {\n        in(x: -200, y: 50) property(List) inputList\n        out(x: 800, y: 100) property(Number) result\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            handler: [\n                func() {\n                    in(x: -100, y: 0) property(List) accumulated\n                    in(x: -100, y: 50) property(Number) item\n\n                    out(x: 200, y: 30) property(List) newAccumulated\n\n                    \n                    instance contains root.Std_k98ojb.List.Contains {\n                        list: accumulated\n                        item: item\n                    }\n\n                    instance if_node root.Std_k98ojb.Std.If {}\n                    \n                    contains.result \u2192 if_node.predicate\n                    \n                    \n                    accumulated \u2192 if_node.thenOutput\n\n                    \n                    instance add root.Std_k98ojb.List.Add {\n                        list: accumulated\n                        element: item\n                    }\n                    \n                    add.newList \u2192 if_node.elseOutput\n                    \n                    \n                    if_node.output \u2192 newAccumulated\n                }\n            ]\n        }\n\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            handler: [\n                func() {\n                    in(x: -50, y: 0) property(Number) acc\n                    in(x: -50, y: 50) property(Number) item\n\n                    out(x: 150, y: 30) property(Number) newAcc\n\n                    instance multiply root.Std_k98ojb.Math.Mul {\n                        a: acc\n                        b: item\n                    }\n\n                    multiply.result \u2192 newAcc\n                }\n            ]\n        }\n\n        \n        inputList \u2192 reduce_unique.items\n        List.Empty.list \u2192 reduce_unique.initialValue\n        \n        reduce_unique.output_list \u2192 reduce_product.items\n        1 \u2192 reduce_product.initialValue\n\n        reduce_product.output \u2192 result\n    }\n\n    \n\n    instance(x: -34, y: 127) product_node root.main.ProductUnique {}\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") dissimilar_elements {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_3a8d4b\n        in(x: -200, y: 150, name: \"list2\") property(List) list2_7e9f6c\n\n        out(x: 600, y: 100, name: \"result\") property(List) result_8a3b2d\n\n        instance(x: 100, y: 50) differenceAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) differenceBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_6d2a7f root.Std_k98ojb.List.Concat {}\n\n        list1_3a8d4b -> differenceAB.left\n        list2_7e9f6c -> differenceAB.right\n\n        list2_7e9f6c -> differenceBA.left\n        list1_3a8d4b -> differenceBA.right\n\n        differenceAB.difference -> concat_6d2a7f.left\n        differenceBA.difference -> concat_6d2a7f.right\n\n        concat_6d2a7f.result -> result_8a3b2d\n    }\n\n    \n\n    instance(x: -50, y: 100) dissimilar_elements_def root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 100) property(List) input_list\n        in(x: -150, y: 100) property(Number) rotations\n\n        out(x: 400, y: 100) property(List) rotated_list\n\n        instance ListLength root.Std_k98ojb.List.Length {\n            list = input_list\n        }\n\n        instance ModuloOp root.Std_k98ojb.Math.Modulo {\n            value = rotations\n            divisor = ListLength.length\n        }\n\n        instance SplitIndexCalc root.Std_k98ojb.Math.Sub {\n            first = ListLength.length\n            second = ModuloOp.result\n        }\n\n        instance SliceA root.Std_k98ojb.List.Slice {\n            list = input_list\n            start = SplitIndexCalc.result\n            end = -1 \n        }\n\n        instance SliceB root.Std_k98ojb.List.Slice {\n            list = input_list\n            start = 0\n            end = SplitIndexCalc.result \n        }\n\n        instance ConcatOp root.Std_k98ojb.List.Concat {\n            left = SliceA.slice\n            right = SliceB.slice\n        }\n\n        ConcatOp.result -> rotated_list\n    }\n\n    instance(x: -34, y: 127) rotate_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the sum of elements in an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) list_in\n        out(x: 400, y: 50, name: \"total\") property(Number) total_out\n\n        instance reduce_1 Iteration.Reduce {}\n        list_in -> reduce_1.items\n        0 -> reduce_1.initial\n        \n        func() {\n            in(x: -200, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: -180, y: 30, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 0, name: \"\") property(Number) result_out\n\n            instance add_1 Math.Add {}\n            acc_in -> add_1.first\n            item_in -> add_1.second\n            add_1.result -> result_out\n        } -> reduce_1.handler\n        \n        reduce_1.output -> total_out\n    }\n\n    \n\n    instance(x: -50, y: 30) array_sum_node root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if an integer is prime.\") IsPrime {\n        in(x: -200, y: 100, name: \"execute\") trigger() execute_1\n        in(x: -300, y: 50, name: \"n\") property(Number) n_input\n\n        out(x: 400, y: 200, name: \"isPrime\") property(Bool) is_prime_out\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_1\n\n        \n        instance less_than_two root.Std.IfExpression {\n            expression: \"n_input < 2\"\n        }\n\n        instance edge_case_if root.Std.If {\n            condition: less_than_two.result\n        }\n\n        \n        instance set_false root.Std.Set {\n            value: false\n        }\n        edge_case_if.then -> set_false.execute\n        set_false.value -> is_prime_out\n        set_false.continue -> [continue_1]\n\n        \n        instance pow_sqrt root.Math.Pow {\n            x: n_input,\n            y: 0.5\n        }\n\n        instance floor_sqrt root.Math.Floor {\n            number: pow_sqrt.result\n        }\n\n        \n        instance generate_divisors root.List.GenerateRange {\n            from: 2,\n            to: floor_sqrt.result\n        }\n\n        \n        instance find_divisor root.Iteration.Find {\n            items: generate_divisors.list\n            context: n_input\n        }\n\n        func() handler_for_find {\n            in(x: -100, y: 0, name: \"current\") property(Number) current_i\n            in(x: -50, y: 50, name: \"context\") property(Number) context_n\n\n            out(x: 200, y: 0, name: \"\") property(Bool) predicate_result\n\n            instance modulo_1 root.Math.Modulo {\n                value: context_n,\n                divisor: current_i\n            }\n\n            instance is_zero root.Std.IfExpression {\n                expression: \"modulo_1.result == 0\"\n            }\n            is_zero.result -> predicate_result\n        } -> find_divisor.handler\n\n        \n        instance check_found root.Std.IfExpression {\n            expression: \"find_divisor.item == null\"\n        }\n\n        instance set_prime root.Std.Set {\n            value: check_found.result\n        }\n        find_divisor.continue -> set_prime.execute\n        set_prime.value -> is_prime_out\n\n        \n        edge_case_if.else -> generate_divisors.start\n        set_prime.continue -> [continue_1]\n    }\n\n    instance(x: -90, y: 50) prime_check root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs\") OppositeSign {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 100, name: \"b\") property(Number) b_in\n        in(x: -300, y: 0, name: \"execute\") trigger() execute_in\n\n        out(x: 200, y: 50, name: \"result\") property(Bool) result_out\n        out(x: 300, y: 0, name: \"continue\") trigger() continue_out\n\n        instance(x: -50, y: 75) multiply root.Std_k98ojb.Math.Mul {}\n        a_in -> multiply.x\n        b_in -> multiply.y\n\n        instance(x: 100, y: 75) less_than root.Std_k98ojb.Math.LessThan {}\n        multiply.result -> less_than.left\n        0 -> less_than.right\n\n        execute_in -> multiply.execute\n        less_than.done -> continue_out\n        less_than.result -> result_out\n    }\n\n    instance(x: 0, y: 0) opposite_sign_instance root.main.OppositeSign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Check if number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: 69, name: \"number\") property(Number) input_num\n        out(x: 350, y: 180, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 100) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 100) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -30, y: 50) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a substring in a string.\") replace_chars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_str\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_str -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_node root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n\n    func(doc:\"Calculates the product of unique numbers in a list\") ProductOfUniques {\n        in(x: -200, y: 50) property(List) input_list\n        out(x: 400, y: 300) property(Number) output\n\n        \n        instance ListEmpty root.Std_k98ojb.List.Empty {}\n        initial_empty <- ListEmpty.list\n\n        reduce_unique = Iteration.Reduce {\n            items: input_list,\n            initial_value: initial_empty,\n\n            handler: (accumulated, current) -> new_accumulated {\n\n                \n                instance contains_1 root.Std_k98ojb.List.Contains {\n                    list: accumulated,\n                    item: current\n                }\n\n                \n                instance add_node root.Std_k98ojb.List.Add {\n                    list: accumulated,\n                    element: current\n                }\n\n                instance if_expr root.Std_k98ojb.Std.IfExpression {\n                    condition: contains_1.isInList,\n                    thenValue: accumulated,  \n                    elseValue: add_node.list \n                }\n\n                new_accumulated <- if_expr.result\n            }\n        }\n\n        unique_list <- reduce_unique.output\n\n        \n        instance initial_one root.Std_k98ojb.NumberConstant {\n            value: 1.0\n        }\n\n        reduce_product = Iteration.Reduce {\n            items: unique_list,\n            initial_value: initial_one.value,\n\n            handler: (acc, current) -> new_acc {\n\n                \n                instance multiply_node root.Std_k98ojb.Math.Mul {\n                    left: acc,\n                    right: current\n                }\n\n                new_acc <- multiply_node.result\n            }\n        }\n\n        final_product <- reduce_product.output\n\n        final_product -> output  \n    }\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -240, y: 50, name: \"list1\") property(List) list1_3d8f\n        in(x: -230, y: 100, name: \"list2\") property(List) list2_9a7c\n\n        out(x: 600, y: 75, name: \"result\") property(List) result_1b4d\n\n        instance(x: 150, y: 50) diff_left root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 120) diff_right root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 85) concat_7e3c root.Std_k98ojb.List.Concat {}\n\n        list1_3d8f -> diff_left.left\n        list2_9a7c -> diff_left.right\n\n        list2_9a7c -> diff_right.left\n        list1_3d8f -> diff_right.right\n\n        diff_left.difference -> concat_7e3c.left\n        diff_right.difference -> concat_7e3c.right\n\n        concat_7e3c.result -> result_1b4d\n    }\n\n    \n\n    instance(x: -90, y: 80) dissimilars_node root.main.find_dissimilars {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates the given list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 150, name: \"k\") property(Number) k_value\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) output_rotated\n\n        instance(x: 30, y: 20) length_node root.Std_k98ojb.List.Length {}\n        input_list \u2192 length_node.list\n        \n        instance(x: 150, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        k_value \u2192 modulo_node.value\n        length_node.length \u2192 modulo_node.divisor\n\n        instance(x: 200, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length \u2192 sub_node.first\n        modulo_node.result \u2192 sub_node.second\n        \n        instance(x: 300, y: 50) second_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 second_slice.list\n        sub_node.result \u2192 second_slice.start\n        length_node.length \u2192 second_slice.end\n\n        instance(x: 300, y: 150) first_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 first_slice.list\n        0 \u2192 first_slice.start\n        sub_node.result \u2192 first_slice.end\n        \n        instance(x: 450, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.sliceResult \u2192 concat_node.left\n        first_slice.sliceResult \u2192 concat_node.right\n\n        concat_node.concatenatedList \u2192 output_rotated\n    }\n\n    \n\n    instance(x: -30, y: 50) rotate_instance root.main.rotate_right {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) listInput\n        out(x: 400, y: 50, name: \"total\") property(Number) sumOutput\n\n        instance(x: 150, y: 50) reduce_7a2c3b root.Std_k98ojb.Iteration.Reduce {}\n        listInput -> reduce_7a2c3b.items\n        0 -> reduce_7a2c3b.initialValue\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) accIn\n            in(x: -100, y: 0, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: -25, name: \"\") property(Number) resultOut\n\n            instance(x: 50, y: -25) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            accIn -> add_4a9f1c.first\n            itemIn -> add_4a9f1c.second\n            add_4a9f1c.result -> resultOut\n        } -> reduce_7a2c3b.reducer\n        \n        reduce_7a2c3b.output -> sumOutput\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks if the given integer is a prime number.\") IsPrime {\n        in(x: -200, y: 50, name: \"n\") property(Number) n_in\n        out(x: 400, y: 100, name: \"is_prime\") property(Bool) result_out\n\n        \n        instance(x: 50, y:20) check_less_than_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in <= 1\"\n        }\n\n        instance(x: 150, y:20) set_false root.Setter {\n            value: false\n        }\n        check_less_than_two.then -> set_false.set\n        set_false.get -> result_out\n\n        instance(x: 50, y:80) check_is_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in == 2\"\n        }\n\n        instance(x:150,y:80) set_true root.Setter {\n            value: true\n        }\n        check_is_two.then -> set_true.set\n        set_true.get -> result_out\n\n        \n        instance(x:50,y:140) mod_result_node root.Std_k98ojb.Math.Modulo {\n            value: n_in,\n            divisor: 2\n        }\n\n        instance(x:50,y:170) is_even root.Std_k98ojb.Logic.Equal {\n            a: mod_result_node.result,\n            b: 0\n        }\n\n        instance(x:50,y:200) check_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"is_even.equals\"\n        }\n\n        instance(x:150,y:200) set_false_even root.Setter {\n            value: false\n        }\n        check_even.then -> set_false_even.set\n        set_false_even.get -> result_out\n\n        \n        instance(x:50,y:260) pow_node root.Std_k98ojb.Math.Pow {\n            x: n_in,\n            y: 0.5\n        }\n\n        instance(x:100,y:260) floor_sqrt root.Std_k98ojb.Math.Floor {\n            value: pow_node.result\n        }\n\n        \n        instance(x:150,y:260) generate_list root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: floor_sqrt.floorResult\n        }\n\n        \n        instance(x:200,y:260) find_divisor root.Std_k98ojb.Iteration.Find {\n            items: generate_list.list\n        }\n        \n        func() { \n            in(x:-100, y: -50, name:\"current\") property(Number) current_i\n\n            out(x:200,y:-50,name:\"found\") property(Bool) found_out\n\n            instance(x:0,y:0) mod_check root.Std_k98ojb.Math.Modulo {\n                value: n_in,\n                divisor: current_i\n            }\n\n            instance(x:100,y:0) is_zero root.Std_k98ojb.Logic.Equal {\n                a: mod_check.result,\n                b: 0\n            }\n            \n            is_zero.equals -> found_out\n        } -> find_divisor.handler\n\n        \n        instance(x:250,y:300) check_found root.Std_k98ojb.Logic.NotEqual {\n            a: find_divisor.found,\n            b: null\n        }\n\n        instance(x:300,y:300) final_result root.Setter {\n            value: !check_found.notEqual\n        }\n        \n        final_result.get -> result_out\n\n        \n        check_less_than_two.else -> check_is_two.expression\n        check_is_two.else -> mod_result_node.compute\n        check_even.else -> pow_node.compute\n    }\n\n    \n\n    instance(x: -174, y: -63) IsPrime_d6e930 root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks if two integers have opposite signs.\") OppositeSign {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_3f8d4b\n        in(x: -180, y: 80, name: \"b\") property(Number) b_7e9c5a\n\n        out(x: 300, y: 60, name: \"result\") property(Bool) result_2a7f1d\n\n        instance(x: 50, y: 70) multiply_8e3b4d root.Std_k98ojb.Math.Mul {}\n        instance(x: 150, y: 70) lessthan_6a9c2f root.Std_k98ojb.Math.LessThan {}\n\n        a_3f8d4b -> multiply_8e3b4d.first\n        b_7e9c5a -> multiply_8e3b4d.second\n        multiply_8e3b4d.result -> lessthan_6a9c2f.left\n        0 -> lessthan_6a9c2f.right\n        lessthan_6a9c2f.result -> result_2a7f1d\n    }\n\n    \n\n    instance(x: -50, y: 30) opposite_sign_def root.main.OppositeSign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is divisible by 11\") IsDivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.result -> output_bool\n    }\n\n    instance(x: -50, y: 50) check_div root.main.IsDivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another character.\") replace_characters {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        in(x: -180, y: 100, name: \"search\") property(String) search_char\n        in(x: -160, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_char -> replacer_7b3b7b.search\n        replace_char -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_characters {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts given string to lowercase.\") ToLower {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -34, y: 127) to_lower_flow root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a given list\") ProductOfUniques {\n        in(x: -200, y: 50, name: \"inputList\") property(List) inputList\n        out(x: 400, y: 300, name: \"result\") property(Number) result\n\n        \n        instance reduce_uniq root.Std_k98ojb.Iteration.Reduce {}\n        \n        \n        func() {\n            in(x: -150, y: 20, name: \"acc\") property(List) acc_in\n            in(x: -140, y: 60, name: \"current\") property(Number) current_in\n\n            out(x: 300, y: 80, name: \"\") property(List) next_acc_out\n\n            \n            instance contains_node root.Std_k98ojb.List.Contains {}\n            acc_in -> contains_node.list\n            current_in -> contains_node.item\n\n            \n            instance invert_if root.Std_k98ojb.Std.IfExpression {\n                expression: \"!a\"\n            }\n            contains_node.isInList -> invert_if.gen_0\n\n            \n            instance list_add root.Std_k98ojb.List.Add {}\n            acc_in -> list_add.list\n            current_in -> list_add.item\n\n            \n            instance if_node root.Std_k98ojb.Std.If {\n                condition: invert_if.result\n            }\n            list_add.listWithItem -> if_node.thenInput\n            acc_in -> if_node.elseInput\n            if_node.output -> next_acc_out\n        } -> reduce_uniq.handler\n\n        \n        instance init_empty root.Std_k98ojb.List.Empty {}\n        init_empty.emptyList -> reduce_uniq.initialValue\n\n        inputList -> reduce_uniq.items\n        \n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {}\n\n        \n        instance number_one root.Std_k98ojb.Math.NumberLiteral {\n            value: 1\n        }\n        number_one.value -> reduce_product.initialValue\n\n        \n        func() {\n            in(x: -20, y: 30, name: \"acc\") property(Number) acc_in\n            in(x: -10, y: 70, name: \"current\") property(Number) current_in\n\n            out(x: 250, y: 90, name: \"\") property(Number) product_out\n\n            instance multiply_node root.Std_k98ojb.Math.Multiply {}\n            acc_in -> multiply_node.a\n            current_in -> multiply_node.b\n            multiply_node.product -> product_out\n        } -> reduce_product.handler\n\n        \n        reduce_uniq.result -> reduce_product.items\n        \n        \n        reduce_product.result -> result\n    }\n\n    instance(x: 0, y: 0) product_node root.main.ProductOfUniques {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_3d8f\n        in(x: -190, y: 100, name: \"list2\") property(List) list2_7a2c\n\n        out(x: 400, y: 50, name: \"result\") property(List) result_6b3e\n\n        instance(x: 100, y: 50) diffAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diffBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_4a7d root.Std_k98ojb.List.Concat {}\n\n        list1_3d8f -> diffAB.left\n        list2_7a2c -> diffAB.right\n\n        list2_7a2c -> diffBA.left\n        list1_3d8f -> diffBA.right\n\n        diffAB.difference -> concat_4a7d.left\n        diffBA.difference -> concat_4a7d.right\n\n        concat_4a7d.result -> result_6b3e\n    }\n\n    \n\n    instance(x: -50, y: 75) find_dissimilars_node root.main.find_dissimilars {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc:\"Rotates a given list to the right by specified number of items.\") RotateRight {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -190, y: 150, name: \"k\") property(Number) shift_k\n\n        out(x: 400, y: 70, name: \"rotatedList\") property(List) output_rotated\n\n        \n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        input_list -> length_node.list\n\n        \n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        shift_k -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        \n        instance(x: 300, y: 50) ifexpr root.Std_k98ojb.Std.IfExpression {\n            expression: \"modulo_node.result == 0\"\n        }\n        modulo_node.result -> ifexpr.thenBranchInput? \n\n        \n        instance(x: 400, y: 50) then_route root.Std_k98ojb.Std.IfExpression.Then {}\n        ifexpr.then -> then_route.input\n        input_list -> then_route.output\n        then_route.output -> output_rotated\n\n        \n        instance(x: 300, y: 150) else_route root.Std_k98ojb.Std.IfExpression.Else {}\n        ifexpr.else -> else_route.input\n\n        \n        instance(x: 400, y: 150) sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        \n        instance(x: 500, y: 150) slice_last_part root.Std_k98ojb.List.Slice {}\n        input_list -> slice_last_part.list\n        sub_node.result -> slice_last_part.start\n        length_node.length -> slice_last_part.end\n\n        instance(x: 600, y: 150) slice_first_part root.Std_k98ojb.List.Slice {}\n        input_list -> slice_first_part.list\n        0 -> slice_first_part.start\n        sub_node.result -> slice_first_part.end\n\n        \n        instance(x: 700, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n        slice_last_part.list -> concat_node.firstList\n        slice_first_part.list -> concat_node.secondList\n        concat_node.list -> output_rotated\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) numbers_in;\n        out(x: 300, y: 50, name: \"total\") property(Number) total_out;\n\n        instance reduce_1 Iteration.Reduce {}\n        \n        \n        numbers_in -> reduce_1.items;\n        \n        \n        0 -> reduce_1.initial;\n        \n        \n        func() {\n            in(x: -200, y: 50, name: \"acc\") property(Number) acc_in;\n            in(x: -180, y: 70, name: \"item\") property(Number) item_in;\n\n            out(x: 300, y: 50, name: \"\") property(Number) result_out;\n\n            instance add_node Math.Add {}\n            acc_in -> add_node.first;\n            item_in -> add_node.second;\n            add_node.result -> result_out;\n        } -> reduce_1.handler\n\n        \n        reduce_1.result -> total_out;\n    }\n\n    \n    instance(x: 0, y: 0) array_sum_instance root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") IsPrime {\n        in(x: -200, y: 50, name: \"n\") property(Number) n_in\n\n        out(x: 800, y: 100, name: \"is_prime\") property(Bool) output_bool\n\n        \n        instance(x: 100, y: -50) check_less_than_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in < 2\"\n        }\n\n        \n        instance(x: 200, y: 30) compute_sqrt root.Std_k98ojb.Math.Pow {\n            x: n_in\n            y: 0.5\n        }\n        instance(x: 250, y: 60) floor_sqrt root.Std_k98ojb.Math.Floor { value: compute_sqrt.result }\n\n        \n        instance(x: 300, y: 90) generate_range root.Std_k98ojb.List.GenerateRange {\n            from: 2\n            to: floor_sqrt.floorResult\n        }\n\n        \n        instance(x: 400, y: 120) filter_divisors root.Std_k98ojb.Query.Filter {\n            where: \"n_in % it == 0\"\n            list: generate_range.list\n        }\n\n        \n        instance(x: 500, y: 150) check_empty root.Std_k98ojb.List.IsEmpty { list: filter_divisors.result }\n\n        \n        instance(x: 600, y: 180) final_result root.Std_k98ojb.Std.If {\n            condition: check_less_than_two.result\n            thenValue: false\n            elseValue: check_empty.isEmpty\n        }\n\n        final_result.thenOrElse -> output_bool\n    }\n}\n\ninstance(x: -50, y: 50) is_prime_node root.main.IsPrime {}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 100, name: \"b\") property(Number) b_in\n\n        out(x: 300, y: 75, name: \"result\") property(Bool) result_out\n\n        instance(x: 100, y: 75) ifexpr_opp root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n\n        a_in -> ifexpr_opp.a\n        b_in -> ifexpr_opp.b\n        ifexpr_opp.value -> result_out\n    }\n\n    instance(x: -50, y: 30) opposite_signs_node root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks if a number is divisible by 11.\") DivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) check root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % 11 == 0\"\n        }\n        input_num -> check.n\n        check.value -> output_bool\n    }\n\n    \n\n    instance(x: -34, y: 127) divisible_node root.main.DivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another.\") replaceCharacters {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        in(x: -180, y: 100, name: \"search\") property(String) search_char\n        in(x: -160, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_8f3b7a root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_8f3b7a.input\n        search_char -> replacer_8f3b7a.search\n        replace_char -> replacer_8f3b7a.replace\n        \n        replacer_8f3b7a.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replaceCharacters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -34, y: 127) to_lower_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") ProductOfUnique {\n        in(x: -200, y: 50, name: \"inputList\") property(List) input_list;\n        out(x: 400, y: 100, name: \"product\") property(Number) output_num;\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items = input_list,\n            initial_value = empty_list.list;\n        }\n\n        \n        func() uniqueHandler {\n            in(x: 0, y: 0, name: \"accumulatedList\") property(List) acc;\n            in(x: 100, y: 0, name: \"item\") property(Number) item;\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc;\n\n            \n            instance contains root.Std_k98ojb.List.Contains {\n                list = acc,\n                item = item\n            }\n\n            instance if_node Std.If {\n                predicate = contains.result;\n            }\n\n            \n            instance add root.Std_k98ojb.List.Add {\n                list = acc,\n                item_to_add = item\n            }\n\n            \n            if_node.then \u2192 triggers a path where new_acc is set to acc\n            if_node.else \u2192 triggers a path where new_acc is set to add.list\n\n            \n            instance cond_out root.Std.If {\n                predicate = contains.result,\n                then_output = acc,\n                else_output = add.list\n            }\n\n            cond_out.selected \u2192 new_acc;\n        } \u2192 reduce_unique.handler\n\n        var unique_list = reduce_unique.result;\n\n        \n        instance const_1 root.Std_k98ojb.Math.Constant { value: 1 }\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items = unique_list,\n            initial_value = const_1.value;\n        }\n\n        \n        func() productHandler {\n            in(x:0,y:0, name:\"currentProduct\") property(Number) acc_num;\n            in(x:100,y:0, name:\"number\") property(Number) item;\n\n            out(x:200,y:0,name:\"new_product\") property(Number) new_acc;\n\n            instance multiply root.Std_k98ojb.Math.Multiply {\n                a = acc_num,\n                b = item\n            }\n\n            multiply.result \u2192 new_acc;\n        } \u2192 reduce_product.handler\n\n        \n        reduce_product.result \u2192 output_num;\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") dissimilar_elements {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_3a8d4b\n        in(x: -200, y: 150, name: \"list2\") property(List) list2_7e9f6c\n\n        out(x: 600, y: 100, name: \"result\") property(List) result_8a3b2d\n\n        instance(x: 100, y: 50) differenceAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) differenceBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_6d2a7f root.Std_k98ojb.List.Concat {}\n\n        list1_3a8d4b -> differenceAB.left\n        list2_7e9f6c -> differenceAB.right\n\n        list2_7e9f6c -> differenceBA.left\n        list1_3a8d4b -> differenceBA.right\n\n        differenceAB.difference -> concat_6d2a7f.left\n        differenceBA.difference -> concat_6d2a7f.right\n\n        concat_6d2a7f.result -> result_8a3b2d\n    }\n\n    \n\n    instance(x: -50, y: 100) dissimilar_elements_def root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 100) property(List) input_list\n        in(x: -150, y: 100) property(Number) rotations\n\n        out(x: 400, y: 100) property(List) rotated_list\n\n        instance ListLength root.Std_k98ojb.List.Length {\n            list = input_list\n        }\n\n        instance ModuloOp root.Std_k98ojb.Math.Modulo {\n            value = rotations\n            divisor = ListLength.length\n        }\n\n        instance SplitIndexCalc root.Std_k98ojb.Math.Sub {\n            first = ListLength.length\n            second = ModuloOp.result\n        }\n\n        instance SliceA root.Std_k98ojb.List.Slice {\n            list = input_list\n            start = SplitIndexCalc.result\n            end = -1 \n        }\n\n        instance SliceB root.Std_k98ojb.List.Slice {\n            list = input_list\n            start = 0\n            end = SplitIndexCalc.result \n        }\n\n        instance ConcatOp root.Std_k98ojb.List.Concat {\n            left = SliceA.slice\n            right = SliceB.slice\n        }\n\n        ConcatOp.result -> rotated_list\n    }\n\n    instance(x: -34, y: 127) rotate_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the sum of elements in an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) list_in\n        out(x: 400, y: 50, name: \"total\") property(Number) total_out\n\n        instance reduce_1 Iteration.Reduce {}\n        list_in -> reduce_1.items\n        0 -> reduce_1.initial\n        \n        func() {\n            in(x: -200, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: -180, y: 30, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 0, name: \"\") property(Number) result_out\n\n            instance add_1 Math.Add {}\n            acc_in -> add_1.first\n            item_in -> add_1.second\n            add_1.result -> result_out\n        } -> reduce_1.handler\n        \n        reduce_1.output -> total_out\n    }\n\n    \n\n    instance(x: -50, y: 30) array_sum_node root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"checks if number is a prime\") is_prime {\n        in(x: -200, y: 100) property(Number) n\n        in execute trigger()\n\n        out(x: 300, y: 50) property(Bool) isPrime\n        out continue trigger()\n\n        \n        instance edgeCheck Std.IfExpression {\n            expression: \"n < 2\"\n        }\n\n        \n        setter setFalse = ... \n        getter getIsPrime = ...\n\n        \n        edgeCheck.then \u2192 setFalse.execute\n        setFalse.new_value = false\n        setFalse.continue \u2192 continue\n\n        \n        instance pow_node Std.Math.Pow {\n            x = n;\n            y = 0.5\n        }\n\n        instance floor_node Std.Math.Floor {\n            value = pow_node.result\n        }\n\n        instance generate_range Std.List.GenerateRange {\n            from = 2;\n            to = floor_node.result\n        }\n\n        \n        instance find_divisor Std.Iteration.Find {\n            items = generate_range.list;\n            context = n; \n        }\n\n        \n        func() {\n            in item, context\n\n            modulo Math.Modulo { value=context; divisor=item }\n            equal Logic.Equal { left=modulo.result; right=0 }\n\n            equal.result \u2192 output\n        } \u2192 find_divisor.handler\n\n        \n        instance setTrue setter for isPrime to true on find_divisor.onNotFound\n        instance setFalse2 setter for isPrime to false on find_divisor.onFound\n\n        \n\n        edgeCheck.else \u2192 pow_node.execute\n        pow_node.complete \u2192 floor_node.execute\n        floor_node.complete \u2192 generate_range.execute\n        generate_range.complete \u2192 find_divisor.execute\n\n        find_divisor.onFound \u2192 setFalse2.execute\n        setFalse2.new_value = false\n        setFalse2.continue \u2192 continue\n\n        find_divisor.onNotFound \u2192 setTrue.execute\n        setTrue.new_value = true\n        setTrue.continue \u2192 continue\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -190, y: 80, name: \"b\") property(Number) b_in\n        in(x: -300, y: -50, name: \"execute\") trigger() execute_trig\n\n        out(x: 200, y: 60, name: \"result\") property(Bool) result_out\n        out(x: 400, y: 70, name: \"continue\") trigger() continue_trig\n\n        instance(x: -50, y: 100) ifexpr root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n\n        a_in -> ifexpr.gen_0\n        b_in -> ifexpr.gen_1\n        execute_trig -> ifexpr.execute\n\n        ifexpr.result -> result_out\n\n        \n        ifexpr.then -> continue_trig\n        ifexpr.else -> continue_trig\n    }\n\n    instance(x: 0, y: 0) opposite_signs_node root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -200, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    instance(x: -50, y: -25) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a substring in a string.\") replace_chars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_str\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_str -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_59bc6e root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") product_unique {\n        in(x: -200, y: 50) property(List) input_list\n        out(x: 400, y: 100) property(Number) result\n\n        instance List.Empty empty_node {}\n\n        instance Iteration.Filter filter_unique {\n            list = input_list\n            handler = func() {\n                in item: Number\n                in context: List\n                \n                out include: Bool\n                out new_context: List\n\n                contains := List.Contains { list = context; item = item }\n                \n                instance Std.If if_node { predicate = !contains.isContained }\n\n                then_add := List.Add { list = context; element = item }\n                new_context_then := then_add.list\n                include_then := true\n                \n                new_context_else := context\n                include_else := false\n\n                \n                instance Std.If route {\n                    predicate = if_node.predicate\n                    then \u2192 \n                        new_context = new_context_then\n                        include = include_then\n                    else \u2192 \n                        new_context = new_context_else\n                        include = include_else\n                }\n            }\n            initialContext = empty_node.list\n        }\n\n        instance Iteration.Reduce compute_product {\n            items = filter_unique.result\n            initial_value = 1.0\n\n            handler = func() {\n                in acc: Number\n                in item: Number\n                \n                out new_acc: Number\n                \n                multiply := Math.Mul { first = acc; second = item }\n                new_acc = multiply.result\n            }\n        }\n\n        compute_product.accumulated_value \u2192 result\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -240, y: 50, name: \"list1\") property(List) list1_3d8f\n        in(x: -230, y: 100, name: \"list2\") property(List) list2_9a7c\n\n        out(x: 600, y: 75, name: \"result\") property(List) result_1b4d\n\n        instance(x: 150, y: 50) diff_a_b root.Std_k98ojb.Sets.Difference {\n            left: list1_3d8f\n            right: list2_9a7c\n        }\n        \n        instance(x: 150, y: 150) diff_b_a root.Std_k98ojb.Sets.Difference {\n            left: list2_9a7c\n            right: list1_3d8f\n        }\n\n        instance(x: 400, y: 100) concat root.Std_k98ojb.List.Concat {}\n        \n        diff_a_b.difference -> concat.left\n        diff_b_a.difference -> concat.right\n        concat.result -> result_1b4d\n    }\n\n    \n\n    instance(x: -50, y: 75) find_dissimilars_node root.main.find_dissimilars {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified number of items\") RotateRight {\n        in(x: -300, y: 50, name: \"list\") property(List) input_list\n        in(x: -280, y: 100, name: \"steps\") property(Number) steps\n\n        out(x: 600, y: 400, name: \"rotatedList\") property(List) rotated_output\n\n        \n        instance(x: 50, y: 150) len_node root.Std_k98ojb.List.Length {}\n        input_list -> len_node.list\n\n        \n        instance(x: 150, y: 150) is_empty_eq root.Std_k98ojb.Logic.Equal {\n            left = len_node.length,\n            right = 0\n        }\n\n        \n        instance(x: 250, y: 150) if_empty root.Std_k98ojb.Std.If {}\n        is_empty_eq.result -> if_empty.condition\n        input_list -> if_empty.trueValue\n\n        \n        instance(x: 350, y: 150) eff_k_node root.Std_k98ojb.Math.Modulo {\n            value = steps,\n            divisor = len_node.length\n        }\n\n        \n        instance(x: 450, y: 150) is_zero_eq root.Std_k98ojb.Logic.Equal {\n            left = eff_k_node.result,\n            right = 0\n        }\n\n        \n        instance(x: 550, y: 150) if_zero root.Std_k98ojb.Std.If {}\n        is_zero_eq.result -> if_zero.condition\n        input_list -> if_zero.trueValue\n\n        \n        instance(x: 650, y: 150) start_node root.Std_k98ojb.Math.Sub {\n            first = len_node.length,\n            second = eff_k_node.result\n        }\n\n        \n        instance(x: 750, y: 200) slice1_node root.Std_k98ojb.List.Slice {\n            list = input_list,\n            start = start_node.result,\n            end = len_node.length\n        }\n        \n        instance(x: 750, y: 300) slice2_node root.Std_k98ojb.List.Slice {\n            list = input_list,\n            start = 0,\n            end = start_node.result\n        }\n\n        \n        instance(x: 850, y: 250) concat_node root.Std_k98ojb.List.Concat {}\n        slice1_node.slice -> concat_node.leftList\n        slice2_node.slice -> concat_node.rightList\n\n        \n        concat_node.result -> if_zero.falseValue\n\n        \n        if_zero.result -> if_empty.falseValue\n\n        \n        if_empty.result -> rotated_output\n    }\n\n    instance(x: -100, y: 200) rotate_node root.main.RotateRight {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) listInput\n        out(x: 400, y: 50, name: \"total\") property(Number) sumOutput\n\n        instance(x: 150, y: 50) reduce_7a2c3b root.Std_k98ojb.Iteration.Reduce {}\n        listInput -> reduce_7a2c3b.items\n        0 -> reduce_7a2c3b.initialValue\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) accIn\n            in(x: -100, y: 0, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: -25, name: \"\") property(Number) resultOut\n\n            instance(x: 50, y: -25) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            accIn -> add_4a9f1c.first\n            itemIn -> add_4a9f1c.second\n            add_4a9f1c.result -> resultOut\n        } -> reduce_7a2c3b.reducer\n        \n        reduce_7a2c3b.output -> sumOutput\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") IsPrime {\n        in(x: -200, y: 100, name: \"n\") property(Number) n_in\n        in(x: -300, y: 50, name: \"execute\") trigger() execute_trig\n\n        out(x: 400, y: 200, name: \"isPrime\") property(Bool) result_out\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_trig\n\n        \n        instance if_n_le_1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in <= 1\"\n        }\n        execute_trig \u2192 if_n_le_1.execute\n\n        \n        setter_false = \n            setter(x: 200, y: 300) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: false\n            }\n        if_n_le_1.then \u2192 setter_false.execute\n        setter_false.continue \u2192 continue_trig\n\n        \n        instance if_n_eq2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in == 2\"\n        }\n        if_n_le_1.else \u2192 if_n_eq2.execute\n\n        \n        setter_true = \n            setter(x: 300, y: 400) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: true\n            }\n        if_n_eq2.then \u2192 setter_true.execute\n        setter_true.continue \u2192 continue_trig\n\n        \n        instance if_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in % 2 == 0\"\n        }\n        if_n_eq2.else \u2192 if_even.execute\n\n        \n        setter_false_even = \n            setter(x: 400, y: 500) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: false\n            }\n        if_even.then \u2192 setter_false_even.execute\n        setter_false_even.continue \u2192 continue_trig\n\n        \n        instance next_step root.Std_k98ojb.Trigger {}\n        if_even.else \u2192 next_step.execute\n\n        \n        instance pow_node root.Std_k98ojb.Math.Pow {\n            x: n_in,\n            y: 0.5\n        }\n        instance floor_node root.Std_k98ojb.Math.Floor {}\n        pow_node.result \u2192 floor_node.value\n\n        upper_limit = floor_node.result\n\n        \n        instance gen_range root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: upper_limit\n        }\n        next_step.execute \u2192 gen_range.from\n        next_step.execute \u2192 gen_range.to\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {}\n        gen_range.list \u2192 find_divisor.items\n\n        \n        func() {\n            in(x: -100, y: 200, name: \"current\") property(Number) current_i\n            out(x: 300, y: 250, name: \"\") property(Bool) result\n\n            instance modulo_ root.Std_k98ojb.Math.Modulo {\n                value: n_in,\n                divisor: current_i\n            }\n            instance eq_zero root.Std_k98ojb.Math.Equal { value: 0 }\n            modulo_.result \u2192 eq_zero.value\n            eq_zero.result \u2192 result\n        } \u2192 find_divisor.handler\n\n        \n        instance is_found root.Std_k98ojb.Std.IfExpression {\n            expression: \"find_divisor.found != null\"\n        }\n\n        \n        next_step.execute \u2192 find_divisor.items\n        find_divisor.output \u2192 is_found.execute\n\n        \n        instance setter_final_false = \n            setter(x: 500, y: 600) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: false\n            }\n        is_found.then \u2192 setter_final_false.execute\n\n        instance setter_final_true = \n            setter(x: 600, y: 700) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: true\n            }\n        is_found.else \u2192 setter_final_true.execute\n\n        \n        setter_final_false.continue \u2192 continue_trig\n        setter_final_true.continue \u2192 continue_trig\n    }\n\n    \n\n    instance(x: -174, y: -63) IsPrimeInstance root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a\n        in(x: -180, y: 80, name: \"b\") property(Number) b\n\n        out(x: 300, y: 60, name: \"result\") property(Bool) result_output\n\n        instance(x: 50, y: 50) check_opposite root.Std_k98ojb.Std.IfExpression {\n            expression: \"(a * b) < 0\"\n        }\n        \n        a -> check_opposite.a\n        b -> check_opposite.b\n        check_opposite.value -> result_output\n    }\n\n    \n\n    instance(x: -50, y: 20) opposite_signs_node root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is divisible by 11\") IsDivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_result\n\n        instance check root.Std_k98ojb.Std.IfExpression {\n            expression: \"num % 11 == 0\"\n        }\n\n        input_num -> check.gen_num\n        check.value -> output_result\n    }\n}\n\ninstance(x: -50, y: 20) is_divisible_11_node root.main.IsDivisibleByEleven {}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another character.\") replace_characters {\n        in(x: -240, y: 50, name: \"input\") property(String) input_str\n        in(x: -230, y: 100, name: \"search\") property(String) search_char\n        in(x: -220, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 400, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 150, y: 100) replacer_8eae56 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_8eae56.input\n        search_char -> replacer_8eae56.search\n        replace_char -> replacer_8eae56.replace\n        \n        replacer_8eae56.output -> output_str\n    }\n\n    \n\n    instance(x: -97, y: 20) replace_func root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerConverter {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        \n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -34, y: 127) converter_instance root.main.ToLowerConverter {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") ProductOfUniques {\n        in(x: -200, y: 100) property(List) inputList\n        out(x: 600, y: 300) property(Number) result\n\n        \n        instance(filterNode root.Std_k98ojb.Iteration.Filter {\n            items = inputList\n            context = inputList \n        })\n        \n        \n        func() { \n            in(x: -200, y: 0) property(Number) item\n            in(x: -150, y: 30) property(Number) index\n            in(x: -100, y: 60) property(List) context \n\n            out(x: 200, y: 0) property(Bool) include\n            \n            instance(sliceNode root.Std_k98ojb.List.Slice {\n                start = 0\n                end = index\n                list = context \n            })\n            \n            instance(containsNode root.Std_k98ojb.List.Contains {\n                item_to_check = item\n                list = sliceNode.output_list\n            })\n            \n            instance(notNode root.Std_k98ojb.Logic.Not { \n                condition = containsNode.result \n            })\n            \n            notNode.output -> include \n        } -> filterNode.handler\n\n        \n        instance(reduceNode root.Std_k98ojb.Iteration.Reduce {\n            items = filterNode.result \n            initial_value = 1\n        })\n        \n        \n        func() { \n            in(x: -200, y: 0) property(Number) acc\n            in(x: -150, y: 30) property(Number) item\n\n            out(x: 200, y: 0) property(Number) product\n            \n            instance(multiplyNode root.Std_k98ojb.Math.Mul {\n                a = acc\n                b = item\n            })\n            \n            multiplyNode.result -> product \n        } -> reduceNode.handler\n        \n        reduceNode.output -> result \n    }\n\n    instance(x: 10, y: 20) productUniquesInstance root.main.ProductOfUniques {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_4a3b\n        in(x: -200, y: 150, name: \"list2\") property(List) list2_7f8c\n\n        out(x: 600, y: 100, name: \"result\") property(List) result_list\n\n        instance(x: 100, y: 50) difference_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_3c2f root.Std_k98ojb.List.Concat {}\n\n        list1_4a3b -> difference_ab.left\n        list2_7f8c -> difference_ab.right\n\n        list2_7f8c -> difference_ba.left\n        list1_4a3b -> difference_ba.right\n\n        difference_ab.difference -> concat_3c2f.left\n        difference_ba.difference -> concat_3c2f.right\n\n        concat_3c2f.result -> result_list\n    }\n\n    \n\n    instance(x: -50, y: 100) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_list {\n        in(x: -200, y: 50) property(List) input_list\n        in(x: -180, y: 100) property(Number) rotation\n\n        out(x: 600, y: 50) property(List) rotated_list\n\n        \n        instance(length_node root.Std_k98ojb.List.Length {}) {\n            input_list -> list;\n        }\n\n        \n        instance(modulo_node root.Std_k98ojb.Math.Modulo {}) {\n            rotation -> value;\n            length_node.length -> divisor;\n        }\n\n        \n        instance(subtract_node root.Std_k98ojb.Math.Sub {}) {\n            length_node.length -> first;\n            modulo_node.result -> second;\n        }\n\n        \n        instance(first_slice root.Std_k98ojb.List.Slice {}) {\n            input_list -> list;\n            0 -> start;          \n            subtract_node.result -> end;\n        }\n\n        instance(second_slice root.Std_k98ojb.List.Slice {}) {\n            input_list -> list;\n            subtract_node.result -> start; \n            -1 -> end;\n        }\n\n        \n        instance(concat_node root.Std_k98ojb.List.Concat {}) {\n            second_slice.sliceResult -> left;\n            first_slice.sliceResult -> right;\n        }\n\n        concat_node.result -> rotated_list;\n    }\n}\n\n\ninstance(x: 10, y: 20) rotate_instance root.main.rotate_list {}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in a list.\") SumArray {\n        in(x: -200, y: 50, name: \"list\") property(List) list_input\n        out(x: 400, y: 50, name: \"sum\") property(Number) total_output\n\n        instance reduce_node root.Iteration.Reduce {}\n        \n        \n        0 -> reduce_node.initial\n        \n        \n        list_input -> reduce_node.items\n        \n        \n        func() {\n            in(x: -150, y: 20, name: \"acc\") property(Number) accumulator\n            in(name: \"currentItem\") property(Number) current_item\n\n            instance adder root.Math.Add {}\n            accumulator -> adder.first\n            current_item -> adder.second\n            \n            \n            out(x: 200, y: 30, name: \"result\") property(Number) result_out\n            adder.result -> result_out\n        } -> reduce_node.handler\n        \n        \n        reduce_node.result -> total_output\n    }\n\n    \n\n    instance(x: -50, y: 100) sum_array_instance root.SumArray {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime.\") IsPrime {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_n\n        out(x: 400, y: 100, name: \"isPrime\") property(Bool) output_b\n\n        \n        instance(x: -300, y: 200) ifEdge root.Std_k98ojb.Std.IfExpression {\n            expression: \"input_n <= 1\"\n        }\n\n        \n        setter(x: 50, y: 300, name: \"setter_false\") setter_1 = flag\n        getter(x: -200, y: 400, name: \"getter_flag\") getter_f = flag\n\n        ifEdge.then \u2192 {\n            instance(x: 50, y: 300) set_false root.Std_k98ojb.Logic.False {}\n            set_false.value \u2192 setter_1.new_value\n            setter_1.execute \u2192 trigger\n            getter_f.value \u2192 output_b\n        }\n\n        \n        ifEdge.else \u2192 {\n            instance(x: 50, y: 250) pow_node root.Std_k98ojb.Math.Pow {\n                x: input_n,\n                y: 0.5\n            }\n            \n            instance(x: 150, y: 250) floor_node root.Std_k98ojb.Math.Floor {}\n            pow_node.result \u2192 floor_node.value\n            \n            \n            instance(x: 250, y: 250) gen_range root.Std_k98ojb.List.GenerateRange {\n                from: 2,\n                to: floor_node.floor\n            }\n            \n            \n            instance(x: 350, y: 300) find_divisor root.Std_k98ojb.Iteration.Find {}\n            gen_range.list \u2192 find_divisor.items\n            \n            \n            func() predicate_handler {\n                in(x: -100, y: 0, name: \"current\") property(Number) divisor\n                \n                out(x: 200, y: 0, name: \"\") property(Bool) pred_out\n\n                instance(x: 50, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {\n                    value: input_n,\n                    divisor: divisor\n                }\n                \n                instance(x: 150, y: 50) is_zero root.Std_k98ojb.Logic.Equal {\n                    a: modulo_node.result,\n                    b: 0.0\n                }\n                is_zero.equals \u2192 pred_out\n            } \u2192 find_divisor.handler\n            \n            \n            instance(x: 450, y: 350) is_found root.Std_k98ojb.Logic.IsNotNull {}\n            find_divisor.item \u2192 is_found.value\n\n            instance(x: 500, y: 350) decide root.Std_k98ojb.Std.If {\n                condition: is_found.notNull\n            }\n\n            \n            decide.then \u2192 {\n                instance(x: 600, y: 400) false_node root.Std_k98ojb.Logic.False {}\n                false_node.value \u2192 output_b\n            }\n            \n            \n            decide.else \u2192 {\n                instance(x: 700, y: 400) true_node root.Std_k98ojb.Logic.True {}\n                true_node.value \u2192 output_b\n            }\n        } \n    }\n\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") opposite_signs {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 100, name: \"b\") property(Number) b_in\n\n        out(x: 400, y: 75, name: \"result\") property(Bool) result_out\n\n        instance(x: 200, y: 150) check root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 * gen_1 < 0 && gen_0 != 0 && gen_1 != 0\"\n        }\n        \n        a_in -> check.gen_0\n        b_in -> check.gen_1\n        \n        check.result -> result_out\n    }\n\n    \n    instance(x: -100, y: 0) opposite_signs_instance root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks if a number is divisible by 11.\") DivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_number\n        out(x: 300, y: 70, name: \"isDivisible\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) check_div root.Std_k98ojb.Std.IfExpression {\n            expression: \"number % 11 == 0\"\n        }\n        input_number -> check_div.number\n        check_div.value -> output_bool\n    }\n\n    instance(x: -174, y: -63) checker root.main.DivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another.\") ReplaceCharacters {\n        in(x: -432, y: 50, name: \"input\") property(String) input_str\n        in(x: -410, y: 180, name: \"searchChar\") property(String) search_char\n        in(x: -390, y: 270, name: \"replaceWith\") property(String) replace_with\n\n        out(x: 350, y: 100, name: \"output\") property(String) output_str\n\n        instance(x: 600, y: 150) replacer_8f root.Std_k98ojb.Strings.Replace {}\n        input_str -> replacer_8f.input\n        search_char -> replacer_8f.search\n        replace_with -> replacer_8f.replace\n        replacer_8f.value -> output_str\n    }\n\n    \n\n    instance(x: -120, y: 50) replace_func root.main.ReplaceCharacters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts given string to lowercase.\") ToLowerCase {\n        in(x: -531, y: 2, name: \"input\") property(String) input_str\n        out(x: 340, y: 77, name: \"output\") property(String) output_str\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_flow root.main.ToLowerCase {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n\n    func(doc: \"Calculates product of unique numbers in a list.\") ProductUnique {\n        in(x: -200, y: 50, name: \"inputList\") property(List) input_list\n        out(x: 400, y: 50, name: \"product\") property(Number) output_product\n\n        \n        var seen_var List = []\n\n        instance init_seen root.Std_k98ojb.Setter {\n            property: \"seen_var\",\n            new_value: [],\n            execute: when function starts\n        }\n\n        getter_seen root.Std_k98ojb.Getter { property: \"seen_var\" }\n\n        \n        instance filter_unique root.Std_k98ojb.Iteration.Filter {\n            items = input_list,\n            handler: func() {\n                in(x..., name: \"current\") property(Number) current\n                out(name: \"include\") property(Bool) include\n\n                \n                contains_node = Std_k98ojb.List.Contains(list=getter_seen.value, item=current)\n                not_contains_node = Logic.Not(input=contains_node.result)\n\n                \n                not_contains_node.output \u2192 include\n                \n                \n                if_add = Std.If(condition=not_contains_node.output) {\n                    then: \n                        new_list = List.Add(list=getter_seen.value, item=current)\n                        setter = Std_k98ojb.Setter(property=\"seen_var\", new_value=new_list.result)\n                        execute_setter(setter)\n                }\n            }\n        }\n\n        \n        instance compute_product root.Std_k98ojb.Iteration.Reduce {\n            initial_value: 1,\n            items: filter_unique.output_list,\n\n            handler: func() {\n                in(name: \"acc\") property(Number) acc\n                in(name: \"current\") property(Number) current\n\n                out(name: \"result\") property(Number)\n\n                multiply_node = Math.Multiply(a=acc, b=current)\n                multiply_node.result \u2192 result\n            }\n        }\n\n        compute_product.result \u2192 output_product\n    }\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -243, y: 105, name: \"listA\") property(List) listA_8e6d7b\n        in(x: -239, y: 221, name: \"listB\") property(List) listB_9c6a7f\n\n        out(x: 643, y: 152, name: \"result\") property(List) result_0a8b3e\n\n        instance(x: 145, y: 118) differenceA_1d0a25 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 167, y: 231) differenceB_f4c3f1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 442, y: 170) concat_5e3d2a root.Std_k98ojb.List.Concat {}\n\n        listA_8e6d7b -> differenceA_1d0a25.left\n        listB_9c6a7f -> differenceA_1d0a25.right\n\n        listB_9c6a7f -> differenceB_f4c3f1.left\n        listA_8e6d7b -> differenceB_f4c3f1.right\n\n        differenceA_1d0a25.difference -> concat_5e3d2a.left\n        differenceB_f4c3f1.difference -> concat_5e3d2a.right\n\n        concat_5e3d2a.result -> result_0a8b3e\n    }\n\n    \n\n    instance(x: -76, y: 99) find_dissimilar_7e6a64 root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -250, y: 10, name: \"list\") property(List) inputList\n        in(x: -240, y: 70, name: \"rotations\") property(Number) rotationsNum\n\n        out(x: 600, y: 80, name: \"output\") property(List) outputList\n\n        \n        instance(x: -190,y:20) isEmptyNode root.Std_k98ojb.List.IsEmpty {}\n        inputList -> isEmptyNode.list\n\n        instance(x:-140, y:30) ifEmpty root.Std_k98ojb.Std.If {}\n        isEmptyNode.isEmpty -> ifEmpty.predicate\n\n        \n        then() {\n            outputList <- inputList \n        } from ifEmpty.then\n\n        else() { \n            instance(x:120,y:25) lenCalc root.Std_k98ojb.List.Length {}\n            inputList -> lenCalc.list\n\n            \n            instance modNode root.Std_k98ojb.Math.Modulo {} \n            rotationsNum -> modNode.value\n            lenCalc.length -> modNode.divisor\n\n            \n            instance splitIndex root.Std_k98ojb.Math.Sub {}\n            lenCalc.length -> splitIndex.first\n            modNode.result -> splitIndex.second\n\n            \n            instance minusOne root.Std_k98ojb.Math.Number { value: -1 }\n            instance zero root.Std_k98ojb.Math.Number { value: 0 }\n\n            \n            instance firstSlice root.Std_k98ojb.List.Slice {}\n            splitIndex.difference -> firstSlice.start\n            minusOne.value -> firstSlice.end\n            inputList -> firstSlice.list\n\n            \n            instance secondSlice root.Std_k98ojb.List.Slice {}\n            zero.value -> secondSlice.start\n            splitIndex.difference -> secondSlice.end\n            inputList -> secondSlice.list\n\n            \n            instance concatNode root.Std_k98ojb.List.Concat {}\n            firstSlice.result -> concatNode.firstList\n            secondSlice.result -> concatNode.secondList\n\n            outputList <- concatNode.outputList\n        } from ifEmpty.else\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds the sum of an array\") Sum {\n        in(x: -240, y: 30, name: \"numbers\") property(List) numbers_ai\n        out(x: 500, y: 180, name: \"sum\") property(Number) output_ai\n\n        instance reduce_node root.Std_k98ojb.Iteration.Reduce {}\n        numbers_ai -> reduce_node.items\n        0 -> reduce_node.context  \n\n        \n        func() {\n            in(x: -150, y: -40, name: \"accumulated\") property(Number) acc\n            in(x: -130, y: 20, name: \"current\") property(Number) curr\n\n            out(x: 200, y: -40, name: \"\") property(Number) result_out\n\n            instance add root.Std_k98ojb.Math.Add {}\n            acc -> add.first\n            curr -> add.second\n            add.result -> result_out\n        } -> reduce_node.handler\n\n        \n        instance get_first root.Std_k98ojb.List.GetAt {\n            index: 0\n        }\n        reduce_node.output_list -> get_first.list\n        get_first.itemAtIndex -> output_ai\n    }\n\n    instance(x: -10, y: 50) sum_instance root.main.Sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o98bj)\n\nmodule() main {\n    func(doc: \"Check if a number is prime.\") IsPrime {\n        in(x: -300, y: 20) n property(Number) input_n\n        out(x: 500, y: 100) result property(Bool) output_result\n\n        \n        instance(x: -200, y: 0) less_than_or_equal root.Std_k98ojb.Math.LessThanOrEqual {\n            a = input_n,\n            b = 1\n        }\n        \n        instance(x: -50, y: 0) if_edge_case root.Std_k98ojb.Std.IfExpression {\n            expression: \"a == true\",\n            \n            thenBranch: false,\n            elseBranch: -> next_step\n        }\n\n        \n        instance(x: 100, y: -50) mod_two root.Std_k98ojb.Math.Modulo {\n            value = input_n,\n            divisor = 2\n        }\n        \n        instance(x: 150, y: -50) is_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"mod_two.result == 0\",\n            thenBranch: -> handle_even_case,\n            elseBranch: -> compute_sqrt_step\n        }\n\n        \n        instance(x: 200, y: -100) handle_even_case root.Std_k98ojb.Std.IfExpression {\n            expression: \"input_n == 2\",\n            thenBranch: true,\n            elseBranch: false\n        }\n\n        \n        instance(x: 300, y: 0) compute_sqrt root.Std_k98ojb.Math.Pow {\n            x = input_n,\n            y = 0.5\n        }\n        \n        instance(x: 320, y: 0) floor_sqrt root.Std_k98ojb.Math.Floor {\n            value = compute_sqrt.result\n        }\n\n        \n        instance(x: 400, y: -30) generate_range root.Std_k98ojb.List.GenerateRange {\n            start = 3,\n            end = floor_sqrt.floorResult\n        }\n\n        \n        instance(x: 450, y: -60) filter_odds handler_func {\n            in(x:..., name: \"current\") property(Number) current_num\n\n            out(...) property(Bool)\n\n            instance(...) mod_two_filter root.Std_k98ojb.Math.Modulo {\n                value = current_num,\n                divisor = 2\n            }\n            \n            instance(...) is_odd root.Std_k98ojb.Std.IfExpression {\n                expression: \"mod_two_filter.result !=0\",\n                thenBranch: true,\n                elseBranch: false\n            }\n        } -> Iteration.Filter(handler=filter_odds)\n\n        \n        instance(x: 500, y: -60) find_divisor handler_func {\n            in(...) div_val property(Number)\n            \n            out(...) property(Bool)\n\n            mod_current root.Std_k98ojb.Math.Modulo { value = input_n; divisor=div_val }\n            is_zero root.Std_k98ojb.Std.IfExpression { expression: \"mod_current.result ==0\", thenBranch:true else false }\n        } -> Iteration.Find(handler=find_divisor, list=filter_odds.output_list)\n\n        \n        instance(x: 600, y: -120) final_result root.Std_k98ojb.Std.IfExpression {\n            expression: \"find_divisor.result == null\",\n            thenBranch: true,\n            elseBranch: false\n        }\n\n        \n        output_result = final_result.thenBranch\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 60, name: \"b\") property(Number) b_in\n\n        out(x: 300, y: 70, name: \"result\") property(Bool) result_out\n\n        instance(x: 50, y: 100) multiply_node root.Std_k98ojb.Math.Mul {}\n        a_in -> multiply_node.x\n        b_in -> multiply_node.y\n\n        instance(x: 200, y: 100) less_than_zero root.Std_k98ojb.Math.LessThan {}\n        multiply_node.result -> less_than_zero.left\n        0 -> less_than_zero.right\n        \n        less_than_zero.result -> result_out\n    }\n\n    \n\n    instance(x: -34, y: 127) opposite_signs_node root.main.OppositeSigns {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Check if number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: 69, name: \"number\") property(Number) input_num\n        out(x: 350, y: 180, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 100) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 100) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -30, y: 50) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a substring in a string.\") replace_chars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_str\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_str -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_59bc6e root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") ProductOfUniques {\n        in(x: -200, y: 50, name: \"inputList\") property(List) input_list\n        out(x: 400, y: 100, name: \"product\") property(Number) output_product\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items = input_list\n            initial_value = empty_list.list\n            handler = func() { \n                in(accumulated: List, currentItem: Number)\n                \n                \n                instance contains_node root.Std_k98ojb.List.Contains {}\n                accumulated -> contains_node.list\n                currentItem -> contains_node.item\n                \n                \n                instance should_add root.Std_k98ojb.Std.IfExpression {\n                    expression: \"!contains_node.isContained\"\n                }\n                \n                instance add_node root.Std_k98ojb.List.Add {}\n                accumulated -> add_node.list\n                currentItem -> add_node.item\n                \n                \n                instance choose root.Std_k98ojb.Std.If {\n                    condition = should_add.result\n                }\n                \n                choose.then -> add_node.outputList\n                choose.else -> accumulated\n                \n                out(newAccumulated: List) <- choose.out\n            }\n        }\n        \n        unique_list <- reduce_unique.output\n        \n        \n        instance initial_product root.Std_k98ojb.NumberLiteral { value = 1 }\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items = unique_list\n            initial_value = initial_product.value\n            handler = func() {\n                in(current_prod: Number, element: Number)\n                \n                instance multiply_node root.Std_k98ojb.Math.Mul {}\n                current_prod -> multiply_node.a\n                element -> multiply_node.b\n                \n                out(newProd: Number) <- multiply_node.result\n            }\n        }\n        \n        output_product <- reduce_product.output\n    }\n\n    \n\n    \n    instance(x: 10, y: 20) product_instance root.main.ProductOfUniques {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -240, y: 50, name: \"list1\") property(List) list1_3d8f\n        in(x: -230, y: 100, name: \"list2\") property(List) list2_9a7c\n\n        out(x: 600, y: 75, name: \"result\") property(List) result_1b4d\n\n        instance(x: 150, y: 50) diff_left root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 120) diff_right root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 85) concat_7e3c root.Std_k98ojb.List.Concat {}\n\n        list1_3d8f -> diff_left.left\n        list2_9a7c -> diff_left.right\n\n        list2_9a7c -> diff_right.left\n        list1_3d8f -> diff_right.right\n\n        diff_left.difference -> concat_7e3c.left\n        diff_right.difference -> concat_7e3c.right\n\n        concat_7e3c.result -> result_1b4d\n    }\n\n    \n\n    instance(x: -90, y: 80) dissimilars_node root.main.find_dissimilars {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 150, name: \"k\") property(Number) k_value\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) output_rotated\n\n        instance(x: 30, y: 20) length_node root.Std_k98ojb.List.Length {}\n        input_list \u2192 length_node.list\n        \n        instance(x: 150, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        k_value \u2192 modulo_node.value\n        length_node.length \u2192 modulo_node.divisor\n\n        instance(x: 200, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length \u2192 sub_node.first\n        modulo_node.result \u2192 sub_node.second\n        \n        instance(x: 300, y: 50) second_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 second_slice.list\n        sub_node.result \u2192 second_slice.start\n        length_node.length \u2192 second_slice.end\n\n        instance(x: 300, y: 150) first_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 first_slice.list\n        0 \u2192 first_slice.start\n        sub_node.result \u2192 first_slice.end\n        \n        instance(x: 450, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.sliceResult \u2192 concat_node.left\n        first_slice.sliceResult \u2192 concat_node.right\n\n        concat_node.concatenatedList \u2192 output_rotated\n    }\n\n    \n\n    instance(x: -30, y: 50) rotate_instance root.main.rotate_right {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) listInput\n        out(x: 400, y: 50, name: \"total\") property(Number) sumOutput\n\n        instance(x: 150, y: 50) reduce_7a2c3b root.Std_k98ojb.Iteration.Reduce {}\n        listInput -> reduce_7a2c3b.items\n        0 -> reduce_7a2c3b.initialValue\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) accIn\n            in(x: -100, y: 0, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: -25, name: \"\") property(Number) resultOut\n\n            instance(x: 50, y: -25) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            accIn -> add_4a9f1c.first\n            itemIn -> add_4a9f1c.second\n            add_4a9f1c.result -> resultOut\n        } -> reduce_7a2c3b.reducer\n        \n        reduce_7a2c3b.output -> sumOutput\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -281, y: -193, name: \"n\") property(Number) n_in\n        out(x: 460, y: 158, name: \"is_prime\") property(Bool) result_out\n\n        \n        instance(x: 100, y:50) edge_if root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in < 2\"\n        }\n\n        \n        instance(x: 200, y:50) pow_node root.Std_k98ojb.Math.Pow {\n            x: n_in,\n            y: 0.5\n        }\n        \n        instance(x: 300, y:50) floor_node root.Std_k98ojb.Math.Floor {\n            value: pow_node.result\n        }\n\n        \n        instance(x: 400, y:50) list_gen root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: floor_node.result\n        }\n        \n        \n        instance(x: 500, y:50) find_divisor root.Std_k98ojb.Iteration.Find {\n            items: list_gen.list\n        }\n\n        \n        func() {\n            in(x: -123, y:45, name: \"current\") property(Number) current_i\n\n            out(x: 200, y:50, name: \"\") property(Bool) predicate_out\n\n            instance(x: 50, y:50) modulo_node root.Std_k98ojb.Math.Modulo {\n                value: n_in,\n                divisor: current_i\n            }\n\n            instance(x: 100, y:50) eq_zero root.Std_k98ojb.Logic.Equals {\n                a: modulo_node.result,\n                b: 0.0 \n            }\n            \n            eq_zero.equals \u2192 predicate_out\n        } \u2192 find_divisor.handler\n\n        \n        instance(x: 600, y:50) has_divisor root.Std_k98ojb.Logic.NotEqual {\n            a: find_divisor.found,\n            b: null\n        }\n\n        \n        instance(x: 700, y:50) invert_result root.Std_k98ojb.Logic.Not {\n            value: has_divisor.notEqual\n        }\n        \n        \n        instance(x: 800, y:50) final_result root.Std_k98ojb.Std.IfExpression {\n            expression: \"edge_if.result ? false : invert_result.result\"\n        }\n\n        final_result.result \u2192 result_out\n    }\n    \n    \n    instance(x: -174, y: -63) is_prime_node root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks if two integers have opposite signs.\") OppositeSigns {\n        in(x: -240, y: 50, name: \"a\") property(Number) a_3d8b7e\n        in(x: -230, y: 100, name: \"b\") property(Number) b_9f1c6a\n\n        out(x: 340, y: 77, name: \"result\") property(Bool) result_b5d8a9\n\n        instance(x: 200, y: 75) ifexpr_7b3b7b root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        a_3d8b7e -> ifexpr_7b3b7b.a\n        b_9f1c6a -> ifexpr_7b3b7b.b\n        ifexpr_7b3b7b.value -> result_b5d8a9\n    }\n\n    \n\n    instance(x: -179, y: 30) oppositesigns_node root.main.OppositeSigns {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks if a number is divisible by 11\") IsDivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) check_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % 11 == 0\"\n        }\n        \n        input_num -> check_expression.n\n        check_expression.value -> output_bool\n    }\n\n    \n\n    instance(x: -174, y: -63) DivisibleCheck_11 root.main.IsDivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another character.\") replaceCharacters {\n        in(x: -300, y: 50, name: \"inputString\") property(String) input_str\n        in(x: -280, y: 100, name: \"searchChar\") property(String) search_char\n        in(x: -260, y: 150, name: \"replaceChar\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 50, y: 100) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_char -> replacer_1.replace\n        \n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_func root.main.replaceCharacters {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 80, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 60) tolower_1 root.Std_k98ojb.Strings.ToLower {}\n        \n        input_str -> tolower_1.input\n        tolower_1.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 30) to_lower_flow root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"calculates product of unique numbers in a list\") ProductOfUnique {\n        in(x: -300, y: 50, name: \"inputList\") property(List) inputList\n        out(x: 400, y: 200, name: \"product\") property(Number) result\n\n        \n        instance(setter_seen root.Std_k98ojb.Setter { initialValue: List.Empty() })\n        instance(getter_seen root.Std_k98ojb.Getter { variable: setter_seen })\n\n        instance(setter_product root.Std_k98ojb.Setter { initialValue: 1.0 })\n        instance(getter_product root.Std_k98ojb.Getter { variable: setter_product })\n\n        \n        instance(filter_unique root.Std_k98ojb.Iteration.Filter) {\n            items = inputList\n\n            handler() {\n                in(x: -200, y: 50, name: \"item\") property(Number) current_item\n                out(x: 300, y: 100, name: \"\") property(Bool) include\n\n                \n                getter_seen \u2192 current_seen_list\n                instance(contains root.Std_k98ojb.List.Contains {\n                    list = current_seen_list,\n                    item = current_item\n                })\n\n                \n                Std.IfExpression(expression: \"!\" + contains.result) { result \u2192 include }\n\n                \n                instance(add root.Std_k98ojb.List.Add {\n                    list = current_seen_list,\n                    element = current_item\n                })\n                setter_seen.set(add.result).when(contains.result == false)\n            }\n        }\n\n        \n        instance(forEach root.Std_k98ojb.Iteration.ForEach) {\n            items = filter_unique.result\n\n            handler() {\n                in(x: -200, y: 50, name: \"element\") property(Number) current_element\n\n                \n                getter_product \u2192 current_prod\n                instance(mult root.Std_k98ojb.Math.Multiply { a = current_prod, b = current_element })\n                \n                \n                setter_product.set(mult.result)\n            }\n        }\n\n        \n        getter_product \u2192 result\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_ai\n        in(x: -200, y: 150, name: \"list2\") property(List) list2_bi\n\n        out(x: 400, y: 100, name: \"result\") property(List) result_ci\n\n        instance(x: 100, y: 50) diff_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diff_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_123 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff_ab.left\n        list2_bi -> diff_ab.right\n\n        list2_bi -> diff_ba.left\n        list1_ai -> diff_ba.right\n\n        diff_ab.difference -> concat_123.left\n        diff_ba.difference -> concat_123.right\n\n        concat_123.result -> result_ci\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_instance root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc:\"Rotates a list to the right by specified number of items.\") RotateRight {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 150, name: \"rotate\") property(Number) rotate_num\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) output_list\n\n        \n        instance(x: 200, y: 50) len_node root.Std_k98ojb.List.Length {}\n        input_list -> len_node.list\n        len_node.length -> local_len\n\n        \n        instance(x: 300, y: 150) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotate_num -> modulo_node.value\n        local_len -> modulo_node.divisor\n        modulo_node.result -> effective_rot\n\n        \n        instance(x: 400, y: 250) sub_node root.Std_k98ojb.Math.Sub {}\n        local_len -> sub_node.first\n        effective_rot -> sub_node.second\n        sub_node.result -> split_index\n\n        \n        instance(x: 350, y: 100) const_negone root.Std_k98ojb.Math.Constant {}\n        const_negone.value = -1\n        const_negone.output -> end_negone\n\n        instance(x: 350, y: 200) const_zero root.Std_k98ojb.Math.Constant {}\n        const_zero.value = 0\n        const_zero.output -> start_zero\n\n        \n        instance(x: 500, y: 100) slice_second root.Std_k98ojb.List.Slice {}\n        input_list -> slice_second.list\n        split_index -> slice_second.start\n        end_negone -> slice_second.end\n\n        \n        instance(x: 500, y: 200) slice_first root.Std_k98ojb.List.Slice {}\n        input_list -> slice_first.list\n        start_zero -> slice_first.start\n        split_index -> slice_first.end\n\n        \n        instance(x: 600, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n        slice_second.result -> concat_node.left\n        slice_first.result -> concat_node.right\n        concat_node.list -> output_list\n    }\n\n    \n    instance(x: -50, y: 300) rotate_inst root.main.RotateRight {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of elements in an array.\") sum_array {\n        in(x: -234, y: 50, name: \"list\") property(List) list_input\n        out(x: 600, y: 80, name: \"total\") property(Number) total_output\n\n        instance(x: 150, y: 70) reduce_9f1a3b root.Std_k98ojb.Iteration.Reduce {\n            initial_value: 0\n        }\n        \n        func() add_handler {\n            in(x: -120, y: -40, name: \"current\") property(Number) current_in\n            in(x: -100, y: 50, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 30, name: \"\") property(Number) result_out\n\n            instance add_node root.Std_k98ojb.Math.Add {}\n            current_in -> add_node.first\n            item_in -> add_node.second\n            add_node.result -> result_out\n        } -> reduce_9f1a3b.reducer\n        \n        list_input -> reduce_9f1a3b.items\n        reduce_9f1a3b.output_value -> total_output\n    }\n\n    \n\n    instance(x: -50, y: 40) sum_array_node root.main.sum_array {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if number is prime\") is_prime {\n        in(x: -200, y: 50, name: \"input\") property(Number) input_num\n        out(x: 600, y: 400, name: \"isPrime\") property(Bool) output_bool\n\n        \n        instance(x: -100, y: 150) edgeCheck root.Std_k98ojb.Std.IfExpression {\n            expression: \"input_num <= 1\"\n        }\n\n        \n        instance(x: 300, y: 200) constFalse root.Std_k98ojb.Logic.Constant {\n            value: false\n        }\n        instance(x: 450, y: 200) constTrue root.Std_k98ojb.Logic.Constant {\n            value: true\n        }\n\n        \n        instance(x: 300, y: 100) falseSetter root.Std_k98ojb.setter {\n            name: \"setter_false\",\n            property: output_bool\n        }\n        edgeCheck.then \u2192 falseSetter.execute\n        constFalse.output \u2192 falseSetter.new_value\n\n        \n        instance(x: -50, y: 300) sqrtCalc root.Std_k98ojb.Math.Pow {\n            x: input_num,\n            y: 0.5\n        }\n        \n        instance(x: 100, y: 300) floorNode root.Std_k98ojb.Math.Floor {\n            number: sqrtCalc.result\n        }\n\n        \n        instance(x: 200, y: 300) genRange root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: floorNode.output\n        }\n        \n        \n        instance(x: 350, y: 300) anyCheck root.Std_k98ojb.Iteration.Any {}\n        genRange.list \u2192 anyCheck.items\n        \n        func() predicateHandler {\n            in(x: -150, y: -50, name: \"item\") property(Number) current_item\n            out(x: 200, y: -50, name: \"\") property(Bool) result\n\n            instance(x: 50, y: -50) modNode root.Std_k98ojb.Math.Modulo {\n                value: input_num,\n                divisor: current_item\n            }\n            \n            instance(x: 150, y: -50) compareZero root.Std_k98ojb.Logic.Equal {\n                a: modNode.result,\n                b: 0.0\n            }\n            compareZero.result \u2192 result\n        } \u2192 anyCheck.handler\n\n        \n        instance(x: 450, y: 300) invert root.Std_k98ojb.Logic.Not {\n            a: anyCheck.result\n        }\n\n        \n        instance(x: 600, y: 300) primeSetter root.Std_k98ojb.setter {\n            name: \"setter_prime\",\n            property: output_bool\n        }\n        invert.output \u2192 primeSetter.new_value\n\n        \n        edgeCheck.else \u2192 genRange.execute\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 100, name: \"b\") property(Number) b_in\n\n        out(x: 300, y: 75, name: \"result\") property(Bool) result_out\n\n        instance(x: 50, y: 75) condition root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 * gen_1 < 0 && gen_0 != 0 && gen_1 != 0\"\n        }\n        \n        a_in \u2192 condition.gen_0\n        b_in \u2192 condition.gen_1\n        condition.result \u2192 result_out\n    }\n\n    instance(x: -50, y: 25) check_opposite root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks if a number is divisible by 11.\") IsDivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) n\n        out(x: 300, y: 50, name: \"result\") property(Bool) result\n\n        instance check root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % 11 == 0\"\n        }\n        \n        n -> check.n \n        check.value -> result\n    }\n\n    \n\n    instance(x: -20, y: 30) checker root.main.IsDivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string.\") replace_chars {\n        in(x: -300, y: 20, name: \"input\") property(String) input_str\n        in(x: -310, y: 70, name: \"search\") property(String) search_char\n        in(x: -320, y: 120, name: \"replace\") property(String) replace_char\n\n        out(x: 400, y: 80, name: \"result\") property(String) output_str\n\n        instance(x: 200, y: 50) replace_node root.Std_k98ojb.Strings.Replace {}\n        input_str -> replace_node.input\n        search_char -> replace_node.search\n        replace_char -> replace_node.replace\n        replace_node.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) replacer_59bc6e root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerConverter {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        \n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 0) converter_instance root.main.ToLowerConverter {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a given list.\") UniqueProduct {\n        in(x: -300, y: 50, name: \"inputList\") property(List) inputList\n        out(x: 600, y: 200, name: \"product\") property(Number) productOut\n\n        \n        instance(x: -100, y: 150) reduceUnique root.Std_k98ojb.Iteration.Reduce {}\n\n        \n        instance(x: -200, y: 100) emptyList root.Std_k98ojb.List.Empty {}\n        emptyList.emptyList -> reduceUnique.initialValue\n\n        inputList -> reduceUnique.items\n        \n        \n        func() {\n            in(x: -200, y: 0, name: \"acc\") property(List) acc\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n\n            out(x: 300, y: 50, name: \"\") property(List) result\n            \n            \n            instance(x: -100, y: 70) containsNode root.Std_k98ojb.List.Contains {}\n            item -> containsNode.item\n            acc -> containsNode.list\n\n            instance(x: 50, y: 120) selector root.Std_k98ojb.Std.Switch {\n                condition: {containsNode.isIn}\n            }\n\n            \n            acc -> selector.inputTrue\n            \n            \n            instance(x: 200, y: 100) addToList root.Std_k98ojb.List.Add {}\n            acc -> addToList.list\n            item -> addToList.item\n            addToList.resultList -> selector.inputFalse\n\n            selector.output -> result\n        } -> reduceUnique.handler\n        \n        \n        instance(x: 300, y: 150) productReduce root.Std_k98ojb.Iteration.Reduce {}\n        \n        \n        instance(x: 250, y: 200) initialOne root.Std_k98ojb.Math.Constant {\n            value: 1\n        }\n        initialOne.value -> productReduce.initialValue\n\n        reduceUnique.output -> productReduce.items\n        \n        \n        func() {\n            in(x: -50, y: 0, name: \"acc\") property(Number) acc\n            in(x: 50, y: 0, name: \"item\") property(Number) item\n\n            out(x: 150, y: 30, name: \"\") property(Number) result\n\n            instance(x: 25, y:50) multiply root.Std_k98ojb.Math.Mul {}\n            acc -> multiply.a\n            item -> multiply.b\n\n            multiply.result -> result\n        } -> productReduce.handler\n        \n        \n        productReduce.output -> productOut\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") dissimilar_elements {\n        in(x: -203, y: 154, name: \"listA\") property(List) list_a\n        in(x: -208, y: -97, name: \"listB\") property(List) list_b\n\n        out(x: 623, y: 20, name: \"result\") property(List) result_list\n\n        instance(x: 154, y: 147) differenceA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 160, y: -43) differenceB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 429, y: 52) concat_9e3a7d root.Std_k98ojb.List.Concat {}\n\n        list_a -> differenceA.left\n        list_b -> differenceA.right\n\n        list_b -> differenceB.left\n        list_a -> differenceB.right\n\n        differenceA.difference -> concat_9e3a7d.left\n        differenceB.difference -> concat_9e3a7d.right\n\n        concat_9e3a7d.list -> result_list\n    }\n\n    \n\n    instance(x: -142, y: 28) dissimilar_node root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc:\"Rotates a given list to the right by specified number of items.\") RotateRight {\n        in(x: -300, y: 50, name: \"list\") property(List) input_list\n        in(x: -280, y: 100, name: \"rotation\") property(Number) rotation_num\n\n        out(x: 400, y: 100, name: \"rotatedList\") property(List) output_list\n\n        \n        instance(len_node, Std_k98ojb.List.Length)\n        input_list -> len_node.list\n\n        \n        instance(is_empty, Std_k98ojb.Math.Eq)\n        len_node.length -> is_empty.a\n        0.0 -> is_empty.b \n\n        \n        instance(if_cond, Std_k98ojb.Std.If)\n        is_empty.result -> if_cond.condition\n\n        \n        input_list -> if_cond.thenBranch.rotatedList\n\n        \n\n        \n        instance(mod_node, Std_k98ojb.Math.Modulo)\n        rotation_num -> mod_node.value\n        len_node.length -> mod_node.divisor\n\n        \n        instance(split_point_calc, Std_k98ojb.Math.Sub)\n        len_node.length -> split_point_calc.first \n        mod_node.result -> split_point_calc.second \n\n        \n        instance(first_slice_node, Std_k98ojb.List.Slice)\n        input_list -> first_slice_node.list\n        split_point_calc.result -> first_slice_node.start \n        len_node.length -> first_slice_node.end\n\n        \n        instance(second_slice_node, Std_k98ojb.List.Slice)\n        input_list -> second_slice_node.list\n        0.0 -> second_slice_node.start \n        split_point_calc.result -> second_slice_node.end \n\n        \n        instance(concat_node, Std_k98ojb.List.Concat)\n        first_slice_node.sliceResult -> concat_node.firstList \n        second_slice_node.sliceResult -> concat_node.secondList \n\n        \n        concat_node.concatenated -> if_cond.elseBranch.rotatedList\n\n        \n        if_cond.result -> output_list\n    }\n\n    \n\n    instance(x: 50, y: 150) rotate_instance root.main.RotateRight {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") SumArray {\n        in(x: -200, y: 50, name: \"list\") property(List) list_in\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_out\n\n        instance reduce_node Iteration.Reduce {}\n        list_in -> reduce_node.items\n        \n        \n        func() {\n            in acc: Number, current: Number\n            out result: Number\n            \n            instance adder Math.Add {}\n            acc -> adder.first\n            current -> adder.second\n            adder.result -> result\n        } -> reduce_node.handler\n        \n        \n        instance initial_zero Number { value: 0 }\n        initial_zero.value -> reduce_node.context\n        \n        reduce_node.output -> sum_out\n    }\n\n    \n\n    instance(x: -150, y: 75) SumArray_instance root.main.SumArray {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is prime using 1-based indexing.\") IsPrime {\n        in(x: -400, y: 50, name: \"n\") property(Number) n_input\n        in(x: -500, y: 200, name: \"execute\") trigger() execute_start\n\n        out(x: 600, y: 300, name: \"isPrime\") property(Bool) is_prime_out\n        out(x: 700, y: 400, name: \"continue\") trigger() continue_end\n\n        \n        instance(x: -200, y:50) check_lt2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 < 2\"\n        }\n        n_input -> check_lt2.gen_0\n\n        \n        setter(x:-160,y:100, name:\"setter_false\") setFalse root.Std_k98ojb.Var.Setter { type:Bool }\n        literal(value:false) -> setFalse.new_value\n        check_lt2.then -> setFalse.set_trigger\n\n        getter(x:-150,y:200,name:\"getter_is_prime\") getVar root.Std_k98ojb.Var.Getter {}\n        setFalse.value -> getVar.var\n        getVar.get -> is_prime_out\n        check_lt2.then -> continue_end\n\n        \n        instance(x:100,y:50) proceed root.Std_k98ojb.Node{}\n        check_lt2.else -> proceed.input\n\n        \n        instance(x:200,y:50) check_eq2 root.Std_k98ojb.Std.IfExpression {\n            expression:\"gen_0 == 2\"\n        }\n        n_input -> check_eq2.gen_0\n\n        setter(x:300,y:100,name:\"setter_true\") setTrue root.Std_k98ojb.Var.Setter { type:Bool }\n        literal(value:true) -> setTrue.new_value\n        check_eq2.then -> setTrue.set_trigger\n        setTrue.value -> getVar.var\n        check_eq2.then -> continue_end\n\n        \n        instance(x:400,y:50) next root.Std_k98ojb.Node{}\n        check_eq2.else -> next.input\n\n        \n        instance(x:500,y:50) mod_node root.Std_k98ojb.Math.Mod { divisor:2 }\n        n_input -> mod_node.value\n        instance(x:600,y:50) check_even root.Std_k98ojb.Std.IfExpression {\n            expression:\"gen_0 == 0\"\n        }\n        mod_node.result -> check_even.gen_0\n\n        \n        setter(x:700,y:100,name:\"setter_evev\") setEven root.Std_k98ojb.Var.Setter { type:Bool }\n        literal(value:false) -> setEven.new_value\n        check_even.then -> setEven.set_trigger\n        setEven.value -> getVar.var\n        check_even.then -> continue_end\n\n        \n        instance(x:800,y:50) proceed_odd root.Std_k98ojb.Node{}\n        check_even.else -> proceed_odd.input\n\n        \n        instance(x:900,y:50) sqrt_expr root.Std_k98ojb.Math.Expression {\n            expression:\"sqrt(gen_0)\"\n        }\n        n_input -> sqrt_expr.gen_0\n        instance(x:1000,y:50) floor_node root.Std_k98ojb.Math.Floor {}\n        sqrt_expr.result -> floor_node.value\n\n        \n        instance(x:1100,y:50) gen_range root.Std_k98ojb.List.GenerateRange {\n            from:3\n        }\n        floor_node.result -> gen_range.to\n\n        \n        instance(x:1200,y:50) filter_odds root.Std_k98ojb.Query.Filter {\n            where:\"it %2 ==1\"\n        }\n        gen_range.list -> filter_odds.items\n\n        \n        instance(x:1300,y:50) find_div root.Std_k98ojb.Iteration.Find {}\n        \n        func() { \n            in(x:-200,y:0,name:\"current\") property(Number) current_num\n            out(x:200,y:0,name:\"\") property(Bool) result\n\n            instance(x:100,y:50) mod_curr root.Std_k98ojb.Math.Mod {\n                divisor:current_num\n            }\n            n_input -> mod_curr.value\n            \n            instance(x:200,y:50) is_div root.Std_k98ojb.Std.IfExpression {\n                expression:\"gen_0 == 0\"\n            }\n            mod_curr.result -> is_div.gen_0\n\n            is_div.then -> result\n        } -> find_div.handler \n\n        filter_odds.output_list -> find_div.items\n\n        \n        instance(x:1400,y:50) check_found root.Std_k98ojb.Std.IfExpression {\n            expression:\"gen_0 != null\"\n        }\n        find_div.result -> check_found.gen_0 \n\n        \n        setter(x:1500,y:100,name:\"set_not_prime\") setNP root.Std_k98ojb.Var.Setter { type:Bool }\n        literal(value:false) -> setNP.new_value\n\n        setter(x:1600,y:100,name:\"set_prime\") setP root.Std_k98ojb.Var.Setter { type:Bool }\n        literal(value:true) -> setP.new_value \n\n        check_found.then -> setNP.set_trigger\n        check_found.else -> setP.set_trigger\n\n        \n        setNP.value -> getVar.var \n        setP.value  -> getVar.var \n\n        instance(x:1700,y:50) end_node root.Std_k98ojb.Node {}\n        check_found.then -> end_node.input\n        check_found.else -> end_node.input\n\n        \n        end_node.output -> continue_end \n    }\n\n    instance(x:-200,y:-50) prime_check_instance root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") opposite_signs {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_input\n        in(x: -180, y: 70, name: \"b\") property(Number) b_input\n        in(x: -300, y: 0, name: \"execute\") trigger() execute_in\n\n        out(x: 200, y: 50, name: \"result\") property(Bool) result_out\n        out(x: 400, y: 0, name: \"continue\") trigger() continue_out\n\n        instance(x: 100, y: 100) expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"gen_0 * gen_1 < 0\"\n        }\n\n        a_input -> expr_node.gen_0\n        b_input -> expr_node.gen_1\n\n        execute_in -> expr_node.execute\n        expr_node.result -> result_out\n        expr_node.done -> continue_out\n    }\n\n    instance(x: 0, y: 0) opposite_signs_inst root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Check if number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: 69, name: \"number\") property(Number) input_num\n        out(x: 350, y: 180, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 100) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 100) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -30, y: 50) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a substring in a string.\") replace_chars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_str\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_str -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_59bc6e root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n\n    func(doc: \"Calculates product of unique numbers in a list.\") ProductOfUniques {\n        in(x: -200, y: 50) property(List) input_list\n        out(x: 400, y: 300) property(Number) output\n\n        \n        instance ListEmpty root.Std_k98ojb.List.Empty {}\n        initial_empty <- ListEmpty.list\n\n        reduce_unique = Iteration.Reduce {\n            items: input_list,\n            initial_value: initial_empty,\n\n            handler: (accumulated, current) -> new_accumulated {\n\n                \n                instance contains_1 root.Std_k98ojb.List.Contains {\n                    list: accumulated,\n                    item: current\n                }\n\n                \n                instance add_node root.Std_k98ojb.List.Add {\n                    list: accumulated,\n                    element: current\n                }\n\n                \n                instance ifexpr root.Std_k98ojb.Std.IfExpression {\n                    predicate: contains_1.isInList,\n                    thenValue: accumulated,  \n                    elseValue: add_node.list \n                }\n\n                new_accumulated <- ifexpr.result\n            }\n        }\n\n        unique_list <- reduce_unique.output\n\n        \n        instance initial_one root.Std_k98ojb.NumberConstant {\n            value: 1\n        }\n\n        reduce_product = Iteration.Reduce {\n            items: unique_list,\n            initial_value: initial_one.value,\n\n            handler: (acc, current) -> new_acc {\n\n                \n                instance multiply_1 root.Std_k98ojb.Math.Mul {\n                    left: acc,\n                    right: current\n                }\n\n                new_acc <- multiply_1.result\n            }\n        }\n\n        output <- reduce_product.output\n    }\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -240, y: 50, name: \"list1\") property(List) list1_3d8f\n        in(x: -230, y: 100, name: \"list2\") property(List) list2_9a7c\n\n        out(x: 600, y: 75, name: \"result\") property(List) result_1b4d\n\n        instance(x: 150, y: 50) diff_left root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 120) diff_right root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 85) concat_7e3c root.Std_k98ojb.List.Concat {}\n\n        list1_3d8f -> diff_left.left\n        list2_9a7c -> diff_left.right\n\n        list2_9a7c -> diff_right.left\n        list1_3d8f -> diff_right.right\n\n        diff_left.difference -> concat_7e3c.left\n        diff_right.difference -> concat_7e3c.right\n\n        concat_7e3c.result -> result_1b4d\n    }\n\n    \n\n    instance(x: -90, y: 80) dissimilars_node root.main.find_dissimilars {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 150, name: \"k\") property(Number) k_value\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) output_rotated\n\n        instance(x: 30, y: 20) length_node root.Std_k98ojb.List.Length {}\n        input_list \u2192 length_node.list\n        \n        instance(x: 150, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        k_value \u2192 modulo_node.value\n        length_node.length \u2192 modulo_node.divisor\n\n        instance(x: 200, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length \u2192 sub_node.first\n        modulo_node.result \u2192 sub_node.second\n        \n        instance(x: 300, y: 50) second_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 second_slice.list\n        sub_node.result \u2192 second_slice.start\n        length_node.length \u2192 second_slice.end\n\n        instance(x: 300, y: 150) first_slice root.Std_k98ojb.List.Slice {}\n        input_list \u2192 first_slice.list\n        0 \u2192 first_slice.start\n        sub_node.result \u2192 first_slice.end\n        \n        instance(x: 450, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.sliceResult \u2192 concat_node.left\n        first_slice.sliceResult \u2192 concat_node.right\n\n        concat_node.concatenatedList \u2192 output_rotated\n    }\n\n    \n\n    instance(x: -30, y: 50) rotate_instance root.main.rotate_right {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) listInput\n        out(x: 400, y: 50, name: \"total\") property(Number) sumOutput\n\n        instance(x: 150, y: 50) reduce_7a2c3b root.Std_k98ojb.Iteration.Reduce {}\n        listInput -> reduce_7a2c3b.items\n        0 -> reduce_7a2c3b.initialValue\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) accIn\n            in(x: -100, y: 0, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: -25, name: \"\") property(Number) resultOut\n\n            instance(x: 50, y: -25) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            accIn -> add_4a9f1c.first\n            itemIn -> add_4a9f1c.second\n            add_4a9f1c.result -> resultOut\n        } -> reduce_7a2c3b.reducer\n        \n        reduce_7a2c3b.output -> sumOutput\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks if a number is prime\") IsPrime {\n        in(x: -200, y: 100, name: \"n\") property(Number) input_n\n        in(x: -300, y: 50, name: \"execute\") trigger() execute_trig\n\n        out(x: 400, y: 200, name: \"isPrime\") property(Bool) output_bool\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_out\n\n        \n        instance(x: -100, y: 0) if_edge root.Std.IfExpression {\n            expression: \"input_n < 2\"\n        }\n\n        execute_trig -> if_edge.execute\n\n        \n        setter(x: 300, y: 50, name: \"setter_false\") setter_1 = output_bool\n        literal(value: false) -> setter_1.new_value\n        if_edge.then -> setter_1.execute\n        setter_1.continue -> continue_out\n\n        \n        instance(x: 0, y: 200) pow_node root.Std.Math.Pow {\n            x = input_n,\n            y = 0.5\n        }\n\n        instance(x: 100, y: 200) floor_node root.Std.Math.Floor {\n            value = pow_node.result\n        }\n\n        \n        instance(x: 200, y: 200) gen_range root.Std.List.GenerateRange {\n            from = 2,\n            to = floor_node.floorResult\n        }\n\n        \n        instance(x: 300, y: 200) find_divisor root.Std.Iteration.Find {\n            items = gen_range.list\n        }\n        \n        \n        func() {\n            in(x: -100, y: 0, name: \"current\") property(Number) current_i\n\n            out(x: 100, y: 0, name: \"\") property(Bool) predicate_out\n\n            instance(x: 0, y: 20) modulo_node root.Std.Math.Modulo {\n                value = input_n,\n                divisor = current_i\n            }\n\n            instance(x: 50, y: 20) eq_zero root.Std.Logic.Equals {\n                a = modulo_node.result,\n                b = 0\n            }\n            \n            eq_zero.equals -> predicate_out\n        } -> find_divisor.handler\n\n        \n        instance(x: 400, y: 200) is_null root.Std.Logic.IsNull {\n            value = find_divisor.item\n        }\n\n        \n        instance(x: 500, y: 200) if_final root.Std.If {\n            condition = is_null.isNull\n        }\n\n        literal(value: true) -> if_final.thenValue\n        literal(value: false) -> if_final.elseValue\n\n        \n        if_edge.else -> pow_node.execute\n        find_divisor.done -> is_null.valueIn\n        is_null.output -> if_final.condition\n\n        \n        if_final.output -> output_bool\n        if_final.continue -> continue_out\n    }\n\n    \n\n    instance(x: -97, y: -68) IsPrime_1 root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Checks if two integers have opposite signs.\") opposite_signs {\n        in(x: -250, y: 100, name: \"a\") property(Number) a_input\n        in(x: -240, y: 150, name: \"b\") property(Number) b_input\n\n        out(x: 300, y: 120, name: \"result\") property(Bool) result_output\n\n        instance(x: 100, y: 80) ifexpression_opp root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        a_input -> ifexpression_opp.gen_0\n        b_input -> ifexpression_opp.gen_1\n        ifexpression_opp.value -> result_output\n    }\n\n    \n\n    instance(x: -50, y: 80) opposite_signs_inst root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -200, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: -25) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another character.\") replaceCharacters {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        in(x: -180, y: 100, name: \"search\") property(String) search_char\n        in(x: -160, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_8f3a2b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_8f3a2b.input\n        search_char -> replacer_8f3a2b.search\n        replace_char -> replacer_8f3a2b.replace\n        \n        replacer_8f3a2b.value -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_func root.main.replaceCharacters {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        \n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 0) converter_1 root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"calculates product of unique numbers in a given list\") UniqueProduct {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        out(x: 400, y: 300, name: \"product\") property(Number) outputNumber\n\n        instance(x: 100, y: 50) filterUnique root.Std_k98ojb.Iteration.Filter {\n            context = inputList \n        }\n        inputList -> filterUnique.items\n        \n        \n        func() { \n            in(x: -100, y: 20, name: \"item\") property(Number) currentItem\n            in(x: -90, y: 50, name: \"contextList\") property(List) contextList\n\n            out(x: 200, y: 30, name: \"\") property(Bool) predicateResult\n            \n            \n            instance(x: 10, y: 50) innerFilter root.Std_k98ojb.Iteration.Filter {\n                where: \"it == currentItem\"\n            }\n            contextList -> innerFilter.items\n\n            \n            instance(x: 120, y: 50) countLength root.Std_k98ojb.List.Length {}\n            innerFilter.result -> countLength.list\n            \n            instance(x: 180, y: 50) equalOne root.Std_k98ojb.Math.Equal {\n                second = 1\n            }\n            countLength.length -> equalOne.first\n            equalOne.equal -> predicateResult\n        } -> filterUnique.handler\n\n        \n        instance(x: 300, y: 200) reduceProduct root.Std_k98ojb.Iteration.Reduce {\n            initialValue = 1\n        }\n        filterUnique.result -> reduceProduct.items\n        \n        \n        func() { \n            in(x: -50, y: 20, name: \"acc\") property(Number) accumulator\n            in(x: -40, y: 40, name: \"current\") property(Number) currentElement\n\n            out(x: 100, y: 30, name: \"\") property(Number) result\n            \n            instance(x: 20, y: 30) multiply root.Std_k98ojb.Math.Multiply {}\n            accumulator -> multiply.first\n            currentElement -> multiply.second\n            multiply.result -> result\n        } -> reduceProduct.handler\n\n        \n        reduceProduct.result -> outputNumber\n    }\n\n    instance(x: -174, y: -63) UniqueProduct_node root.main.UniqueProduct {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_ai\n        in(x: -200, y: 150, name: \"list2\") property(List) list2_bi\n\n        out(x: 400, y: 100, name: \"result\") property(List) result_ci\n\n        instance(x: 100, y: 50) diff_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diff_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_123 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff_ab.left\n        list2_bi -> diff_ab.right\n\n        list2_bi -> diff_ba.left\n        list1_ai -> diff_ba.right\n\n        diff_ab.difference -> concat_123.left\n        diff_ba.difference -> concat_123.right\n\n        concat_123.result -> result_ci\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_instance root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc:\"Rotates a given list to the right by specified number of items.\") RotateRight {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 150, name: \"rotate\") property(Number) rotate_num\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) output_list\n\n        \n        instance(x: 200, y: 50) len_node root.Std_k98ojb.List.Length {}\n        input_list -> len_node.list\n        len_node.length -> local_len\n\n        \n        instance(x: 300, y: 150) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotate_num -> modulo_node.value\n        local_len -> modulo_node.divisor\n        modulo_node.result -> effective_rot\n\n        \n        instance(x: 400, y: 250) sub_node root.Std_k98ojb.Math.Sub {}\n        local_len -> sub_node.first\n        effective_rot -> sub_node.second\n        sub_node.result -> split_index\n\n        \n        instance(x: 350, y: 100) const_negone root.Std_k98ojb.Math.Constant {}\n        const_negone.value = -1\n        const_negone.output -> end_negone\n\n        instance(x: 350, y: 200) const_zero root.Std_k98ojb.Math.Constant {}\n        const_zero.value = 0\n        const_zero.output -> start_zero\n\n        \n        instance(x: 500, y: 100) slice_second root.Std_k98ojb.List.Slice {}\n        input_list -> slice_second.list\n        split_index -> slice_second.start\n        end_negone -> slice_second.end\n\n        \n        instance(x: 500, y: 200) slice_first root.Std_k98ojb.List.Slice {}\n        input_list -> slice_first.list\n        start_zero -> slice_first.start\n        split_index -> slice_first.end\n\n        \n        instance(x: 600, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n        slice_second.result -> concat_node.left\n        slice_first.result -> concat_node.right\n        concat_node.list -> output_list\n    }\n\n    \n    instance(x: -50, y: 300) rotate_inst root.main.RotateRight {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of elements in an array.\") sum_array {\n        in(x: -234, y: 50, name: \"list\") property(List) list_input\n        out(x: 600, y: 80, name: \"total\") property(Number) total_output\n\n        instance(x: 150, y: 70) reduce_9f1a3b root.Std_k98ojb.Iteration.Reduce {\n            initial_value: 0\n        }\n        \n        func() add_handler {\n            in(x: -120, y: -40, name: \"current\") property(Number) current_in\n            in(x: -100, y: 50, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 30, name: \"\") property(Number) result_out\n\n            instance add_node root.Std_k98ojb.Math.Add {}\n            current_in -> add_node.first\n            item_in -> add_node.second\n            add_node.result -> result_out\n        } -> reduce_9f1a3b.reducer\n        \n        list_input -> reduce_9f1a3b.items\n        reduce_9f1a3b.output_value -> total_output\n    }\n\n    \n\n    instance(x: -50, y: 40) sum_array_node root.main.sum_array {}\n}"
            ],
            "48": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Check if a number is prime.\") is_prime {\n        in(x: 0,y:0) property(Number) input\n        in(x: -100, y:0) trigger() execute\n\n        out(x: 100,y:0) property(Bool) output\n\n        \n        instance edgeCheck root.Std.IfExpression {\n            expression: \"input <= 1\"\n        }\n        execute \u2192 edgeCheck.execute\n\n        \n        instance ifEdge root.Std.If\n        edgeCheck.result \u2192 ifEdge.predicate\n\n        \n        instance setFalse root.Std.SetProperty { value: False }\n        ifEdge.then \u2192 setFalse.execute\n        setFalse.value \u2192 output\n\n        \n        instance sqrtCalc root.Std.Math.Pow {\n            x: input,\n            y: 0.5\n        }\n        ifEdge.else \u2192 sqrtCalc.execute\n\n        instance floorNode root.Std.Math.Floor {\n            number: sqrtCalc.result\n        }\n        sqrtCalc.then \u2192 floorNode.execute\n\n        \n        instance genRange root.Std.List.GenerateRange {\n            from: 2,\n            to: floorNode.result\n        }\n        floorNode.then \u2192 genRange.execute\n\n        \n        func() checkDivisor {\n            in(current: Number)\n\n            out(result: Bool)\n\n            instance modNode root.Std.Math.Modulo {\n                value: input, \n                divisor: current\n            }\n\n            instance isZero root.Std.IfExpression {\n                expression: \"modNode.result == 0\"\n            }\n            \n            isZero.result \u2192 result\n        }\n\n        \n        instance findDivisor root.Std.Iteration.Find {\n            items: genRange.list,\n            handler: checkDivisor\n        }\n        genRange.then \u2192 findDivisor.execute\n\n        \n        instance hasDiv root.Std.IfExpression {\n            expression: \"findDivisor.item != Null\"\n        }\n        findDivisor.then \u2192 hasDiv.execute\n\n        \n        instance resultIf root.Std.If\n        hasDiv.result \u2192 resultIf.predicate\n\n        \n        instance setFalse2 root.Std.SetProperty { value: False }\n        resultIf.then \u2192 setFalse2.execute\n        setFalse2.value \u2192 output\n\n        instance setTrue root.Std.SetProperty { value: True }\n        resultIf.else \u2192 setTrue.execute\n        setTrue.value \u2192 output\n    }\n\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") OppositeSign {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(name: \"b\") property(Number) b_in\n\n        out(x: 300, y: 100, name: \"result\") property(Bool) result_out\n\n        instance(x: 100, y: 50) ifExpr root.Std_k98ojb.Std.IfExpression {\n            expression: \"(a * b) < 0 && a != 0 && b != 0\"\n        }\n\n        a_in -> ifExpr.gen_0\n        b_in -> ifExpr.gen_1\n        ifExpr.result -> result_out\n    }\n    \n    instance(x: 50, y: 200) opposite_node root.main.OppositeSign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -200, y:50, name: \"number\") property(Number) input_num\n        out(x: 300, y:50, name: \"result\") property(Bool) output_result\n\n        instance mod_node root.Std_k98ojb.Math.Modulo {}\n        instance eq_zero root.Std_k98ojb.Logic.Equal {}\n\n        \n        input_num -> mod_node.value\n        11 -> mod_node.divisor \n\n        \n        mod_node.result -> eq_zero.a\n        0 -> eq_zero.b\n\n        eq_zero.equals -> output_result\n    }\n\n    instance check root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string.\") replace_chars {\n        in(x: -300, y: 20, name: \"input\") property(String) input_str\n        in(x: -310, y: 70, name: \"search\") property(String) search_char\n        in(x: -320, y: 120, name: \"replace\") property(String) replace_char\n\n        out(x: 400, y: 80, name: \"result\") property(String) output_str\n\n        instance(x: 200, y: 50) replace_node root.Std_k98ojb.Strings.Replace {}\n        input_str -> replace_node.input\n        search_char -> replace_node.search\n        replace_char -> replace_node.replace\n        replace_node.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) replacer_59bc6e root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerConverter {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 50, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        \n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 0) converter_instance root.main.ToLowerConverter {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of unique numbers in a given list.\") ProductOfUniques {\n        in(x: -200, y: 50) inputList property List\n        out(x: 800, y: 200) result property Number\n\n        \n        instance reduceUnique root.Std_k98ojb.Iteration.Reduce {\n            items = inputList\n            initial_value = emptyList.emptyList\n        }\n\n        \n        instance emptyList root.Std_k98ojb.List.Empty {}\n\n        \n        func() {\n            in currentAcc property List, item property Number\n\n            out output property List\n\n            \n            instance containsCheck root.Std_k98ojb.List.Contains {}\n            currentAcc -> containsCheck.list\n            item -> containsCheck.item\n\n            \n            instance ifNode Std_k98ojb.Std.If {\n                predicate = containsCheck.isContained\n            }\n\n            \n            currentAcc -> ifNode.then.output\n\n            \n            instance addToList root.Std_k98ojb.List.Add {}\n            currentAcc -> addToList.list\n            item -> addToList.item\n            addToList.newList -> ifNode.else.output\n        } -> reduceUnique.handler\n\n        \n        instance reduceProduct root.Std_k98ojb.Iteration.Reduce {\n            items = reduceUnique.output  \n            initial_value = 1           \n        }\n\n        \n        func() {\n            in acc property Number, value property Number\n\n            instance multiply root.Std_k98ojb.Math.Mul {}\n            acc -> multiply.a\n            value -> multiply.b\n            multiply.result -> output\n        } -> reduceProduct.handler\n\n        \n        reduceProduct.output -> result\n    }\n\n    \n    instance testInput root.Std_k98ojb.List.fromValues {\n        values = [2, 3, 2, 5]\n    }\n    \n    instance compute root.main.ProductOfUniques {\n        inputList = testInput.list\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") dissimilar_elements {\n        in(x: -203, y: 154, name: \"listA\") property(List) list_a\n        in(x: -208, y: -97, name: \"listB\") property(List) list_b\n\n        out(x: 623, y: 20, name: \"result\") property(List) result_list\n\n        instance(x: 154, y: 147) differenceA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 160, y: -43) differenceB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 429, y: 52) concat_9e3a7d root.Std_k98ojb.List.Concat {}\n\n        list_a -> differenceA.left\n        list_b -> differenceA.right\n\n        list_b -> differenceB.left\n        list_a -> differenceB.right\n\n        differenceA.difference -> concat_9e3a7d.left\n        differenceB.difference -> concat_9e3a7d.right\n\n        concat_9e3a7d.list -> result_list\n    }\n\n    \n\n    instance(x: -142, y: 28) dissimilar_node root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified count. Handles empty lists and large rotation values.\") RotateRight {\n        in(x: -300, y: 50) property(List) inputList\n        in(x: -290, y: 100) property(Number) rotateCount\n\n        out(x: 400, y: 75) property(List) outputList\n\n        \n        instance(x: 100, y: 50) lenCalc root.Std_k98ojb.List.Length {}\n        inputList -> lenCalc.list\n\n        \n        instance(x: 200, y: 40) zeroCheck root.Std_k98ojb.Logic.Equal {} \n        lenCalc.length -> zeroCheck.left\n        0 -> zeroCheck.right \n\n        \n        instance(x: 300, y: 50) condition root.Std_k98ojb.Std.If {}\n        zeroCheck.equal -> condition.predicate\n\n        \n        inputList -> condition.thenBranch.input\n        instance(x: 350, y: 100) thenDummy root.Std_k98ojb.Dummy {} \n        condition.thenBranch.output -> thenDummy.input\n        thenDummy.output -> outputList \n\n        \n        instance(x: 400, y: 200) elseModNode root.Std_k98ojb.Math.Modulo {}\n        rotateCount -> elseModNode.value \n        lenCalc.length -> elseModNode.divisor \n\n        \n        instance(x: 500, y: 200) subNode root.Std_k98ojb.Math.Sub {} \n        lenCalc.length -> subNode.first  \n        elseModNode.result -> subNode.second  \n\n        \n        instance(x: 600, y: 300) slicePart1 root.Std_k98ojb.List.Slice {}\n        inputList -> slicePart1.list \n        subNode.result -> slicePart1.start  \n        lenCalc.length -> slicePart1.end  \n\n        \n        instance(x: 600, y: 400) slicePart2 root.Std_k98ojb.List.Slice {}\n        inputList -> slicePart2.list \n        0 -> slicePart2.start  \n        subNode.result -> slicePart2.end  \n\n        \n        instance(x: 700, y: 350) concatNode root.Std_k98ojb.List.Concat {} \n        slicePart1.sliceResult -> concatNode.left \n        slicePart2.sliceResult -> concatNode.right  \n        concatNode.result -> outputList \n\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the sum of elements in a list.\") SumArray {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        out(x: 400, y: 50, name: \"sum\") property(Number) total\n\n        instance reduceNode Iteration.Reduce {}\n        \n        \n        instance initVal Math.Constant {value: 0}\n        \n        \n        inputList -> reduceNode.items\n        initVal.value -> reduceNode.context\n        \n        func() {\n            in acc property(Number)\n            in current property(Number)\n\n            out result property(Number)\n\n            instance adder Math.Add {}\n            \n            acc -> adder.first\n            current -> adder.second\n            adder.result -> result\n        } -> reduceNode.handler\n\n        \n        reduceNode.output -> total\n    }\n\n    \n    instance(x: 10, y: 20) sumInstance root.main.SumArray {}\n}"
            ],
            "48": [
                "module() main {\n    func(doc: \"Check if an integer n is a prime number.\") IsPrime {\n        in(x: -281, y: 0, name: \"n\") property(Number) n\n        out(x: 500, y: 150, name: \"is_prime\") property(Bool)\n\n        \n\n        \n        instance if_leq_1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"a <= 1\"\n        }\n        n \u2192 if_leq_1.gen_0\n\n        instance const_false root.Std_k98ojb.Constant { value = false }\n\n        \n        if_leq_1.then \u2192 const_false \u2192 is_prime\n\n        \n        instance else_branch1 root.Std_k98ojb.Branch {}\n        if_leq_1.else \u2192 else_branch1.in\n\n        \n        instance if_eq_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"a == 2\"\n        }\n        n \u2192 if_eq_2.gen_0\n\n        instance const_true root.Std_k98ojb.Constant { value = true }\n\n        \n        if_eq_2.then \u2192 const_true \u2192 is_prime\n\n        \n        instance else_branch2 root.Std_k98ojb.Branch {}\n        if_eq_2.else \u2192 else_branch2.in\n\n        \n        instance mod_2 root.Std_k98ojb.Math.Modulo {\n            a = n, b = 2\n        }\n        instance is_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"a == 0\"\n        }\n        mod_2.result \u2192 is_even.gen_0\n\n        \n        is_even.then \u2192 const_false \u2192 is_prime\n\n        \n        instance else_branch3 root.Std_k98ojb.Branch {}\n        is_even.else \u2192 else_branch3.in\n\n        \n        instance pow_sqrt root.Std_k98ojb.Math.Pow {\n            x = n, y = 0.5\n        }\n        instance floor_sqrt root.Std_k98ojb.Math.Floor { input = pow_sqrt.result }\n\n        \n        instance generate_range root.Std_k98ojb.List.GenerateRange {\n            from = 3, to = floor_sqrt.output\n        }\n\n        \n        instance filter_odds root.Std_k98ojb.Query.Filter {\n            where: \"it % 2 != 0\"\n        }\n        generate_range.result \u2192 filter_odds.items\n\n        \n        instance check_divisor root.Std_k98ojb.Iteration.Any {}\n        func() { \n            in(x:-150, y:0) property(Number) candidate\n            out(property(Bool))\n            \n            instance mod_candidate root.Std_k98ojb.Math.Modulo {\n                a = n, b = candidate\n            }\n            \n            instance is_divisible root.Std_k98ojb.Std.IfExpression {\n                expression: \"a == 0\"\n            }\n            mod_candidate.result \u2192 is_divisible.gen_0\n            \n            \n            is_divisible.then \u2192 output\n        } \u2192 check_divisor.handler\n\n        filter_odds.result \u2192 check_divisor.items\n\n        \n        instance invert_result root.Std_k98ojb.Std.IfExpression {\n            expression: \"!a\"\n        }\n        check_divisor.result \u2192 invert_result.gen_0\n        \n        invert_result.output \u2192 is_prime\n    }\n\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -190, y: 80, name: \"b\") property(Number) b_in\n        in(x: -300, y: -50, name: \"execute\") trigger() execute_trig\n\n        out(x: 200, y: 60, name: \"result\") property(Bool) result_out\n        out(x: 400, y: 70, name: \"continue\") trigger() continue_trig\n\n        instance(x: -50, y: 100) ifexpr root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n\n        a_in -> ifexpr.gen_0\n        b_in -> ifexpr.gen_1\n        execute_trig -> ifexpr.execute\n\n        ifexpr.result -> result_out\n\n        \n        ifexpr.then -> continue_trig\n        ifexpr.else -> continue_trig\n    }\n\n    instance(x: 0, y: 0) opposite_signs_node root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -200, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    instance(x: -50, y: -25) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a substring in a string.\") replace_chars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_str\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_str -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_59bc6e root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates product of unique numbers in a list\") ProductUnique {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        out(x: 400, y: 100, name: \"product\") property(Number) outputProduct\n\n        instance empty List.Empty {}\n\n        \n        instance reduceUnique Iteration.Reduce {\n            items: inputList\n            initial_value: empty.list\n        }\n\n        \n        func() { \n            in(x: -100, y: 0, name: \"acc\") property(List) accIn\n            in(x: -90, y: 30, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: 0, name: \"\") property(List) newAccOut\n\n            instance contains List.Contains {\n                list: accIn\n                item: itemIn\n            }\n\n            \n            instance ifExpr Std.IfExpression {\n                expression: \"!contains.result\"\n            }\n\n            instance add List.Add {\n                list: accIn\n                item: itemIn\n            }\n\n            \n            instance selector Std.If {\n                condition: contains.result  \n                then_value: accIn           \n                else_value: add.list        \n            }\n\n            selector.output -> newAccOut\n        } -> reduceUnique.handler\n\n        \n        instance reduceProduct Iteration.Reduce {\n            items: reduceUnique.output_list\n            initial_value: 1               \n        }\n\n        \n        func() {\n            in(x: -50, y: 0, name: \"acc\") property(Number) accIn\n            in(x: -40, y: 30, name: \"item\") property(Number) itemIn\n\n            out(x: 150, y: 0, name: \"\") property(Number) productOut\n\n            instance multiply Math.Mul {\n                left: accIn\n                right: itemIn\n            }\n\n            multiply.result -> productOut\n        } -> reduceProduct.handler\n\n        \n        reduceProduct.output_value -> outputProduct\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -240, y: 50, name: \"list1\") property(List) list1_3d8f\n        in(x: -230, y: 100, name: \"list2\") property(List) list2_9a7c\n\n        out(x: 600, y: 75, name: \"result\") property(List) result_1b4d\n\n        instance(x: 150, y: 50) diff_a_b root.Std_k98ojb.Sets.Difference {\n            left: list1_3d8f\n            right: list2_9a7c\n        }\n        \n        instance(x: 150, y: 150) diff_b_a root.Std_k98ojb.Sets.Difference {\n            left: list2_9a7c\n            right: list1_3d8f\n        }\n\n        instance(x: 400, y: 100) concat root.Std_k98ojb.List.Concat {}\n        \n        diff_a_b.difference -> concat.left\n        diff_b_a.difference -> concat.right\n        concat.result -> result_1b4d\n    }\n\n    \n\n    instance(x: -50, y: 75) find_dissimilars_node root.main.find_dissimilars {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified number of items\") RotateRight {\n        in(x: -300, y: 50, name: \"list\") property(List) input_list\n        in(x: -280, y: 100, name: \"steps\") property(Number) steps\n\n        out(x: 600, y: 400, name: \"rotatedList\") property(List) rotated_output\n\n        \n        instance(x: 50, y: 150) len_node root.Std_k98ojb.List.Length {}\n        input_list -> len_node.list\n\n        \n        instance(x: 150, y: 150) is_empty_eq root.Std_k98ojb.Logic.Equal {\n            left = len_node.length,\n            right = 0\n        }\n\n        \n        instance(x: 250, y: 150) if_empty root.Std_k98ojb.Std.If {}\n        is_empty_eq.result -> if_empty.condition\n        input_list -> if_empty.trueValue\n\n        \n        instance(x: 350, y: 150) eff_k_node root.Std_k98ojb.Math.Modulo {\n            value = steps,\n            divisor = len_node.length\n        }\n\n        \n        instance(x: 450, y: 150) is_zero_eq root.Std_k98ojb.Logic.Equal {\n            left = eff_k_node.result,\n            right = 0\n        }\n\n        \n        instance(x: 550, y: 150) if_zero root.Std_k98ojb.Std.If {}\n        is_zero_eq.result -> if_zero.condition\n        input_list -> if_zero.trueValue\n\n        \n        instance(x: 650, y: 150) start_node root.Std_k98ojb.Math.Sub {\n            first = len_node.length,\n            second = eff_k_node.result\n        }\n\n        \n        instance(x: 750, y: 200) slice1_node root.Std_k98ojb.List.Slice {\n            list = input_list,\n            start = start_node.result,\n            end = len_node.length\n        }\n        \n        instance(x: 750, y: 300) slice2_node root.Std_k98ojb.List.Slice {\n            list = input_list,\n            start = 0,\n            end = start_node.result\n        }\n\n        \n        instance(x: 850, y: 250) concat_node root.Std_k98ojb.List.Concat {}\n        slice1_node.slice -> concat_node.leftList\n        slice2_node.slice -> concat_node.rightList\n\n        \n        concat_node.result -> if_zero.falseValue\n\n        \n        if_zero.result -> if_empty.falseValue\n\n        \n        if_empty.result -> rotated_output\n    }\n\n    instance(x: -100, y: 200) rotate_node root.main.RotateRight {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) listInput\n        out(x: 400, y: 50, name: \"total\") property(Number) sumOutput\n\n        instance(x: 150, y: 50) reduce_7a2c3b root.Std_k98ojb.Iteration.Reduce {}\n        listInput -> reduce_7a2c3b.items\n        0 -> reduce_7a2c3b.initialValue\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) accIn\n            in(x: -100, y: 0, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: -25, name: \"\") property(Number) resultOut\n\n            instance(x: 50, y: -25) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            accIn -> add_4a9f1c.first\n            itemIn -> add_4a9f1c.second\n            add_4a9f1c.result -> resultOut\n        } -> reduce_7a2c3b.reducer\n        \n        reduce_7a2c3b.output -> sumOutput\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") IsPrime {\n        in(x: -200, y: 100, name: \"n\") property(Number) n_in\n        in(x: -300, y: 50, name: \"execute\") trigger() execute_trig\n\n        out(x: 400, y: 200, name: \"isPrime\") property(Bool) result_out\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_trig\n\n        \n        instance if_n_le_1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in <= 1\"\n        }\n        execute_trig \u2192 if_n_le_1.execute\n\n        \n        setter_false = \n            setter(x: 200, y: 300) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: false\n            }\n        if_n_le_1.then \u2192 setter_false.execute\n        setter_false.continue \u2192 continue_trig\n\n        \n        instance if_n_eq2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in == 2\"\n        }\n        if_n_le_1.else \u2192 if_n_eq2.execute\n\n        \n        setter_true = \n            setter(x: 300, y: 400) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: true\n            }\n        if_n_eq2.then \u2192 setter_true.execute\n        setter_true.continue \u2192 continue_trig\n\n        \n        instance if_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in % 2 == 0\"\n        }\n        if_n_eq2.else \u2192 if_even.execute\n\n        \n        setter_false_even = \n            setter(x: 400, y: 500) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: false\n            }\n        if_even.then \u2192 setter_false_even.execute\n        setter_false_even.continue \u2192 continue_trig\n\n        \n        instance next_step root.Std_k98ojb.Trigger {}\n        if_even.else \u2192 next_step.execute\n\n        \n        instance pow_node root.Std_k98ojb.Math.Pow {\n            x: n_in,\n            y: 0.5\n        }\n        instance floor_node root.Std_k98ojb.Math.Floor {}\n        pow_node.result \u2192 floor_node.value\n\n        upper_limit = floor_node.result\n\n        \n        instance gen_range root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: upper_limit\n        }\n        next_step.execute \u2192 gen_range.from\n        next_step.execute \u2192 gen_range.to\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {}\n        gen_range.list \u2192 find_divisor.items\n\n        \n        func() {\n            in(x: -100, y: 200, name: \"current\") property(Number) current_i\n            out(x: 300, y: 250, name: \"\") property(Bool) result\n\n            instance modulo_ root.Std_k98ojb.Math.Modulo {\n                value: n_in,\n                divisor: current_i\n            }\n            instance eq_zero root.Std_k98ojb.Math.Equal { value: 0 }\n            modulo_.result \u2192 eq_zero.value\n            eq_zero.result \u2192 result\n        } \u2192 find_divisor.handler\n\n        \n        instance is_found root.Std_k98ojb.Std.IfExpression {\n            expression: \"find_divisor.found != null\"\n        }\n\n        \n        next_step.execute \u2192 find_divisor.items\n        find_divisor.output \u2192 is_found.execute\n\n        \n        instance setter_final_false = \n            setter(x: 500, y: 600) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: false\n            }\n        is_found.then \u2192 setter_final_false.execute\n\n        instance setter_final_true = \n            setter(x: 600, y: 700) root.Std_k98ojb.Setter {\n                property: result_out,\n                value: true\n            }\n        is_found.else \u2192 setter_final_true.execute\n\n        \n        setter_final_false.continue \u2192 continue_trig\n        setter_final_true.continue \u2192 continue_trig\n    }\n\n    \n\n    instance(x: -174, y: -63) IsPrimeInstance root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") check_opposite_signs {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_input\n        in(x: -180, y: 70, name: \"b\") property(Number) b_input\n\n        out(x: 300, y: 100, name: \"result\") property(Bool) result_output\n\n        instance(x: 50, y: 100) multiply_abc root.Std_k98ojb.Math.Mul {}\n        a_input -> multiply_abc.first\n        b_input -> multiply_abc.second\n\n        instance(x: 200, y: 100) greater_than_def root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greater_than_def.left\n        multiply_abc.result -> greater_than_def.right\n\n        greater_than_def.result -> result_output\n    }\n\n    \n\n    instance(x: -50, y: 20) check_opposite_signs_inst root.main.check_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -200, y: 50, name:\"number\") property(Number) num_in\n        out(x: 300, y: 50, name:\"result\") property(Bool) result_out\n\n        instance modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance equal_node root.Std_k98ojb.Logic.Equal {}\n\n        \n        num_in -> modulo_node.value \n\n        \n        11 -> modulo_node.divisor \n\n        \n        modulo_node.result -> equal_node.left \n        0 -> equal_node.right \n\n        \n        equal_node.result -> result_out\n    }\n\n    \n\n    instance(x: -50, y: 20) divisible_check root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc:\"Replace characters in a string.\") ReplaceChars {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        in(x: -200, y: 100, name: \"search\") property(String) search_char\n        in(x: -200, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_8f2a4b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_8f2a4b.input\n        search_char -> replacer_8f2a4b.search\n        replace_char -> replacer_8f2a4b.replace\n        \n        replacer_8f2a4b.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_func root.main.ReplaceChars {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    \n    func(doc: \"Converts a given string to lower case.\") ToLowerCase {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 100, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 75) tolower_6f8a2d root.Std_k98ojb.Strings.ToLower {}\n        \n        input_str -> tolower_6f8a2d.input\n        tolower_6f8a2d.output -> output_str\n    }\n\n    \n\n    instance(x: -100, y: 50) to_lower_flow root.main.ToLowerCase {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") UniqueProduct {\n        in(x: -200, y: 50, name: \"inputList\") property(List) input_list\n        out(x: 400, y: 100, name: \"product\") property(Number) output_prod\n\n        \n        instance empty_list of List.Empty {}\n\n        \n        instance reduce_unique of Iteration.Reduce {\n            items = input_list\n            context = empty_list.list\n            \n            handler = func() {\n                in(x: -100, y: 200, name: \"currentList\") property(List) acc\n                in(x: -90, y: 250, name: \"element\") property(Number) x\n\n                out(x: 300, y: 220, name: \"\") property(List) new_list\n                \n                instance contains of List.Contains {\n                    item = x\n                    list = acc\n                }\n\n                \n                instance if_expr of Std.IfExpression {\n                    condition = !contains.isContained\n                }\n                \n                instance then_block:\n                    instance add of List.Add {\n                        list = acc\n                        item = x\n                    }\n                    output: add.newList\n                \n                instance else_block (output: List) -> acc\n\n                if_expr.thenBranch = then_block.output\n                if_expr.elseBranch = else_block.output\n\n                if_expr.result -> new_list\n            }\n        }\n\n        \n        instance initial_prod of NumberLiteral { value = 1 } \n\n        instance reduce_product of Iteration.Reduce {\n            items = reduce_unique.result\n            context = initial_prod.value\n            \n            handler = func() {\n                in(x: -200, y: 300, name: \"currentProd\") property(Number) acc\n                in(x: -190, y: 350, name: \"element\") property(Number) x\n\n                out(x: 400, y: 320, name: \"\") property(Number) new_prod\n                \n                instance multiply of Math.Multiply {\n                    a = acc\n                    b = x\n                }\n                \n                multiply.result -> new_prod\n            }\n        }\n\n        reduce_product.result -> output_prod\n    }\n\n    \n\n    instance(x: -50, y: 120) unique_product_node root.main.UniqueProduct {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -250, y: 100, name: \"listA\") property(List) list_a\n        in(x: -230, y: 150, name: \"listB\") property(List) list_b\n\n        out(x: 650, y: 125, name: \"result\") property(List) result_list\n\n        instance(x: 200, y: 75) diff_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 450, y: 137) concat_6d0e4a root.Std_k98ojb.List.Concat {}\n\n        list_a -> diff_ab.left\n        list_b -> diff_ab.right\n\n        list_b -> diff_ba.left\n        list_a -> diff_ba.right\n\n        diff_ab.difference -> concat_6d0e4a.left\n        diff_ba.difference -> concat_6d0e4a.right\n\n        concat_6d0e4a.result -> result_list\n    }\n\n    \n\n    instance(x: -150, y: 75) dissimilars_node root.main.find_dissimilars {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates a list to the right by k positions.\") RotateRight {\n        in(x: -300, y: 50, name: \"list\") property(List) inputList\n        in(x: -280, y: 100, name: \"k\") property(Number) shiftCount\n\n        out(x: 600, y: 75, name: \"rotatedList\") property(List) outputList\n\n        \n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {}\n        inputList -> len_node.list\n\n        \n        instance(x: 200, y: 60) lte_node root.Std_k98ojb.Math.LessThanOrEqual {}\n        len_node.length -> lte_node.left\n        1 -> lte_node.right\n\n        \n        instance(x: 300, y: 50) if_node root.Std_k98ojb.Std.If {}\n        lte_node.result -> if_node.condition\n\n        \n        inputList -> if_node.thenOutput\n\n        \n        \n        instance(x: 400, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        shiftCount -> modulo_node.value\n        len_node.length -> modulo_node.divisor\n\n        \n        instance(x: 450, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n        len_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        \n        instance(x: 500, y: 50) first_slice root.Std_k98ojb.List.Slice {}\n        inputList -> first_slice.list\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n\n        \n        instance(x: 550, y: 50) second_slice root.Std_k98ojb.List.Slice {}\n        inputList -> second_slice.list\n        sub_node.result -> second_slice.start\n        -1 -> second_slice.end\n\n        \n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.sliceResult -> concat_node.first\n        first_slice.sliceResult -> concat_node.second\n\n        \n        concat_node.result -> if_node.elseOutput\n\n        \n        if_node.output -> outputList\n    }\n\n    \n\n    instance(x: -100, y: 50) rotate_instance root.main.RotateRight {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates sum of array elements\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) list_input\n        out(x: 400, y: 50, name: \"total\") property(Number) sum_output\n\n        instance(x: 150, y: 50) reduce_8f3a2b root.Std_k98ojb.Iteration.Reduce {}\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) acc_in\n            in(x: -100, y: 0, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: -25, name: \"\") property(Number) result_out\n\n            instance(x: 75, y: -25) add_6d4b3f root.Std_k98ojb.Math.Add {}\n            \n            acc_in -> add_6d4b3f.first\n            item_in -> add_6d4b3f.second\n            add_6d4b3f.result -> result_out\n        } -> reduce_8f3a2b.reducer\n        \n        list_input -> reduce_8f3a2b.items\n        0 -> reduce_8f3a2b.initialValue\n        reduce_8f3a2b.output_value -> sum_output\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n\n    func(doc: \"Checks if a number is prime.\") IsPrime {\n        in(x: Number) property inputNumber\n        out(result: Bool) property isPrimeResult\n\n        \n        instance edgeCheck Std.Math.LessThanOrEqual { \n            left = inputNumber \n            right = 1 \n        }\n\n        \n        instance computeSqrt Std.Math.Expression {\n            expression: \"sqrt({inputNumber})\"\n        }\n        \n        instance floorSqrt Std.Math.Floor {\n            input = computeSqrt.result\n        }\n\n        \n        instance generateRange Std.List.GenerateRange {\n            from = 2 \n            to = floorSqrt.output\n        }\n\n        \n        instance filterDivisors Iteration.Filter {\n            items = generateRange.list\n\n            handler: func() {\n                in(current) property i\n                out(output) property isDivisor\n\n                instance mod Std.Math.Modulo {\n                    value = inputNumber \n                    divisor = i\n                }\n\n                instance equalsZero Std.Math.Equal {\n                    left = mod.result \n                    right = 0\n                }\n                \n                equalsZero.equals -> isDivisor\n            }\n        }\n\n        \n        instance listLength Std.List.Length {\n            list = filterDivisors.result\n        }\n\n        instance hasDivisors Std.Math.GreaterThan {\n            left = listLength.length \n            right = 0\n        }\n\n        \n        instance notEdgeCase Std.LogicalNot {\n            input = edgeCheck.result \n        }\n\n        instance notHasDivisors Std.LogicalNot {\n            input = hasDivisors.result \n        }\n\n        \n        instance finalResult Std.IfExpression {\n            expression: \"notEdgeCase.result\"\n            then: notHasDivisors.result \n            else: false\n        }\n        \n        finalResult.result -> isPrimeResult\n    }\n\n    \n    instance testInstance main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Check if two integers have opposite signs.\") hasOppositeSigns {\n        in(x: -200, y: 50) a property(Number)\n        in(x: -180, y: 80) b property(Number)\n\n        out(x: 350, y: 70) result property(Bool)\n\n        instance(x: 50, y: 60) check root.Std_k98ojb.Std.IfExpression {\n            expression = \"left * right < 0\"\n        }\n        a -> check.left\n        b -> check.right\n        check.value -> result\n    }\n\n    \n\n    instance(x: -30, y: 20) signCheckNode root.main.hasOppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") IsDivisibleByEleven {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 50, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 170, y:50) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_node.value\n        11 -> modulo_node.divisor\n        modulo_node.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -34, y: 127) check_divisibility root.main.IsDivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replace characters in a string\") StringReplace {\n        in(x: -300, y: 20, name: \"input\") property(String) input_str\n        in(x: -300, y: 80, name: \"search\") property(String) search_char\n        in(x: -300, y: 140, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 70, name: \"result\") property(String) output_str\n\n        instance(x: 50, y: 70) replacer_node root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_node.input\n        search_char -> replacer_node.search\n        replace_with -> replacer_node.replace\n        \n        replacer_node.result -> output_str\n    }\n\n    \n\n    instance(x: -150, y: 0) ReplaceInstance root.main.StringReplace {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_instance root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of all unique numbers in a given list.\") UniqueProduct {\n        in(x: -200, y: 100) property(List) inputList\n        out(x: 600, y: 50) property(Number) outputResult\n\n        \n        instance(uniqueReduce root.Std_k98ojb.Iteration.Reduce {\n            items = inputList,\n            initial_value = (call Std_k98ojb.List.Empty().list), \n            handler = func() {\n                in acc property(List) currentAcc\n                in item property(Number) currentItem\n\n                out result property(List) newAcc\n\n                instance contains root.Std_k98ojb.List.Contains {\n                    list = currentAcc,\n                    item = currentItem\n                }\n\n                instance addNode root.Std_k98ojb.List.Add {\n                    list = currentAcc,\n                    item = currentItem\n                }\n\n                \n                instance ifExpr root.Std.IfExpression {\n                    condition = contains.isContained,\n                    then_value = currentAcc,          \n                    else_value = addNode.listWithItem \n                }\n                \n                ifExpr.result \u2192 newAcc.value\n            } \n        })\n\n        \n        instance(productReduce root.Std_k98ojb.Iteration.Reduce {\n            items = uniqueReduce.output_list,\n            initial_value = 1.0,          \n            handler = func() {\n                in acc property(Number) currentAccumulatedProduct\n                in item property(Number) element\n\n                out result property(Number) newAcc\n\n                instance multiply root.Std_k98ojb.Math.Mul {\n                    a = currentAccumulatedProduct,\n                    b = element\n                }\n\n                multiply.result \u2192 newAcc.value\n            }\n        })\n\n        productReduce.output_value \u2192 outputResult\n    }\n\n    \n    instance example root.main.UniqueProduct {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds elements present in only one of the two lists.\") dissimilar_elements {\n        in(x: -320, y: 50, name: \"list1\") property(List) list1_8d4f7e\n        in(x: -309, y: 182, name: \"list2\") property(List) list2_6b8a6c\n\n        out(x: 750, y: 116, name: \"result\") property(List) result_list\n\n        instance(x: 245, y: -30) difference_left root.Std_k98ojb.Sets.Difference {}\n        instance(x: 245, y: 150) difference_right root.Std_k98ojb.Sets.Difference {}\n        instance(x: 500, y: 60) concat_7a3e8f root.Std_k98ojb.List.Concat {}\n\n        list1_8d4f7e -> difference_left.left\n        list2_6b8a6c -> difference_left.right\n\n        list2_6b8a6c -> difference_right.left\n        list1_8d4f7e -> difference_right.right\n\n        difference_left.difference -> concat_7a3e8f.left\n        difference_right.difference -> concat_7a3e8f.right\n\n        concat_7a3e8f.result -> result_list\n    }\n\n    \n\n    instance(x: -200, y: 100) dissimilarelements_5a6c root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list to the right by specified number of items.\") RotateList {\n        in(x: -300, y: 50, name:\"list\") property(List) input_list\n        in(x: -250, y: 100, name:\"rotateBy\") property(Number) rotation_count\n\n        out(x: 400, y: 50, name:\"rotatedList\") property(List) rotated_result\n\n        instance list_length List.Length {\n            input_list -> list\n        }\n\n        \n        instance mod_node Math.Modulo {\n            rotation_count -> value,\n            list_length.length -> divisor\n        }\n\n        \n        instance condition IfExpression {\n            expression: \"list_length.length == 0 || mod_node.result == 0\"\n        }\n\n        \n        instance sub_node Math.Sub {\n            a: list_length.length,\n            b: mod_node.result\n        }\n\n        \n        instance zero Constant(value=0)\n\n        \n        instance slice2 List.Slice {\n            start: sub_node.result,\n            end: list_length.length,\n            list: input_list\n        }\n\n        \n        instance slice1 List.Slice {\n            start: zero.value,\n            end: sub_node.result,\n            list: input_list\n        }\n\n        \n        instance concat_node List.Concat {\n            left: slice2.result,\n            right: slice1.result\n        }\n\n        \n        instance selector Std.If {\n            condition: condition.result,\n            if_true: input_list,\n            if_false: concat_node.output\n        }\n        \n        \n        selector.output -> rotated_result\n    }\n\n    \n    instance(x: 50, y: 20) rotate_inst root.main.RotateList {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the sum of all elements in a list.\") SumArray {\n        in(x: -300, y: 100, name: \"numbers\") property(List) list_input\n        out(x: 600, y: 200, name: \"total\") property(Number) output_sum\n\n        instance reduce_5a3 root.Iteration.Reduce {}\n        \n        \n        instance init_zero root.Math.Constant {\n            value = 0\n        }\n        init_zero.value -> reduce_5a3.initial_value\n        \n        list_input -> reduce_5a3.items\n\n        \n        func() handler {\n            in(x: -400, y: 300, name: \"accumulated\") property(Number) acc\n            in(x: -400, y: 500, name: \"currentItem\") property(Number) curr\n\n            out(x: 200, y: 400, name: \"\") property(Number) result_out\n            \n            instance add_1 root.Math.Add {\n                first: acc,\n                second: curr\n            }\n            \n            add_1.result -> result_out\n        } -> reduce_5a3.handler\n\n        \n        reduce_5a3.reduced_value -> output_sum\n    }\n\n    instance(x: 0, y: 0) sum_node root.main.SumArray {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") IsPrime {\n        in(x: -300, y: 50, name: \"n\") property(Number) n_in\n        out(x: 400, y: 400, name: \"isPrime\") property(Bool) result_out\n\n        \n        instance(x:-250,y:50) check_le1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in <= 1\"\n        }\n        \n        instance(x:-150,y:100) set_result1 root.Std_k98ojb.Setter {\n            property = \"result_out\",\n            value = false\n        }\n\n        check_le1.then -> set_result1.execute\n\n        instance(x:-250,y:200) else_after_le1 root.Std_k98ojb.Trigger\n        \n        check_le1.else -> else_after_le1\n\n        \n        instance(x:-150,y:200) check_eq2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in ==2\"\n        }\n\n        instance(x:-50,y:250) set_true1 root.Setter {\n            property = \"result_out\",\n            value = true\n        }\n        \n        check_eq2.then -> set_true1.execute\n\n        instance(x:-150,y:300) else_after_eq2 root.Trigger\n        \n        check_eq2.else -> else_after_eq2\n\n        \n        instance(x:50,y:250) check_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in % 2 ==0\"\n        }\n        \n        instance(x:150,y:300)set_false2 root.Setter {\n            property = \"result_out\",\n            value = false\n        }\n\n        check_even.then -> set_false2.execute\n\n        \n        instance(x:50,y:400) else_after_even root.Trigger\n        \n        check_even.else -> else_after_even\n\n        \n        instance(x:150,y:350) compute_sqrt root.Std_k98ojb.Math.Pow {\n            x = n_in,\n            y= 0.5\n        }\n        \n        instance(x:200,y:350) floored root.Std_k98ojb.Math.Floor { input = compute_sqrt.result }\n\n        \n        instance(x:250,y:400) generate_list root.Std_k98ojb.List.GenerateRange {\n            from = 3,\n            to = floored.output\n        }\n\n        \n        instance(x:350,y:350) find_divisor root.Std_k98ojb.Iteration.Find {\n            items = generate_list.list,\n\n            handler() {\n                in(x:-100,y:0,name=\"current\") property(Number) current\n\n                out(x:200,y:0,name=\"divisible\") property(Bool) output_out\n                \n                instance(x:50,y:50) modulo root.Std_k98ojb.Math.Modulo {\n                    value = n_in,\n                    divisor = current\n                }\n\n                instance(x:150,y:50) is_zero root.Std_k98ojb.Std.IfExpression {\n                    expression: \"modulo.result == 0\"\n                }\n                \n                is_zero.then -> output_out.setValue(true)\n                is_zero.else -> output_out.setValue(false)\n            }\n        }\n\n        \n        instance(x:450,y:300) check_null root.Std_k98ojb.Std.IfExpression {\n            expression: \"find_divisor.item == null\"\n        }\n\n        instance(x:550,y:250) set_true_final root.Setter { property=\"result_out\", value=true }\n        instance(x:550,y:350)set_false_final root.Setter { property=\"result_out\", value=false }\n\n        check_null.then -> set_true_final.execute\n        check_null.else -> set_false_final.execute\n\n    }\n\n    \n    instance(x:10, y: 10) isprime_node root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs\") OppositeSign {\n        in(x: -281, y: -193, name: \"a\") property(Number) a_in\n        in(x: -272, y: 17, name: \"b\") property(Number) b_in\n        in(x: -450, y: -114, name: \"execute\") trigger() execute_trig\n\n        out(x: 340, y: 77, name: \"result\") property(Bool) result_out\n        out(x: 512, y: -114, name: \"continue\") trigger() continue_trig\n\n        instance expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"gen_0 * gen_1 < 0\"\n        }\n        \n        a_in -> expr_node.gen_0\n        b_in -> expr_node.gen_1\n        \n        execute_trig -> expr_node.execute\n        expr_node.output -> continue_trig\n        expr_node.result -> result_out\n    }\n\n    instance(x: -34, y: 127) opposite_sign_instance root.main.OppositeSign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Check if number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: 69, name: \"number\") property(Number) input_num\n        out(x: 350, y: 180, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 100) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 100) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -30, y: 50) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a substring in a string.\") replace_chars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_str\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_str -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_59bc6e root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a given list.\") ProductOfUniques {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        out(x: 600, y: 100, name: \"product\") property(Number) outputProduct\n\n        instance ListEmpty root.Std_k98ojb.List.Empty {}\n\n        \n        instance ReduceUnique root.Std_k98ojb.Iteration.Reduce {\n            items: inputList\n            initial_value: ListEmpty.list\n            handler: [\n                func() {\n                    in(x: -100, y: 50, name: \"acc\") property(List) accIn\n                    in(x: -90, y: 80, name: \"item\") property(Number) itemIn\n\n                    out(x: 200, y: 60, name: \"\") property(List) newAccOut\n\n                    instance ListContains root.Std_k98ojb.List.Contains {\n                        list: accIn\n                        contains: itemIn\n                    }\n\n                    instance ListAdd root.Std_k98ojb.List.Add {\n                        list: accIn\n                        item: itemIn\n                    }\n\n                    instance IfExpr root.Std_k98ojb.Std.IfExpression {\n                        condition: ListContains.isContained\n                        then_value: accIn\n                        else_value: ListAdd.listWithItem\n                    }\n\n                    IfExpr.result \u2192 newAccOut\n                }\n            ]\n        }\n\n        \n        instance ProductReduce root.Std_k98ojb.Iteration.Reduce {\n            items: ReduceUnique.output_list\n            initial_value: 1.0\n            handler: [\n                func() {\n                    in(x: -50, y: 30, name: \"acc\") property(Number) accIn\n                    in(x: 20, y: 60, name: \"item\") property(Number) itemIn\n\n                    out(x: 150, y: 45, name: \"\") property(Number) newAccOut\n\n                    instance Multiply root.Std_k98ojb.Math.Multiply {\n                        a: accIn\n                        b: itemIn\n                    }\n\n                    Multiply.result \u2192 newAccOut\n                }\n            ]\n        }\n\n        ProductReduce.output \u2192 outputProduct\n    }\n\n    \n    instance product_node root.main.ProductOfUniques {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_3a8d4b\n        in(x: -200, y: 150, name: \"list2\") property(List) list2_7e9f6c\n\n        out(x: 600, y: 100, name: \"result\") property(List) result_8a3d4b\n\n        instance(x: 200, y: 50) differenceAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) differenceBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_7a3d4b root.Std_k98ojb.List.Concat {}\n\n        list1_3a8d4b -> differenceAB.left\n        list2_7e9f6c -> differenceAB.right\n\n        list2_7e9f6c -> differenceBA.left\n        list1_3a8d4b -> differenceBA.right\n\n        differenceAB.difference -> concat_7a3d4b.left\n        differenceBA.difference -> concat_7a3d4b.right\n\n        concat_7a3d4b.result -> result_8a3d4b\n    }\n\n    \n\n    instance(x: -50, y: 100) find_dissimilars_def root.main.find_dissimilars {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotateRight {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        in(x: -180, y: 150, name: \"k\") property(Number) rotationCount\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) outputList\n\n        instance(x: 100, y: 50) lengthNode root.Std_k98ojb.List.Length {}\n        inputList -> lengthNode.list\n        \n        instance(x: 200, y: 100) moduloNode root.Std_k98ojb.Math.Modulo {}\n        rotationCount -> moduloNode.value\n        lengthNode.length -> moduloNode.divisor\n\n        instance(x: 300, y: 50) subNode root.Std_k98ojb.Math.Sub {}\n        lengthNode.length -> subNode.first\n        moduloNode.result -> subNode.second\n        \n        \n        instance(x: 400, y: 50) secondSlice root.Std_k98ojb.List.Slice {}\n        inputList -> secondSlice.list\n        subNode.difference -> secondSlice.startIndex\n        lengthNode.length -> secondSlice.endIndex\n\n        \n        instance(x: 400, y: 150) firstSlice root.Std_k98ojb.List.Slice {}\n        inputList -> firstSlice.list\n        0 -> firstSlice.startIndex\n        subNode.difference -> firstSlice.endIndex\n\n        \n        instance(x: 500, y: 100) concatNode root.Std_k98ojb.List.Concat {}\n        secondSlice.sliceResult -> concatNode.leftList\n        firstSlice.sliceResult -> concatNode.rightList\n        concatNode.concatenatedList -> outputList\n    }\n\n    \n\n    instance(x: -34, y: 127) rotateInstance root.main.rotateRight {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) listInput\n        out(x: 400, y: 50, name: \"total\") property(Number) sumOutput\n\n        instance(x: 150, y: 50) reduce_7a2c3b root.Std_k98ojb.Iteration.Reduce {}\n        listInput -> reduce_7a2c3b.items\n        0 -> reduce_7a2c3b.initialValue\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) accIn\n            in(x: -100, y: 0, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: -25, name: \"\") property(Number) resultOut\n\n            instance(x: 50, y: -25) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            accIn -> add_4a9f1c.first\n            itemIn -> add_4a9f1c.second\n            add_4a9f1c.result -> resultOut\n        } -> reduce_7a2c3b.reducer\n        \n        reduce_7a2c3b.output -> sumOutput\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -281, y: -193, name: \"n\") property(Number) n_in\n        out(x: 460, y: 158, name: \"is_prime\") property(Bool) result_out\n\n        \n        instance(x: 100, y:50) edge_check root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_in < 2\"\n        }\n\n        \n        instance(x: 200, y:50) pow_node root.Std_k98ojb.Math.Pow {\n            x: n_in\n            y: 0.5\n        }\n        \n        instance(x: 300, y:50) floor_sqrt root.Std_k98ojb.Math.Floor {\n            value: pow_node.result\n        }\n\n        \n        instance(x: 400, y:50) generate_list root.Std_k98ojb.List.GenerateRange {\n            from: 2.0\n            to: floor_sqrt.result\n        }\n\n        \n        instance(x: 500, y:100) find_div root.Std_k98ojb.Iteration.Find {\n            items: generate_list.list\n        }\n        \n        \n        func() {\n            in(x:-200,y:0,name:\"current\") property(Number) current_i\n\n            out(x: 300, y:0, name:\"predicate\") property(Bool) pred_out\n\n            instance(x:50,y:0) mod_node root.Std_k98ojb.Math.Modulo {\n                value: n_in\n                divisor: current_i\n            }\n\n            instance(x:150,y:0) eq_zero root.Std_k98ojb.Logic.Equals {\n                a: mod_node.result\n                b: 0.0 \n            }\n            \n            eq_zero.equals \u2192 pred_out\n        } \u2192 find_div.handler\n\n        \n        instance(x:600,y:150) is_null root.Std_k98ojb.Logic.IsNull {\n            value: find_div.result\n        }\n\n        \n        instance(x:700,y:150) final_result root.Std_k98ojb.Std.IfExpression {\n            expression: \"!edge_check.result && is_null.result\"\n        }\n        \n        final_result.result \u2192 result_out\n    }\n\n    \n\n    instance(x: -174, y: -63) IsPrime_d6e930 root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_in\n        in(x: -180, y: 100, name: \"b\") property(Number) b_in\n\n        out(x: 300, y: 75, name: \"result\") property(Bool) result_out\n\n        instance(x: 100, y: 75) multiply root.Std_k98ojb.Math.Mul {}\n        a_in \u2192 multiply.x\n        b_in \u2192 multiply.y\n\n        instance(x: 200, y: 75) greaterThan root.Std_k98ojb.Math.GreaterThan {}\n        0 \u2192 greaterThan.left\n        multiply.result \u2192 greaterThan.right\n\n        greaterThan.result \u2192 result_out\n    }\n\n    \n    instance(x: -50, y: 50) oppositeCheck root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Checks if a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -240, y: 50, name: \"number\") property(Number) input_num\n        out(x: 380, y: 60, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 0) ifexpr_7b root.Std_k98ojb.Std.IfExpression {\n            expression: \"it % 11 == 0\"\n        }\n        \n        input_num -> ifexpr_7b.gen_0\n        ifexpr_7b.value -> output_bool\n    }\n\n    \n\n    instance(x: -34, y: 25) check_node root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another character.\") replaceCharacters {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_char\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_8f3a2b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_8f3a2b.input\n        search_char -> replacer_8f3a2b.search\n        replace_char -> replacer_8f3a2b.replace\n        \n        replacer_8f3a2b.value -> output_str\n    }\n\n    \n\n    instance(x: -100, y: 50) replace_func root.main.replaceCharacters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerCase {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 80, name: \"output\") property(String) output_str\n\n        instance(x: 150, y: 60) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 20) tolower_flow root.main.ToLowerCase {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n\n    func(doc: \"Calculates the product of unique numbers in a list.\") UniqueProduct {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        out(x: 400, y: 100, name: \"result\") property(Number) result\n\n        \n        instance filter_unique root.Std_k98ojb.Iteration.Filter {\n            list: inputList\n        }\n\n        \n        func() {\n            in(x: -200, y: 0, name: \"current\") property(Number) current\n            out(x: 300, y: 50, name: \"keep\") property(Bool)\n\n            \n            instance ListFilter root.Std_k98ojb.Iteration.Filter {\n                where: \"it == $current\"\n            }\n            inputList -> ListFilter.list\n\n            \n            instance LengthNode root.Std_k98ojb.List.Length {}\n            ListFilter.result -> LengthNode.list\n\n            \n            instance EqualNode root.Std_k98ojb.Logic.Equal { value0: 1 }\n            LengthNode.length -> EqualNode.value1\n            EqualNode.result -> keep\n        } -> filter_unique.handler\n\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            initial_value: 1.0\n            items: filter_unique.output_list\n        }\n\n        \n        func() { \n            in(x: -200, y: 0, name: \"acc\") property(Number) acc\n            in(x: 50, y: 0, name: \"current\") property(Number) current\n\n            out(x: 300, y: 0, name: \"product\") property(Number)\n\n            instance Multiply root.Std_k98ojb.Math.Multiply {}\n            acc -> Multiply.x\n            current -> Multiply.y\n            Multiply.result -> product\n        } -> reduce_product.handler\n\n        \n        reduce_product.result -> result\n    }\n\n    \n    instance(x: 0, y: 0) UniqueProduct_Inst root.main.UniqueProduct {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") dissimilar_elements {\n        in(x: -250, y: 100, name: \"listA\") property(List) list_a\n        in(x: -250, y: 200, name: \"listB\") property(List) list_b\n\n        out(x: 600, y: 150, name: \"result\") property(List) result_list\n\n        instance(x: 100, y: 100) diff_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 200) diff_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 150) concat_7c3d root.Std_k98ojb.List.Concat {}\n\n        list_a -> diff_ab.left\n        list_b -> diff_ab.right\n\n        list_b -> diff_ba.left\n        list_a -> diff_ba.right\n\n        diff_ab.difference -> concat_7c3d.left\n        diff_ba.difference -> concat_7c3d.right\n\n        concat_7c3d.result -> result_list\n    }\n\n    \n\n    instance(x: -100, y: 150) dissimilar_node root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n\n    func(doc:\"Rotates the given list to the right by k steps.\") rotateRight {\n        in(x: -200, y: 100, name: \"list\") property(List) input_list\n        in(x: -250, y: 150, name: \"k\") property(Number) shift_k\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) output_list\n\n        \n        instance len_node Std.List.Length {}\n        input_list -> len_node.list\n\n        \n        instance modulo_node Std.Math.Modulo {}\n        shift_k -> modulo_node.value\n        len_node.length -> modulo_node.divisor  \n\n        \n        instance sub_node Std.Math.Sub {}\n        len_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        \n        instance slice_first_part Std.List.Slice {}\n        input_list -> slice_first_part.list\n        0 -> slice_first_part.start\n        sub_node.result -> slice_first_part.end\n\n        \n        instance slice_second_part Std.List.Slice {}\n        input_list -> slice_second_part.list\n        sub_node.result -> slice_second_part.start\n        -1 -> slice_second_part.end  \n\n        \n        instance concat_node Std.List.Concat {}\n        slice_second_part.output -> concat_node.left\n        slice_first_part.output -> concat_node.right\n\n        \n        instance final_choice Std.IfExpression {\n            expression: \"gen0 == 0 ? gen1 : gen2\"\n        }\n        len_node.length -> final_choice.gen0\n        input_list -> final_choice.gen1   \n        concat_node.output -> final_choice.gen2\n\n        \n        final_choice.result -> output_list\n    }\n\n}\n\n\ninstance(x: 100, y: 50) rotate_instance main.rotateRight {}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -240, y: 100, name: \"numbers\") property(List) list_input\n        out(x: 580, y: 100, name: \"total\") property(Number) output_total\n\n        instance(x: 300, y: 100) reduce_6d2a3b root.Std_k98ojb.Iteration.Reduce {}\n        \n        \n        func() {\n            in(x: -200, y: -50, name: \"accumulated\") property(Number) acc\n            in(x: -180, y: 50, name: \"current\") property(Number) curr\n\n            out(x: 200, y: 0, name: \"\") property(Number) result_out\n\n            instance(x: 70, y: 0) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            \n            acc -> add_4a9f1c.first\n            curr -> add_4a9f1c.second\n            add_4a9f1c.result -> result_out\n        } -> reduce_6d2a3b.reducer\n\n        list_input -> reduce_6d2a3b.items\n        0 -> reduce_6d2a3b.initial_value\n        \n        reduce_6d2a3b.output_value -> output_total\n    }\n\n    \n\n    instance(x: -97, y: -68) array_sum_49c6ac root.main.array_sum {}\n}"
            ],
            "48": [
                "module() main {\n    func(doc: \"Checks if input integer is a prime number.\") IsPrime {\n        in(x: -200, y: 50, name: \"number\") property(Number) n\n        out(x: 400, y: 100, name: \"isPrime\") property(Bool)\n\n        \n        instance initialSetter root.SetProperty<Bool> {\n            value: true\n        }\n        \n        getterIsPrime root.GetProperty<Bool>\n\n        \n        instance edgeCheckLTEQ root.Std_k98ojb.Math.LessThanOrEqual {}\n        n -> edgeCheckLTEQ.left\n        1 -> edgeCheckLTEQ.right\n\n        instance ifEdgeCase root.Std_k98ojb.Std.If {}\n        edgeCheckLTEQ.result \u2192 ifEdgeCase.predicate\n\n        \n        instance setterFalse root.SetProperty<Bool> {\n            value: false\n        }\n\n        ifEdgeCase.then \u2192 trigger setterFalse.execute\n\n        \n        instance sqrtCalculation root.Std_k98ojb.Math.Pow {}\n        n -> sqrtCalculation.x\n        0.5 -> sqrtCalculation.y\n\n        instance floorSqrt root.Std_k98ojb.Math.Floor {}\n        sqrtCalculation.result \u2192 floorSqrt.value\n\n        \n        instance generateRange root.Std_k98ojb.List.GenerateRange {}\n        2 \u2192 generateRange.from\n        floorSqrt.result \u2192 generateRange.to\n\n        \n        instance findDivisor root.Std_k98ojb.Iteration.Find {\n            handler: func() {\n                in(name:\"item\") property(Number) item\n                in(name:\"context\") property(Number) n_context\n                \n                out(name:\"result\") property(Bool)\n\n                \n                instance modulo root.Std_k98ojb.Math.Modulo {}\n                n_context \u2192 modulo.value\n                item \u2192 modulo.divisor\n\n                result = (modulo.result == 0)\n            },\n            context: n\n        }\n\n        generateRange.list \u2192 findDivisor.items\n\n        \n        instance ifFound root.Std_k98ojb.Std.If {}\n        findDivisor.found \u2192 ifFound.predicate\n        ifFound.then \u2192 trigger setterFalse.execute\n\n        \n        getterIsPrime.value \u2192 isPrime\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check whether two integers have opposite signs\") OppositeSignChecker {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_input\n        in(x: -180, y: 100, name: \"b\") property(Number) b_input\n\n        out(x: 300, y: 75, name: \"hasOppositeSigns\") property(Bool) result_output\n\n        instance check_signs root.Std_k98ojb.Math.Expression {\n            expression: \"(gen_0 * gen_1) < 0\"\n        }\n        \n        a_input -> check_signs.gen_0\n        b_input -> check_signs.gen_1\n        check_signs.result -> result_output\n    }\n\n    instance opposite_sign_check root.main.OppositeSignChecker {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11.\") CheckDivisibleByEleven {\n        in(x: -200, y: 100, name: \"number\") property(Number) input_num\n        out(x: 450, y: 60, name: \"result\") property(Bool) output_result\n\n        instance(x: 100, y: 80) check_expression root.Std_k98ojb.Math.Expression {\n            expression: \"n % 11 == 0\"\n        }\n        input_num -> check_expression.n\n        check_expression.result -> output_result\n    }\n\n    \n\n    instance(x: -150, y: 30) divisible_11_node root.main.CheckDivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replace characters in a string\") ReplaceChars {\n        in(x: -240, y: 50, name: \"inputStr\") property(String) input_str\n        in(x: -230, y: 100, name: \"searchChar\") property(String) search_char\n        in(x: -220, y: 150, name: \"replaceWith\") property(String) replace_with\n\n        out(x: 400, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 300, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_str -> replacer_7b3b7b.input\n        search_char -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -10, y: 50) replace_func root.main.ReplaceChars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) to_lower_node root.main.ToLowerCase {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a list using 1-based indexing.\") UniqueProduct {\n        in(x: -400, y:50 name=\"list\") property(List) input_list\n        in(x:-390,y:-100 name=\"execute\") trigger() execute_trig\n\n        out(x: 500,y:200 name=\"product\") property(Number) result_out\n        \n        \n        instance empty_node Std_k98ojb.List.Empty {}\n        \n        setter(x:-170,y:40 name=\"setter_unique\") current_list_state \n        getter(x: -160, y:50 name=\"getter_unique\") current_list_state\n\n        \n        empty_node.list --> setter_unique.new_value \n        execute_trig --> setter_unique.execute \n\n        \n        instance for_loop Std_k98ojb.Std.For {}\n        \n        input_list --> for_loop.items\n        execute_trig --> for_loop.reset\n\n        \n        instance contains_node Std_k98ojb.List.Contains {}\n        \n        getter_unique.value --> contains_node.list \n        for_loop.current --> contains_node.input \n\n        instance check_cond Std_k98ojb.Std.IfExpression {\n            expression: \"isContained == false\" \n        }\n        contains_node.isContained --> check_cond.gen_0\n\n        \n        instance add_node Std_k98ojb.List.Add {}\n        \n        getter_unique.value --> add_node.list \n        for_loop.current --> add_node.element \n\n        \n        check_cond.then --> setter_unique.execute \n        add_node.outputList --> setter_unique.new_value \n\n        \n        instance reduce_node Std_k98ojb.Iteration.Reduce {}\n        \n        getter_unique.value --> reduce_node.items\n        \n        \n        func() {\n            in(x:-30,y:5 name=\"acc\") property(Number) accumulator \n            in(name=\"val\", ...) property(Number) value\n            \n            instance multiply Std_k98ojb.Math.Multiply {}\n            \n            accumulator --> multiply.x\n            value --> multiply.y \n            multiply.result --> .output \n        } --> reduce_node.handler \n\n        \n        instance initial_val Std_k98ojb.Literal.Number {value: 1}\n        initial_val.value --> reduce_node.initial\n\n        \n        for_loop.done --> reduce_node.execute \n\n        \n        reduce_node.result --> result_out \n    }\n\n    instance unique_prod Calc.main.UniqueProduct {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar_elements {\n        in(x: -240, y: 150, name: \"listA\") property(List) list_a\n        in(x: -230, y: 290, name: \"listB\") property(List) list_b\n\n        out(x: 680, y: 220, name: \"result\") property(List) result_list\n\n        instance(x: 150, y: 140) difference_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 300) difference_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 420, y: 220) concatenate root.Std_k98ojb.List.Concat {}\n\n        list_a -> difference_ab.left\n        list_b -> difference_ab.right\n        list_b -> difference_ba.left\n        list_a -> difference_ba.right\n\n        difference_ab.difference -> concatenate.left\n        difference_ba.difference -> concatenate.right\n        concatenate.result -> result_list\n    }\n\n    \n\n    instance(x: -90, y: 200) dissimilar_finder root.main.find_dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc:\"Rotates a given list to the right by specified number of items.\") RotateRight {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        in(x: -180, y: 130, name: \"rotations\") property(Number) k\n\n        out(x: 470, y: 75, name: \"result\") property(List) rotatedList\n        \n        \n        instance(x: 50, y: 50) ll root.Std_k98ojb.List.Length {}\n        inputList -> ll.list\n\n        \n        instance(x: 130, y: 75) modulo root.Std_k98ojb.Math.Modulo {}\n        k -> modulo.value\n        ll.length -> modulo.divisor\n\n        \n        instance(x: 200, y: 50) sub_split root.Std_k98ojb.Math.Sub {}\n        ll.length -> sub_split.minuend\n        modulo.result -> sub_split.subtrahend\n        \n        \n        instance(x: 300, y: 40) leftSlice root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        inputList -> leftSlice.list\n        sub_split.result -> leftSlice.end\n\n        \n        instance(x: 380, y: 60) rightSlice root.Std_k98ojb.List.Slice {}\n        inputList -> rightSlice.list\n        sub_split.result -> rightSlice.start\n        ll.length -> rightSlice.end\n\n        \n        instance(x: 460, y: 50) concat root.Std_k98ojb.List.Concat {}\n        rightSlice.sliced -> concat.left\n        leftSlice.sliced -> concat.right\n        \n        concat.concatenatedList -> rotatedList\n    }\n    \n    \n    instance(x: -50, y: 200) rotateNode root.main.RotateRight {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") ArraySum {\n        in(x: -240, y: 50, name: \"array\") property(List) list_in\n        out(x: 380, y: 50, name: \"total\") property(Number) total_out\n\n        instance(x: 150, y: 50) reduce_node root.Std_k98ojb.Iteration.Reduce {}\n        \n        \n        0 -> reduce_node.initial\n        \n        list_in -> reduce_node.items\n        \n        \n        func() {\n            in(x: -100, y: -20, name: \"acc\") property(Number) acc_val\n            in(x: -100, y: 30, name: \"item\") property(Number) item_val\n\n            out(x: 100, y: 5, name: \"sum\") property(Number) result\n            \n            instance(x: 20, y: 0) adder root.Std_k98ojb.Math.Add {}\n            \n            acc_val -> adder.first\n            item_val -> adder.second\n            adder.result -> result\n        } -> reduce_node.handler\n        \n        \n        reduce_node.output -> total_out\n    }\n\n    \n\n    instance(x: -34, y: 127) sum_instance root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", HttpQ)\n\nmodule() main {\n    func(doc: \"Check if a number is prime\") IsPrime {\n        in(x: 10, y: 10, name=\"number\") property(Number) n_input\n        out(x: 500, y: 300, name=\"is_prime\") property(Bool) res_out\n\n        \n        instance edge_lt2 LessThanOrEqual root.Std_k98ojb.Logic.LessThanOrEqual {\n            a = n_input,\n            b = 1.0\n        }\n\n        \n        pow_half Math.Pow { x = n_input, y = 0.5 }\n        floor_node FloorNode { number = pow_half.result } \n\n        genRange List.GenerateRange { from=2, to=floor_node.output }\n\n        \n        setter_n Setter {\n            name: \"currentN\",\n            new_value = n_input\n        }\n        \n        getter_n Getter {\n            name: \"currentN\"\n        }\n\n        \n        filter_divs Iteration.Filter { items=genRange.list }\n\n        func handler() { \n            in(\"item\", Number) item_val\n\n            out(\"pred_out\", Bool) predicate_result\n\n            modulo ModuloNode {\n                value = getter_n.value,\n                divisor = item_val\n            }\n            \n            zeroCheck EqZeroNode { input = modulo.result }\n\n            zeroCheck.output \u2192 predicate_result\n        } \u2192 filter_divs.handler \n\n        \n        len_node List.Length { list=filter_divs.result }\n        \n        hasDivisors GTNode root.Std_k98ojb.Logic.GreaterThan {\n            a = len_node.length,\n            b = 0.0\n        }\n\n        \n        notEdge root.Std_k98ojb.Logic.Not { input=edge_lt2.output }\n        \n        notHasDivs NotNode root.Std_k98ojb.Logic.Not {\n            input = hasDivisors.output\n        }\n\n        andResult AndNode root.Std_k98ojb.Logic.And {\n            left = notEdge.output,\n            right = notHasDivs.output\n        }\n\n        andResult.output \u2192 res_out\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") opposite_signs {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_input\n        in(x: -180, y: 70, name: \"b\") property(Number) b_input\n        in(x: -300, y: 0, name: \"execute\") trigger() execute_in\n\n        out(x: 200, y: 50, name: \"result\") property(Bool) result_out\n        out(x: 400, y: 0, name: \"continue\") trigger() continue_out\n\n        instance(x: 100, y: 100) expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"gen_0 * gen_1 < 0\"\n        }\n\n        a_input -> expr_node.gen_0\n        b_input -> expr_node.gen_1\n\n        execute_in -> expr_node.execute\n        expr_node.result -> result_out\n        expr_node.done -> continue_out\n    }\n\n    instance(x: 0, y: 0) opposite_signs_inst root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Check if number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: 69, name: \"number\") property(Number) input_num\n        out(x: 350, y: 180, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 100) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 100) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -30, y: 50) check_div root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a substring in a string.\") replace_chars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_str\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_with\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_str -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) replace_func root.main.replace_chars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_59bc6e root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a list.\") UniqueProduct {\n        in(x: -200, y: 50, name: \"inputList\") property(List) inputList\n        out(x: 400, y: 100, name: \"product\") property(Number) product_out\n\n        \n        instance empty_0 root.Std_k98ojb.List.Empty {}\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: inputList\n            initial_value: empty_0.list\n            handler:\n                func() {\n                    in(x: -100, y: 0, name: \"acc\") property(List) acc_in\n                    in(x: -100, y: 50, name: \"item\") property(Number) item_in\n\n                    out(x: 200, y: 0, name: \"\") property(List) newAcc_out\n\n                    instance contains_0 root.Std_k98ojb.List.Contains {\n                        list: acc_in\n                        contains: item_in\n                    }\n\n                    instance if_0 root.Std_k98ojb.Std.If {\n                        predicate: contains_0.isContained\n                    }\n\n                    \n                    instance setThen root.Std_k98ojb.Setter<List> {\n                        value: acc_in\n                    }\n                    if_0.then \u2192 setThen.execute\n\n                    \n                    instance addNode root.Std_k98ojb.List.Add {\n                        list: acc_in\n                        item: item_in\n                    }\n\n                    instance setElse root.Std_k98ojb.Setter<List> {\n                        value: addNode.listWithItem\n                    }\n                    if_0.else \u2192 setElse.execute\n\n                    \n                    setThen.value \u2192 newAcc_out\n                    setElse.value \u2192 newAcc_out\n                }\n        }\n\n        \n        instance initial_one root.Std_k98ojb.Number { value: 1.0 } \n\n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.output_list\n            initial_value: initial_one.value\n\n            handler:\n                func() {\n                    in(x: -50, y: 0, name: \"acc\") property(Number) acc_in\n                    in(x: -50, y: 50, name: \"item\") property(Number) item_in\n\n                    out(x: 150, y: 0, name: \"\") property(Number) newAcc_out\n\n                    instance multiply_0 root.Std_k98ojb.Math.Multiply {\n                        a: acc_in\n                        b: item_in\n                    }\n                    multiply_0.result \u2192 newAcc_out\n                }\n        }\n\n        \n        reduce_product.result \u2192 product_out\n    }\n\n    instance(x: 0, y: 0) uniqueProduct_node root.main.UniqueProduct {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -200, y: 50, name: \"list1\") property(List) list1_3a8d4b\n        in(x: -200, y: 150, name: \"list2\") property(List) list2_7e9f6c\n\n        out(x: 600, y: 100, name: \"result\") property(List) result_8a3d4b\n\n        instance(x: 200, y: 50) differenceAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) differenceBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_7a3d4b root.Std_k98ojb.List.Concat {}\n\n        list1_3a8d4b -> differenceAB.left\n        list2_7e9f6c -> differenceAB.right\n\n        list2_7e9f6c -> differenceBA.left\n        list1_3a8d4b -> differenceBA.right\n\n        differenceAB.difference -> concat_7a3d4b.left\n        differenceBA.difference -> concat_7a3d4b.right\n\n        concat_7a3d4b.result -> result_8a3d4b\n    }\n\n    \n\n    instance(x: -50, y: 100) find_dissimilars_def root.main.find_dissimilars {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotateRight {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        in(x: -180, y: 150, name: \"k\") property(Number) rotationCount\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) outputList\n\n        instance(x: 100, y: 50) lengthNode root.Std_k98ojb.List.Length {}\n        inputList -> lengthNode.list\n        \n        instance(x: 200, y: 100) moduloNode root.Std_k98ojb.Math.Modulo {}\n        rotationCount -> moduloNode.value\n        lengthNode.length -> moduloNode.divisor\n\n        instance(x: 300, y: 50) subNode root.Std_k98ojb.Math.Sub {}\n        lengthNode.length -> subNode.first\n        moduloNode.result -> subNode.second\n        \n        \n        instance(x: 400, y: 50) secondSlice root.Std_k98ojb.List.Slice {}\n        inputList -> secondSlice.list\n        subNode.difference -> secondSlice.startIndex\n        lengthNode.length -> secondSlice.endIndex\n\n        \n        instance(x: 400, y: 150) firstSlice root.Std_k98ojb.List.Slice {}\n        inputList -> firstSlice.list\n        0 -> firstSlice.startIndex\n        subNode.difference -> firstSlice.endIndex\n\n        \n        instance(x: 500, y: 100) concatNode root.Std_k98ojb.List.Concat {}\n        secondSlice.sliceResult -> concatNode.leftList\n        firstSlice.sliceResult -> concatNode.rightList\n        concatNode.concatenatedList -> outputList\n    }\n\n    \n\n    instance(x: -34, y: 127) rotateInstance root.main.rotateRight {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") ArraySum {\n        in(x: -200, y: 50, name: \"numbers\") property(List) listInput\n        out(x: 400, y: 50, name: \"total\") property(Number) sumOutput\n\n        instance(x: 150, y: 50) reduce_7a2c3b root.Std_k98ojb.Iteration.Reduce {}\n        listInput -> reduce_7a2c3b.items\n        0 -> reduce_7a2c3b.initialValue\n        \n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) accIn\n            in(x: -100, y: 0, name: \"item\") property(Number) itemIn\n\n            out(x: 200, y: -25, name: \"\") property(Number) resultOut\n\n            instance(x: 50, y: -25) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            accIn -> add_4a9f1c.first\n            itemIn -> add_4a9f1c.second\n            add_4a9f1c.result -> resultOut\n        } -> reduce_7a2c3b.reducer\n        \n        reduce_7a2c3b.output -> sumOutput\n    }\n\n    \n\n    instance(x: -50, y: 0) array_sum_inst root.main.ArraySum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks if a number is prime\") IsPrime {\n        in(x: -200, y: 100, name: \"n\") property(Number) input_n\n        in(x: -300, y: 50, name: \"execute\") trigger() execute_trig\n\n        out(x: 400, y: 200, name: \"isPrime\") property(Bool) output_bool\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_out\n\n        \n        instance(x: -100, y: 0) if_edge root.Std.IfExpression {\n            expression: \"input_n < 2\"\n        }\n\n        execute_trig -> if_edge.execute\n\n        \n        setter(x: 300, y: 50, name: \"setter_false\") setter_1 = output_bool\n        literal(value: false) -> setter_1.new_value\n        if_edge.then -> setter_1.execute\n        setter_1.continue -> continue_out\n\n        \n        instance(x: 0, y: 200) pow_node root.Std.Math.Pow {\n            x = input_n,\n            y = 0.5\n        }\n\n        instance(x: 100, y: 200) floor_node root.Std.Math.Floor {\n            value = pow_node.result\n        }\n\n        \n        instance(x: 200, y: 200) gen_range root.Std.List.GenerateRange {\n            from = 2,\n            to = floor_node.floorResult\n        }\n\n        \n        instance(x: 300, y: 200) find_divisor root.Std.Iteration.Find {\n            items = gen_range.list\n        }\n        \n        \n        func() {\n            in(x: -100, y: 0, name: \"current\") property(Number) current_i\n\n            out(x: 100, y: 0, name: \"\") property(Bool) predicate_out\n\n            instance(x: 0, y: 20) modulo_node root.Std.Math.Modulo {\n                value = input_n,\n                divisor = current_i\n            }\n\n            instance(x: 50, y: 20) eq_zero root.Std.Logic.Equals {\n                a = modulo_node.result,\n                b = 0\n            }\n            \n            eq_zero.equals -> predicate_out\n        } -> find_divisor.handler\n\n        \n        instance(x: 400, y: 200) is_null root.Std.Logic.IsNull {\n            value = find_divisor.item\n        }\n\n        \n        instance(x: 500, y: 200) if_final root.Std.If {\n            condition = is_null.isNull\n        }\n\n        literal(value: true) -> if_final.thenValue\n        literal(value: false) -> if_final.elseValue\n\n        \n        if_edge.else -> pow_node.execute\n        find_divisor.done -> is_null.valueIn\n        is_null.output -> if_final.condition\n\n        \n        if_final.output -> output_bool\n        if_final.continue -> continue_out\n    }\n\n    \n\n    instance(x: -97, y: -68) IsPrime_1 root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") OppositeSigns {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_input\n        in(x: -180, y: 100, name: \"b\") property(Number) b_input\n\n        out(x: 300, y: 75, name: \"result\") property(Bool) result_output\n\n        instance(x: 100, y: 50) check_sign root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        a_input -> check_sign.gen_0\n        b_input -> check_sign.gen_1\n        check_sign.value -> result_output\n    }\n\n    \n\n    instance(x: -50, y: 25) opposite_signs_node root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Checks if a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -240, y: 50, name: \"number\") property(Number) input_num\n        out(x: 380, y: 60, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 0) ifexpr_7b root.Std_k98ojb.Std.IfExpression {\n            expression: \"it % 11 == 0\"\n        }\n        \n        input_num -> ifexpr_7b.gen_0\n        ifexpr_7b.value -> output_bool\n    }\n\n    \n\n    instance(x: -34, y: 25) check_node root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replaces all occurrences of a character in a string with another character.\") replaceCharacters {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_char\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"result\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer_8f3a2b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_8f3a2b.input\n        search_char -> replacer_8f3a2b.search\n        replace_char -> replacer_8f3a2b.replace\n        \n        replacer_8f3a2b.value -> output_str\n    }\n\n    \n\n    instance(x: -100, y: 50) replace_func root.main.replaceCharacters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerCase {\n        in(x: -200, y: 50, name: \"input\") property(String) input_str\n        out(x: 300, y: 80, name: \"output\") property(String) output_str\n\n        instance(x: 150, y: 60) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 20) tolower_flow root.main.ToLowerCase {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") UniqueProduct {\n        in(x: -200, y: 100) property(List) input_list\n        out(x: 400, y: 300) property(Number) result\n\n        \n        instance filter_unique root.Std_k98ojb.Iteration.Filter {\n            items = input_list\n            context = input_list\n            handler:\n                func() {\n                    in item as current_element\n                    context as original_list\n                    \n                    filtered_without_x = List.Filter(original_list, \"it != current_element\")\n                    \n                    orig_len = List.Length(original_list)\n                    filtered_len = List.Length(filtered_without_x)\n                    \n                    count_removed = Math.Subtract(orig_len, filtered_len)\n                    \n                    return Math.CompareEqual(count_removed, 1) \u2192 returns true if unique\n                }\n        }\n\n        \n        instance init_product root.Std_k98ojb.Setter {\n            name: \"product\"\n            new_value = 1.0\n        }\n\n        \n        instance process_elements root.Std_k98ojb.Iteration.Map {\n            items = filter_unique.result\n            \n            handler:\n                func() {\n                    in x\n                    \n                    \n                    getter_product = Getter.value(\"product\")\n                    \n                    new_prod = Math.Multiply(getter_product, x)\n                    \n                    \n                    Setter.set(new_prod, \"product\")\n                }\n        }\n\n        \n        instance get_result root.Std_k98ojb.Getter {\n            name: \"product\"\n        }\n        \n        get_result.value \u2192 result\n\n        \n        init_product.execute \u2192 process_elements.start\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds elements present in either list but not both.\") dissimilar_elements {\n        in(x: -300, y: 50, name: \"list1\") property(List) list1_in\n        in(x: -300, y: 200, name: \"list2\") property(List) list2_in\n\n        out(x: 600, y: 125, name: \"result\") property(List) result_out\n\n        instance(x: 150, y: 50) difference_AB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 200) difference_BA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 450, y: 125) concat_6d3e4a root.Std_k98ojb.List.Concat {}\n\n        list1_in -> difference_AB.left\n        list2_in -> difference_AB.right\n\n        list2_in -> difference_BA.left\n        list1_in -> difference_BA.right\n\n        difference_AB.difference -> concat_6d3e4a.left\n        difference_BA.difference -> concat_6d3e4a.right\n\n        concat_6d3e4a.result -> result_out\n    }\n\n    \n\n    instance(x: -50, y: 125) dissimilar_elements_foo root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of steps.\") rotate_list {\n        in(x: -300, y: 100, name: \"list\") property(List) inputList\n        in(x: -290, y: 200, name: \"rotation\") property(Number) rotationNum\n\n        out(x: 800, y: 150, name: \"rotatedList\") property(List) outputList\n\n        \n        instance(len_node List.Length { \n            list: inputList \n        })\n\n        \n        instance(modulo_node Math.Modulo {\n            value: rotationNum,\n            divisor: len_node.length\n        })\n        \n        \n        instance(zero_constant Math.NumberLiteral { value: 0 })\n        instance(equal_node Logic.Equal {\n            left: modulo_node.result,\n            right: zero_constant.value\n        })\n\n        \n        instance(if_node Std.If {\n            condition: equal_node.equal,\n\n            then: { \n                outputList = inputList; \n            },\n            \n            else: {\n                \n                instance(sub_node Math.Sub {\n                    first: len_node.length,\n                    second: modulo_node.result\n                })\n\n                \n                instance(partA_slice List.Slice {\n                    list: inputList,\n                    start: sub_node.result,\n                    end: len_node.length\n                })\n                \n                instance(partB_slice List.Slice {\n                    list: inputList,\n                    start: zero_constant.value, \n                    end: sub_node.result\n                })\n\n                instance(concat_node List.Concat {\n                    left: partA_slice.sliceResult,\n                    right: partB_slice.sliceResult\n                })\n                \n                outputList = concat_node.list;\n            }\n        })\n    }\n\n    \n    instance(rotate_instance rotate_list { } )\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -240, y: 100, name: \"numbers\") property(List) list_input\n        out(x: 580, y: 100, name: \"total\") property(Number) output_total\n\n        instance(x: 300, y: 100) reduce_6d2a3b root.Std_k98ojb.Iteration.Reduce {}\n        \n        \n        func() {\n            in(x: -200, y: -50, name: \"accumulated\") property(Number) acc\n            in(x: -180, y: 50, name: \"current\") property(Number) curr\n\n            out(x: 200, y: 0, name: \"\") property(Number) result_out\n\n            instance(x: 70, y: 0) add_4a9f1c root.Std_k98ojb.Math.Add {}\n            \n            acc -> add_4a9f1c.first\n            curr -> add_4a9f1c.second\n            add_4a9f1c.result -> result_out\n        } -> reduce_6d2a3b.reducer\n\n        list_input -> reduce_6d2a3b.items\n        0 -> reduce_6d2a3b.initial_value\n        \n        reduce_6d2a3b.output_value -> output_total\n    }\n\n    \n\n    instance(x: -97, y: -68) array_sum_49c6ac root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if input number is a prime\") IsPrime {\n        in(x: -240, y: 50, name: \"number\") property(Number) input_number\n        out(x: 300, y: 150, name: \"is_prime\") property(Bool) output_result\n\n        \n        instance less_than_or_equal root.Std_k98ojb.Math.LessThanOrEqual {}\n        input_number -> less_than_or_equal.left\n        1 -> less_than_or_equal.right\n\n        instance first_if root.Std_k98ojb.Std.If {}\n        less_than_or_equal.result -> first_if.predicate\n\n        \n        first_if.thenBranch \u2192 value: false \u2192 output_result\n\n        \n        instance pow_half root.Std_k98ojb.Math.Pow {}\n        input_number -> pow_half.x\n        0.5 -> pow_half.y\n\n        instance floor_sqrt root.Std_k98ojb.Math.Floor {}\n        pow_half.result \u2192 floor_sqrt.value\n\n        \n        instance gen_range root.Std_k98ojb.List.GenerateRange {}\n        2 \u2192 gen_range.from\n        floor_sqrt.result \u2192 gen_range.to\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {}\n\n        gen_range.list \u2192 find_divisor.items\n        input_number \u2192 find_divisor.context  \n\n        \n        func() {\n            in(x: -200, y: -50, name: \"item\") property(Number) current_d\n            in(x: -180, y: -30, name: \"context\") property(Number) n\n\n            instance modulo_node root.Std_k98ojb.Math.Modulo {}\n            n \u2192 modulo_node.value\n            current_d \u2192 modulo_node.divisor\n\n            \n            instance check_zero root.Std_k98ojb.Std.IfExpression {\n                expression: \"mod == 0\"\n            }\n            modulo_node.result \u2192 check_zero.mod\n            check_zero.then = true\n            check_zero.else = false\n            check_zero.output \u2192 output.bool_out\n        } -> find_divisor.handler\n\n        \n        instance is_null root.Std_k98ojb.Std.IfExpression {\n            expression: \"item == null\"\n        }\n        find_divisor.item \u2192 is_null.item\n        is_null.output \u2192 output_result  \n    }\n\n    instance(x: -10, y: 50) prime_checker root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 10855,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks whether two integers have opposite signs.\") opposite_signs {\n        in(x: -300, y: 100, name: \"a\") property(Number) a_in\n        in(x: -250, y: 100, name: \"b\") property(Number) b_in\n\n        out(x: 400, y: 200, name: \"result\") property(Bool) result_out\n\n        instance(x: 100, y: 50) condition root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        \n        a_in -> condition.gen_0\n        b_in -> condition.gen_1\n        condition.result -> result_out\n    }\n\n    \n\n    instance(x: -174, y: -63) check_opposite root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether a number is divisible by 11\") is_divisible {\n        in(x: -340, y: 20, name: \"number\") property(Number) num_in\n        out(x: 380, y: 20, name: \"result\") property(Bool) result_out\n\n        instance(x: 75, y: 60) modulo_9f4a1e root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 230, y: 60) equal_4c5d5e root.Std_k98ojb.Logic.Equal {}\n        \n        num_in -> modulo_9f4a1e.value\n        modulo_9f4a1e.result -> equal_4c5d5e.left\n        0 -> equal_4c5d5e.right\n        equal_4c5d5e.result -> result_out\n    }\n\n    \n\n    instance(x: -20, y: -34) is_divisible_def root.main.is_divisible {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Replace characters in a string.\") ReplaceChars {\n        in(x: -300, y: 50, name: \"input\") property(String) input_str\n        in(x: -280, y: 100, name: \"search\") property(String) search_char\n        in(x: -270, y: 150, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 100) replacer root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer.input\n        search_char -> replacer.search\n        replace_char -> replacer.replace\n        replacer.output -> output_str\n    }\n\n    \n\n    instance(x: -50, y: 50) ReplaceInstance root.main.ReplaceChars {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert a given string to lowercase.\") ToLower {\n        in(x: -531, y: 2, name: \"input\") property(String) input_ai\n        out(x: 340, y: 77, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) tolower_node root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc:\"Calculates product of unique numbers in list\") UniqueProduct {\n        in(x: -350, y: 40, name: \"inputList\") property(List) inputList_7f8a\n        out(x: 380, y: 200, name: \"product\") property(Number) product_ai\n\n        instance lengthNode(Std.List.Length) {\n            list \u2192 inputList_7f8a \n        }\n\n        \n        startVal = 0.0\n        countVal \u2190 lengthNode.length  \n        generateIndices(List.GenerateRange) { \n            start: startVal, \n            count: countVal \n        }\n\n        instance filterIndices(Iteration.Filter) {\n            items \u2192 generateIndices.range\n\n            handler Func() { \n                in(x:-120,y:0,name:\"index\") property(Number) idx_7a  \n                \n                \n                instance getElement(List.GetAt) {\n                    list: inputList_7f8a,\n                    index: idx_7a  \n                }\n\n                \n                endSlice = idx_7a  \n                prevList(List.Slice) { \n                    list: inputList_7f8a, \n                    start_index: 0.0, \n                    end_index: endSlice  \n                }\n\n                instance checkContains(List.Contains) {\n                    value \u2192 getElement.itemAtIndex,\n                    list \u2190 prevList.output\n                }\n                \n                \n                instance invert(Std.IfExpression) {\n                    expression: \"a == false\",\n                    a \u2192 checkContains.isFound \n                }\n                out \u2192 invert.result  \n            }\n        }\n\n        \n        mapUniqueElements(Iteration.Map) { \n            items \u2190 filterIndices.filtered\n\n            handler Func() {\n                in(x:-100,y:0,name:\"index\") property(Number) idx_7b \n\n                instance getElt(List.GetAt) {\n                    list: inputList_7f8a, \n                    index: idx_7b  \n                }\n                out \u2192 getElt.itemAtIndex  \n            }\n        }\n\n        \n        computeProduct(Iteration.Reduce) { \n            items \u2190 mapUniqueElements.mapped,\n            initial_value = 1.0 \n\n            handler Func() {\n                in(x:-80,y:0,name:\"acc\") property(Number) acc_ai, \n                    item(property:Number) item_9f\n\n                instance multiply(Math.Multiply) {\n                    a: acc_ai,  \n                    b: item_9f\n                }\n                out \u2192 multiply.product \n            }\n        }\n\n        \n        product_ai \u2190 computeProduct.result \n    }  \n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds elements present in either of the two lists but not both.\") dissimilar_elements {\n        in(x: -240, y: 50, name: \"list1\") property(List) list1_1f8\n        in(x: -230, y: -30, name: \"list2\") property(List) list2_c62\n\n        out(x: 784, y: 80, name: \"result\") property(List) output_result\n\n        instance(x: 150, y: 80) diff_AB root.Std_k98ojb.Sets.Difference {} \n        instance(x: 300, y: 80) diff_BA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 450, y: 80) concat root.Std_k98ojb.List.Concat {}\n\n        list1_1f8 -> diff_AB.left\n        list2_c62 -> diff_AB.right\n\n        list2_c62 -> diff_BA.left\n        list1_1f8 -> diff_BA.right\n\n        diff_AB.difference -> concat.left \n        diff_BA.difference -> concat.right \n\n        concat.result -> output_result\n    }\n\n    \n\n    instance(x: 93, y: -50) dissim_node root.main.dissimilar_elements {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc:\"rotates the given list to the right by k items.\") RotateList {\n        in(x: -300, y: 25, name: \"list\") property(List) input_list\n        in(x: -300, y: 75, name: \"k\") property(Number) rotation_k\n\n        out(x: 400, y: 50, name: \"rotatedList\") property(List) output_rotatedList\n\n        \n        instance(x: -200, y: 150) isEmptyNode root.Std_k98ojb.List.IsEmpty {}\n        input_list -> isEmptyNode.list\n\n        \n        instance(x: -100, y: 150) conditionIf root.Std_k98ojb.Std.If {}\n        isEmptyNode.isEmpty -> conditionIf.predicate\n        \n        \n        instance(x: -250, y: 300) emptyList root.Std_k98ojb.List.Empty {}\n        emptyList.list -> conditionIf.thenPort\n\n        \n        instance(x: 100, y: 200) listLengthNode root.Std_k98ojb.List.Length {}\n        input_list -> listLengthNode.list\n\n        instance(x: 200, y: 200) modNode root.Std_k98ojb.Math.Modulo {\n            value = rotation_k\n            divisor = listLengthNode.length\n        }\n\n        instance(x: 300, y: 200) splitIndexNode root.Std_k98ojb.Math.Sub {\n            left = listLengthNode.length\n            right = modNode.result\n        }\n\n        \n        instance(x: 400, y: 200) part2Slice root.Std_k98ojb.List.Slice {\n            start = splitIndexNode.result\n            end = listLengthNode.length\n        }\n        input_list -> part2Slice.list\n\n        \n        instance(x: 400, y: 300) part1Slice root.Std_k98ojb.List.Slice {\n            start = 0.0 \n            end = splitIndexNode.result\n        }\n        input_list -> part1Slice.list\n\n        \n        instance(x: 500, y: 250) concatNode root.Std_k98ojb.List.Concat {}\n        part2Slice.sliced -> concatNode.leftList\n        part1Slice.sliced -> concatNode.rightList\n\n        \n        concatNode.concatenated -> conditionIf.elsePort\n        conditionIf.result -> output_rotatedList\n    }\n\n    instance(x: -50, y: 25) rotateInstance root.main.RotateList {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the sum of an array.\") SumArray {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        out(x: 300, y: 100, name: \"total\") property(Number) output_sum\n\n        instance reduceNode Iteration.Reduce {\n            initialValue: 0.0 \n        }\n\n        input_list -> reduceNode.items\n        \n        func() { \n            in acc (property Number) accumulator\n            in item (property Number) current_item\n            \n            out total property(Number)\n\n            instance add root.Std_k98ojb.Math.Add {}\n            \n            accumulator -> add.first\n            current_item -> add.second\n            add.result -> total\n        } -> reduceNode.handler\n        \n        reduceNode.result -> output_sum\n    }\n\n    instance(x: 10, y: 20) sum_array_instance root.main.SumArray {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n\n    func(doc: \"Check if given integer is a prime number.\") IsPrime {\n        in(x:-200,y:100 name:\"number\") property(Number) numIn\n        out(x:500,y:300 name:\"isPrime\") property(Bool) resultOut\n\n        \n        instance(x:-240,y: -30) is_less_or_eq root.Std_k98ojb.Std.IfExpression {\n            expression: \"number <= 1\"\n        }\n        \n        \n        is_less_or_eq.then \u2192 {\n            instance(x:-200,y:50) set_false_1 root.Setter_Bool { \n                new_value: false, \n                output_to(resultOut)\n            }\n        }\n\n        \n        is_less_or_eq.else \u2192 {\n\n            \n            instance(x:-180,y: -30) is_two root.Std_k98ojb.Std.IfExpression {\n                expression: \"number == 2\"\n            }\n            \n            is_two.then \u2192 {\n                instance(x:-160,y:50) set_true_1 root.Setter_Bool { \n                    new_value: true, \n                    output_to(resultOut)\n                }\n            }\n\n            \n            is_two.else \u2192 {\n\n                \n                instance(x:-100,y:-30) is_even root.Std_k98ojb.Std.IfExpression {\n                    expression: \"number % 2 ==0\"\n                }\n                \n                is_even.then \u2192 {\n                    instance(x:-80,y:50) set_false_2 root.Setter_Bool { \n                        new_value: false, \n                        output_to(resultOut)\n                    }\n                }\n\n                \n                is_even.else \u2192 {\n\n                    \n                    instance(x:-30,y:0) compute_sqrt_val root.Std_k98ojb.Math.Pow {\n                        x: numIn, \n                        y: 0.5\n                    }\n\n                    floor_node = Math.Floor { input:compute_sqrt_val.result }\n\n                    \n                    instance(x:-30,y:100) gen_range root.Std_k98ojb.List.GenerateRange {\n                        start:3, \n                        end:floor_node.output\n                    }\n\n                    \n                    filtered_odds = Iteration.Filter {\n                        items: gen_range.list,\n                        handler: func() \u2192 property(Bool) keep {\n                            element = current_element \n                            mod_val = Math.Mod { dividend:element, divisor:2 }\n                            return mod_val.result !=0 \n                        }\n                    }\n\n                    \n                    found_divisor = Iteration.Find {\n                        items: filtered_odds.filteredItems,\n                        handler: func() \u2192 property(Bool) isDivisible {\n                            candidate = current_element \n                            mod_check = Math.Mod { dividend:numIn, divisor:candidate }\n                            return mod_check.result ==0 \n                        }\n                    }\n\n                    \n                    has_divisor = Std.IfExpression {\n                        expression: \"found_divisor.foundElement != nil\"\n                    }\n\n                    \n                    final_result = !has_divisor.then \n\n                    instance(x:200,y:-30) set_final root.Setter_Bool { \n                        new_value:final_result, \n                        output_to(resultOut)\n                    }\n                }\n            }  \n        }\n    }\n\n}"
            ]
        }
    }
]