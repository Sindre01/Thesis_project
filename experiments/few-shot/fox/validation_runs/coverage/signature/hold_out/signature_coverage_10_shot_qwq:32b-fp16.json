[
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_5d3e3c root.Std_k98ojb.Math.Mul {}\n        instance(x: 309, y: -172) lessthan_3f3a3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_5d3e3c.first\n        y_5390f5 -> mul_5d3e3c.second\n        0 -> lessthan_3f3a3d.right\n        mul_5d3e3c.result -> lessthan_3f3a3d.left\n        lessthan_3f3a3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: 20) opposite_signs_def root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 147, y: 50) ifexpression_3d7de6 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % 11 == 0\"\n        }\n        n_27f29c -> ifexpression_3d7de6.gen_0\n        ifexpression_3d7de6.value -> output_f2630f\n    }\n\n    \n\n    instance(x: -45, y: -8) is_diff_def root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 100) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 100) equal_node_2a6d4c root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_node_2a6d4c.left\n        tolower_7b3b7b.output -> equal_node_2a6d4c.right\n        equal_node_2a6d4c.result -> output_ai\n    }\n\n    \n\n    instance(x: -10, y: 50) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }\n\n        \n        func() {\n            in(accum: property(List), current: property(Number))\n            out(output_list: property(List))\n\n            instance contains root.Std_k98ojb.List.Contains {}\n                list: accum\n                item: current\n\n            instance if_node root.Std_k98ojb.Std.If {}\n                predicate: contains.isContained\n                then:\n                    \n                    accum -> output_list\n                else:\n                    \n                    instance add root.Std_k98ojb.List.Add {}\n                        list: accum\n                        element: current\n                    add.resultList -> output_list\n        } -> reduce_unique.handler\n\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1.0 \n        }\n\n        \n        func() {\n            in(accum: property(Number), current: property(Number))\n            out(output_number: property(Number))\n\n            instance multiply root.Std_k98ojb.Math.Multiply {}\n                first: accum\n                second: current\n\n            multiply.result -> output_number\n        } -> reduce_product.handler\n\n        \n        reduce_product.output -> output_cffcc2\n\n        \n        execute_19300c -> reduce_unique.trigger\n        reduce_unique.completed -> reduce_product.trigger\n        reduce_product.completed -> continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff2_a3c1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 125) concat_7e2a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_a3c1.left\n        list1_ai -> diff2_a3c1.right\n\n        diff1_9f8d.difference -> concat_7e2a.left\n        diff2_a3c1.difference -> concat_7e2a.right\n\n        concat_7e2a.list -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        list_48148f -> list_length.list\n\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c -> modulo_node.value\n        list_length.length -> modulo_node.divisor\n\n        instance(x: 300, y: 50) subtract_node root.Std_k98ojb.Math.Sub {}\n        list_length.length -> subtract_node.first\n        modulo_node.result -> subtract_node.second\n\n        instance(x: 400, y: 100) slice_first_part root.Std_k98ojb.List.Slice {}\n        list_48148f -> slice_first_part.list\n        0 -> slice_first_part.start\n        subtract_node.result -> slice_first_part.end\n\n        instance(x: 400, y: 200) slice_second_part root.Std_k98ojb.List.Slice {}\n        list_48148f -> slice_second_part.list\n        subtract_node.result -> slice_second_part.start\n        list_length.length -> slice_second_part.end\n\n        instance(x: 500, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n        slice_second_part.slice -> concat_node.left\n        slice_first_part.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -40, y: -60) rotate_right_node root.main.rotate_right {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: -10) reduce_3d7eaa root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3d7eaa.items\n        0 -> reduce_3d7eaa.initialValue\n        func() {\n            in(x: -241, y: -58, name: \"acc\") property(Number) acc_9a3b3f\n            in(x: -236, y: 22, name: \"item\") property(Number) item_7d0e8c\n\n            out(x: 304, y: -45, name: \"\") property(Number) _1e3d9a\n\n            instance(x: 85, y: -46) add_4b2f3a root.Std_k98ojb.Math.Add {}\n            acc_9a3b3f -> add_4b2f3a.first\n            item_7d0e8c -> add_4b2f3a.second\n            add_4b2f3a.result -> _1e3d9a\n        } -> reduce_3d7eaa.reducer\n        reduce_3d7eaa.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -165, y: 10) _sum_3b8c1a root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance LTE_node root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677\n            right = 1\n        }\n\n        instance edge_if root.Std_k98ojb.Std.If {\n            condition = LTE_node.result\n        }\n\n        \n        setter_false root.Std_k98ojb.Setter {\n            property: output_c457b3\n            new_value = false\n        }\n        edge_if.then \u2192 trigger(setter_false)\n\n        instance continue_edge root.Std_k98ojb.Trigger {\n            out \u2192 continue_9a54bb\n        }\n        setter_false.done \u2192 trigger(continue_edge)\n\n        \n        instance div_node root.Std_k98ojb.Math.Div {\n            first = num_5c0677\n            second = 2\n        }\n\n        instance generate_range root.Std_k98ojb.List.GenerateRange {\n            from = 2\n            to = div_node.result\n        }\n\n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items = generate_range.list\n\n            handler: func() {\n                in(x: ..., name: \"current\") property(Number) current_ai\n\n                instance modulo root.Std_k98ojb.Math.Modulo {\n                    value = num_5c0677\n                    divisor = current_ai\n                }\n\n                instance is_zero root.Std_k98ojb.Math.Equal {\n                    left = modulo.result\n                    right = 0\n                }\n                \n                out.output = is_zero.equals\n            }\n        }\n\n        \n        instance check_found root.Std_k98ojb.Std.If {\n            condition = find_divisor.item.isNull\n        }\n\n        \n        setter_true root.Std_k98ojb.Setter {\n            property: output_c457b3\n            new_value = true\n        }\n        check_found.then \u2192 trigger(setter_true)\n\n        \n        setter_false2 root.Std_k98ojb.Setter {\n            property: output_c457b3\n            new_value = false\n        }\n        check_found.else \u2192 trigger(setter_false2)\n\n        instance continue_final root.Std_k98ojb.Trigger {\n            out \u2192 continue_9a54bb\n        }\n        setter_true.done \u2192 trigger(continue_final)\n        setter_false2.done \u2192 trigger(continue_final)\n\n        \n        execute_b7b391 \u2192 edge_if.trigger\n    }\n\n    \n\n    instance(x: -160, y: -80) prime_check root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 100, y: 50) expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"a * b < 0\"\n        }\n        \n        x_853326 -> expr_node.a\n        y_5390f5 -> expr_node.b\n        \n        expr_node.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -200, y: 0) opposite_signs_instance root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: -40) modulo_5a3d root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        n_27f29c -> modulo_5a3d.value\n\n        instance(x: 250, y: -40) equal_6b8e root.Std_k98ojb.Logic.Equal {}\n        modulo_5a3d.result -> equal_6b8e.left\n        0 -> equal_6b8e.right\n\n        equal_6b8e.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -10, y: 0) is_diff_instance root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replace_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7b3b7b.input\n        search_ai -> replace_7b3b7b.search\n        replace_ai -> replace_7b3b7b.replace\n        replace_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_node_3f8a2c root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_node_3f8a2c.left\n        tolower_7b3b7b.output -> equal_node_3f8a2c.right\n        equal_node_3f8a2c.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -500, y: 100) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 0, y: 200) reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items = list_5fda54,\n            context = empty_list.list,\n\n            handler = func() { \n                in acc (List), item (Number)\n                out new_acc (List)\n\n                \n                instance contains root.Std_k98ojb.List.Contains {\n                    list: acc,\n                    item: item\n                }\n\n                \n                instance std_if root.Std.If {\n                    predicate: !contains.isContained\n                }\n\n                instance add_node root.Std_k98ojb.List.Add {\n                    list: acc,\n                    item: item\n                }\n\n                \n                std_if.then -> add_node.execute\n                add_node.result -> new_acc.value\n\n                \n                std_if.else -> new_acc.value = acc\n            }\n        }\n\n        \n        instance(x: 400, y: 200) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items = reduce_unique.outputList,\n            context = 1.0,\n\n            handler = func() { \n                in acc (Number), item (Number)\n                out new_acc (Number)\n\n                instance multiply root.Math.Mul {\n                    first: acc,\n                    second: item\n                }\n                multiply.result -> new_acc.value\n            }\n        }\n\n        \n        execute_19300c -> reduce_unique.startTrigger\n        reduce_unique.done -> reduce_product.startTrigger\n        reduce_product.done -> continue_45190b\n\n        \n        reduce_product.outputValue -> output_cffcc2\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 len_node.list\n\n        \n        instance(x: 200, y: 50) eff_node root.Std_k98ojb.Math.Expression {\n            expression: \"len == 0 ? 0 : (value % len)\"\n        }\n        len_node.length \u2192 eff_node.gen_0 \n        n_68068c \u2192 eff_node.gen_1       \n\n        \n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        len_node.length \u2192 sub_node.first\n        eff_node.result \u2192 sub_node.second\n\n        \n        instance(x: 400, y: 50) first_slice root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 first_slice.list\n        0 \u2192 first_slice.start\n        sub_node.result \u2192 first_slice.end\n\n        \n        instance(x: 500, y: 50) second_slice root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 second_slice.list\n        sub_node.result \u2192 second_slice.start\n        -1 \u2192 second_slice.end\n\n        \n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.slice \u2192 concat_node.firstList\n        first_slice.slice \u2192 concat_node.secondList\n\n        \n        concat_node.result \u2192 output_823209\n    }\n\n    \n\n    instance(x: -174, y: -63) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 100, y: 50) reduce_9e2a3b root.Std_k98ojb.Iteration.Reduce {\n            initialValue: 0\n        }\n        list_2c62ab -> reduce_9e2a3b.items\n        func() {\n            in(x: -100, y: -50, name: \"acc\") property(Number) acc_in\n            in(x: -100, y: 50, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 0, name: \"result\") property(Number) result_out\n\n            instance(x: 50, y: 0) add_3a7c8f root.Std_k98ojb.Math.Add {}\n            acc_in -> add_3a7c8f.first\n            item_in -> add_3a7c8f.second\n            add_3a7c8f.result -> result_out\n        } -> reduce_9e2a3b.handler\n        reduce_9e2a3b.reduced -> sum_2a848f\n    }\n\n    \n\n    instance(x: -50, y: 0) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance lessThanEq root.Std_k98ojb.Math.LessThanOrEqual:\n            left = num_5c0677\n            right = 1\n\n        instance ifEdgeCase root.Std_k98ojb.Std.If:\n            predicate \u2192 lessThanEq.result\n            trigger \u2192 execute_b7b391 \n\n        \n        setter(x: -200, y: 300, name: \"setter_false\"):\n            property = output_c457b3\n            new_value = false\n            trigger \u2192 ifEdgeCase.then\n            continue \u2192 continue_9a54bb\n\n        \n        instance powNode root.Std_k98ojb.Math.Pow:\n            first = num_5c0677\n            second = 0.5\n            trigger \u2192 ifEdgeCase.else \n\n        instance floorNode root.Std_k98ojb.Math.Floor:\n            input \u2192 powNode.result\n\n        instance generateRange root.Std_k98ojb.List.GenerateRange:\n            from = 2\n            to \u2192 floorNode.output\n            trigger \u2192 powNode.continue \n\n        \n        func() handlerDivisorCheck {\n            in(x: -10, y: -50, name: \"current\") property(Number) current_ai\n            out(x: 100, y: 0, name: \"output\") property(Bool) output_ai\n\n            instance modulo root.Std_k98ojb.Math.Modulo:\n                value = num_5c0677 \n                divisor \u2192 current_ai\n\n            instance equalZero root.Std_k98ojb.Math.Equal:\n                first \u2192 modulo.result\n                second = 0\n\n            equalZero.equals \u2192 output_ai\n        }\n\n        instance findDivisor root.Std_k98ojb.Iteration.Find:\n            items \u2192 generateRange.list\n            handler = handlerDivisorCheck\n            trigger \u2192 generateRange.continue \n\n        \n        setter(x: 200, y: 150, name: \"setter_found\"):\n            property = output_c457b3\n            new_value = false\n            trigger \u2192 findDivisor.found\n            continue \u2192 continue_9a54bb\n\n        setter(x: 200, y: 200, name: \"setter_notFound\"):\n            property = output_c457b3\n            new_value = true\n            trigger \u2192 findDivisor.notFound\n            continue \u2192 continue_9a54bb\n    }\n\n    instance(x: -100, y: -100) primeChecker root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 100, y: 100) condition root.Std_k98ojb.Std.IfExpression {\n            expression: \"(x < 0 && y > 0) || (y < 0 && x > 0)\"\n        }\n        \n        x_853326 -> condition.x\n        y_5390f5 -> condition.y\n\n        condition.value -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_signs_node root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 145, y: 50) modulo_5e5d3a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 270, y: 50) equal_4c8d1b root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_5e5d3a.value\n        11 -> modulo_5e5d3a.divisor\n        modulo_5e5d3a.result -> equal_4c8d1b.left\n        0 -> equal_4c8d1b.right\n        equal_4c8d1b.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -97, y: -68) is_diff_def root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 350, y: 150) equal_e38995 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_e38995.left\n        tolower_7b3b7b.output -> equal_e38995.right\n        equal_e38995.result -> output_ai\n    }\n\n    \n\n    instance(x: -10, y: 20) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: 150, y: 200) filter_unique root.Std_k98ojb.Iteration.Filter {\n            items: list_5fda54,\n            context: list_5fda54 \n        }\n\n        func() { \n            in(name: \"current\") property(Number) current_element\n            in(name: \"context_list\") property(List) context_list\n\n            out(name: \"result\") property(Bool) predicate_result\n\n            instance ListFilter root.Std_k98ojb.List.Filter {\n                where: \"it == current_element\"\n            }\n            context_list -> ListFilter.list \n            ListFilter.result -> filtered_list\n\n            instance length_node root.Std_k98ojb.List.Length {}\n            filtered_list -> length_node.list\n            length_node.length -> count\n\n            instance eq_one root.Std_k98ojb.Math.Equal {}\n            count -> eq_one.a\n            1 -> eq_one.b\n            eq_one.result -> predicate_result \n        } -> filter_unique.handler\n\n        \n        instance(x: 400, y: 250) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            initial_value: 1 \n        }\n        filter_unique.result -> reduce_product.items\n\n        func() { \n            in(name: \"acc\") property(Number) acc_val\n            in(name: \"current\") property(Number) curr_val\n\n            out(name: \"result\") property(Number) new_acc\n\n            instance multiply root.Std_k98ojb.Math.Multiply {}\n            acc_val -> multiply.a\n            curr_val -> multiply.b\n            multiply.product -> new_acc\n        } -> reduce_product.handler\n\n        \n        reduce_product.result -> output_cffcc2 \n        execute_19300c -> filter_unique.start \n        reduce_product.on_complete -> continue_45190b \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        list_48148f -> list_length.list\n        let length = list_length.length\n\n        \n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c -> modulo_node.value\n        length -> modulo_node.divisor\n        let effective_n = modulo_node.result\n\n        \n        instance(x: 300, y: 50) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 == 0\"\n        }\n        effective_n -> if_expression.gen_0\n\n        \n        instance(x: 400, y: 100) then_output root.Std_k98ojb.Any {}\n        list_48148f -> then_output.value\n        if_expression.then -> then_output.trigger\n        then_output.value -> output_823209\n\n        \n        instance(x: 500, y: 200) sub_node root.Std_k98ojb.Math.Sub {}\n        length -> sub_node.first\n        effective_n -> sub_node.second\n        let start = sub_node.result\n\n        \n        instance(x: 450, y: 300) const_zero root.Std_k98ojb.Math.NumberConstant {\n            value: 0\n        }\n\n        \n        instance(x: 600, y: 250) slice1 root.Std_k98ojb.List.Slice {}\n        list_48148f -> slice1.list\n        const_zero.value -> slice1.start\n        start -> slice1.end\n\n        \n        instance(x: 700, y: 300) slice2 root.Std_k98ojb.List.Slice {}\n        list_48148f -> slice2.list\n        start -> slice2.start\n        length -> slice2.end\n\n        \n        instance(x: 800, y: 350) concat_node root.Std_k98ojb.List.Concat {}\n        slice2.sliceResult -> concat_node.left\n        slice1.sliceResult -> concat_node.right\n\n        \n        if_expression.else -> sub_node.trigger\n        concat_node.result -> output_823209\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 0, y: 0) const_zero root.Std_k98ojb.Math.Constant {\n            value: 0\n        }\n\n        instance(x: 100, y: 50) reduce_node root.Std_k98ojb.Iteration.Reduce {}\n        \n        \n        const_zero.value -> reduce_node.initial\n        list_2c62ab -> reduce_node.items\n\n        \n        func() {\n            in(accumulated: Number) property(Number)\n            in(current: Number) property(Number)\n\n            out(result: Number) property(Number)\n\n            instance adder root.Std_k98ojb.Math.Add {}\n            accumulated -> adder.first\n            current -> adder.second\n            adder.result -> result\n        } -> reduce_node.handler\n\n        \n        reduce_node.result -> sum_2a848f\n    }\n\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: 100, y: 100) if_less_than_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 < 2\"\n        }\n\n        setter(x: 200, y: 100) name=\"set_false\" = output_c457b3\n        getter(x: 250, y: 100) name=\"get_output\" = output_c457b3\n\n        \n        if_less_than_two.then \u2192 set_false.execute with new_value false\n        set_false.continue \u2192 continue_9a54bb\n\n        \n        instance(x: 100, y: 200) if_eq_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 == 2\"\n        }\n\n        setter(x: 200, y: 200) name=\"set_true\" = output_c457b3\n        \n        if_less_than_two.else \u2192 if_eq_two.execute\n\n        \n        if_eq_two.then \u2192 set_true.execute with new_value true\n        set_true.continue \u2192 continue_9a54bb\n\n        \n        instance(x: 100, y: 300) if_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 % 2 == 0\"\n        }\n\n        \n        if_eq_two.else \u2192 if_even.execute\n\n        \n        if_even.then \u2192 set_false.execute with new_value false\n        set_false.continue \u2192 continue_9a54bb\n\n        \n        instance(x: 300, y: 100) pow_node root.Std_k98ojb.Math.Pow {\n            base: num_5c0677,\n            exponent: 0.5\n        }\n\n        instance(x: 400, y: 100) floor_node root.Std_k98ojb.Math.Floor {\n            value: pow_node.result\n        }\n\n        \n        instance(x: 500, y: 100) generate_range root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: floor_node.floorResult\n        }\n\n        \n        instance(x: 600, y: 100) filter_odds root.Std_k98ojb.Query.Filter {\n            where: \"it % 2 != 0\"\n        }\n        generate_range.result \u2192 filter_odds.items\n\n        \n        instance(x: 700, y: 100) for_loop root.Std.For {\n            items: filter_odds.result\n        }\n\n        \n        if_even.else \u2192 for_loop.execute\n\n        \n        instance(x: 800, y: 200) mod_node root.Std_k98ojb.Math.Modulo {\n            value: num_5c0677,\n            divisor: for_loop.currentItem\n        }\n\n        instance(x: 900, y: 200) if_mod_zero root.Std_k98ojb.Std.IfExpression {\n            expression: \"mod_node.result == 0\"\n        }\n\n        \n        if_mod_zero.then \u2192 set_false.execute with new_value false\n        set_false.continue \u2192 continue_9a54bb\n\n        \n        if_mod_zero.else \u2192 for_loop.next\n\n        \n        instance(x: 1000, y: 300) done_setter root.Std_k98ojb.Setter {\n            property: output_c457b3,\n            value: true\n        }\n        for_loop.done \u2192 done_setter.execute\n        done_setter.continue \u2192 continue_9a54bb\n\n    }\n\n    \n\n    instance(x: -100, y: 20) num_prime_node root.main.num_prime {}\n\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_5d3e3c root.Std_k98ojb.Math.Mul {}\n        instance(x: 309, y: -172) lessthan_3f3d3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_5d3e3c.first\n        y_5390f5 -> mul_5d3e3c.second\n        0 -> lessthan_3f3d3d.right\n        mul_5d3e3c.result -> lessthan_3f3d3d.left\n        lessthan_3f3d3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: 20) opposite_signs_def root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x:5, y:-25, name:\"n\") property(Number) n_27f29c\n        out(x:668,y:2,name:\"output\") property(Bool) output_f2630f\n\n        instance(x:100,y:50) modulo_node Std_k98ojb.Math.Modulo {}\n        n_27f29c -> modulo_node.value\n        11 -> modulo_node.divisor\n\n        instance(x:200,y:50) equal_node Std_k98ojb.Logic.Equal {}\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n\n        equal_node.equals -> output_f2630f\n    }\n\n    instance(x:-174, y:-63) is_diff_instance root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_4e8c54 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_4e8c54.left\n        tolower_7b3b7b.output -> equal_4e8c54.right\n        equal_4e8c54.equal -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) is_lower_node root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        getter(x: -200, y: 100, name: \"getter_seen\") getter_seen = seen_list\n        setter(x: -200, y: 50, name: \"setter_seen\") setter_seen = seen_list\n\n        \n        instance(x: 100, y: 50) emptyList root.Std_k98ojb.List.Empty {}\n        connect(execute_19300c -> setter_seen.execute)\n        connect(emptyList.list -> setter_seen.new_value)\n\n        \n        instance(x: 200, y: 50) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        connect(list_5fda54 -> filter_unique.items)\n        \n        func(handler_for_filter) {\n            in(x: -10, y: 0, name: \"current_element\") property(Number) element\n            out(x: 200, y: 0, name: \"include\") property(Bool) include_out\n\n            \n            getter(x: -50, y: 30, name: \"getter_seen_in_handler\") getter_seen_in = seen_list\n            instance(x: 10, y: 30) contains root.Std_k98ojb.List.Contains {}\n            connect(element -> contains.value)\n            connect(getter_seen_in.value -> contains.list)\n\n            \n            instance(x: 50, y: 30) invert root.Std_k98ojb.Std.IfExpression {\n                expression: \"!a\"\n                gen_0: contains.isContained\n            }\n            connect(invert.output -> include_out)\n\n            \n            instance(x: 100, y: 30) add_to_seen root.Std_k98ojb.List.Add {}\n            connect(getter_seen_in.value -> add_to_seen.list)\n            connect(element -> add_to_seen.item)\n\n            \n            instance(x: 150, y: 30) if_node root.Std_k98ojb.Std.IfExpression {\n                expression: \"a\"\n                gen_0: include_out\n            }\n            connect(add_to_seen.result -> setter_seen.new_value)\n            connect(if_node.then -> setter_seen.execute)\n        }\n        filter_unique.handler = handler_for_filter\n\n        \n        instance(x: 300, y: 50) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        connect(filter_unique.result -> reduce_product.items)\n        connect(1.0 -> reduce_product.initial_value)\n\n        func(handler_for_reduce) {\n            in(x: -20, y: 0, name: \"acc\") property(Number) accumulator\n            in(x: 0, y: 0, name: \"element\") property(Number) element_in\n            out(x: 80, y: 0, name: \"result\") property(Number) result_out\n\n            instance(x: 20, y: 0) multiply root.Std_k98ojb.Math.Mul {}\n            connect(accumulator -> multiply.first)\n            connect(element_in -> multiply.second)\n            connect(multiply.result -> result_out)\n        }\n        reduce_product.handler = handler_for_reduce\n        connect(reduce_product.result -> output_cffcc2)\n\n        \n        connect(reduce_product.completed -> continue_45190b)\n    }\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff2_a3c1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 125) concat_7e2a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_a3c1.left\n        list1_ai -> diff2_a3c1.right\n\n        diff1_9f8d.difference -> concat_7e2a.left\n        diff2_a3c1.difference -> concat_7e2a.right\n\n        concat_7e2a.list -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 100) len_node root.Std_k98ojb.List.Length {}\n        list_48148f -> len_node.list\n\n        \n        instance(x: 200, y: 150) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c -> modulo_node.value\n        len_node.length -> modulo_node.divisor\n\n        \n        instance(x: 300, y: 150) sub_node root.Std_k98ojb.Math.Sub {}\n        len_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        \n        instance(x: 400, y: 200) slice_second root.Std_k98ojb.List.Slice {\n            start = sub_node.result\n            end = -1\n        }\n        list_48148f -> slice_second.list\n\n        \n        instance(x: 400, y: 300) slice_first root.Std_k98ojb.List.Slice {\n            start = 0\n            end = sub_node.result\n        }\n        list_48148f -> slice_first.list\n\n        \n        instance(x: 500, y: 250) concat_node root.Std_k98ojb.List.Concat {}\n        slice_second.slice -> concat_node.left\n        slice_first.slice -> concat_node.right\n        concat_node.result -> output_823209\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: -10) reduce_3d7eaa root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3d7eaa.items\n        0 -> reduce_3d7eaa.initialValue\n        func() {\n            in(x: -241, y: -58, name: \"acc\") property(Number) acc_9a3b3f\n            in(x: -236, y: 22, name: \"item\") property(Number) item_7d0e8c\n\n            out(x: 304, y: -45, name: \"\") property(Number) _1a3d9d\n\n            instance(x: 87, y: -46) add_4b2f3d root.Std_k98ojb.Math.Add {}\n            acc_9a3b3f -> add_4b2f3d.first\n            item_7d0e8c -> add_4b2f3d.second\n            add_4b2f3d.result -> _1a3d9d\n        } -> reduce_3d7eaa.reducer\n        reduce_3d7eaa.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -165, y: 10) _sum_3b7c8a root.main._sum {}\n\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        instance(x: -200, y: -100) less_than_two Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677\n            right = 1.0 \n        }\n\n        instance(x: -100, y: -100) edge_case_if Std_k98ojb.Std.If {\n            predicate = less_than_two.result\n        }\n\n        \n        getter(x: -300, y: 50, name: \"getter_0\") getter_0 = output_flag\n        setter(x: -150, y: 50, name: \"setter_false\") setter_false = output_flag {\n            new_value = false\n        }\n        edge_case_if.then \u2192 setter_false.execute\n        setter_false.continue \u2192 continue_9a54bb\n        getter_0.value \u2192 output_c457b3\n\n        \n        instance(x: 100, y: -150) sqrt_expr Std_k98ojb.Math.Expression {\n            expression = \"Math.sqrt(n)\"\n            inputs: n=num_5c0677\n        }\n\n        instance(x: 150, y: -150) floor_sqrt Std_k98ojb.Math.Floor {\n            value = sqrt_expr.result\n        }\n\n        instance(x: 200, y: -150) generate_divisors_list Std_k98ojb.List.GenerateRange {\n            from = 2.0\n            to = floor_sqrt.output\n        }\n\n        \n        instance(x: 300, y: -150) find_divisor Iteration.Find {\n            list = generate_divisors_list.list\n            context = num_5c0677 \n\n            handler: func() {\n                in(name: \"current\") property(Number) current_item\n                in(name: \"context\") property(Number) context_num\n\n                out(name: \"output\") property(Bool) predicate_result\n\n                instance modulo Math.Modulo {\n                    value = context_num\n                    divisor = current_item\n                }\n\n                instance is_divisible Std_k98ojb.Math.Equal {\n                    a = modulo.result\n                    b = 0.0\n                }\n\n                is_divisible.equals \u2192 predicate_result\n            }\n        }\n\n        \n        instance(x: 400, y: -150) has_divisor Std_k98ojb.Std.If {\n            predicate = (find_divisor.item != null)\n        }\n\n        \n        setter(x: 450, y: -50, name: \"setter_true\") setter_true = output_flag {\n            new_value = true\n        }\n        setter(x: 450, y: -150, name: \"setter_false_final\") setter_false_final = output_flag {\n            new_value = false\n        }\n\n        has_divisor.then \u2192 setter_false_final.execute\n        has_divisor.else \u2192 setter_true.execute\n\n        \n        getter_0.value \u2190 setter_true.output\n        getter_0.value \u2190 setter_false_final.output\n        setter_true.continue \u2192 continue_9a54bb\n        setter_false_final.continue \u2192 continue_9a54bb\n\n        execute_b7b391 \u2192 edge_case_if.execute\n    }\n\n    \n\n    instance(x: -200, y: 0) prime_check root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_6d1b8e root.Std_k98ojb.Math.Mul {}\n        instance(x: 350, y: -200) lessthan_3f3c8d root.Std_k98ojb.Math.LessThan {\n            right: 0\n        }\n        x_853326 -> mul_6d1b8e.first\n        y_5390f5 -> mul_6d1b8e.second\n        mul_6d1b8e.result -> lessthan_3f3c8d.left\n        lessthan_3f3c8d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -200, y: 50) opposite_signs_node root.main.opposite_signs {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x:5, y:-25,name:\"n\") property(Number) n_27f29c\n        out(x:668,y:2,name:\"output\") property(Bool) output_f2630f\n\n        instance modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -5, y: -25) is_diff_node root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replace_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7b3b7b.input\n        search_ai -> replace_7b3b7b.search\n        replace_ai -> replace_7b3b7b.replace\n        replace_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 200, y: 50) ifexpr_node root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 == gen_1\"\n        }\n\n        input_ai -> tolower_node.input\n        input_ai -> ifexpr_node.gen_0\n        tolower_node.output -> ifexpr_node.gen_1\n        ifexpr_node.value -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -300, y: 50) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: -100, y: 100) reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54,\n            context: empty_list.list\n        }\n\n        \n        func() {\n            in(x: -200, y: 150) acc property(List)\n            in(x: -200, y: 200) item property(Number)\n\n            out(x: 300, y: 175) output property(List)\n\n            \n            instance contains root.Std_k98ojb.List.Contains {}\n            acc -> contains.list\n            item -> contains.value\n\n            \n            instance ifexpr root.Std_k98ojb.Std.IfExpression {\n                expression: \"!contains.contains\"\n            }\n            \n            instance add root.Std_k98ojb.List.Add {}\n            acc -> add.list\n            item -> add.value\n            \n            \n            contains.contains -> ifexpr.condition\n            add.newList -> ifexpr.trueValue\n            acc -> ifexpr.falseValue\n\n            ifexpr.result -> output\n        } -> reduce_unique.handler\n\n        \n        instance(x: 200, y: 50) initial_value root.Std_k98ojb.Number { value: 1 }\n        \n        instance(x: 300, y: 100) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.result,\n            context: initial_value.value\n        }\n\n        \n        func() {\n            in(x: -200, y: 350) acc property(Number)\n            in(x: -200, y: 400) item property(Number)\n\n            out(x: 300, y: 375) output property(Number)\n\n            instance multiply root.Std_k98ojb.Math.Mul {}\n            acc -> multiply.first\n            item -> multiply.second\n\n            multiply.product -> output\n        } -> reduce_product.handler\n\n        \n        reduce_product.result -> output_cffcc2\n        reduce_product.done -> continue_45190b\n        \n        execute_19300c -> reduce_unique.start \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "function rotate_right(list_48148f: List, n_68068c: Number) -> output_823209: List {\n    variable rotated_list: List\n\n    \n    getter_rotated:\n        getter root.Std_k98ojb.Getter {\n            variable: \"rotated_list\"\n        }\n\n    setter_rotated:\n        setter root.Std_k98ojb.Setter {\n            variable: \"rotated_list\"\n        }\n\n    \n    list_length:\n        instance root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 list_length.list\n\n    \n    first_if_zero_len:\n        instance root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 == 0\"\n        }\n        list_length.length \u2192 first_if_zero_len.gen_0\n\n    \n    first_if_zero_len.then \u2192 setter_rotated.execute\n    list_48148f \u2192 setter_rotated.new_value\n\n    \n    mod_node:\n        instance root.Std_k98ojb.Math.Modulo {}\n        n_68068c \u2192 mod_node.value\n        list_length.length \u2192 mod_node.divisor\n\n    \n    second_if_zero_mod:\n        instance root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 == 0\"\n        }\n        mod_node.result \u2192 second_if_zero_mod.gen_0\n\n    \n    second_if_zero_mod.then \u2192 setter_rotated.execute\n    list_48148f \u2192 setter_rotated.new_value\n\n    \n    split_at:\n        instance root.Std_k98ojb.Math.Sub {}\n        list_length.length \u2192 split_at.first\n        mod_node.result \u2192 split_at.second\n\n    \n    start_zero:\n        instance root.Std_k98ojb.Math.Constant {\n            value: 0\n        }\n\n    \n    slice1:\n        instance root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 slice1.list\n        start_zero.value \u2192 slice1.start\n        split_at.result \u2192 slice1.end\n\n    \n    slice2:\n        instance root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 slice2.list\n        split_at.result \u2192 slice2.start\n        list_length.length \u2192 slice2.end\n\n    \n    concat_node:\n        instance root.Std_k98ojb.List.Concat {}\n        slice2.output \u2192 concat_node.left\n        slice1.output \u2192 concat_node.right\n\n    \n    setter_rotated.new_value \u2190 concat_node.result\n    second_if_zero_mod.else \u2192 setter_rotated.execute\n\n    \n    getter_rotated.value \u2192 output_823209\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 94, y: -105) reduce_3d7de6 root.Std_k98ojb.Iteration.Reduce {\n            initialValue: 0\n        }\n        list_2c62ab -> reduce_3d7de6.items\n        func() {\n            in(x: -121, y: -37, name: \"acc\") property(Number) acc_ai\n            in(x: -121, y: 50, name: \"item\") property(Number) item_ai\n\n            out(x: 333, y: -50, name: \"\") property(Number) _result\n\n            instance(x: 92, y: -22) add_584bfd root.Std_k98ojb.Math.Add {}\n            acc_ai -> add_584bfd.first\n            item_ai -> add_584bfd.second\n            add_584bfd.result -> _result\n        } -> reduce_3d7de6.handler\n        reduce_3d7de6.reduced -> sum_2a848f\n    }\n\n    \n\n    instance(x: -92, y: 45) _sum_b9ff6b root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: 100, y: -200) edge_case root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 <= 1\"\n        }\n        edge_case.gen_0 \u2190 num_5c0677\n        execute_b7b391 \u2192 edge_case.execute\n\n        \n        getter(x: 200, y: -150) getter_result = is_prime\n        setter(x: 300, y: -150) setter_result = is_prime\n\n        \n        instance(x: 400, y: -300) false_node root.Std_k98ojb.Logic.False {}\n        edge_case.then \u2192 false_node.execute\n        false_node.output \u2192 setter_result.new_value\n        setter_result.continue \u2192 continue_9a54bb\n\n        \n        instance(x: 200, y: -300) sqrt_node root.Std_k98ojb.Math.Sqrt {\n            input: num_5c0677\n        }\n        instance(x: 250, y: -350) floor_sqrt root.Std_k98ojb.Math.Floor {\n            value: sqrt_node.output\n        }\n\n        \n        instance(x: 300, y: -400) gen_range root.Std_k98ojb.List.GenerateRange {\n            from: 2.0,\n            to: floor_sqrt.result\n        }\n\n        \n        instance(x: 350, y: -450) filter_div root.Std_k98ojb.Query.Filter {\n            list: gen_range.list,\n            where: \"num_5c0677 % it == 0\"\n        }\n\n        \n        instance(x: 400, y: -500) len_node root.Std_k98ojb.List.Length {\n            list: filter_div.result\n        }\n\n        \n        instance(x: 450, y: -550) gt_zero root.Std_k98ojb.Math.GreaterThan {\n            a: len_node.length,\n            b: 0.0\n        }\n        instance(x: 500, y: -600) not_gt root.Std_k98ojb.Logic.Not {\n            input: gt_zero.result\n        }\n\n        \n        not_gt.output \u2192 setter_result.new_value\n\n        \n        setter_result.continue \u2192 continue_9a54bb\n\n        \n        getter_result.value \u2192 output_c457b3\n    }\n\n    instance(x: -100, y: 0) prime_check root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 48, y: -167) ifexpression_3d7de6 root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        x_853326 -> ifexpression_3d7de6.gen_0\n        y_5390f5 -> ifexpression_3d7de6.gen_1\n        ifexpression_3d7de6.value -> output_3339a3\n    }\n\n    \n\n    instance(x: -248, y: -20) opposite_signs_def root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 145, y: 30) ifexpr_abc root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % 11 == 0\"\n        }\n        n_27f29c -> ifexpr_abc.n\n        ifexpr_abc.value -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: -40) is_diff_node root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_f2a6c3 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_f2a6c3.left\n        tolower_7b3b7b.output -> equal_f2a6c3.right\n        equal_f2a6c3.result -> output_ai\n    }\n\n    \n\n    instance(x: -10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list  \n        }\n        reduce_unique.handler = function() {\n            in property(List) currentAcc\n            in property(Number) currentItem\n\n            instance contains root.Std_k98ojb.List.Contains {}\n                currentAcc \u2192 contains.list\n                currentItem \u2192 contains.item\n\n            instance if_node root.Std_k98ojb.Std.If {\n                predicate: contains.result  \n            }\n\n            \n            then_output \u2190 currentAcc\n\n            \n            instance add_node root.Std_k98ojb.List.Add {}\n                currentAcc \u2192 add_node.list\n                currentItem \u2192 add_node.item\n            else_output \u2190 add_node.result\n\n            if_node.then \u2192 then_output\n            if_node.else \u2192 else_output\n            newAcc \u2190 if_node.output  \n        }\n\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.result  \n            initial_value: 1.0          \n        }\n        reduce_product.handler = function() {\n            in property(Number) accumulatedProduct\n            in property(Number) currentElement\n\n            instance multiply root.Std_k98ojb.Math.Mul {}\n                accumulatedProduct \u2192 multiply.a\n                currentElement \u2192 multiply.b\n            nextAcc \u2190 multiply.result\n        }\n\n        \n        reduce_product.result \u2192 output_cffcc2\n        \n        \n        reduce_product.onComplete \u2192 continue_45190b\n\n        \n        execute_19300c \u2192 reduce_unique.execute  \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 200) len_node root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 len_node.list\n\n        \n        instance(x: 200, y: 200) mod_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c \u2192 mod_node.value\n        len_node.length \u2192 mod_node.divisor\n\n        \n        instance(x: 300, y: 150) const_zero root.Std_k98ojb.Math.Constant { value: 0 }\n        instance eq_node root.Std_k98ojb.Math.Equal {}\n        mod_node.result \u2192 eq_node.a\n        const_zero.output \u2192 eq_node.b\n\n        \n        instance(x: 400, y: 250) sub_node root.Std_k98ojb.Math.Sub {}\n        len_node.length \u2192 sub_node.first\n        mod_node.result \u2192 sub_node.second\n\n        \n        instance(x: 500, y: 300) slice1 root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 slice1.list\n        const_zero.output \u2192 slice1.start\n        sub_node.result \u2192 slice1.end\n\n        \n        instance(x: 600, y: 300) slice2 root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 slice2.list\n        sub_node.result \u2192 slice2.start\n        len_node.length \u2192 slice2.end\n\n        \n        instance(x: 700, y: 350) concat_node root.Std_k98ojb.List.Concat {}\n        slice2.output \u2192 concat_node.left\n        slice1.output \u2192 concat_node.right\n\n        \n        instance if_node root.Std_k98ojb.Std.If {}\n        eq_node.result \u2192 if_node.condition\n        list_48148f \u2192 if_node.then_value\n        concat_node.output \u2192 if_node.else_value\n\n        \n        if_node.result \u2192 output_823209\n    }\n\n    \n\n    instance(x: -50, y: 0) rotate_right_instance root.main.rotate_right {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 100, y: 50) reduce_node root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_node.items\n        0 -> reduce_node.initial\n        \n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: -50, y: 0, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 0, name: \"result\") property(Number) result_out\n\n            instance(x: 0, y: 0) add_node root.Std_k98ojb.Math.Add {}\n            acc_in -> add_node.first\n            item_in -> add_node.second\n            add_node.result -> result_out\n        } -> reduce_node.handler\n        \n        reduce_node.result -> sum_2a848f\n    }\n\n    \n\n    instance(x: 0, y: 0) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance lessThan_node Std.Math.LessThan {\n            left = num_5c0677\n            right = 2\n        }\n\n        instance if_edge_case Std.If {\n            condition = lessThan_node.result\n        }\n\n        \n        instance set_false Setter {\n            new_value = false\n            property = output_c457b3\n        }\n        \n        instance set_true Setter {\n            new_value = true\n            property = output_c457b3\n        }\n\n        \n        if_edge_case.then \u2192 set_false.execute\n\n        \n        if_edge_case.else \u2192 sqrt_node.execute\n\n        instance sqrt_node Std.Math.Sqrt {\n            value = num_5c0677\n        }\n\n        instance floor_node Std.Math.Floor {\n            number = sqrt_node.result\n        }\n\n        instance generate_range Std.List.GenerateRange {\n            from = 2\n            to = floor_node.result\n        }\n\n        \n        instance find_divisor Iteration.Find {\n            items = generate_range.list\n        }\n\n        func() { \n            in current property(Number)\n\n            instance modulo_node Std.Math.Modulo {\n                value = num_5c0677\n                divisor = current\n            }\n            \n            instance equal_zero Std.Math.Equal {\n                a = modulo_node.result\n                b = 0\n            }\n\n            out.output = equal_zero.equals\n        } \u2192 find_divisor.handler\n\n        \n        instance check_found Std.IfExpression {\n            expression = \"find_divisor.item != null\"\n        }\n\n        \n        check_found.then \u2192 set_false.execute\n        check_found.else \u2192 set_true.execute\n\n        \n        set_false.continue \u2192 continue_9a54bb\n        set_true.continue \u2192 continue_9a54bb\n\n        \n        execute_b7b391 \u2192 if_edge_case.execute\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_5d3e3c root.Std_k98ojb.Math.Mul {}\n        instance(x: 309, y: -172) lessthan_3f3d3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_5d3e3c.first\n        y_5390f5 -> mul_5d3e3c.second\n        0 -> lessthan_3f3d3d.right\n        mul_5d3e3c.result -> lessthan_3f3d3d.left\n        lessthan_3f3d3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: 20) opposite_signs_def root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x:5, y:-25, name:\"n\") property(Number) n_27f29c\n        out(x:668,y:2,name:\"output\") property(Bool) output_f2630f\n\n        instance(x:100, y:50) modulo_node Std_k98ojb.Math.Modulo {}\n        n_27f29c -> modulo_node.value\n        11 -> modulo_node.divisor\n\n        instance(x:200, y:50) equal_node Std_k98ojb.Logic.Equal {}\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n\n        equal_node.equals -> output_f2630f\n    }\n\n    \n\n    instance(x:-174, y:-63) is_diff_node root.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 77, y: 50) to_lower root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 200, y: 50) equal_node root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> to_lower.input\n        to_lower.output -> equal_node.right\n        input_ai -> equal_node.left\n        equal_node.equal -> output_ai\n    }\n\n    \n\n    instance(x: -174, y: -63) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        getter(x: -200, y: 100, name: \"getter_seen\") getter_seen = seen_list\n        setter(x: -200, y: 50, name: \"setter_seen\") setter_seen = seen_list\n\n        \n        instance(x: 100, y: 50) emptyList root.Std_k98ojb.List.Empty {}\n        connect(execute_19300c -> setter_seen.execute)\n        connect(emptyList.list -> setter_seen.new_value)\n\n        \n        instance(x: 200, y: 50) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        connect(list_5fda54 -> filter_unique.items)\n        \n        func(handler_for_filter) {\n            in(x: -10, y: 0, name: \"current_element\") property(Number) element\n            out(x: 200, y: 0, name: \"include\") property(Bool) include_out\n\n            \n            getter(x: -50, y: 30, name: \"getter_seen_in_handler\") getter_seen_in = seen_list\n            instance(x: 10, y: 30) contains root.Std_k98ojb.List.Contains {}\n            connect(element -> contains.value)\n            connect(getter_seen_in.value -> contains.list)\n\n            \n            instance(x: 50, y: 30) invert root.Std_k98ojb.Std.IfExpression {\n                expression: \"!a\"\n                gen_0: contains.isContained\n            }\n            connect(invert.output -> include_out)\n\n            \n            instance(x: 100, y: 30) add_to_seen root.Std_k98ojb.List.Add {}\n            connect(getter_seen_in.value -> add_to_seen.list)\n            connect(element -> add_to_seen.item)\n\n            \n            instance(x: 150, y: 30) if_node root.Std_k98ojb.Std.IfExpression {\n                expression: \"a\"\n                gen_0: include_out\n            }\n            connect(add_to_seen.result -> setter_seen.new_value)\n            connect(if_node.then -> setter_seen.execute)\n        }\n        filter_unique.handler = handler_for_filter\n\n        \n        instance(x: 300, y: 50) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        connect(filter_unique.result -> reduce_product.items)\n        connect(1.0 -> reduce_product.initial_value)\n\n        func(handler_for_reduce) {\n            in(x: -20, y: 0, name: \"acc\") property(Number) accumulator\n            in(x: 0, y: 0, name: \"element\") property(Number) element_in\n            out(x: 80, y: 0, name: \"result\") property(Number) result_out\n\n            instance(x: 20, y: 0) multiply root.Std_k98ojb.Math.Mul {}\n            connect(accumulator -> multiply.first)\n            connect(element_in -> multiply.second)\n            connect(multiply.result -> result_out)\n        }\n        reduce_product.handler = handler_for_reduce\n        connect(reduce_product.result -> output_cffcc2)\n\n        \n        connect(reduce_product.completed -> continue_45190b)\n    }\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff2_a3c1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 125) concat_7e2a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_a3c1.left\n        list1_ai -> diff2_a3c1.right\n\n        diff1_9f8d.difference -> concat_7e2a.left\n        diff2_a3c1.difference -> concat_7e2a.right\n\n        concat_7e2a.list -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 100) len_node root.Std_k98ojb.List.Length {}\n        list_48148f -> len_node.list\n\n        \n        instance(x: 200, y: 150) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c -> modulo_node.value\n        len_node.length -> modulo_node.divisor\n\n        \n        instance(x: 300, y: 150) sub_node root.Std_k98ojb.Math.Sub {}\n        len_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        \n        instance(x: 400, y: 200) slice_second root.Std_k98ojb.List.Slice {\n            start = sub_node.result\n            end = -1\n        }\n        list_48148f -> slice_second.list\n\n        \n        instance(x: 400, y: 300) slice_first root.Std_k98ojb.List.Slice {\n            start = 0\n            end = sub_node.result\n        }\n        list_48148f -> slice_first.list\n\n        \n        instance(x: 500, y: 250) concat_node root.Std_k98ojb.List.Concat {}\n        slice_second.slice -> concat_node.left\n        slice_first.slice -> concat_node.right\n        concat_node.result -> output_823209\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: -10) reduce_3d7eaa root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3d7eaa.items\n        0 -> reduce_3d7eaa.initialValue\n        func() {\n            in(x: -241, y: -58, name: \"acc\") property(Number) acc_9a3b3f\n            in(x: -236, y: 22, name: \"item\") property(Number) item_7d0e8c\n\n            out(x: 304, y: -45, name: \"\") property(Number) _1a3d9d\n\n            instance(x: 87, y: -46) add_4b2f3d root.Std_k98ojb.Math.Add {}\n            acc_9a3b3f -> add_4b2f3d.first\n            item_7d0e8c -> add_4b2f3d.second\n            add_4b2f3d.result -> _1a3d9d\n        } -> reduce_3d7eaa.reducer\n        reduce_3d7eaa.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -165, y: 10) _sum_3b7c8a root.main._sum {}\n\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -100) lessThanEq root.Std_k98ojb.Math.LessThanOrEqual {}\n        num_5c0677 -> lessThanEq.first\n        1 -> lessThanEq.second\n\n        instance ifEdgeCase root.Std_k98ojb.Std.If {}\n        execute_b7b391 -> ifEdgeCase.execute\n        lessThanEq.result -> ifEdgeCase.predicate\n\n        \n        setter(x: -50, y: 100) name=setFalse property(Bool) = output_c457b3 {\n            new_value <- false\n        }\n        ifEdgeCase.then -> setFalse.execute\n        setFalse.continue -> continue_9a54bb\n\n        \n        instance computeSqrt root.Std_k98ojb.Math.Expression {\n            expression: \"Math.sqrt(value)\"\n        }\n        num_5c0677 -> computeSqrt.value\n\n        instance floorSqrt root.Std_k98ojb.Math.Floor {}\n        computeSqrt.result -> floorSqrt.input\n\n        instance genRange root.Std_k98ojb.List.GenerateRange {\n            first: 2\n        }\n        floorSqrt.output -> genRange.last\n\n        instance findDivisor root.Std_k98ojb.Iteration.Find {}\n        genRange.result -> findDivisor.items\n        num_5c0677 -> findDivisor.context\n\n        \n        func() {\n            in(name: \"current\") property(Number) current_item\n            in(name: \"context\") property(Number) context_num\n\n            instance modulo root.Std_k98ojb.Math.Modulo {}\n            context_num -> modulo.value\n            current_item -> modulo.divisor\n\n            instance eqZero root.Std_k98ojb.Math.Equal {}\n            modulo.result -> eqZero.first\n            0 -> eqZero.second\n\n            eqZero.equals -> output \n        } -> findDivisor.handler\n\n        \n        instance hasDivisor root.Std_k98ojb.Std.IfExpression {\n            expression: \"a != null\"\n        }\n        findDivisor.item -> hasDivisor.gen_0 \n\n        \n        instance decideOutput root.Std_k98ojb.Std.If {}\n        ifEdgeCase.else -> decideOutput.execute \n        hasDivisor.result -> decideOutput.predicate\n\n        \n        setter(x: 200, y: 150) name=setFalse2 property(Bool) = output_c457b3 {\n            new_value <- false\n        }\n        decideOutput.then -> setFalse2.execute\n        setFalse2.continue -> continue_9a54bb\n\n        \n        setter(x: 300, y: 150) name=setTrue property(Bool) = output_c457b3 {\n            new_value <- true\n        }\n        decideOutput.else -> setTrue.execute\n        setTrue.continue -> continue_9a54bb\n\n    }\n\n    \n\n    instance(x: -174, y: -63) num_prime_node root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_6d1b8e root.Std_k98ojb.Math.Mul {}\n        instance(x: 350, y: -200) lessthan_3f3c8d root.Std_k98ojb.Math.LessThan {\n            right: 0\n        }\n        x_853326 -> mul_6d1b8e.first\n        y_5390f5 -> mul_6d1b8e.second\n        mul_6d1b8e.result -> lessthan_3f3c8d.left\n        lessthan_3f3c8d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -200, y: 50) opposite_signs_node root.main.opposite_signs {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x:5, y:-25,name:\"n\") property(Number) n_27f29c\n        out(x:668,y:2,name:\"output\") property(Bool) output_f2630f\n\n        instance modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -5, y: -25) is_diff_node root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replace_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7b3b7b.input\n        search_ai -> replace_7b3b7b.search\n        replace_ai -> replace_7b3b7b.replace\n        replace_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 200, y: 50) ifexpr_node root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 == gen_1\"\n        }\n\n        input_ai -> tolower_node.input\n        input_ai -> ifexpr_node.gen_0\n        tolower_node.output -> ifexpr_node.gen_1\n        ifexpr_node.value -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance firstReduce root.Std_k98ojb.Iteration.Reduce {\n            items = list_5fda54\n            context = List.Empty().list\n\n            handler: func() {\n                in acc (List), item (Number)\n                out newAcc (List)\n\n                \n                instance containsNode root.Std_k98ojb.List.Contains {\n                    list = acc\n                    item = item\n                }\n\n                \n                instance notNode root.Std_k98ojb.Logic.Not {\n                    input = containsNode.isContained\n                }\n\n                instance ifNode root.Std_k98ojb.Std.If {\n                    predicate = notNode.result\n                }\n\n                \n                instance addNode root.Std_k98ojb.List.Add {\n                    list = acc\n                    element = item\n                }\n                addNode.listWithItem \u2192 ifNode.thenOutput\n\n                \n                acc \u2192 ifNode.elseInput\n\n                \n                ifNode.output \u2192 newAcc\n            }\n        }\n\n        \n        instance secondReduce root.Std_k98ojb.Iteration.Reduce {\n            items = firstReduce.result\n            context = 1.0\n\n            handler: func() {\n                in acc (Number), item (Number)\n                out newAcc (Number)\n\n                \n                instance mulNode root.Std_k98ojb.Math.Mul {\n                    a = acc\n                    b = item\n                }\n                mulNode.result \u2192 newAcc\n            }\n        }\n\n        \n        secondReduce.result \u2192 output_cffcc2\n\n        \n        execute_19300c \u2192 firstReduce.startTrigger\n        firstReduce.completeTrigger \u2192 secondReduce.startTrigger\n        secondReduce.completeTrigger \u2192 continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 len_node.list\n\n        \n        instance(x: 200, y: 50) mod_node root.Std_k98ojb.Math.Modulo {\n            value = n_68068c\n            divisor = len_node.length\n        }\n\n        \n        instance(x: 300, y: 50) if_zero root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 == 0\"\n        }\n        mod_node.result \u2192 if_zero.gen_0\n\n        \n        instance(x: 400, y: 100) then_setter root.Std_k98ojb.Setter {\n            property: output_823209\n        }\n        list_48148f \u2192 then_setter.value\n        if_zero.then \u2192 then_setter.trigger\n\n        \n        instance(x: 350, y: 150) split_at root.Std_k98ojb.Math.Sub {}\n        len_node.length \u2192 split_at.first\n        mod_node.result \u2192 split_at.second\n\n        \n        instance(x: 450, y: 200) first_slice root.Std_k98ojb.List.Slice {\n            start = 0\n        }\n        list_48148f \u2192 first_slice.list\n        split_at.result \u2192 first_slice.end\n\n        \n        instance(x: 550, y: 200) second_slice root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 second_slice.list\n        split_at.result \u2192 second_slice.start\n        len_node.length \u2192 second_slice.end\n\n        \n        instance(x: 650, y: 200) concat root.Std_k98ojb.List.Concat {}\n        second_slice.output \u2192 concat.left\n        first_slice.output \u2192 concat.right\n\n        \n        instance(x: 700, y: 150) else_setter root.Std_k98ojb.Setter {\n            property: output_823209\n        }\n        concat.result \u2192 else_setter.value\n        if_zero.else \u2192 else_setter.trigger\n    }\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 94, y: -105) reduce_3d7de6 root.Std_k98ojb.Iteration.Reduce {\n            initialValue: 0\n        }\n        list_2c62ab -> reduce_3d7de6.items\n        func() {\n            in(x: -121, y: -37, name: \"acc\") property(Number) acc_ai\n            in(x: -121, y: 50, name: \"item\") property(Number) item_ai\n\n            out(x: 333, y: -50, name: \"\") property(Number) _result\n\n            instance(x: 92, y: -22) add_584bfd root.Std_k98ojb.Math.Add {}\n            acc_ai -> add_584bfd.first\n            item_ai -> add_584bfd.second\n            add_584bfd.result -> _result\n        } -> reduce_3d7de6.handler\n        reduce_3d7de6.reduced -> sum_2a848f\n    }\n\n    \n\n    instance(x: -92, y: 45) _sum_b9ff6b root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", HttpQ)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(edge_case, Std_k98ojb.Std.IfExpression) {\n            expression: \"num <= 1\"\n        }\n        edge_case.gen_0 \u2190 num_5c0677\n        execute_b7b391 \u2192 edge_case.execute\n\n        \n        variable result: Bool\n        getter(x: 200, y: -100, name: \"getter_result\") getter_result = result\n        setter(x: 300, y: -50, name: \"setter_result\") setter_result = result\n\n        \n        instance(set_false_node, Std_k98ojb.Logic.False) {}\n        set_false_node.false_out \u2192 setter_result.new_value\n        edge_case.then \u2192 set_false_node.start\n        set_false_node.done \u2192 setter_result.execute\n        setter_result.continue \u2192 continue_9a54bb\n\n        \n        instance(sqrt_node, Std_k98ojb.Math.Sqrt) {\n            input \u2190 num_5c0677\n        }\n        edge_case.else \u2192 sqrt_node.start\n\n        instance(floor_sqrt, Std_k98ojb.Math.Floor) {\n            value \u2190 sqrt_node.output\n        }\n        sqrt_node.done \u2192 floor_sqrt.start\n\n        instance(gen_range, Std_k98ojb.List.GenerateRange) {\n            from: 2.0,\n            to \u2190 floor_sqrt.result\n        }\n        floor_sqrt.done \u2192 gen_range.start\n\n        instance(filter_divisors, Std_k98ojb.Query.Filter) {\n            list \u2190 gen_range.list,\n            where: \"num_5c0677 % it == 0\"\n        }\n        gen_range.done \u2192 filter_divisors.start\n\n        instance(count_divisors, Std_k98ojb.List.Length) {\n            list \u2190 filter_divisors.result\n        }\n        filter_divisors.done \u2192 count_divisors.start\n\n        instance(is_greater_zero, Std_k98ojb.Math.GreaterThan) {\n            a \u2190 count_divisors.length,\n            b: 0.0\n        }\n        count_divisors.done \u2192 is_greater_zero.start\n\n        instance(not_prime_node, Std_k98ojb.Logic.Not) {\n            input \u2190 is_greater_zero.result\n        }\n        is_greater_zero.done \u2192 not_prime_node.start\n\n        \n        not_prime_node.output \u2192 setter_result.new_value\n        not_prime_node.done \u2192 setter_result.execute\n        setter_result.continue \u2192 continue_9a54bb\n\n        \n        getter_result.value \u2192 output_c457b3\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 48, y: -167) ifexpression_3d7de6 root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        x_853326 -> ifexpression_3d7de6.gen_0\n        y_5390f5 -> ifexpression_3d7de6.gen_1\n        ifexpression_3d7de6.value -> output_3339a3\n    }\n\n    \n\n    instance(x: -248, y: -20) opposite_signs_def root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 145, y: 30) ifexpr_abc root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % 11 == 0\"\n        }\n        n_27f29c -> ifexpr_abc.n\n        ifexpr_abc.value -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: -40) is_diff_node root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_f2a6c3 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_f2a6c3.left\n        tolower_7b3b7b.output -> equal_f2a6c3.right\n        equal_f2a6c3.result -> output_ai\n    }\n\n    \n\n    instance(x: -10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -300, y: -200) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 100, y: -150) reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.result\n        }\n        \n        \n        reduce_unique.handler = function() {\n            in(x: 0, y: 0, name: \"currentAcc\") property(List) currentAcc_ai\n            in(x: 0, y: 50, name: \"currentItem\") property(Number) currentItem_ai\n\n            out(x: 200, y: 0, name: \"newAcc\") property(List) newAcc_ai\n            \n            instance contains_5f8d root.Std_k98ojb.List.Contains {\n                list: currentAcc_ai\n                item: currentItem_ai\n            }\n\n            instance if_node root.Std_k98ojb.Std.If {\n                predicate: contains_5f8d.result\n            }\n            \n            \n            currentAcc_ai \u2192 if_node.thenBranchInput\n\n            \n            instance add_node root.Std_k98ojb.List.Add {\n                list: currentAcc_ai\n                item: currentItem_ai\n            }\n            add_node.result \u2192 if_node.elseBranchInput\n            \n            if_node.output \u2192 newAcc_ai\n        }\n\n        \n        instance(x: 400, y: -150) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1 \n        }\n        \n        \n        reduce_product.handler = function() {\n            in(x: 0, y: 0, name: \"accumulatedProduct\") property(Number) acc_ai\n            in(x: 0, y: 50, name: \"currentItem\") property(Number) item_ai\n\n            out(x: 200, y: 0, name: \"newAcc\") property(Number) newAcc_ai\n            \n            instance multiply root.Std_k98ojb.Math.Mul {\n                a: acc_ai\n                b: item_ai\n            }\n            \n            multiply.result \u2192 newAcc_ai\n        }\n\n        \n        reduce_product.result \u2192 output_cffcc2\n        execute_19300c \u2192 reduce_unique.startTrigger\n        reduce_product.doneTrigger \u2192 continue_45190b\n    }\n\n    \n\n    instance(x: -174, y: -63) unique_prod_node root.main.unique_product {}\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(len_node) root.Std_k98ojb.List.Length {}\n        list_48148f -> len_node.list\n        let list_length = len_node.length;\n\n        \n        instance(mod_node) root.Std_k98ojb.Math.Modulo {\n            value: n_68068c,\n            divisor: list_length\n        }\n        let effective_n = mod_node.result;\n\n        \n        instance(eq_node) root.Std_k98ojb.Math.Equal {\n            a: effective_n,\n            b: 0\n        }\n        let is_zero = eq_node.result;\n\n        \n        instance(sub_node) root.Std_k98ojb.Math.Sub {\n            first: list_length,\n            second: effective_n\n        }\n        let start = sub_node.result;\n\n        \n        instance(slice_first) root.Std_k98ojb.List.Slice {}\n        list_48148f -> slice_first.list;\n        0 \u2192 slice_first.start; \n        start \u2192 slice_first.end; \n\n        instance(slice_second) root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 slice_second.list;\n        start \u2192 slice_second.start; \n        list_length \u2192 slice_second.end; \n\n        \n        instance(concat_node) root.Std_k98ojb.List.Concat {\n            left: slice_second.output,\n            right: slice_first.output\n        }\n        let rotated_list = concat_node.result;\n\n        \n        instance(ifexpr) root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 ? gen_1 : gen_2\"\n        }\n\n        is_zero \u2192 ifexpr.gen_0;  \n        list_48148f \u2192 ifexpr.gen_1; \n        rotated_list \u2192 ifexpr.gen_2; \n\n        ifexpr.output \u2192 output_823209;\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 100, y: 50) reduce_node root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_node.items\n        0 -> reduce_node.initial\n        \n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: -50, y: 0, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 0, name: \"result\") property(Number) result_out\n\n            instance(x: 0, y: 0) add_node root.Std_k98ojb.Math.Add {}\n            acc_in -> add_node.first\n            item_in -> add_node.second\n            add_node.result -> result_out\n        } -> reduce_node.handler\n        \n        reduce_node.result -> sum_2a848f\n    }\n\n    \n\n    instance(x: 0, y: 0) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance lessThan_node Std_k98ojb.Math.LessThan {\n            left = num_5c0677\n            right = 2\n        }\n\n        instance if_edge_case Std_k98ojb.Std.If {\n            condition = lessThan_node.result\n        }\n\n        \n        instance setter_false Setter for output_c457b3 {\n            new_value = false\n        }\n        trigger(if_edge_case.thenBranch) \u2192 execute(setter_false)\n        after(setter_false) \u2192 trigger(continue_9a54bb)\n\n        \n        instance sqrt_node Std_k98ojb.Math.Sqrt {\n            value = num_5c0677\n        }\n\n        instance floor_sqrt_node Std_k98ojb.Math.Floor {\n            number = sqrt_node.result\n        }\n\n        instance list_range Std_k98ojb.List.GenerateRange {\n            from = 2\n            to = floor_sqrt_node.result\n        }\n\n        \n        instance find_divisor Std_k98ojb.Iteration.Find {\n            items = list_range.list\n        }\n\n        \n        func() predicate_handler {\n            in current: property(Number)\n\n            instance modulo_node Std_k98ojb.Math.Modulo {\n                value = num_5c0677\n                divisor = current\n            }\n            \n            instance equal_zero Std_k98ojb.Math.Equal {\n                a = modulo_node.result\n                b = 0\n            }\n\n            out predicate: equal_zero.equals\n        } \u2192 find_divisor.handler\n\n        \n        instance check_found Std_k98ojb.Std.IfExpression {\n            expression: \"find_divisor.item != null\"\n        }\n\n        \n        instance setter_output Setter for output_c457b3 {\n            new_value = !check_found.result\n        }\n        \n        after(setter_output) \u2192 trigger(continue_9a54bb)\n\n        \n        trigger(if_edge_case.elseBranch) \u2192 execute(sqrt_node)\n    }\n\n    instance prime_check_instance Std_k98ojb.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_5d3e3c root.Std_k98ojb.Math.Mul {}\n        instance(x: 309, y: -172) lessthan_3f3a3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_5d3e3c.first\n        y_5390f5 -> mul_5d3e3c.second\n        0 -> lessthan_3f3a3d.right\n        mul_5d3e3c.result -> lessthan_3f3a3d.left\n        lessthan_3f3a3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: 20) opposite_signs_def root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 147, y: 50) ifexpression_3d7de6 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % 11 == 0\"\n        }\n        n_27f29c -> ifexpression_3d7de6.gen_0\n        ifexpression_3d7de6.value -> output_f2630f\n    }\n\n    \n\n    instance(x: -45, y: -8) is_diff_def root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_foo root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_foo.left\n        input_ai -> equal_foo.right\n        equal_foo.result -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) is_lower_node root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }\n\n        \n        func() {\n            in(accum: property(List), current: property(Number))\n            out(output_list: property(List))\n\n            instance contains root.Std_k98ojb.List.Contains {}\n                list: accum\n                item: current\n\n            instance if_node root.Std_k98ojb.Std.If {}\n                predicate: contains.isContained\n                then:\n                    \n                    accum -> output_list\n                else:\n                    \n                    instance add root.Std_k98ojb.List.Add {}\n                        list: accum\n                        element: current\n                    add.resultList -> output_list\n        } -> reduce_unique.handler\n\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1.0 \n        }\n\n        \n        func() {\n            in(accum: property(Number), current: property(Number))\n            out(output_number: property(Number))\n\n            instance multiply root.Std_k98ojb.Math.Multiply {}\n                first: accum\n                second: current\n\n            multiply.result -> output_number\n        } -> reduce_product.handler\n\n        \n        reduce_product.output -> output_cffcc2\n\n        \n        execute_19300c -> reduce_unique.trigger\n        reduce_unique.completed -> reduce_product.trigger\n        reduce_product.completed -> continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff2_a3c1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 125) concat_7e2a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_a3c1.left\n        list1_ai -> diff2_a3c1.right\n\n        diff1_9f8d.difference -> concat_7e2a.left\n        diff2_a3c1.difference -> concat_7e2a.right\n\n        concat_7e2a.list -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 45, y: -100) length_7a3d5e root.Std_k98ojb.List.Length {}\n        instance(x: 160, y: -100) modulo_8c3f3a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 275, y: -100) sub_4e1d0d root.Std_k98ojb.Math.Sub {}\n        instance(x: 390, y: -100) slice_b_6f3a8c root.Std_k98ojb.List.Slice {}\n        instance(x: 505, y: -100) slice_a_7e4d2f root.Std_k98ojb.List.Slice {}\n        instance(x: 620, y: -100) concat_8d6a10 root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_7a3d5e.list\n        n_68068c -> modulo_8c3f3a.value\n        length_7a3d5e.length -> modulo_8c3f3a.divisor\n        length_7a3d5e.length -> sub_4e1d0d.first\n        modulo_8c3f3a.result -> sub_4e1d0d.second\n\n        sub_4e1d0d.result -> slice_b_6f3a8c.start\n        length_7a3d5e.length -> slice_b_6f3a8c.end\n        list_48148f -> slice_b_6f3a8c.list\n\n        0 -> slice_a_7e4d2f.start\n        sub_4e1d0d.result -> slice_a_7e4d2f.end\n        list_48148f -> slice_a_7e4d2f.list\n\n        slice_b_6f3a8c.sliceResult -> concat_8d6a10.left\n        slice_a_7e4d2f.sliceResult -> concat_8d6a10.right\n        concat_8d6a10.concatenatedList -> output_823209\n    }\n\n    \n\n    instance(x: -50, y: 0) rotate_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: -10) reduce_3d7e3b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3d7e3b.items\n        0 -> reduce_3d7e3b.initialValue\n        func() {\n            in(x: -154, y: -52, name: \"acc\") property(Number) acc_9a8f5d\n            in(x: -162, y: 28, name: \"item\") property(Number) item_7e3b0c\n\n            out(x: 300, y: -48, name: \"\") property(Number) _eaa5d9\n\n            instance(x: 98, y: -51) add_6a2f8a root.Std_k98ojb.Math.Add {}\n            acc_9a8f5d -> add_6a2f8a.first\n            item_7e3b0c -> add_6a2f8a.second\n            add_6a2f8a.result -> _eaa5d9\n        } -> reduce_3d7e3b.reducer\n        reduce_3d7e3b.reducedValue -> sum_2a848f\n    }\n\n    \n\n    instance(x: -10, y: 16) _sum_4c3e3a root.main._sum {}\n\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -50) if_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 <= 1\"\n        }\n        num_5c0677 \u2192 if_edge.gen_0\n        execute_b7b391 \u2192 if_edge.execute\n\n        \n        instance(x: -100, y: 100) set_false root.Std_k98ojb.Setter {\n            new_value = false\n        }\n        getter(x: -50, y: 150, name: \"getter_1\") getter_1 = output_c457b3\n        setter(x: -20, y: 160, name: \"setter_1\") setter_1 = output_c457b3\n\n        if_edge.then \u2192 set_false.execute\n        set_false.new_value \u2192 setter_1.new_value\n        setter_1.continue \u2192 continue_9a54bb\n\n        \n        instance(x: 200, y: -100) expr_sqrt root.Std_k98ojb.Math.Expression {\n            expression: \"Math.sqrt(gen_0)\"\n        }\n        num_5c0677 \u2192 expr_sqrt.gen_0\n\n        instance(x: 300, y: -100) floored root.Std_k98ojb.Math.Floor {\n            value = expr_sqrt.output\n        }\n\n        instance(x: 400, y: -100) genrange root.Std_k98ojb.List.GenerateRange {\n            from = 2.0\n            to = floored.result\n        }\n\n        instance(x: 500, y: -100) filter_div root.Std_k98ojb.Query.Filter {\n            where: \"num_5c0677 % it == 0\"\n        }\n        genrange.list \u2192 filter_div.items\n\n        instance(x: 600, y: -100) len_div root.Std_k98ojb.List.Length {\n            list = filter_div.result\n        }\n\n        \n        instance(x: 700, y: -50) if_nonzero root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 > 0\"\n        }\n        len_div.length \u2192 if_nonzero.gen_0\n\n        \n        instance(x: 800, y: 100) set_true root.Std_k98ojb.Setter {\n            new_value = true\n        }\n        instance(x: 850, y: 100) set_false2 root.Std_k98ojb.Setter {\n            new_value = false\n        }\n\n        if_nonzero.then \u2192 set_false2.execute\n        if_nonzero.else \u2192 set_true.execute\n\n        \n        set_true.new_value \u2192 setter_1.new_value\n        set_false2.new_value \u2192 setter_1.new_value\n\n        \n        set_true.continue \u2192 continue_9a54bb\n        set_false2.continue \u2192 continue_9a54bb\n    }\n\n    \n\n    instance(x: -30, y: 0) prime_check root.main.num_prime {}\n\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 86, y: -147) multiply_6d5b0c root.Std_k98ojb.Math.Mul {}\n        instance(x: 235, y: -144) greaterthan_8e7d0f root.Std_k98ojb.Math.GreaterThan {}\n\n        x_853326 -> multiply_6d5b0c.first\n        y_5390f5 -> multiply_6d5b0c.second\n\n        0 -> greaterthan_8e7d0f.left\n        multiply_6d5b0c.result -> greaterthan_8e7d0f.right\n\n        greaterthan_8e7d0f.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -421, y: -175) opposite_signs_node root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 150, y: 0) modulo_4e8c54 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 0) equal_ea3a3a root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4e8c54.value\n        11 -> modulo_4e8c54.divisor\n\n        modulo_4e8c54.result -> equal_ea3a3a.left\n        0 -> equal_ea3a3a.right\n\n        equal_ea3a3a.equals -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_instance root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 372, y: 133) tolower_5a4c0b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 683, y: 133) equal_bf5d3e root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_5a4c0b.input\n        tolower_5a4c0b.output -> equal_bf5d3e.left\n        input_ai -> equal_bf5d3e.right\n        equal_bf5d3e.result -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list (Std_k98ojb.List.Empty)\n\n        \n        instance unique_reduce (Std_k98ojb.Iteration.Reduce) {\n            items = list_5fda54,\n            initial = empty_list.output,\n\n            handler: func() {\n                in(acc_list: List, item: Number)\n                out(new_acc: List)\n\n                \n                instance contains (Std_k98ojb.List.Contains) list=acc_list, item=item\n\n                \n                instance add_node (Std_k98ojb.List.Add) list=acc_list, item=item\n\n                \n                instance condition (Std_k98ojb.Std.IfExpression)\n                    condition = contains.isContained,\n                    thenValue = acc_list,\n                    elseValue = add_node.output\n\n                new_acc = condition.result\n            }\n        }\n\n        \n        instance initial_one (Std_k98ojb.Math.NumberLiteral) value=1\n        instance product_reduce (Std_k98ojb.Iteration.Reduce) {\n            items = unique_reduce.output_list,\n            initial = initial_one.output,\n\n            handler: func() {\n                in(accumulator: Number, item: Number)\n                out(new_acc: Number)\n\n                \n                instance multiply (Std_k98ojb.Math.Mul) a=accumulator, b=item\n\n                new_acc = multiply.result\n            }\n        }\n\n        \n        execute_19300c \u2192 unique_reduce.execute\n        unique_reduce.done \u2192 product_reduce.execute\n        product_reduce.done \u2192 continue_45190b\n\n        \n        product_reduce.result \u2192 output_cffcc2\n    }\n\n    instance unique_product_instance root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8a3c root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) diff2_b7e0d1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_3a6f5e root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8a3c.left\n        list2_ai -> diff1_9f8a3c.right\n\n        list2_ai -> diff2_b7e0d1.left\n        list1_ai -> diff2_b7e0d1.right\n\n        diff1_9f8a3c.difference -> concat_3a6f5e.left\n        diff2_b7e0d1.difference -> concat_3a6f5e.right\n\n        concat_3a6f5e.list -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {\n            list = list_48148f\n        }\n\n        \n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {\n            value = n_68068c,\n            divisor = len_node.length\n        }\n\n        \n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {\n            first = len_node.length,\n            second = modulo_node.result\n        }\n\n        \n        instance(x: 400, y: 100) second_slice root.Std_k98ojb.List.Slice {\n            list = list_48148f,\n            start = sub_node.result,\n            end = -1\n        }\n\n        \n        instance(x: 400, y: 200) first_slice root.Std_k98ojb.List.Slice {\n            list = list_48148f,\n            start = 0,\n            end = sub_node.result\n        }\n\n        \n        instance(x: 500, y: 150) concat_node root.Std_k98ojb.List.Concat {\n            left = second_slice.slice,\n            right = first_slice.slice\n        }\n\n        \n        concat_node.result \u2192 output_823209\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 200, y: 50) reduce_1a2b3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_1a2b3c.items\n        0 -> reduce_1a2b3c.initialValue\n\n        func() {\n            in(x: -50, y: 0, name: \"current\") property(Number) current_ai\n            in(x: 50, y: 0, name: \"item\") property(Number) item_ai\n\n            out(x: 100, y: 0, name: \"result\") property(Number) result_ai\n\n            instance(x: 25, y: 0) add_456def root.Std_k98ojb.Math.Add {}\n            current_ai -> add_456def.first\n            item_ai -> add_456def.second\n            add_456def.result -> result_ai\n        } -> reduce_1a2b3c.reducer\n\n        reduce_1a2b3c.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -90, y: 0) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "module() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance edge_case root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 < 2\"\n        }\n        \n        execute_b7b391 -> edge_case.execute\n        \n        \n        instance set_false root.Setter { new_value: false }\n        edge_case.then -> set_false.execute\n        set_false.new_value -> output_c457b3\n        set_false.continue -> continue_9a54bb\n\n        \n        instance sqrt_pow root.Std_k98ojb.Math.Pow {\n            x: num_5c0677,\n            y: 0.5\n        }\n        \n        instance floor_sqrt root.Std_k98ojb.Math.Floor { value: sqrt_pow.result }\n\n        instance generate_range root.Std_k98ojb.List.GenerateRange {\n            from: 2.0,\n            to: floor_sqrt.output\n        }\n\n        \n        instance check_any root.Std_k98ojb.Iteration.Any {}\n        \n        generate_range.result -> check_any.items\n        \n        func() handler_for_any {\n            in item property(Number) current_divisor\n            out predicate property(Bool) pred\n            \n            instance mod_node root.Std_k98ojb.Math.Modulo {\n                value: num_5c0677,\n                divisor: current_divisor\n            }\n            \n            instance eq_zero root.Std_k98ojb.Math.Equal {\n                left: mod_node.result,\n                right: 0.0\n            }\n\n            eq_zero.equals -> pred\n        } -> check_any.handler\n\n        \n        instance compute_output root.Std_k98ojb.Std.IfExpression {\n            expression: \"!check_any.any\"\n        }\n        \n        edge_case.else -> compute_output.execute\n        \n        compute_output.result -> output_c457b3\n        check_any.continue -> compute_output.execute\n\n        \n        instance final_set root.Setter { new_value: true } \n        compute_output.continue -> final_set.execute\n        final_set.continue -> continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 200, y: 0) expr_node root.Std_k98ojb.Math.Expression {\n            expression = \"a * b < 0\"\n        }\n        x_853326 \u2192 expr_node.gen_0\n        y_5390f5 \u2192 expr_node.gen_1\n        expr_node.result \u2192 output_3339a3\n    }\n\n    \n\n    instance(x: -42, y: 127) opposite_signs_node root.main.opposite_signs {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: -50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_27f29c -> modulo_node.value\n        11 -> modulo_node.divisor\n        \n        instance(x: 200, y: -50) equal_node root.Std_k98ojb.Logic.Equal {}\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n\n        equal_node.result -> output_f2630f\n    }\n\n    \n\n    instance(x: 10, y: -20) is_diff_node root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_1 root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_1.input\n        search_ai -> replace_1.search\n        replace_ai -> replace_1.replace\n        replace_1.output -> output_ai\n    }\n\n    \n\n    instance(x: -50, y: 30) replacer_node root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 80) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 300, y: 80) equal_e38995 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_e38995.left\n        tolower_7b3b7b.output -> equal_e38995.right\n        equal_e38995.result -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 10) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -300, y: -200) empty_list_node root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 150, y: 100) reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items = list_5fda54,\n            initial = empty_list_node.list\n        }\n\n        \n        func() handler_reduce_unique {\n            in acc: List, value: Number\n\n            out new_acc: List\n\n            instance(x: 0, y: 50) contains root.Std_k98ojb.List.Contains {\n                list = acc,\n                value = value\n            }\n\n            \n            instance(x: 100, y: 50) add_node root.Std_k98ojb.List.Add {\n                list = acc,\n                value = value\n            }\n            \n            instance(x: 200, y: 0) conditional root.Std_k98ojb.Std.If {\n                condition = !contains.isFound\n            }\n\n            \n            conditional.then -> add_node.result -> new_acc\n            conditional.else -> acc -> new_acc\n        }\n        reduce_unique.handler = handler_reduce_unique\n\n        \n        instance(x: 500, y: 100) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items = reduce_unique.result,\n            initial = 1.0\n        }\n\n        \n        func() handler_reduce_product {\n            in acc: Number, value: Number\n\n            out new_acc: Number\n\n            instance(x: 50, y: 0) multiply root.Std_k98ojb.Math.Mul {\n                first = acc,\n                second = value\n            }\n            \n            multiply.result -> new_acc\n        }\n        reduce_product.handler = handler_reduce_product\n\n        \n        reduce_product.result -> output_cffcc2\n\n        \n        instance(x: 600, y: 150) sequence root.Std_k98ojb.Sequence {\n            inputs = [reduce_unique.complete, reduce_product.complete]\n        }\n\n        execute_19300c -> reduce_unique.startTrigger\n        sequence.completed -> continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 150, y: 100) difference_a root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: -50) difference_b root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 50) concat_abc root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference_a.left\n        list2_ai -> difference_a.right\n\n        list2_ai -> difference_b.left\n        list1_ai -> difference_b.right\n\n        difference_a.difference -> concat_abc.left\n        difference_b.difference -> concat_abc.right\n\n        concat_abc.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) get_length root.Std_k98ojb.List.Length {}\n        list_48148f -> get_length.list\n\n        \n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {\n            value = n_68068c\n            divisor = get_length.length\n        }\n\n        \n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {\n            first = get_length.length\n            second = modulo_node.result\n        }\n        \n        \n        instance(x: 400, y: 50) slice1 root.Std_k98ojb.List.Slice {\n            list = list_48148f\n            start = sub_node.result\n            end = -1\n        }\n\n        instance(x: 400, y: 150) slice2 root.Std_k98ojb.List.Slice {\n            list = list_48148f\n            start = 0\n            end = sub_node.result\n        }\n        \n        \n        instance(x: 500, y: 100) concat root.Std_k98ojb.List.Concat {\n            left = slice1.sliceResult\n            right = slice2.sliceResult\n        }\n\n        concat.concatenated -> output_823209\n    }\n    \n    \n    instance(x: -50, y: 0) rotate_right_inst root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 90, y: -150) reduce_f3e8 root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_f3e8.items\n        0 -> reduce_f3e8.initial\n        \n        func() {\n            in(x: -70, y: -40, name: \"acc\") property(Number) acc_in\n            in(x: -50, y: 10, name: \"item\") property(Number) item_in\n\n            instance add_2c root.Std_k98ojb.Math.Add {}\n            acc_in -> add_2c.first\n            item_in -> add_2c.second\n            add_2c.result -> out(\"output\", Number)\n        } -> reduce_f3e8.handler\n        \n        reduce_f3e8.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -10, y: 50) _sum_inst root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        var isPrime = false\n        setter(x: 100, y: 100, name: \"setter_isPrime\") setter_isPrime = isPrime\n        getter(x: 200, y: 200, name: \"getter_isPrime\") getter_isPrime = isPrime\n\n        \n        instance(x: -50, y: -50) lessThanOrEqual root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677\n            right = 1\n        }\n\n        instance(x: -30, y: -40) stdIf root.Std_k98ojb.Std.If {\n            predicate = lessThanOrEqual.result\n        }\n\n        \n        stdIf.then \u2192 trigger setter_isPrime.execute {\n            new_value = false\n        }\n        trigger setter_isPrime.execute \u2192 trigger continue_9a54bb\n\n        \n        instance(x: 50, y: -30) sqrtExpr root.Std_k98ojb.Math.Expression {\n            expression = \"pow(x,0.5)\"\n            inputs.x = num_5c0677\n        }\n\n        instance(x: 60, y: -20) floorSqrt root.Std_k98ojb.Math.Floor {\n            value = sqrtExpr.result\n        }\n\n        \n        instance(x: 70, y: -10) genRange root.Std_k98ojb.List.GenerateRange {\n            from = 2\n            to = floorSqrt.result\n        }\n\n        \n        instance(x: 80, y: 0) findDivisor root.Std_k98ojb.Iteration.Find {\n            items = genRange.list\n            handler: { \n                in(x: ..., name: \"current\") property(Number) current_ai\n\n                instance(...) modNode root.Std_k98ojb.Math.Modulo {\n                    value = num_5c0677\n                    divisor = current_ai\n                }\n\n                instance(...) isDivisible root.Std_k98ojb.Logic.Equal {\n                    left = modNode.result\n                    right = 0\n                }\n\n                out(\"predicate\") predicate = isDivisible.equals \n            }\n        }\n\n        \n        instance(x: 100, y: 20) checkFound root.Std_k98ojb.Std.IfExpression {\n            expression: \"a != Null\"\n            gen_a = findDivisor.item\n        }\n\n        \n        instance(x: 120, y: 30) invertResult root.Std_k98ojb.Logic.Not {\n            left = checkFound.result\n        }\n\n        \n        trigger findDivisor.done \u2192 trigger setter_isPrime.execute {\n            new_value = invertResult.result\n        }\n        trigger setter_isPrime.execute \u2192 trigger continue_9a54bb\n\n        \n        getter_isPrime.value \u2192 output_c457b3\n\n        \n        execute_b7b391 \u2192 trigger stdIf.execute\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_5d3e3c root.Std_k98ojb.Math.Mul {}\n        instance(x: 309, y: -172) lessthan_3f3d3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_5d3e3c.first\n        y_5390f5 -> mul_5d3e3c.second\n        0 -> lessthan_3f3d3d.right\n        mul_5d3e3c.result -> lessthan_3f3d3d.left\n        lessthan_3f3d3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: 20) opposite_signs_def root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: 50) check_div root.Std_k98ojb.Std.IfExpression {\n            expression: \"it % 11 == 0\"\n        }\n        n_27f29c -> check_div.it\n        check_div.value -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: -30) is_diff_node root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 100) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 300, y: 100) equal_node_4e8c54 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_node_4e8c54.left\n        tolower_7b3b7b.output -> equal_node_4e8c54.right\n        equal_node_4e8c54.result -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -300, y: -200) empty_node Std.List.Empty {}\n        variable< List<Number> > seen_list {\n            initial_value: []\n        }\n        setter_seen = Std.Setter {\n            new_value: empty_node.output\n        } -> execute_19300c\n\n        \n        instance(x: 200, y: 50) filter_unique Std.Iteration.Filter {}\n        list_5fda54 -> filter_unique.items\n\n        filter_unique.handler = function (current_element: Number) returns Bool {\n            getter_seen = seen_list.getter\n            current_seen = getter_seen.value\n\n            contains_node = Std.List.Contains {\n                item: current_element,\n                list: current_seen\n            }\n\n            include = !contains_node.isContained\n\n            if (include) {\n                new_seen = Std.List.Add(current_seen, current_element)\n                setter_seen.new_value = new_seen\n                trigger(setter_seen.execute)\n            }\n\n            return include\n        }\n\n        \n        instance(x: 500, y: 100) reduce_product Std.Iteration.Reduce {}\n        filter_unique.result -> reduce_product.items\n\n        initial_value_node = Std.Math.Constant(1)\n        initial_value_node.output -> reduce_product.initialValue\n\n        reduce_product.handler = function (current: Number, element: Number) returns Number {\n            return current * element\n        }\n\n        reduce_product.result -> output_cffcc2\n        reduce_product.done -> continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff2_a3c1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 125) concat_7e2a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_a3c1.left\n        list1_ai -> diff2_a3c1.right\n\n        diff1_9f8d.difference -> concat_7e2a.left\n        diff2_a3c1.difference -> concat_7e2a.right\n\n        concat_7e2a.list -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 list_length.list\n\n        instance modulo_k root.Std_k98ojb.Math.Modulo {}\n        n_68068c \u2192 modulo_k.value\n        list_length.length \u2192 modulo_k.divisor\n\n        instance split_sub root.Std_k98ojb.Math.Sub {}\n        list_length.length \u2192 split_sub.first\n        modulo_k.result \u2192 split_sub.second\n\n        \n        instance slice_b root.Std_k98ojb.List.Slice {}\n        split_sub.result \u2192 slice_b.start\n        list_length.length \u2192 slice_b.end\n        list_48148f \u2192 slice_b.list\n\n        \n        instance slice_a root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        split_sub.result \u2192 slice_a.end\n        list_48148f \u2192 slice_a.list\n\n        \n        instance concat_node root.Std_k98ojb.List.Concat {}\n        slice_b.output \u2192 concat_node.left\n        slice_a.output \u2192 concat_node.right\n\n        concat_node.result \u2192 output_823209\n    }\n\n    \n\n    instance(x: -174, y: -63) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: -10) reduce_3d7e3b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3d7e3b.items\n        0 -> reduce_3d7e3b.initialValue\n        func() {\n            in(x: -154, y: -52, name: \"acc\") property(Number) acc_9a8f5d\n            in(x: -162, y: 28, name: \"item\") property(Number) item_7e3b0c\n\n            out(x: 300, y: -48, name: \"\") property(Number) _3e3b9a\n\n            instance(x: 58, y: -51) add_6d2a4f root.Std_k98ojb.Math.Add {}\n            acc_9a8f5d -> add_6d2a4f.first\n            item_7e3b0c -> add_6d2a4f.second\n            add_6d2a4f.result -> _3e3b9a\n        } -> reduce_3d7e3b.reducer\n        reduce_3d7e3b.reducedValue -> sum_2a848f\n    }\n\n    \n\n    instance(x: -105, y: 6) sum_node root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance edge_case_lt_two root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677;\n            right = 1; \n        }\n\n        instance if_edge_case root.Std_k98ojb.Std.If {\n            predicate = edge_case_lt_two.result;\n\n            then: \n                output_c457b3 = false;\n                trigger(continue_9a54bb);\n\n            else:\n                \n        }\n\n        \n        instance sqrt_expr root.Std_k98ojb.Math.Expression {\n            expression = \"Math.sqrt(n)\";\n            inputs: n = num_5c0677;\n        }\n        \n        instance floored_sqrt root.Std_k98ojb.Math.Floor {\n            value = sqrt_expr.result;\n        }\n\n        \n        instance divisor_candidates root.Std_k98ojb.List.GenerateRange {\n            from = 2;\n            to = floored_sqrt.floorResult; \n        }\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items = divisor_candidates.result;\n\n            handler: \n                func() {\n                    in(name: \"current\") property(Number) current;\n                    in(name: \"context\") property(Number) context_num; \n\n                    out(name: \"output\") property(Bool) result;\n\n                    instance modulo root.Std_k98ojb.Math.Modulo {\n                        value = context_num;\n                        divisor = current;\n                    }\n\n                    instance is_divisible root.Std_k98ojb.Math.Equal {\n                        a = modulo.result;\n                        b = 0;\n                    }\n                    \n                    is_divisible.equals \u2192 result; \n                };\n\n            \n            context = num_5c0677;\n        }\n\n        \n        instance determine_prime root.Std_k98ojb.Std.If {\n            predicate = find_divisor.item != null; \n\n            then: \n                output_c457b3 = false;\n\n            else:\n                output_c457b3 = true;\n\n            trigger(continue_9a54bb);\n        }\n\n        \n        execute_b7b391 \u2192 if_edge_case.execute;\n\n        \n        if_edge_case.else \u2192 sqrt_expr.input;\n        sqrt_expr.output \u2192 floored_sqrt.value;\n        floored_sqrt.output \u2192 divisor_candidates.to;\n        divisor_candidates.result \u2192 find_divisor.items;\n        find_divisor.item \u2192 determine_prime.predicate_input;\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 150, y: -175) multiply_6e3b8c root.Std_k98ojb.Math.Mul {}\n        x_853326 -> multiply_6e3b8c.first\n        y_5390f5 -> multiply_6e3b8c.second\n\n        instance(x: 300, y: -175) lessthan_4a7d8e root.Std_k98ojb.Math.LessThan {}\n        multiply_6e3b8c.result -> lessthan_4a7d8e.left\n        0 -> lessthan_4a7d8e.right\n\n        lessthan_4a7d8e.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -150, y: -200) opposite_signs_def root.main.opposite_signs {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 147, y: 50) modulo_8e3d2a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 350, y: 50) equal_7c8f6b root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_8e3d2a.value\n        11 -> modulo_8e3d2a.divisor\n        modulo_8e3d2a.result -> equal_7c8f6b.left\n        0 -> equal_7c8f6b.right\n        equal_7c8f6b.equals -> output_f2630f\n    }\n\n    \n\n    instance(x: -14, y: -25) is_diff_def root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 300, y: 100) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 500, y: 150) equal_f12a4d root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_f12a4d.right\n        input_ai -> equal_f12a4d.left\n        equal_f12a4d.result -> output_ai\n    }\n    \n\n    instance(x: -50, y: 80) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        instance empty_list root.Std_k98ojb.List.Empty {}\n        \n        \n        instance unique_reduce root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54,\n            initial_value: empty_list.list\n        }\n        \n        unique_reduce.handler = func() { \n            in(x: -200, y: 50) property(List) currentAcc;\n            in(x: -180, y: 60) property(Number) item;\n\n            out(x: 300, y: 70) property(List) newAcc;\n\n            instance contains root.Std_k98ojb.List.Contains {\n                list: currentAcc,\n                item: item\n            }\n\n            instance not_node root.Std_k98ojb.Logic.Not { input: contains.result }\n            \n            instance if_cond root.Std_k98ojb.Std.If {}\n            not_node.output -> if_cond.predicate\n\n            \n            instance add_node root.Std_k98ojb.List.Add {\n                list: currentAcc,\n                item: item\n            }\n            add_node.listWithItem -> if_cond.then_value\n            \n            \n            currentAcc -> if_cond.else_value\n\n            if_cond.value -> newAcc\n        }\n\n        \n        instance product_reduce root.Std_k98ojb.Iteration.Reduce {\n            items: unique_reduce.result,\n            initial_value: 1.0\n        }\n        \n        product_reduce.handler = func() { \n            in(x: -200, y:50) property(Number) acc;\n            in(x:-180,y:60) property(Number) num;\n\n            out(x:300,y:70) property(Number) newAcc;\n\n            instance multiply root.Std_k98ojb.Math.Mul {\n                a: acc,\n                b: num\n            }\n            \n            multiply.result -> newAcc\n        }\n\n        \n        execute_19300c -> unique_reduce.trigger\n        unique_reduce.done -> product_reduce.trigger\n        product_reduce.done -> continue_45190b\n\n        product_reduce.result -> output_cffcc2\n    }\n    \n\n    instance(x: -174, y: -63) unique_product_node root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 150) diff2_ae3c root.Std_k98ojb.Sets.Difference {}\n        instance(x: 500, y: 100) concat_4a7f root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_ae3c.left\n        list1_ai -> diff2_ae3c.right\n\n        diff1_9f8d.difference -> concat_4a7f.left\n        diff2_ae3c.difference -> concat_4a7f.right\n\n        concat_4a7f.list -> output_ai\n    }\n\n    \n\n    instance(x: -50, y: 30) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {\n            list: list_48148f\n        }\n\n        \n        instance(x: 200, y: 30) const_zero root.Std_k98ojb.Math.Constant {\n            value: 0\n        }\n        \n        instance(x: 250, y: 60) const_minus_one root.Std_k98ojb.Math.Constant {\n            value: -1\n        }\n\n        \n        instance(x: 300, y: 40) eq_zero_node root.Std_k98ojb.Math.Eq {\n            first: len_node.length,\n            second: const_zero.value\n        }\n\n        \n        instance(x: 350, y: 70) if_len_is_zero root.Std_k98ojb.Std.If {\n            condition: eq_zero_node.result\n        }\n\n        \n        instance(x: 400, y: 100) setter_zero root.Std_k98ojb.Setter {\n            property: \"output_823209\"\n        }\n        setter_zero.new_value \u2190 list_48148f\n        setter_zero.trigger \u2190 if_len_is_zero.then\n\n        \n        \n        \n        instance(x: 500, y: 120) modulo_node root.Std_k98ojb.Math.Modulo {\n            value: n_68068c,\n            divisor: len_node.length\n        }\n\n        \n        instance(x: 550, y: 140) sub_node root.Std_k98ojb.Math.Sub {\n            first: len_node.length,\n            second: modulo_node.result\n        }\n\n        \n        instance(x: 600, y: 160) first_slice root.Std_k98ojb.List.Slice {\n            list: list_48148f,\n            start: const_zero.value,\n            end: sub_node.result\n        }\n\n        instance(x: 650, y: 180) second_slice root.Std_k98ojb.List.Slice {\n            list: list_48148f,\n            start: sub_node.result,\n            end: const_minus_one.value\n        }\n\n        \n        instance(x: 700, y: 200) concat_node root.Std_k98ojb.List.Concat {\n            left: second_slice.slice,\n            right: first_slice.slice\n        }\n\n        \n        instance(x: 750, y: 220) setter_else root.Std_k98ojb.Setter {\n            property: \"output_823209\"\n        }\n        setter_else.new_value \u2190 concat_node.result\n        setter_else.trigger \u2190 if_len_is_zero.else\n\n    }\n\n    \n    instance(x: 10, y: 10) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 200, y: 50) reduce_1a2b3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_1a2b3c.items\n        0 -> reduce_1a2b3c.initialValue\n\n        func() {\n            in(x: -50, y: 0, name: \"current\") property(Number) current_acc\n            in(x: 50, y: 0, name: \"item\") property(Number) item_val\n\n            out(x: 100, y: 0, name: \"result\") property(Number) result_out\n\n            instance(x: 25, y: 0) add_456def root.Std_k98ojb.Math.Add {}\n            current_acc -> add_456def.first\n            item_val -> add_456def.second\n            add_456def.result -> result_out\n        } -> reduce_1a2b3c.reducer\n\n        reduce_1a2b3c.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -90, y: 20) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance checkSmall root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677,\n            right = 1\n        }\n\n        instance initialIf root.Std_k98ojb.Std.If {\n            predicate = checkSmall.result,\n\n            \n            thenBranch: {\n                output_c457b3 = false\n                trigger continue_9a54bb\n            },\n\n            elseBranch: {\n                \n                instance sqrtNode root.Std_k98ojb.Math.Expression {\n                    expression = \"sqrt(gen_0)\",\n                    gen_0 = num_5c0677\n                }\n\n                instance flooredSqrt root.Std_k98ojb.Math.Floor {\n                    value = sqrtNode.output\n                }\n\n                \n                instance divisorsList root.Std_k98ojb.List.GenerateRange {\n                    from = 2,\n                    to = flooredSqrt.result\n                }\n\n                \n                instance findDivisor root.Std_k98ojb.Iteration.Find {\n                    items = divisorsList.list,\n\n                    context = num_5c0677, \n\n                    handler: func() {\n                        in(x: 10, y: 20, name: \"item\") property(Number) current,\n                        in(... , name:\"context\") property(Number) n,\n\n                        instance exprCheck root.Std_k98ojb.Math.Expression {\n                            expression = \"gen_0 % gen_1 == 0\",\n                            gen_0 = n, \n                            gen_1 = current \n                        }\n\n                        exprCheck.output \u2192 return as predicate result.\n                    }\n                }\n\n                \n                instance hasDivisor root.Std_k98ojb.Math.Expression {\n                    expression = \"gen_0 != null\",\n                    gen_0 = findDivisor.item\n                }\n\n                \n                output_c457b3 = !hasDivisor.output\n\n                trigger continue_9a54bb\n            }\n        }\n\n        execute_b7b391 \u2192 initialIf.execute\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -180, y: -50) expr_node Std.Math.Expression {\n            expression: \"gen_0 * gen_1 < 0\"\n        }\n        \n        x_853326 -> expr_node.gen_0\n        y_5390f5 -> expr_node.gen_1\n        \n        expr_node.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -40, y: 7) opposite_signs_inst main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x:5,y:-25,name:\"n\") property(Number) n_27f29c\n        out(x:668,y:2,name:\"output\") property(Bool) output_f2630f\n\n        instance(x: -4, y: 10) modulo_4d7e8a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: 10) equal_b8c7df root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4d7e8a.value\n        11 -> modulo_4d7e8a.divisor\n\n        modulo_4d7e8a.result -> equal_b8c7df.left\n        0 -> equal_b8c7df.right\n\n        equal_b8c7df.equal -> output_f2630f\n    }\n\n    \n\n    instance(x: -15, y: -2) is_diff_def root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_1 root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_1.input\n        search_ai -> replace_1.search\n        replace_ai -> replace_1.replace\n        replace_1.output -> output_ai\n    }\n\n    \n\n    instance(x: -50, y: 30) replacer_node root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 120, y: 80) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        \n        instance(x: 250, y: 120) equal_e38995 root.Std_k98ojb.Logic.Equal {}\n        input_ai -> equal_e38995.left\n        tolower_7b3b7b.output -> equal_e38995.right\n\n        equal_e38995.equal -> output_ai\n    }\n\n    \n\n    instance(x: -140, y: 50) is_lower_inst root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: 100, y: 100) empty_list Std.List.Empty {}\n\n        \n        instance(x: -200, y: -50) one_constant Std.Math.Constant {\n            value: 1\n        }\n\n        \n        setter(x: 200, y: 50, name: \"setter_product\") product_setter = initial_product_value\n        getter(x: 300, y: 50, name: \"getter_product\") product_getter = current_product\n\n        \n        setter(x: 200, y: 150, name: \"setter_seen\") seen_setter = initial_seen_list\n        getter(x: 300, y: 150, name: \"getter_seen\") seen_getter = current_seen\n\n        \n        execute_19300c \u2192 product_setter.execute (new_value \u2190 one_constant.output)\n        execute_19300c \u2192 seen_setter.execute (new_value \u2190 empty_list.output)\n\n        \n        instance(x: 250, y: 200) iterate Std.For {\n            items: list_5fda54\n        }\n        execute_19300c \u2192 iterate.start\n\n        \n        instance(x: 400, y: 200) contains_node Std.List.Contains {\n            list: seen_getter.current_seen\n            value: iterate.item\n        }\n\n        \n        instance(x: 500, y: 200) if_expression Std.IfExpression {\n            expression: \"isContained == false\"\n        }\n        contains_node.isContained \u2192 if_expression.input\n\n        \n        instance(x: 600, y: 150) multiply_node Std.Math.Multiply {\n            a: product_getter.current_product\n            b: iterate.item\n        }\n\n        \n        instance(x: 600, y: 250) add_node Std.List.Add {\n            list: seen_getter.current_seen\n            value: iterate.item\n        }\n\n        \n        multiply_node.result \u2192 product_setter.new_value\n        if_expression.then \u2192 product_setter.execute\n\n        add_node.result \u2192 seen_setter.new_value\n        if_expression.then \u2192 seen_setter.execute\n\n        \n        iterate.onDone \u2192 output_cffcc2.value \u2190 product_getter.current_product\n        iterate.onDone \u2192 continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 150, y: 100) difference_list1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: 100) difference_list2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 350, y: 100) concat_7f6d4a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference_list1.left\n        list2_ai -> difference_list1.right\n\n        list2_ai -> difference_list2.left\n        list1_ai -> difference_list2.right\n\n        difference_list1.difference -> concat_7f6d4a.left\n        difference_list2.difference -> concat_7f6d4a.right\n\n        concat_7f6d4a.result -> output_ai\n    }\n\n    \n\n    instance(x: 50, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance len_node root.Std_k98ojb.List.Length {\n            list: list_48148f;\n        }\n\n        \n        instance equal_zero root.Std_k98ojb.Logic.Equal {\n            left: len_node.length; \n            right: 0;\n        }\n\n        \n        instance modulo_node root.Std_k98ojb.Math.Modulo {\n            value: n_68068c; \n            divisor: len_node.length;\n        }\n        \n        \n        instance sub_node root.Std_k98ojb.Math.Sub {\n            first: len_node.length; \n            second: modulo_node.result;\n        }\n\n        \n        instance slice_first root.Std_k98ojb.List.Slice {\n            list: list_48148f; \n            start: 0; \n            end: sub_node.result;\n        }\n        \n        instance slice_second root.Std_k98ojb.List.Slice {\n            list: list_48148f; \n            start: sub_node.result; \n            end: -1; \n        }\n\n        \n        instance concat_node root.Std_k98ojb.List.Concat {\n            left: slice_second.result; \n            right: slice_first.result;\n        }\n\n        \n        instance if_node root.Std_k98ojb.Std.If {\n            predicate: equal_zero.result;\n            \n            then_value: list_48148f;  \n            else_value: concat_node.result; \n        }\n\n        output_823209: if_node.output;\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 100, y: 50) reduce_node root.Std_k98ojb.Iteration.Reduce {}\n        \n        list_2c62ab -> reduce_node.items\n        \n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(Number) accumulated\n            in(x: 0, y: 0, name: \"current\") property(Number) current_element\n\n            instance(x: -50, y: 0) adder root.Std_k98ojb.Math.Add {}\n            \n            accumulated -> adder.first\n            current_element -> adder.second\n            \n            out(x: 50, y: 0, name: \"result\") property(Number) adder.result\n        } -> reduce_node.handler\n        \n        reduce_node.reduced -> sum_2a848f\n    }\n\n    \n\n    instance(x: -179, y: 30) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: 100, y: 100) lessThanEqual root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677,\n            right = 1.0\n        }\n\n        \n        instance(x: 200, y: -50) ifEdgeCase root.Std_k98ojb.Std.If {\n            condition = lessThanEqual.result,\n\n            thenBranch: block {\n                \n                instance setFalse root.Std_k98ojb.Logic.False {}\n                setFalse.value \u2192 output_c457b3\n                execute_b7b391 \u2192 continue_9a54bb \n            },\n            elseBranch: block {\n                \n                instance computeSqrt root.Std_k98ojb.Math.Pow {\n                    value = num_5c0677,\n                    exponent = 0.5\n                }\n                instance floorSqrt root.Std_k98ojb.Math.Floor {\n                    number = computeSqrt.result\n                }\n\n                \n                instance genRange root.Std_k98ojb.List.GenerateRange {\n                    from = 2,\n                    to = floorSqrt.result\n                }\n\n                \n                instance findDivisor root.Std_k98ojb.Iteration.Find {\n                    items = genRange.list,\n                    handler: block {\n                        in current root.Std_k98ojb.Property(Number) {}\n                        \n                        instance modNode root.Std_k98ojb.Math.Modulo {\n                            value = num_5c0677,\n                            divisor = current\n                        }\n                        instance equalZero root.Std_k98ojb.Logic.Equal {\n                            left = modNode.result,\n                            right = 0.0\n                        }\n                        equalZero.result \u2192 output\n                    }\n                }\n\n                \n                instance isFound root.Std_k98ojb.Logic.IsNotNull {\n                    input = findDivisor.item\n                }\n\n                \n                instance finalOutput root.Std_k98ojb.Logic.Not {\n                    input = isFound.result\n                }\n                \n                finalOutput.result \u2192 output_c457b3\n                \n                execute_b7b391 \u2192 continue_9a54bb \n            }\n        }\n\n        \n        execute_b7b391 \u2192 ifEdgeCase.condition_trigger\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_5d3e3c root.Std_k98ojb.Math.Mul {}\n        instance(x: 309, y: -172) lessthan_3f3d3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_5d3e3c.first\n        y_5390f5 -> mul_5d3e3c.second\n        0 -> lessthan_3f3d3d.right\n        mul_5d3e3c.result -> lessthan_3f3d3d.left\n        lessthan_3f3d3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: 20) opposite_signs_def root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: 50) check_div root.Std_k98ojb.Std.IfExpression {\n            expression: \"it % 11 == 0\"\n        }\n        n_27f29c -> check_div.it\n        check_div.value -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: -30) is_diff_node root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 100) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 300, y: 100) equal_node_4e8c54 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_node_4e8c54.left\n        tolower_7b3b7b.output -> equal_node_4e8c54.right\n        equal_node_4e8c54.result -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -300, y: -200) empty_node Std.List.Empty {}\n        variable< List<Number> > seen_list {\n            initial_value: []\n        }\n        setter_seen = Std.Setter {\n            new_value: empty_node.output\n        } -> execute_19300c\n\n        \n        instance(x: 200, y: 50) filter_unique Std.Iteration.Filter {}\n        list_5fda54 -> filter_unique.items\n\n        filter_unique.handler = function (current_element: Number) returns Bool {\n            getter_seen = seen_list.getter\n            current_seen = getter_seen.value\n\n            contains_node = Std.List.Contains {\n                item: current_element,\n                list: current_seen\n            }\n\n            include = !contains_node.isContained\n\n            if (include) {\n                new_seen = Std.List.Add(current_seen, current_element)\n                setter_seen.new_value = new_seen\n                trigger(setter_seen.execute)\n            }\n\n            return include\n        }\n\n        \n        instance(x: 500, y: 100) reduce_product Std.Iteration.Reduce {}\n        filter_unique.result -> reduce_product.items\n\n        initial_value_node = Std.Math.Constant(1)\n        initial_value_node.output -> reduce_product.initialValue\n\n        reduce_product.handler = function (current: Number, element: Number) returns Number {\n            return current * element\n        }\n\n        reduce_product.result -> output_cffcc2\n        reduce_product.done -> continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff2_a3c1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 125) concat_7e2a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_a3c1.left\n        list1_ai -> diff2_a3c1.right\n\n        diff1_9f8d.difference -> concat_7e2a.left\n        diff2_a3c1.difference -> concat_7e2a.right\n\n        concat_7e2a.list -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 list_length.list\n\n        instance modulo_k root.Std_k98ojb.Math.Modulo {}\n        n_68068c \u2192 modulo_k.value\n        list_length.length \u2192 modulo_k.divisor\n\n        instance split_sub root.Std_k98ojb.Math.Sub {}\n        list_length.length \u2192 split_sub.first\n        modulo_k.result \u2192 split_sub.second\n\n        \n        instance slice_b root.Std_k98ojb.List.Slice {}\n        split_sub.result \u2192 slice_b.start\n        list_length.length \u2192 slice_b.end\n        list_48148f \u2192 slice_b.list\n\n        \n        instance slice_a root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        split_sub.result \u2192 slice_a.end\n        list_48148f \u2192 slice_a.list\n\n        \n        instance concat_node root.Std_k98ojb.List.Concat {}\n        slice_b.output \u2192 concat_node.left\n        slice_a.output \u2192 concat_node.right\n\n        concat_node.result \u2192 output_823209\n    }\n\n    \n\n    instance(x: -174, y: -63) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: -10) reduce_3d7e3b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3d7e3b.items\n        0 -> reduce_3d7e3b.initialValue\n        func() {\n            in(x: -154, y: -52, name: \"acc\") property(Number) acc_9a8f5d\n            in(x: -162, y: 28, name: \"item\") property(Number) item_7e3b0c\n\n            out(x: 300, y: -48, name: \"\") property(Number) _3e3b9a\n\n            instance(x: 58, y: -51) add_6d2a4f root.Std_k98ojb.Math.Add {}\n            acc_9a8f5d -> add_6d2a4f.first\n            item_7e3b0c -> add_6d2a4f.second\n            add_6d2a4f.result -> _3e3b9a\n        } -> reduce_3d7e3b.reducer\n        reduce_3d7e3b.reducedValue -> sum_2a848f\n    }\n\n    \n\n    instance(x: -105, y: 6) sum_node root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -50) lessthan root.Std_k98ojb.Math.LessThanOrEqual {}\n        num_5c0677 -> lessthan.first\n        1 -> lessthan.second\n\n        instance(x: -100, y: 0) if_edge root.Std_k98ojb.Std.If {}\n        execute_b7b391 -> if_edge.execute\n        lessthan.result -> if_edge.predicate\n\n        \n        instance(x: -50, y: 100) setter_false root.Std_k98ojb.Setter {}\n        false -> setter_false.new_value\n        if_edge.then -> setter_false.execute\n        setter_false.value -> output_c457b3\n\n        \n        instance(x: 200, y: -100) expr_sqrt root.Std_k98ojb.Math.Expression {\n            expression: \"Math.sqrt(value)\"\n        }\n        num_5c0677 -> expr_sqrt.value\n\n        instance(x: 300, y: -100) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        expr_sqrt.result -> floor_sqrt.value\n\n        instance(x: 400, y: -100) genrange root.Std_k98ojb.List.GenerateRange {\n            first: 2\n        }\n        floor_sqrt.floor -> genrange.last\n\n        instance(x: 500, y: -100) find_div root.Std_k98ojb.Iteration.Find {}\n        genrange.range -> find_div.items\n        num_5c0677 -> find_div.context \n\n        \n        func() {\n            in(name: \"current\") property(Number) current\n            in(name: \"context\") property(Number) context_num\n\n            instance modulo root.Std_k98ojb.Math.Modulo {}\n            context_num -> modulo.value\n            current -> modulo.divisor\n\n            instance eq_zero root.Std_k98ojb.Math.Equal {}\n            modulo.result -> eq_zero.first\n            0 -> eq_zero.second\n\n            eq_zero.equals -> output \n        }\n\n        \n        instance(x: 600, y: -50) has_div root.Std_k98ojb.Std.IfExpression {\n            expression: \"item != null\"\n        }\n        find_div.item -> has_div.gen_0\n\n        \n        instance(x: 700, y: 100) setter_not_prime root.Std_k98ojb.Setter {}\n        false -> setter_not_prime.new_value\n        has_div.then -> setter_not_prime.execute\n        setter_not_prime.value -> output_c457b3\n\n        \n        instance(x: 700, y: -100) setter_prime root.Std_k98ojb.Setter {}\n        true -> setter_prime.new_value\n        has_div.else -> setter_prime.execute\n        setter_prime.value -> output_c457b3\n\n        \n        instance(x: 800, y: 0) merge_cont root.Std_k98ojb.Merge {}\n        if_edge.then -> merge_cont.input1\n        has_div.then -> merge_cont.input2\n        has_div.else -> merge_cont.input3\n        merge_cont.output -> continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 150, y: -175) multiply_6e3b8c root.Std_k98ojb.Math.Mul {}\n        x_853326 -> multiply_6e3b8c.first\n        y_5390f5 -> multiply_6e3b8c.second\n\n        instance(x: 300, y: -175) lessthan_4a7d8e root.Std_k98ojb.Math.LessThan {}\n        multiply_6e3b8c.result -> lessthan_4a7d8e.left\n        0 -> lessthan_4a7d8e.right\n\n        lessthan_4a7d8e.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -150, y: -200) opposite_signs_def root.main.opposite_signs {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 147, y: 50) modulo_8e3d2a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 350, y: 50) equal_7c8f6b root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_8e3d2a.value\n        11 -> modulo_8e3d2a.divisor\n        modulo_8e3d2a.result -> equal_7c8f6b.left\n        0 -> equal_7c8f6b.right\n        equal_7c8f6b.equals -> output_f2630f\n    }\n\n    \n\n    instance(x: -14, y: -25) is_diff_def root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 300, y: 100) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 500, y: 150) equal_f12a4d root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_f12a4d.right\n        input_ai -> equal_f12a4d.left\n        equal_f12a4d.result -> output_ai\n    }\n    \n\n    instance(x: -50, y: 80) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -300, y: 50) emptyList root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: -100, y: 100) reduceUnique root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54,\n            initial: emptyList.list\n        }\n\n        \n        func() {\n            in(x: 0, y: 0, name: \"currentAccumulator\") property(List) accumulator_in;\n            in(x: 1, y: 1, name: \"currentItem\") property(Number) item_in;\n\n            out(x: 2, y: 2, name: \"newAccumulator\") property(List) newAcc_out;\n\n            instance contains_ root.Std_k98ojb.List.Contains {\n                list: accumulator_in,\n                item: item_in\n            }\n\n            \n            instance ifCond root.Std_k98ojb.Std.IfExpression {\n                expression: \"!contains_.contains\"\n            }\n\n            \n            instance addToList root.Std_k98ojb.List.Add {\n                list: accumulator_in,\n                element: item_in\n            }\n\n            newAcc_out = ifCond.then ? addToList.newList : accumulator_in;\n        } -> reduceUnique.handler\n\n        \n        instance(x: 200, y: 150) initialOne root.Std_k98ojb.Math.Expression {\n            expression: \"1\"\n        }\n\n        instance(x: 300, y: 200) reduceProduct root.Std_k98ojb.Iteration.Reduce {\n            items: reduceUnique.result,\n            initial: initialOne.output\n        }\n\n        \n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_in;\n            in(x: 1, y: 1, name: \"item\") property(Number) item_in;\n\n            out(x: 2, y: 2, name: \"newAcc\") property(Number) newAcc_out;\n\n            instance multiply root.Std_k98ojb.Math.Mul {\n                a: acc_in,\n                b: item_in\n            }\n\n            newAcc_out = multiply.result;\n        } -> reduceProduct.handler\n\n        \n        reduceProduct.result \u2192 output_cffcc2\n        execute_19300c \u2192 reduceUnique.execute  \n        reduceProduct.done \u2192 continue_45190b   \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 150) diff2_ae3c root.Std_k98ojb.Sets.Difference {}\n        instance(x: 500, y: 100) concat_4a7f root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_ae3c.left\n        list1_ai -> diff2_ae3c.right\n\n        diff1_9f8d.difference -> concat_4a7f.left\n        diff2_ae3c.difference -> concat_4a7f.right\n\n        concat_4a7f.list -> output_ai\n    }\n\n    \n\n    instance(x: -50, y: 30) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 100) len_node root.Std_k98ojb.List.Length {\n            list = list_48148f\n        }\n\n        \n        instance(x: 200, y: 100) eq_zero root.Logic.Equal {\n            a = len_node.length\n            b = 0\n        }\n\n        \n        instance(x: 300, y: 100) if_node root.Std_k98ojb.Std.If {\n            predicate = eq_zero.isEqual\n        }\n\n        \n        instance(x: 400, y: 50) then_connector root.Std_k98ojb.Connector {\n            input = list_48148f\n        }\n        then_connector.output -> output_823209\n\n        \n        instance(x: 400, y: 150) else_start root.Std_k98ojb.Connector {\n            input = if_node.elseOutput\n        }\n\n        \n        instance(x: 500, y: 200) mod_node root.Std_k98ojb.Math.Modulo {\n            value = n_68068c\n            divisor = len_node.length\n        }\n\n        \n        instance(x: 600, y: 200) split_point root.Std_k98ojb.Math.Sub {\n            a = len_node.length\n            b = mod_node.result\n        }\n\n        \n        instance(x: 700, y: 300) slice_first_part root.Std_k98ojb.List.Slice {\n            list = list_48148f\n            start = 0\n            end = split_point.result\n        }\n\n        \n        instance(x: 700, y: 400) slice_second_part root.Std_k98ojb.List.Slice {\n            list = list_48148f\n            start = split_point.result\n            end = -1 \n        }\n\n        \n        instance(x: 800, y: 350) concat_node root.Std_k98ojb.List.Concat {\n            left = slice_second_part.output\n            right = slice_first_part.output\n        }\n        \n        \n        concat_node.result -> output_823209\n\n        \n        eq_zero.isEqual -> if_node.predicate\n        if_node.thenOutput -> then_connector.input\n    }\n\n    \n\n    instance(x: -174, y: -63) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 200, y: 50) reduce_1a2b3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_1a2b3c.items\n        0 -> reduce_1a2b3c.initialValue\n\n        func() {\n            in(x: -50, y: 0, name: \"current\") property(Number) current_acc\n            in(x: 50, y: 0, name: \"item\") property(Number) item_val\n\n            out(x: 100, y: 0, name: \"result\") property(Number) result_out\n\n            instance(x: 25, y: 0) add_456def root.Std_k98ojb.Math.Add {}\n            current_acc -> add_456def.first\n            item_val -> add_456def.second\n            add_456def.result -> result_out\n        } -> reduce_1a2b3c.reducer\n\n        reduce_1a2b3c.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -90, y: 20) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        instance lte_one (Std_k98ojb.Math.LessThanOrEqual) {\n            left = num_5c0677\n            right = 1\n        }\n\n        instance if_not_prime_small (Std_k98ojb.Std.If) {\n            condition = lte_one.result\n            then: [\n                instance set_false (Setter) {\n                    property = output_c457b3\n                    value = false\n                }\n                set_false.continue \u2192 continue_9a54bb\n            ]\n        }\n\n        if_not_prime_small.else \u2192 [\n            \n            instance expr_half (Std_k98ojb.Math.Expression) {\n                expression = \"x / 2\"\n                x = num_5c0677\n            }\n            \n            instance floor_half (Std_k98ojb.Math.Floor) {\n                input = expr_half.result\n            }\n\n            \n            instance gen_range (Std_k98ojb.List.GenerateRange) {\n                from = 2\n                to = floor_half.output\n            }\n\n            \n            instance find_div (Std_k98ojb.Iteration.Find) {\n                items = gen_range.result\n\n                handler: func() {\n                    in current \u2192 property(Number)\n\n                    out output \u2192 property(Bool)\n\n                    instance modulo (Std_k98ojb.Math.Modulo) {\n                        value = num_5c0677\n                        divisor = current\n                    }\n\n                    instance eq_zero (Std_k98ojb.Math.Equal) {\n                        a = modulo.result\n                        b = 0\n                    }\n                    \n                    eq_zero.output \u2192 output\n                }\n            }\n\n            \n            instance has_divisor (Std_k98ojb.Std.IfExpression) {\n                expression = \"found != null\"\n                gen_0 = find_div.foundItem\n            }\n\n            \n            instance set_output (Setter) {\n                property = output_c457b3\n                value = !has_divisor.result\n            }\n            \n            set_output.continue \u2192 continue_9a54bb\n        ]\n\n        execute_b7b391 \u2192 if_not_prime_small.conditionTrigger\n    }\n\n    instance num_prime_inst root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 0, y: 0) expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"gen_0 * gen_1 < 0\"\n        }\n        \n        x_853326 -> expr_node.gen_0\n        y_5390f5 -> expr_node.gen_1\n        expr_node.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -42, y: 3) opposite_signs_instance root.main.opposite_signs {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: 50) mod_node root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        n_27f29c -> mod_node.value\n        \n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        mod_node.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -34, y: 127) is_diff_node root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_1 root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_1.input\n        search_ai -> replace_1.search\n        replace_ai -> replace_1.replace\n        replace_1.output -> output_ai\n    }\n\n    \n\n    instance(x: -50, y: 30) replacer_node root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 120, y: 80) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        \n        instance(x: 250, y: 120) equal_e38995 root.Std_k98ojb.Logic.Equal {}\n        input_ai -> equal_e38995.left\n        tolower_7b3b7b.output -> equal_e38995.right\n\n        equal_e38995.equal -> output_ai\n    }\n\n    \n\n    instance(x: -140, y: 50) is_lower_inst root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n        \n        \n        instance unique_reduce root.Std_k98ojb.Iteration.Reduce {\n            items = list_5fda54\n            initial_value = empty_list.output\n            \n            handler: func() {\n                in acc property(List)\n                in current_item property(Number)\n\n                instance contains root.Std_k98ojb.List.Contains {\n                    list = acc\n                    item = current_item\n                }\n\n                instance if_node root.Std_k98ojb.Std.IfExpression(expression: !contains.result) {\n                    then_block {\n                        instance new_list root.Std_k98ojb.List.Add {\n                            list = acc\n                            element = current_item\n                        }\n                        output(new_list.output)\n                    }\n                    else_block { \n                        output(acc)\n                    }\n                }\n            }\n        }\n\n        \n        instance initial_one root.Std_k98ojb.Number { value=1 }\n        \n        instance product_reduce root.Std_k98ojb.Iteration.Reduce {\n            items = unique_reduce.result\n            initial_value = initial_one.value\n\n            handler: func() {\n                in acc property(Number)\n                in current_num property(Number)\n\n                instance multiply root.Std_k98ojb.Math.Mul { \n                    a = acc\n                    b = current_num\n                }\n                output(multiply.result)\n            }\n        }\n\n        \n        product_reduce.result \u2192 output_cffcc2\n\n        \n        instance start_flow root.Std_k98ojb.TriggerNode {\n            triggers = [execute_19300c]\n            onTrigger() \u2192 { \n                \n                \n            }\n        }\n\n        instance completion root.Std_k98ojb.TriggerNode {\n            triggers = [product_reduce.completed]\n            onTrigger() \u2192 continue_45190b\n        }\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 150, y: 100) difference_list1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: 100) difference_list2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 350, y: 100) concat_74e6c2 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference_list1.left\n        list2_ai -> difference_list1.right\n\n        list2_ai -> difference_list2.left\n        list1_ai -> difference_list2.right\n\n        difference_list1.difference -> concat_74e6c2.left\n        difference_list2.difference -> concat_74e6c2.right\n\n        concat_74e6c2.result -> output_ai\n    }\n\n    \n\n    instance(x: 50, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {\n            list: list_48148f\n        }\n\n        \n        instance equal_zero root.Std_k98ojb.Logic.Equal {\n            a: len_node.length,\n            b: 0\n        }\n\n        \n        instance modulo_node root.Std_k98ojb.Math.Modulo {\n            value: n_68068c,\n            divisor: len_node.length\n        }\n\n        \n        instance sub_node root.Std_k98ojb.Math.Sub {\n            first: len_node.length,\n            second: modulo_node.result\n        }\n\n        \n        instance slice_second_part root.Std_k98ojb.List.Slice {\n            list: list_48148f,\n            start: sub_node.result,\n            end: -1  \n        }\n        \n        instance slice_first_part root.Std_k98ojb.List.Slice {\n            list: list_48148f,\n            start: 0,\n            end: sub_node.result\n        }\n\n        \n        instance concat_node root.Std_k98ojb.List.Concat {\n            a: slice_second_part.output,\n            b: slice_first_part.output\n        }\n\n        \n        instance if_expr root.Std_k98ojb.Std.IfExpression {\n            expression: \"equal_zero.result ? list_48148f : concat_node.result\"\n        }\n        \n        \n        if_expr.result \u2192 output_823209\n    }\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n\n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 100, y: 100) isempty root.Std_k98ojb.List.IsEmpty {}\n        list_2c62ab -> isempty.list\n\n        instance(x: 200, y: 50) reduce_node root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_node.items\n\n        \n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(Number) acc\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n\n            instance(x: 0, y: 50) add root.Std_k98ojb.Math.Add {}\n            acc -> add.a\n            item -> add.b\n\n            out(x: 100, y: 0, name: \"result\") property(Number) result\n            add.sum -> result\n        } -> reduce_node.handler\n\n        instance(x: 300, y: 50) ifexpr root.Std_k98ojb.Std.IfExpression {\n            expression: \"isEmpty\"\n        }\n        isempty.isEmpty -> ifexpr.gen_0 \n\n        \n        instance(x: 350, y: 100) zero_constant root.Std_k98ojb.Math.Constant {}\n        zero_constant.value = 0.0\n\n        \n        zero_constant.output -> ifexpr.then\n        reduce_node.result -> ifexpr.else\n\n        \n        ifexpr.output -> sum_2a848f\n    }\n\n    instance(x: -50, y: 127) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: 100, y: 50) lessThanEqNode root.Std_k98ojb.Math.LessThanOrEqual {\n            a: num_5c0677,\n            b: 1\n        }\n\n        \n        instance(x: 200, y: 50) ifEdgeCase root.Std_k98ojb.Std.If {\n            condition: lessThanEqNode.result,\n\n            then: [\n                set(output_c457b3 to false),\n                trigger(continue_9a54bb)\n            ],\n\n            else: [ \"main_flow\" ]\n        }\n\n        \n        \n        \n        instance(x: 20, y: 150) sqrtNode root.Std_k98ojb.Math.Pow {\n            x: num_5c0677,\n            y: 0.5\n        }\n\n        instance(x: 40, y: 150) floorSqrtNode root.Std_k98ojb.Math.Floor {\n            value: sqrtNode.result\n        }\n        \n        \n        instance(x: 60, y: 150) divRangeNode root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: floorSqrtNode.value\n        }\n\n        \n        instance(x: 80, y: 150) filterDivs root.Std_k98ojb.Query.Filter {\n            list: divRangeNode.list,\n\n            handler: func() { \n                in(x: -272, y: -48, name: \"current\") property(Number) item_it\n\n                out(x: 405, y: -52, name: \"output\") property(Bool) result\n                \n                instance moduloCheck root.Std_k98ojb.Math.Modulo {\n                    value: num_5c0677,\n                    divisor: item_it\n                }\n                \n                instance eqZero root.Std_k98ojb.Math.Equal {\n                    a: moduloCheck.result,\n                    b: 0\n                }\n\n                eqZero.result -> result\n            }\n        }\n\n        \n        instance(x: 100, y: 200) lenFilterNode root.Std_k98ojb.List.Length {\n            list: filterDivs.result\n        }\n\n        instance(x: 120, y: 250) gtZeroNode root.Std_k98ojb.Math.GreaterThan {\n            left: lenFilterNode.length,\n            right: 0\n        }\n        \n        \n        instance(x: 140, y: 300) finalResultNode root.Std_k98ojb.Std.IfExpression {\n            condition: gtZeroNode.result,\n            then_value: false,\n            else_value: true\n        }\n\n        \n        instance(x: 160, y: 350) mainFlowPath root.Std_k98ojb.Std.Sequence {\n            inputs: [ \"main_flow\" ],\n            steps: [\n                sqrtNode,\n                floorSqrtNode,\n                divRangeNode,\n                filterDivs,\n                lenFilterNode,\n                gtZeroNode,\n                finalResultNode,\n\n                \n                set(output_c457b3 to finalResultNode.value),\n                trigger(continue_9a54bb)\n            ]\n        }\n    }\n\n    instance(x: -100, y: 200) primeChecker root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) multiply_0 root.Std_k98ojb.Math.Mul {}\n        instance(x: 305, y: -172) greaterthan_1 root.Std_k98ojb.Math.GreaterThan {}\n\n        x_853326 -> multiply_0.first\n        y_5390f5 -> multiply_0.second\n\n        0 -> greaterthan_1.left\n        multiply_0.result -> greaterthan_1.right\n\n        greaterthan_1.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -426, y: -248) opposite_signs_node root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 145, y: 30) ifexpr_1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % 11 == 0\"\n        }\n        n_27f29c -> ifexpr_1.gen_0\n        ifexpr_1.value -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_node root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_foo root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_foo.left\n        input_ai -> equal_foo.right\n        equal_foo.result -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) is_lower_node root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }\n\n        \n        func() {\n            in(accum: property(List), current: property(Number))\n            out(output_list: property(List))\n\n            instance contains root.Std_k98ojb.List.Contains {}\n                list: accum\n                item: current\n\n            instance if_node root.Std_k98ojb.Std.If {}\n                predicate: contains.isContained\n                then:\n                    \n                    accum -> output_list\n                else:\n                    \n                    instance add root.Std_k98ojb.List.Add {}\n                        list: accum\n                        element: current\n                    add.resultList -> output_list\n        } -> reduce_unique.handler\n\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1.0 \n        }\n\n        \n        func() {\n            in(accum: property(Number), current: property(Number))\n            out(output_number: property(Number))\n\n            instance multiply root.Std_k98ojb.Math.Multiply {}\n                first: accum\n                second: current\n\n            multiply.result -> output_number\n        } -> reduce_product.handler\n\n        \n        reduce_product.output -> output_cffcc2\n\n        \n        execute_19300c -> reduce_unique.trigger\n        reduce_unique.completed -> reduce_product.trigger\n        reduce_product.completed -> continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff2_a3c1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 125) concat_7e2a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_a3c1.left\n        list1_ai -> diff2_a3c1.right\n\n        diff1_9f8d.difference -> concat_7e2a.left\n        diff2_a3c1.difference -> concat_7e2a.right\n\n        concat_7e2a.list -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 45, y: -100) length_7a3d5e root.Std_k98ojb.List.Length {}\n        instance(x: 160, y: -100) modulo_8c3f3a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 275, y: -100) sub_4e1d0d root.Std_k98ojb.Math.Sub {}\n        instance(x: 390, y: -100) slice_b_6f3a8c root.Std_k98ojb.List.Slice {}\n        instance(x: 505, y: -100) slice_a_7e4d2f root.Std_k98ojb.List.Slice {}\n        instance(x: 620, y: -100) concat_8d6a10 root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_7a3d5e.list\n        n_68068c -> modulo_8c3f3a.value\n        length_7a3d5e.length -> modulo_8c3f3a.divisor\n        length_7a3d5e.length -> sub_4e1d0d.first\n        modulo_8c3f3a.result -> sub_4e1d0d.second\n\n        sub_4e1d0d.result -> slice_b_6f3a8c.start\n        length_7a3d5e.length -> slice_b_6f3a8c.end\n        list_48148f -> slice_b_6f3a8c.list\n\n        0 -> slice_a_7e4d2f.start\n        sub_4e1d0d.result -> slice_a_7e4d2f.end\n        list_48148f -> slice_a_7e4d2f.list\n\n        slice_b_6f3a8c.sliceResult -> concat_8d6a10.left\n        slice_a_7e4d2f.sliceResult -> concat_8d6a10.right\n        concat_8d6a10.concatenatedList -> output_823209\n    }\n\n    \n\n    instance(x: -50, y: 0) rotate_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: -10) reduce_3d7e3b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3d7e3b.items\n        0 -> reduce_3d7e3b.initialValue\n        func() {\n            in(x: -154, y: -52, name: \"acc\") property(Number) acc_9a8f5d\n            in(x: -162, y: 28, name: \"item\") property(Number) item_7e3b0c\n\n            out(x: 300, y: -48, name: \"\") property(Number) _eaa5d9\n\n            instance(x: 98, y: -51) add_6a2f8a root.Std_k98ojb.Math.Add {}\n            acc_9a8f5d -> add_6a2f8a.first\n            item_7e3b0c -> add_6a2f8a.second\n            add_6a2f8a.result -> _eaa5d9\n        } -> reduce_3d7e3b.reducer\n        reduce_3d7e3b.reducedValue -> sum_2a848f\n    }\n\n    \n\n    instance(x: -10, y: 16) _sum_4c3e3a root.main._sum {}\n\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -50) if_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 <= 1\"\n        }\n        num_5c0677 \u2192 if_edge.gen_0\n        execute_b7b391 \u2192 if_edge.execute\n\n        \n        instance(x: -100, y: 100) set_false root.Std_k98ojb.Setter {\n            new_value = false\n        }\n        getter(x: -50, y: 150, name: \"getter_1\") getter_1 = output_c457b3\n        setter(x: -20, y: 160, name: \"setter_1\") setter_1 = output_c457b3\n\n        if_edge.then \u2192 set_false.execute\n        set_false.new_value \u2192 setter_1.new_value\n        setter_1.continue \u2192 continue_9a54bb\n\n        \n        instance(x: 200, y: -100) expr_sqrt root.Std_k98ojb.Math.Expression {\n            expression: \"Math.sqrt(gen_0)\"\n        }\n        num_5c0677 \u2192 expr_sqrt.gen_0\n\n        instance(x: 300, y: -100) floored root.Std_k98ojb.Math.Floor {\n            value = expr_sqrt.output\n        }\n\n        instance(x: 400, y: -100) genrange root.Std_k98ojb.List.GenerateRange {\n            from = 2.0\n            to = floored.result\n        }\n\n        instance(x: 500, y: -100) filter_div root.Std_k98ojb.Query.Filter {\n            where: \"num_5c0677 % it == 0\"\n        }\n        genrange.list \u2192 filter_div.items\n\n        instance(x: 600, y: -100) len_div root.Std_k98ojb.List.Length {\n            list = filter_div.result\n        }\n\n        \n        instance(x: 700, y: -50) if_nonzero root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 > 0\"\n        }\n        len_div.length \u2192 if_nonzero.gen_0\n\n        \n        instance(x: 800, y: 100) set_true root.Std_k98ojb.Setter {\n            new_value = true\n        }\n        instance(x: 850, y: 100) set_false2 root.Std_k98ojb.Setter {\n            new_value = false\n        }\n\n        if_nonzero.then \u2192 set_false2.execute\n        if_nonzero.else \u2192 set_true.execute\n\n        \n        set_true.new_value \u2192 setter_1.new_value\n        set_false2.new_value \u2192 setter_1.new_value\n\n        \n        set_true.continue \u2192 continue_9a54bb\n        set_false2.continue \u2192 continue_9a54bb\n    }\n\n    \n\n    instance(x: -30, y: 0) prime_check root.main.num_prime {}\n\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 148, y: -176) multiply_6e1c3b root.Std_k98ojb.Math.Mul {}\n        instance(x: 305, y: -172) lessthan_6d5d8f root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> multiply_6e1c3b.first\n        y_5390f5 -> multiply_6e1c3b.second\n        multiply_6e1c3b.result -> lessthan_6d5d8f.left\n        0 -> lessthan_6d5d8f.right\n        lessthan_6d5d8f.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -214, y: -17) opposite_signs_def root.main.opposite_signs {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 147, y: 43) modulo_5d3a4e root.Std_k98ojb.Math.Modulo {}\n        instance(x: 332, y: 46) equal_b5d7c5 root.Std_k98ojb.Logic.Equal {}\n        \n        n_27f29c -> modulo_5d3a4e.value\n        11 -> modulo_5d3a4e.divisor\n        \n        modulo_5d3a4e.result -> equal_b5d7c5.left\n        0 -> equal_b5d7c5.right\n        \n        equal_b5d7c5.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -18, y: -29) is_diff_def root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 700, y: 250) replace_9f1a2d root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_9f1a2d.input\n        search_ai -> replace_9f1a2d.search\n        replace_ai -> replace_9f1a2d.replace\n        replace_9f1a2d.result -> output_ai\n    }\n\n    \n\n    instance(x: -300, y: 300) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 200, y: 100) tolower_abc root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 100) equal_xyz root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_abc.input\n        tolower_abc.output -> equal_xyz.left\n        input_ai -> equal_xyz.right\n        equal_xyz.result -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -300, y:-50) emptyList root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 100, y:0) reduceUnique root.Std_k98ojb.Iteration.Reduce {\n            items = list_5fda54\n            initialValue = emptyList.output\n        }\n        reduceUnique.handler = func() { \n            in acc (List), item (Number)\n            out output_list (List)\n\n            \n            instance containsNode root.Std_k98ojb.List.Contains {\n                list: acc,\n                item: item\n            }\n\n            \n            instance ifCond root.Std_k98ojb.Std.If {\n                predicate: containsNode.contains,\n\n                then: { \n                    output_list = acc  \n                },\n                else: { \n                    instance addNode root.Std_k98ojb.List.Add {\n                        list: acc,\n                        item: item\n                    }\n                    output_list = addNode.listWithItem  \n                }\n            }\n        }\n\n        \n        instance(x: 400, y:150) reduceProduct root.Std_k98ojb.Iteration.Reduce {\n            items = reduceUnique.outputList\n            initialValue = 1  \n        }\n        reduceProduct.handler = func() { \n            in acc (Number), item (Number)\n            out output_number (Number)\n\n            instance multiplyNode root.Std_k98ojb.Math.Mul {\n                a: acc,\n                b: item\n            }\n            output_number = multiplyNode.result  \n        }\n\n        \n        reduceProduct.outputValue \u2192 output_cffcc2\n\n        \n        instance(x:800,y:-144) doneTrigger root.Std_k98ojb.Std.Trigger {}\n        doneTrigger.input = reduceProduct.outputValue  \n        doneTrigger \u2192 continue_45190b\n\n        \n        execute_19300c \u2192 reduceUnique.start  \n    }\n\n    instance(x: -200, y:-80) unique_product_node root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_7b3b7b root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) diff2_4e8c54 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_f2330d root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_7b3b7b.left\n        list2_ai -> diff1_7b3b7b.right\n\n        list2_ai -> diff2_4e8c54.left\n        list1_ai -> diff2_4e8c54.right\n\n        diff1_7b3b7b.difference -> concat_f2330d.left\n        diff2_4e8c54.difference -> concat_f2330d.right\n\n        concat_f2330d.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) len_node Std_k98ojb.List.Length {}\n        list_48148f -> len_node.list\n\n        \n        instance(x: 200, y: 60) mod_node Std_k98ojb.Math.Modulo {}\n        n_68068c -> mod_node.value\n        len_node.length -> mod_node.divisor\n\n        \n        instance(x: 300, y: 70) sub_node Std_k98ojb.Math.Sub {}\n        len_node.length -> sub_node.first\n        mod_node.result -> sub_node.second\n\n        \n        instance(x: 400, y: 80) first_slice Std_k98ojb.List.Slice {\n            start = 0\n        }\n        list_48148f -> first_slice.list\n        sub_node.result -> first_slice.end\n\n        \n        instance(x: 500, y: 90) second_slice Std_k98ojb.List.Slice {\n            end = -1\n        }\n        list_48148f -> second_slice.list\n        sub_node.result -> second_slice.start\n\n        \n        instance(x: 600, y: 100) concat_node Std_k98ojb.List.Concat {}\n        second_slice.result -> concat_node.left\n        first_slice.result -> concat_node.right\n\n        \n        concat_node.result -> output_823209\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 200, y: 50) reduce_eb1e2a root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_eb1e2a.items\n        0 -> reduce_eb1e2a.initialValue\n        func() {\n            in(x: -150, y: -50, name: \"current\") property(Number) current_7d3a8f\n            in(x: -140, y: 50, name: \"item\") property(Number) item_b9f2c6\n\n            out(x: 200, y: 0, name: \"result\") property(Number) result_7a3bdf\n\n            instance(x: 50, y: 0) add_8d4e1a root.Std_k98ojb.Math.Add {}\n            current_7d3a8f -> add_8d4e1a.first\n            item_b9f2c6 -> add_8d4e1a.second\n            add_8d4e1a.result -> result_7a3bdf\n        } -> reduce_eb1e2a.reducer\n        reduce_eb1e2a.reduced -> sum_2a848f\n    }\n\n    \n\n    instance(x: -90, y: 30) _sum_def root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: 50) lessThan_node Std_k98ojb.Math.LessThan {}\n        num_5c0677 \u2192 lessThan_node.first\n        2 \u2192 lessThan_node.second\n\n        \n        instance(x: -150, y: 100) if_edge_case Std_k98ojb.Std.If {}\n        execute_b7b391 \u2192 if_edge_case.conditionTrigger\n        lessThan_node.result \u2192 if_edge_case.condition\n\n        \n        instance(x: -50, y: 150) then_setter PropertySetter for output_c457b3 {\n            value: False\n        }\n        if_edge_case.thenTrigger \u2192 then_setter.execute\n        then_setter.continueTrigger \u2192 continue_9a54bb\n\n        \n        instance(x: 100, y: -50) compute_sqrt_node Std_k98ojb.Math.Pow {}\n        num_5c0677 \u2192 compute_sqrt_node.x\n        0.5 \u2192 compute_sqrt_node.y\n\n        instance(x: 150, y: 0) floor_node Std_k98ojb.Math.Floor {}\n        compute_sqrt_node.result \u2192 floor_node.value\n\n        \n        instance(x: 200, y: -50) gen_range_list Std_k98ojb.List.GenerateRange {}\n        2 \u2192 gen_range_list.from\n        floor_node.floorResult \u2192 gen_range_list.to\n\n        \n        instance(x: 300, y: 100) find_divisor Iteration.Find {\n            handler: func() {\n                in(name: \"current\") property(Number) i\n                out(name: \"output\") property(Bool) result\n\n                instance modulo Math.Modulo {}\n                num_5c0677 \u2192 modulo.value \n                i \u2192 modulo.divisor\n\n                instance eq_zero Logic.Equal {}\n                0 \u2192 eq_zero.first\n                modulo.result \u2192 eq_zero.second\n\n                eq_zero.equals \u2192 result\n            }\n        }\n        gen_range_list.list \u2192 find_divisor.items\n\n        \n        instance(x: 400, y: 150) is_found_expression Std_k98ojb.Std.IfExpression {\n            expression: \"foundItem != null\"\n        }\n        find_divisor.item \u2192 is_found_expression.gen_0\n\n        \n        instance(x: 500, y: 200) final_if Std_k98ojb.Std.If {}\n        is_found_expression.result \u2192 final_if.condition\n\n        \n        instance if_true_setter PropertySetter for output_c457b3 {\n            value: False\n        }\n        instance if_false_setter PropertySetter for output_c457b3 {\n            value: True\n        }\n\n        final_if.thenTrigger \u2192 if_true_setter.execute\n        final_if.elseTrigger \u2192 if_false_setter.execute\n\n        \n        if_true_setter.continueTrigger \u2192 continue_9a54bb\n        if_false_setter.continueTrigger \u2192 continue_9a54bb\n\n        \n        if_edge_case.elseTrigger \u2192 compute_sqrt_node.startTrigger\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 100, y: 50) multiply_node root.Std_k98ojb.Math.Mul {}\n        instance(x: 200, y: 50) condition_node root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 < 0 ? true : false\"\n        }\n\n        \n        x_853326 -> multiply_node.first\n        y_5390f5 -> multiply_node.second\n\n        \n        multiply_node.result -> condition_node.gen_0\n\n        \n        condition_node.value -> output_3339a3\n    }\n    \n\n    instance(x: -50, y: 100) opposite_signs_node root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x:5, y:-25, name:\"n\") property(Number) n_27f29c\n        out(x:668,y:2,name:\"output\") property(Bool) output_f2630f\n\n        \n        instance(x: 100, y: -50) mod_node Std_k98ojb.Math.Modulo {}\n        n_27f29c -> mod_node.value\n        11 -> mod_node.divisor\n\n        \n        instance(x: 200, y: -50) eq_zero Std_k98ojb.Logic.Equal {}\n        mod_node.result -> eq_zero.left\n        0 -> eq_zero.right\n\n        \n        eq_zero.result -> output_f2630f\n    }\n\n    instance(x:-10,y:0) is_diff_inst main.is_diff {} \n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_0 root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_0.input\n        search_ai -> replacer_0.search\n        replace_ai -> replacer_0.replace\n        replacer_0.value -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 174, y: 156) tolower_4d0a9f root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 508, y: 156) equal_d3b2e2 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_4d0a9f.input\n        tolower_4d0a9f.output -> equal_d3b2e2.right\n        input_ai -> equal_d3b2e2.left\n        equal_d3b2e2.equals -> output_ai\n    }\n\n    \n\n    instance(x: -187, y: 76) is_lower_c5a6c0 root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -300, y: 50) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 100, y: 150) unique_reducer root.Std_k98ojb.Iteration.Reduce {\n            items = list_5fda54,\n            initial_value = empty_list.list,\n\n            handler: (acc, item) => { \n                \n                instance contains_node root.Std_k98ojb.List.Contains {\n                    list = acc,\n                    item = item\n                }\n\n                \n                instance invert root.Logic.Not {\n                    input = contains_node.isContained\n                }\n                \n                instance decide root.Std.If { \n                    predicate = invert.output,\n\n                    then: {\n                        \n                        instance new_list root.Std_k98ojb.List.Add {\n                            list = acc,\n                            item = item\n                        }\n                        outputs.new_acc = new_list.listWithItem\n                    },\n\n                    else: { \n                        \n                        outputs.new_acc = acc\n                    }\n                }\n\n                outputs.new_acc = decide.thenOutput ?: decide.elseOutput \n            }  \n        }\n\n        \n        instance(x: 300, y: 250) product_reducer root.Std_k98ojb.Iteration.Reduce {\n            items = unique_reducer.accumulatedValue,\n            initial_value = 1,\n\n            handler: (current_product, element) => { \n                \n                instance multiply_node root.Std_k98ojb.Math.Multiply {\n                    left = current_product,\n                    right = element\n                }\n                outputs.new_acc = multiply_node.result\n            }  \n        }\n\n        \n        product_reducer.accumulatedValue -> output_cffcc2\n\n        instance(x: 500, y: 350) emit_continue root.Std.EmitTrigger {\n            on_input = product_reducer.completed,\n            trigger_output = continue_45190b\n        }\n    }\n\n    \n\n    instance unique_product_instance root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n        \n        instance(x: 200, y: 50) difference_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) difference_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 100) concat_87a3d2 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference_ab.left\n        list2_ai -> difference_ab.right\n\n        list2_ai -> difference_ba.left \n        list1_ai -> difference_ba.right \n\n        difference_ab.difference -> concat_87a3d2.left \n        difference_ba.difference -> concat_87a3d2.right \n\n        concat_87a3d2.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 100) len_node Std_k98ojb.List.Length {}\n        list_48148f \u2192 len_node.list \n\n        instance(x: 200, y: 50) max_divisor_std Max {\n            second: 1 \n        }\n        len_node.length \u2192 max_divisor_std.first\n\n        \n        instance(x: 150, y: 200) modulo Modulo {}\n        n_68068c \u2192 modulo.value \n        max_divisor_std.result \u2192 modulo.divisor \n\n        \n        instance(x: 300, y: 150) split_point_sub Sub {}\n        len_node.length \u2192 split_point_sub.first\n        modulo.result \u2192 split_point_sub.second\n\n        \n        instance(x: 250, y: 300) first_part_slice List.Slice {\n            start: 0 \n        }\n        list_48148f \u2192 first_part_slice.list\n        split_point_sub.result \u2192 first_part_slice.end \n\n        \n        instance(x: 350, y: 300) sec_part_slice List.Slice {}\n        list_48148f \u2192 sec_part_slice.list \n        split_point_sub.result \u2192 sec_part_slice.start\n        len_node.length \u2192 sec_part_slice.end \n\n        \n        instance(x: 500, y: 200) concat_res List.Concat {}\n        sec_part_slice.result \u2192 concat_res.list1\n        first_part_slice.result \u2192 concat_res.list2\n\n        \n        concat_res.result \u2192 output_823209\n    }\n\n    instance(x: -50, y: 0) rotate_node main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 94, y: -105) reduce_a1b3d2 root.Std_k98ojb.Iteration.Reduce {\n            initial: 0\n        }\n        list_2c62ab -> reduce_a1b3d2.items\n        func() {\n            in(x: -121, y: -37, name: \"acc\") property(Number) acc_in\n            in(x: -100, y: 45, name: \"current\") property(Number) current_in\n\n            out(x: 300, y: 0, name: \"\") property(Number) _out\n\n            instance(x: 92, y: -22) add_8d7a6f root.Std_k98ojb.Math.Add {}\n            acc_in -> add_8d7a6f.first\n            current_in -> add_8d7a6f.second\n            add_8d7a6f.result -> _out\n        } -> reduce_a1b3d2.handler\n        reduce_a1b3d2.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -92, y: 45) summer_def root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: 100, y: 50) if_leq_one root.Std_k98ojb.Std.IfExpression {\n            expression = \"num_5c0677 <= 1\"\n        }\n\n        \n        setter(x: 300, y: 50, name: \"setter_false\") set_out root.Std_k98ojb.??? { \n          new_value = false \n          execute triggered by if_leq_one.then\n          output_c457b3 = new_value\n        }\n        \n        \n        instance(x: 100, y: 150) even_check root.Std_k98ojb.Std.IfExpression {\n            expression = \"(num_5c0677 % 2 == 0) && (num_5c0677 != 2)\"\n        }\n\n        \n        setter(x: 300, y: 150, name: \"setter_even\") set_even root.Std_k98ojb.??? {\n          new_value = false \n          execute triggered by even_check.then\n          output_c457b3 = new_value\n        }\n\n        \n        instance(x: 100, y: 200) pow_half root.Std_k98ojb.Math.Pow {\n            value = num_5c0677 \n            exponent = 0.5\n        }\n        \n        instance(x: 200, y: 200) floor_sqrt root.Std_k98ojb.Math.Floor {\n            number = pow_half.result\n        }\n\n        \n        instance(x: 100, y: 250) generate_range root.Std_k98ojb.List.GenerateRange {\n            from = 3 \n            to = floor_sqrt.number\n        }\n\n        \n        instance(x: 300, y: 250) find_divisor root.Std_k98ojb.Iteration.Find {\n            items = generate_range.list\n            \n            handler {\n                in(x: -100, y: -50, name: \"current\") property(Number) current_param\n                \n                instance(x: 0, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {\n                    value = num_5c0677\n                    divisor = current_param\n                }\n\n                instance(x: 20, y: 10) equal_zero root.Std_k98ojb.Logic.Equal {\n                    leftValue = modulo_node.result \n                    rightValue = 0.0 \n                }\n                \n                out(\"match\") -> equal_zero.equals\n            }\n        }\n\n        \n        instance(x: 350, y: 270) check_found root.Std_k98ojb.Logic.IsNotNull {\n            value = find_divisor.item\n        }\n\n        \n        instance(x: 450, y: 300) final_out root.Std_k98ojb.Std.IfExpression {\n            expression = \"!check_found.result\"\n        }\n        \n        \n        setter(x: 600, y: 300, name: \"setter_final\") set_output root.Std_k98ojb.??? { \n          new_value = final_out.outputValue \n          execute triggered by final_out.then AND (even_check.else OR if_leq_one.else) \n          output_c457b3 = new_value\n        }\n\n        \n        setter.set_continue_9a54bb on_all_paths: [set_false, set_even, set_final]\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_0 root.Std_k98ojb.Math.Mul {}\n        x_853326 -> mul_0.first\n        y_5390f5 -> mul_0.second\n        \n        instance(x: 250, y: -170) greaterthan_0 root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greaterthan_0.left\n        mul_0.result -> greaterthan_0.right\n\n        greaterthan_0.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_signs_inst root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: 50) check_div root.Std_k98ojb.Std.IfExpression {\n            expression: \"it % 11 == 0\"\n        }\n        n_27f29c -> check_div.it\n        check_div.value -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: -30) is_diff_node root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 100) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 300, y: 100) equal_node_4e8c54 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_node_4e8c54.left\n        tolower_7b3b7b.output -> equal_node_4e8c54.right\n        equal_node_4e8c54.result -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items = list_5fda54,\n            initial_value = empty_list.list\n        }\n\n        \n        reduce_unique.handler = func() {\n            in(x: 0, y: 0, name:\"acc\") property(List) acc_list\n            in(x: 1, y: 0, name:\"current\") property(Number) element\n\n            out(x: 2, y: 0, name:\"newAcc\") property(List) new_acc\n\n            \n            instance contains_node root.Std_k98ojb.List.Contains {\n                list = acc_list,\n                item = element\n            }\n\n            \n            instance not_contains root.Std_k98ojb.Logic.Not {\n                input = contains_node.isContained\n            }\n\n            \n            instance if_node root.Std_k98ojb.Std.If {\n                predicate = not_contains.output\n            }\n\n            \n            instance add_node root.Std_k98ojb.List.Add {\n                list = acc_list,\n                item = element\n            }\n\n            \n            if_node.then \u2192 add_node \u2192 new_acc\n            if_node.else \u2192 acc_list \u2192 new_acc\n        }\n\n        \n        instance initial_one root.Std_k98ojb.Number { value = 1 }\n        \n        instance product_reduce root.Std_k98ojb.Iteration.Reduce {\n            items = reduce_unique.result,\n            initial_value = initial_one.value\n        }\n\n        \n        product_reduce.handler = func() {\n            in(x: 0, y: 0, name:\"acc\") property(Number) current_product\n            in(x: 1, y: 0, name:\"current\") property(Number) element\n\n            out(x: 2, y: 0, name:\"newAcc\") property(Number) new_prod\n\n            instance multiply_node root.Std_k98ojb.Math.Mul {\n                a = current_product,\n                b = element\n            }\n\n            multiply_node.result \u2192 new_prod\n        }\n\n        \n        product_reduce.result \u2192 output_cffcc2\n        \n        execute_19300c \u2192 reduce_unique.execute  \n        product_reduce.done \u2192 continue_45190b   \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff2_a3c1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 125) concat_7e2a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_a3c1.left\n        list1_ai -> diff2_a3c1.right\n\n        diff1_9f8d.difference -> concat_7e2a.left\n        diff2_a3c1.difference -> concat_7e2a.right\n\n        concat_7e2a.list -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 list_length.list\n\n        \n        instance modulo_k root.Std_k98ojb.Math.Modulo {}\n        n_68068c \u2192 modulo_k.value\n        list_length.length \u2192 modulo_k.divisor\n\n        \n        instance split_sub root.Std_k98ojb.Math.Sub {}\n        list_length.length \u2192 split_sub.first\n        modulo_k.result \u2192 split_sub.second\n\n        \n        instance slice_b root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 slice_b.list\n        split_sub.result \u2192 slice_b.start\n        list_length.length \u2192 slice_b.end\n\n        \n        instance(x: 200, y: 50) slice_a root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        list_48148f \u2192 slice_a.list\n        split_sub.result \u2192 slice_a.end\n\n        \n        instance concat root.Std_k98ojb.List.Concat {}\n        slice_b.output \u2192 concat.left\n        slice_a.output \u2192 concat.right\n\n        \n        concat.output \u2192 output_823209\n    }\n\n    \n    instance(x: 150, y: 150) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: -10) reduce_3d7e3b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3d7e3b.items\n        0 -> reduce_3d7e3b.initialValue\n        func() {\n            in(x: -154, y: -52, name: \"acc\") property(Number) acc_9a8f5d\n            in(x: -162, y: 28, name: \"item\") property(Number) item_7e3b0c\n\n            out(x: 300, y: -48, name: \"\") property(Number) _3e3b9a\n\n            instance(x: 58, y: -51) add_6d2a4f root.Std_k98ojb.Math.Add {}\n            acc_9a8f5d -> add_6d2a4f.first\n            item_7e3b0c -> add_6d2a4f.second\n            add_6d2a4f.result -> _3e3b9a\n        } -> reduce_3d7e3b.reducer\n        reduce_3d7e3b.reducedValue -> sum_2a848f\n    }\n\n    \n\n    instance(x: -105, y: 6) sum_node root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance edge_case_lt_two root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677;\n            right = 1; \n        }\n\n        instance if_edge_case root.Std_k98ojb.Std.If {\n            predicate = edge_case_lt_two.result;\n\n            then: \n                output_c457b3 = false;\n                trigger(continue_9a54bb);\n\n            else:\n                \n        }\n\n        \n        instance sqrt_expr root.Std_k98ojb.Math.Expression {\n            expression = \"Math.sqrt(n)\";\n            inputs: n = num_5c0677;\n        }\n        \n        instance floored_sqrt root.Std_k98ojb.Math.Floor {\n            value = sqrt_expr.result;\n        }\n\n        \n        instance divisor_candidates root.Std_k98ojb.List.GenerateRange {\n            from = 2;\n            to = floored_sqrt.floorResult; \n        }\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items = divisor_candidates.result;\n\n            handler: \n                func() {\n                    in(name: \"current\") property(Number) current;\n                    in(name: \"context\") property(Number) context_num; \n\n                    out(name: \"output\") property(Bool) result;\n\n                    instance modulo root.Std_k98ojb.Math.Modulo {\n                        value = context_num;\n                        divisor = current;\n                    }\n\n                    instance is_divisible root.Std_k98ojb.Math.Equal {\n                        a = modulo.result;\n                        b = 0;\n                    }\n                    \n                    is_divisible.equals \u2192 result; \n                };\n\n            \n            context = num_5c0677;\n        }\n\n        \n        instance determine_prime root.Std_k98ojb.Std.If {\n            predicate = find_divisor.item != null; \n\n            then: \n                output_c457b3 = false;\n\n            else:\n                output_c457b3 = true;\n\n            trigger(continue_9a54bb);\n        }\n\n        \n        execute_b7b391 \u2192 if_edge_case.execute;\n\n        \n        if_edge_case.else \u2192 sqrt_expr.input;\n        sqrt_expr.output \u2192 floored_sqrt.value;\n        floored_sqrt.output \u2192 divisor_candidates.to;\n        divisor_candidates.result \u2192 find_divisor.items;\n        find_divisor.item \u2192 determine_prime.predicate_input;\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -200, y: -50) multiply_node root.Std_k98ojb.Math.Mul {}\n        x_853326 -> multiply_node.first\n        y_5390f5 -> multiply_node.second\n        \n        instance(x: 100, y: 0) greaterthan_node root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greaterthan_node.left\n        multiply_node.result -> greaterthan_node.right\n\n        greaterthan_node.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -150, y: -20) opposite_signs_inst root.main.opposite_signs {}\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 147, y: 43) modulo_ea5d3e root.Std_k98ojb.Math.Modulo {}\n        instance(x: 332, y: 46) equal_4b0c1b root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> modulo_ea5d3e.value\n        11 -> modulo_ea5d3e.divisor\n        modulo_ea5d3e.result -> equal_4b0c1b.left\n        0 -> equal_4b0c1b.right\n        equal_4b0c1b.equal -> output_f2630f\n    }\n\n    \n\n    instance(x: -89, y: -7) is_diff_def root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 700, y: 250) replace_9f1a2d root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_9f1a2d.input\n        search_ai -> replace_9f1a2d.search\n        replace_ai -> replace_9f1a2d.replace\n        replace_9f1a2d.result -> output_ai\n    }\n\n    \n\n    instance(x: -300, y: 300) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        instance(x: 100, y: 200) equal_node root.Std_k98ojb.Logic.Equal {}\n        input_ai -> equal_node.left\n        tolower_7b3b7b.output -> equal_node.right\n        equal_node.result -> output_ai\n    }\n    \n\n    instance(x: -34, y: 127) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: 100, y: 100) filter_unique root.Std_k98ojb.Iteration.Filter {\n            list = list_5fda54,\n            context = list_5fda54 \n        }\n\n        \n        func() handler_filter_unique {\n            in(x: 0, y: 0, name:\"element\") property(Number) current_element\n            in(x: 10, y: 20, name:\"context_list\") property(List) original_list\n\n            out(x: 30, y: 40, name:\"keep\") property(Bool) predicate_result\n\n            \n            instance(x:50,y:50) filter_equal root.Std_k98ojb.Query.Filter {\n                list = original_list,\n                where = \"it == current_element\"\n            }\n\n            \n            instance(x:60,y:60) length_node root.Std_k98ojb.List.Length {\n                list = filter_equal.result\n            }\n\n            \n            instance(x:70,y:70) equal_one root.Std_k98ojb.Math.Equal {\n                a = length_node.length,\n                b = 1\n            }\n\n            equal_one.result \u2192 predicate_result.value\n        }\n        filter_unique.handler = handler_filter_unique\n\n        \n        instance(x: 200, y: 200) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items = filter_unique.result,\n            initial_value = 1 \n        }\n\n        \n        func() handler_reduce {\n            in(x: 0,y:0,name:\"acc\") property(Number) accumulator\n            in(x:10,y:20,name:\"current\") property(Number) current_element\n\n            out(x:30,y:40,name:\"result\") property(Number) product_step\n\n            instance(x:50,y:50) multiply_node root.Std_k98ojb.Math.Multiply {\n                a = accumulator,\n                b = current_element\n            }\n\n            multiply_node.result \u2192 product_step.value\n        }\n        reduce_product.handler = handler_reduce\n\n        \n        execute_19300c \u2192 filter_unique.execute \n        reduce_product.continue \u2192 continue_45190b \n        reduce_product.result \u2192 output_cffcc2 \n    }\n\n    instance(x: 300, y: 300) unique_prod_instance root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 200) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 125) concat root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat.left\n        difference2.difference -> concat.right\n\n        concat.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {}\n        list_48148f -> len_node.list\n        \n        \n        instance(x: 200, y: 60) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c -> modulo_node.value\n        len_node.length -> modulo_node.divisor\n\n        \n        instance(x: 300, y: 70) sub_node root.Std_k98ojb.Math.Sub {}\n        len_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n        \n        \n        instance(x: 400, y: 80) slice_suffix root.Std_k98ojb.List.Slice {\n            list: list_48148f,\n            start: sub_node.result,\n            end: len_node.length\n        }\n\n        \n        instance(x: 500, y: 90) slice_prefix root.Std_k98ojb.List.Slice {\n            list: list_48148f,\n            start: 0,\n            end: sub_node.result\n        }\n\n        \n        instance(x: 600, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n        slice_suffix.output -> concat_node.left\n        slice_prefix.output -> concat_node.right\n\n        \n        concat_node.output -> output_823209\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 200, y: 50) reduce_eb1a9d root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_eb1a9d.items\n        0 -> reduce_eb1a9d.initialValue\n        func() {\n            in(x: -150, y: -50, name: \"current\") property(Number) current_7e3a8f\n            in(x: -140, y: 20, name: \"item\") property(Number) item_6d9b1a\n\n            out(x: 300, y: -30, name: \"result\") property(Number) result_b3c7e4\n\n            instance(x: 50, y: 0) add_8f2a6d root.Std_k98ojb.Math.Add {}\n            current_7e3a8f -> add_8f2a6d.first\n            item_6d9b1a -> add_8f2a6d.second\n            add_8f2a6d.result -> result_b3c7e4\n        } -> reduce_eb1a9d.reducer\n        reduce_eb1a9d.reduced -> sum_2a848f\n    }\n\n    \n\n    instance(x: -50, y: 0) _sum_9f1a6d root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: 50, y: 50) if_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 < 2\"\n        }\n\n        \n        setter_false = instance(x: 100, y: -30) setter_out root.Main.Setter {\n            new_value: false,\n            property: output_c457b3\n        }\n        \n        \n        if_edge.then \u2192 setter_false.execute\n        setter_false.continue \u2192 continue_9a54bb\n\n        \n        \n        pow_node = instance(x: 150, y: 200) math_pow root.Std_k98ojb.Math.Pow {\n            x: num_5c0677,\n            y: 0.5\n        }\n\n        floor_node = instance(x: 200, y: 200) math_floor root.Std_k98ojb.Math.Floor {\n            value: pow_node.result\n        }\n\n        \n        list_range = instance(x: 250, y: 200) gen_range root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: floor_node.result\n        }\n\n        \n        filter_divisors = instance(x: 300, y: 200) divisor_filter root.Std_k98ojb.Query.Filter {\n            items: list_range.list,\n            where: \"num_5c0677 % it == 0\"\n        }\n\n        \n        length_node = instance(x: 350, y: 200) list_length root.Std_k98ojb.List.Length {\n            list: filter_divisors.result\n        }\n\n        \n        instance(x: 400, y: 200) if_final root.Std_k98ojb.Std.IfExpression {\n            expression: \"list_length.length == 0\"\n        }\n\n        \n        setter_true = instance(x: 450, y: -30) true_setter root.Main.Setter {\n            new_value: true,\n            property: output_c457b3\n        }\n        \n        setter_false_final = instance(x: 450, y: -80) false_setter root.Main.Setter {\n            new_value: false,\n            property: output_c457b3\n        }\n\n        \n        if_final.then \u2192 setter_true.execute\n        if_final.else \u2192 setter_false_final.execute\n\n        \n        setter_true.continue \u2192 continue_9a54bb\n        setter_false_final.continue \u2192 continue_9a54bb\n\n        \n        if_edge.else \u2192 pow_node.trigger\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -300, y: -50) multiply root.Std_k98ojb.Math.Mul {}\n        x_853326 -> multiply.first\n        y_5390f5 -> multiply.second\n\n        instance(x: 50, y: -50) check_sign root.Std_k98ojb.Math.Expression {\n            expression = \"gen_0 < 0\"\n        }\n        multiply.result -> check_sign.value\n        check_sign.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_signs_node root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n   func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 145, y: 50) check_div root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 % 11 == 0\"\n        }\n        n_27f29c -> check_div.gen_0\n        check_div.isTrue -> output_f2630f\n    }\n\n    \n\n    instance(x: -54, y: 28) is_diff_inst root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_node root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_node.input\n        search_ai -> replace_node.search\n        replace_ai -> replace_node.replace\n        replace_node.output -> output_ai\n    }\n\n    \n\n    instance(x: -142, y: 23) replace_char_5f7a0e root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 200, y: 50) tolower_1 root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 50) equal_1 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_1.input\n        tolower_1.output -> equal_1.left\n        input_ai -> equal_1.right\n        equal_1.result -> output_ai\n    }\n\n    \n\n    instance(x: -250, y: 30) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items <- list_5fda54\n            initial_value <- empty_list.list  \n        }\n\n        on_handler(reduce_unique.handler) do: {\n            in accumulated(root.Std_k98ojb.List), current_item(root.Number)\n\n            instance contains root.Std_k98ojb.List.Contains {\n                list <- accumulated\n                item <- current_item\n            }\n\n            instance not_present root.Std_k98ojb.Logic.Not { \n                input <- contains.result  \n            }\n\n            \n            instance add_it root.Std_k98ojb.List.Add {\n                list <- accumulated\n                item <- current_item\n            }\n\n            instance select_next root.Std_k98ojb.Std.If {\n                predicate <- not_present.output\n\n                then -> emit(add_it.listWithItem)  \n                else -> emit(accumulated)          \n            }\n\n            output { value <- select_next.value }\n        }\n\n        \n        instance const_1 root.Std_k98ojb.Constant {\n            value = 1.0  \n        }\n\n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items <- reduce_unique.result    \n            initial_value <- const_1.value   \n        }\n\n        on_handler(reduce_product.handler) do: {\n            in accumulated(root.Number), current_item(root.Number)\n\n            instance multiply root.Std_k98ojb.Math.Multiply {\n                first <- accumulated\n                second <- current_item\n            }\n\n            output { value <- multiply.result }\n        }\n\n        \n        reduce_product.result -> output_cffcc2\n\n        \n        instance start_reduction root.Std_k98ojb.TriggerEvent {\n            inTrigger <- execute_19300c  \n            outTrigger -> reduce_unique.start  \n        }\n\n        \n        instance and_complete root.Std_k98ojb.AndGate {\n            a <- reduce_unique.finished    \n            b <- reduce_product.finished   \n            output -> continue_45190b      \n        }\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 0, y: 0) diff_list1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 0, y: 50) diff_list2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 25) concat_73d9c6 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff_list1.left\n        list2_ai -> diff_list1.right\n\n        list2_ai -> diff_list2.left\n        list1_ai -> diff_list2.right\n\n        diff_list1.difference -> concat_73d9c6.left\n        diff_list2.difference -> concat_73d9c6.right\n        concat_73d9c6.result -> output_ai\n    }\n\n    \n\n    instance(x: 50, y: -40) find_dissimilar_4b8a1f root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n        \n        \n        instance(x: 100, y: 50) getLength root.Std_k98ojb.List.Length {}\n        list_48148f -> getLength.list\n\n        \n        instance(x: 200, y: 50) modNode root.Std_k98ojb.Math.Modulo {} \n        n_68068c -> modNode.value\n        getLength.length -> modNode.divisor \n\n        \n        instance(x: 300, y: 50) subNode root.Std_k98ojb.Math.Sub {} \n        getLength.length -> subNode.first_operand\n        modNode.result -> subNode.second_operand\n\n        \n        \n        instance(x: 400, y: 50) sliceFirst root.Std_k98ojb.List.Slice {} \n        list_48148f -> sliceFirst.list\n        subNode.difference -> sliceFirst.start\n        -1 -> sliceFirst.end \n\n        \n        instance(x: 400, y: 150) sliceSecond root.Std_k98ojb.List.Slice {} \n        list_48148f -> sliceSecond.list\n        0 -> sliceSecond.start\n        subNode.difference -> sliceSecond.end \n\n        \n        instance(x: 500, y: 100) concat root.Std_k98ojb.List.Concat {} \n        sliceFirst.result -> concat.input_1\n        sliceSecond.result -> concat.input_2 \n\n        \n        concat.output -> output_823209\n    }\n\n    \n\n    instance(x: 50, y: 20) rotate_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 98, y: -10) reduce_7d9b3a root.Std_k98ojb.Iteration.Reduce {}\n        \n        list_2c62ab -> reduce_7d9b3a.items\n        0 -> reduce_7d9b3a.initial\n\n        func() {\n            in(x: -150, y: -50, name: \"acc\") property(Number) acc_f4c0e8\n            in(x: -140, y: 20, name: \"item\") property(Number) item_6b7d3a\n\n            out(x: 200, y: -30, name: \"\") property(Number) _result_a9f3cb\n\n            instance(x: 50, y: -20) add_8e84d1 root.Std_k98ojb.Math.Add {}\n            \n            acc_f4c0e8 -> add_8e84d1.first\n            item_6b7d3a -> add_8e84d1.second\n            \n            add_8e84d1.result -> _result_a9f3cb\n        } -> reduce_7d9b3a.handler\n\n        reduce_7d9b3a.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -97, y: 0) _sum_b9c8e1 root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -300, y: 50) ifEdgeCase1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 <= 1\";\n        }\n\n        \n        setter(x: -200, y: 50, name: set_false_edge1) root.Std_k98ojb.VarSetter { type: Bool; value: false }\n        instance(x: -100, y: 50) cont_edge1 root.Std_k98ojb.TriggerEmitter;\n\n        \n        ifEdgeCase1.then \u2192 set_false_edge1.setTrigger;\n        set_false_edge1.var.get \u2192 output_c457b3;\n        ifEdgeCase1.then \u2192 cont_edge1.emit;\n        cont_edge1.output \u2192 continue_9a54bb;\n\n        \n        instance(x: -300, y: 150) ifEdgeCase2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 == 2\";\n        }\n\n        \n        setter(x: -200, y: 150, name: set_true_edge2) root.Std_k98ojb.VarSetter { type: Bool; value: true }\n        instance(x: -100, y: 150) cont_edge2 root.Std_k98ojb.TriggerEmitter;\n\n        \n        ifEdgeCase2.then \u2192 set_true_edge2.setTrigger;\n        set_true_edge2.var.get \u2192 output_c457b3;\n        ifEdgeCase2.then \u2192 cont_edge2.emit;\n        cont_edge2.output \u2192 continue_9a54bb;\n\n        \n        instance(x: -300, y: 200) modNode root.Std_k98ojb.Math.Modulo {\n            value: num_5c0677; divisor: 2;\n        }\n\n        instance(x: -200, y: 200) ifEven root.Std_k98ojb.Std.IfExpression {\n            expression: \"modNode.result == 0\";\n        }\n\n        \n        setter(x: -100, y: 200, name: set_false_even) root.Std_k98ojb.VarSetter { type: Bool; value: false }\n        instance(x: -50, y: 200) cont_even root.Std_k98ojb.TriggerEmitter;\n\n        \n        ifEven.then \u2192 set_false_even.setTrigger;\n        set_false_even.var.get \u2192 output_c457b3;\n        ifEven.then \u2192 cont_even.emit;\n        cont_even.output \u2192 continue_9a54bb;\n\n        \n        instance(x: 100, y: 300) powNode root.Std_k98ojb.Math.Pow {\n            x: num_5c0677; y: 0.5;\n        }\n\n        instance(x: 200, y: 300) floorNode root.Std_k98ojb.Math.Floor { value: powNode.result; }\n        \n        instance(x: 100, y: 350) genRange root.Std_k98ojb.List.GenerateRange {\n            from: \"3\"; to: floorNode.floorResult;\n        }\n\n        \n        instance(x: 200, y: 400) findDivisor root.Std_k98ojb.Iteration.Find {\n            items: genRange.list;\n            handler: func() {\n                in(x: -40, y: 0, name: \"current\") property(Number) current;\n\n                instance(x: 100, y: 50) modDiv root.Std_k98ojb.Math.Modulo {\n                    value: num_5c0677; divisor: current;\n                }\n\n                out(x: 200, y: 50, name: \"output\") property(Bool) { result = (modDiv.result == 0); }\n            }\n        }\n\n        \n        instance(x: 300, y: 450) ifFound root.Std_k98ojb.Std.IfExpression {\n            expression: \"!findDivisor.item.isNull\";\n        }\n\n        setter(x: 400, y: 450, name: set_final_output) root.Std_k98ojb.VarSetter { type: Bool; }\n        \n        \n        ifFound.then \u2192 set_final_output.setTrigger { value = false };\n        ifFound.else \u2192 set_final_output.setTrigger { value = true };\n\n        \n        set_final_output.var.get \u2192 output_c457b3;\n        \n        instance(x: 500, y: 450) cont_final root.Std_k98ojb.TriggerEmitter;\n        ifFound.then \u2192 cont_final.emit;\n        ifFound.else \u2192 cont_final.emit;\n\n        cont_final.output \u2192 continue_9a54bb;\n\n        \n        execute_b7b391 \u2192 ifEdgeCase1.execute;  \n\n        \n        ifEdgeCase1.else \u2192 ifEdgeCase2.execute;\n\n        \n        ifEdgeCase2.else \u2192 modNode.compute;\n        modNode.resultReady \u2192 ifEven.execute;\n\n        \n        ifEven.else \u2192 powNode.compute;  \n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 146, y: -178) mul_0 root.Std_k98ojb.Math.Mul {}\n        x_853326 -> mul_0.first\n        y_5390f5 -> mul_0.second\n        \n        instance(x: 250, y: -170) greaterthan_0 root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greaterthan_0.left\n        mul_0.result -> greaterthan_0.right\n\n        greaterthan_0.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_signs_inst root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: 50) check_div root.Std_k98ojb.Std.IfExpression {\n            expression: \"it % 11 == 0\"\n        }\n        n_27f29c -> check_div.it\n        check_div.value -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: -30) is_diff_node root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -179, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 100) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 300, y: 100) equal_node_4e8c54 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_node_4e8c54.left\n        tolower_7b3b7b.output -> equal_node_4e8c54.right\n        equal_node_4e8c54.result -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -300, y: -200) initial_empty root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 100, y: -150) reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items = list_5fda54,\n            initialValueNode = initial_empty\n        }\n\n        \n        func() { \n            in(x: 0, y: -100, name: \"acc\") property(List) acc_list\n            in(x: 0, y: -50, name: \"current\") property(Number) element\n\n            out(x: 200, y: -75, name: \"\") property(List) new_acc\n\n            \n            instance contains_node root.Std_k98ojb.List.Contains {\n                list = acc_list,\n                item = element\n            }\n\n            \n            instance invert root.Logic.Not { input = contains_node.isContained }\n\n            \n            instance add_node root.Std_k98ojb.List.Add {\n                list = acc_list,\n                item = element\n            }\n\n            \n            instance choose root.Std_k98ojb.Std.If {\n                predicate = invert.output\n            }\n            \n            \n            add_node.listWithItem \u2192 choose.then\n            acc_list \u2192 choose.else\n\n            \n            choose.selected \u2192 new_acc\n        }\n\n        \n        instance(x: 200, y: -50) initial_one root.Std_k98ojb.Number { value = 1 }\n\n        \n        instance(x: 400, y: -100) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items = reduce_unique.result,\n            initialValueNode = initial_one\n        }\n\n        \n        func() { \n            in(x: 300, y: -50, name: \"acc\") property(Number) acc_num\n            in(x: 300, y: 0, name: \"current\") property(Number) element\n\n            out(x: 400, y: 25, name: \"\") property(Number) new_acc\n\n            \n            instance multiply root.Std_k98ojb.Math.Mul {\n                a = acc_num,\n                b = element\n            }\n\n            multiply.result \u2192 new_acc\n        }\n\n        \n        reduce_product.result \u2192 output_cffcc2\n        reduce_product.completed \u2192 continue_45190b\n\n        \n        execute_19300c \u2192 reduce_unique.start\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1_9f8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) diff2_a3c1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 125) concat_7e2a root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_9f8d.left\n        list2_ai -> diff1_9f8d.right\n\n        list2_ai -> diff2_a3c1.left\n        list1_ai -> diff2_a3c1.right\n\n        diff1_9f8d.difference -> concat_7e2a.left\n        diff2_a3c1.difference -> concat_7e2a.right\n\n        concat_7e2a.list -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 list_length.list\n\n        \n        instance modulo_k root.Std_k98ojb.Math.Modulo {}\n        n_68068c \u2192 modulo_k.value\n        list_length.length \u2192 modulo_k.divisor\n\n        \n        instance split_sub root.Std_k98ojb.Math.Sub {}\n        list_length.length \u2192 split_sub.first\n        modulo_k.result \u2192 split_sub.second\n\n        \n        instance slice_b root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 slice_b.list\n        split_sub.result \u2192 slice_b.start\n        list_length.length \u2192 slice_b.end\n\n        \n        instance(x: 200, y: 50) slice_a root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        list_48148f \u2192 slice_a.list\n        split_sub.result \u2192 slice_a.end\n\n        \n        instance concat root.Std_k98ojb.List.Concat {}\n        slice_b.output \u2192 concat.left\n        slice_a.output \u2192 concat.right\n\n        \n        concat.output \u2192 output_823209\n    }\n\n    \n    instance(x: 150, y: 150) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: -10) reduce_3d7e3b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3d7e3b.items\n        0 -> reduce_3d7e3b.initialValue\n        func() {\n            in(x: -154, y: -52, name: \"acc\") property(Number) acc_9a8f5d\n            in(x: -162, y: 28, name: \"item\") property(Number) item_7e3b0c\n\n            out(x: 300, y: -48, name: \"\") property(Number) _3e3b9a\n\n            instance(x: 58, y: -51) add_6d2a4f root.Std_k98ojb.Math.Add {}\n            acc_9a8f5d -> add_6d2a4f.first\n            item_7e3b0c -> add_6d2a4f.second\n            add_6d2a4f.result -> _3e3b9a\n        } -> reduce_3d7e3b.reducer\n        reduce_3d7e3b.reducedValue -> sum_2a848f\n    }\n\n    \n\n    instance(x: -105, y: 6) sum_node root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance lessThanTwo root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677,\n            right = 1\n        }\n\n        instance ifEdgeCase root.Std_k98ojb.Std.If {\n            predicate = lessThanTwo.result\n        }\n\n        \n        setter(x: -200, y: 300, name: \"setter_false\") setter_edgeFalse = isPrime {\n            new_value = false\n        }\n        ifEdgeCase.then -> setter_edgeFalse.execute\n        setter_edgeFalse.continue -> continue_9a54bb\n\n        \n        instance sqrtExpr root.Std_k98ojb.Math.Expression {\n            expression = \"Math.sqrt(value)\",\n            value = num_5c0677\n        }\n\n        instance floorSqrt root.Std_k98ojb.Math.Floor {\n            number = sqrtExpr.result\n        }\n\n        instance divisorsRange root.Std_k98ojb.List.GenerateRange {\n            from = 2,\n            to = floorSqrt.floorResult\n        }\n\n        \n        instance findDivisor root.Std_k98ojb.Iteration.Find {\n            items = divisorsRange.result,\n            context = num_5c0677\n        }\n        \n        \n        func() {\n            in(name: \"current\") property(Number) current_item\n            in(name: \"context\") property(Number) context_num\n\n            instance modulo root.Std_k98ojb.Math.Modulo {}\n            context_num -> modulo.value\n            current_item -> modulo.divisor\n\n            instance eqZero root.Std_k98ojb.Math.Equal {\n                first = modulo.result,\n                second = 0\n            }\n            \n            eqZero.equals -> output (predicate result)\n        } -> findDivisor.handler\n\n        \n        instance hasItem root.Std_k98ojb.Std.IfExpression {\n            expression = \"item != null\",\n            item = findDivisor.item\n        }\n\n        instance ifFound root.Std_k98ojb.Std.If {\n            predicate = hasItem.result\n        }\n\n        \n        setter(x: 200, y: 150, name: \"setter_false\") setter_notPrime = isPrime {\n            new_value = false\n        }\n        \n        setter(x: 300, y: 150, name: \"setter_true\") setter_prime = isPrime {\n            new_value = true\n        }\n\n        \n        ifFound.then -> setter_notPrime.execute\n        ifFound.else -> setter_prime.execute\n\n        \n        setter_notPrime.value -> output_c457b3\n        setter_prime.value -> output_c457b3\n        \n        \n        setter_notPrime.continue -> continue_9a54bb\n        setter_prime.continue -> continue_9a54bb\n\n        \n        execute_b7b391 -> ifEdgeCase.execute\n        ifEdgeCase.else -> sqrtExpr.execute\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 80, y: 40) multiply_node root.Std_k98ojb.Math.Mul {}\n        instance(x: 160, y: 40) greaterthan_node root.Std_k98ojb.Math.GreaterThan {}\n\n        x_853326 -> multiply_node.first\n        y_5390f5 -> multiply_node.second\n        multiply_node.result -> greaterthan_node.right\n        0 -> greaterthan_node.left\n        greaterthan_node.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_signs_inst root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 147, y: 43) modulo_ea5d3e root.Std_k98ojb.Math.Modulo {}\n        instance(x: 332, y: 46) equal_4b0c1b root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> modulo_ea5d3e.value\n        11 -> modulo_ea5d3e.divisor\n        modulo_ea5d3e.result -> equal_4b0c1b.left\n        0 -> equal_4b0c1b.right\n        equal_4b0c1b.equal -> output_f2630f\n    }\n\n    \n\n    instance(x: -89, y: -7) is_diff_def root.main.is_diff {}\n\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 700, y: 250) replace_9f1a2d root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_9f1a2d.input\n        search_ai -> replace_9f1a2d.search\n        replace_ai -> replace_9f1a2d.replace\n        replace_9f1a2d.result -> output_ai\n    }\n\n    \n\n    instance(x: -300, y: 300) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 200, y: 100) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_node_8eae56 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_node_8eae56.right\n        input_ai -> equal_node_8eae56.left\n        equal_node_8eae56.result -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 50) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance filter_unique root.Std_k98ojb.Iteration.Filter {\n            context: list_5fda54\n        }\n        list_5fda54 -> filter_unique.items\n\n        func() { \n            in element_ of type Number\n            in index_ of type Number\n            in context_ of type List\n\n            instance count_filter root.Std_k98ojb.Query.Filter {\n                where: \"it == element_\"\n            }\n            context_ -> count_filter.list\n\n            instance len_node root.Std_k98ojb.List.Length {}\n            count_filter.result -> len_node.list\n\n            instance eq_one root.Std_k98ojb.Math.Equal {}\n            1 -> eq_one.first\n            len_node.length -> eq_one.second\n\n            eq_one.equal \u2192 output \n        }\n\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            initial: 1\n        }\n        filter_unique.result -> reduce_product.items\n\n        func() { \n            in acc of type Number\n            in current_ of type Number\n\n            instance multiply_node root.Std_k98ojb.Math.Mul {}\n            acc \u2192 multiply_node.first\n            current_ \u2192 multiply_node.second\n\n            multiply_node.product \u2192 output \n        }\n\n        reduce_product.result \u2192 output_cffcc2\n        execute_19300c \u2192 filter_unique.execute \n        reduce_product.finished \u2192 continue_45190b \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 100) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 150) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.result -> output_ai\n    }\n\n    \n\n    instance(x: -34, y: 127) find_dissimilar_node root.main.find_dissimilar {}\n\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {\n            list = list_48148f\n        }\n\n        instance(x: 200, y: 60) modulo_node root.Std_k98ojb.Math.Modulo {\n            value = n_68068c,\n            divisor = len_node.length\n        }\n\n        instance(x: 300, y: 70) sub_node root.Std_k98ojb.Math.Sub {\n            first = len_node.length,\n            second = modulo_node.result\n        }\n\n        instance(x: 400, y: 100) first_slice root.Std_k98ojb.List.Slice {\n            list = list_48148f,\n            start = sub_node.result,\n            end = len_node.length\n        }\n\n        instance(x: 500, y: 120) second_slice root.Std_k98ojb.List.Slice {\n            list = list_48148f,\n            start = 0,\n            end = sub_node.result\n        }\n\n        instance(x: 600, y: 150) concat_node root.Std_k98ojb.List.Concat {\n            firstList = first_slice.sliceResult,\n            secondList = second_slice.sliceResult\n        }\n\n        concat_node.concatenated -> output_823209\n    }\n    \n\n    instance(x: -40, y: 150) rotate_right_node root.main.rotate_right {}\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 200, y: 50) reduce_eb1a9d root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_eb1a9d.items\n        0 -> reduce_eb1a9d.initialValue\n        func() {\n            in(x: -150, y: -50, name: \"current\") property(Number) current_7e3a8f\n            in(x: -140, y: 20, name: \"item\") property(Number) item_6d9b1a\n\n            out(x: 300, y: -30, name: \"result\") property(Number) result_b3c7e4\n\n            instance(x: 50, y: 0) add_8f2a6d root.Std_k98ojb.Math.Add {}\n            current_7e3a8f -> add_8f2a6d.first\n            item_6d9b1a -> add_8f2a6d.second\n            add_8f2a6d.result -> result_b3c7e4\n        } -> reduce_eb1a9d.reducer\n        reduce_eb1a9d.reduced -> sum_2a848f\n    }\n\n    \n\n    instance(x: -50, y: 0) _sum_9f1a6d root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance ifexpr_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 < 2\"\n        }\n\n        \n        setter(x: -300, y: 100, name: \"setter_false\") setter_false = is_prime\n        setter(x: -280, y: 150, name: \"setter_true\") setter_true = is_prime\n        getter(x: 900, y: 50, name: \"getter_is_prime\") getter_is_prime = is_prime\n\n        \n        execute_b7b391 \u2192 ifexpr_edge.execute\n        ifexpr_edge.then \u2192 setter_false.execute\n        setter_false.new_value = false \n        setter_false.continue \u2192 continue_9a54bb\n\n        \n        instance pow_sqrt root.Std_k98ojb.Math.Pow {\n            first: num_5c0677,\n            second: 0.5\n        }\n        \n        instance floor_sqrt root.Std_k98ojb.Math.Floor {\n            input: pow_sqrt.result\n        }\n\n        instance genrange_divisors root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: floor_sqrt.output\n        }\n\n        instance filter_divisors root.Std_k98ojb.Query.Filter {\n            items: genrange_divisors.result,\n            where: \"num_5c0677 % it == 0\"\n        }\n\n        instance isempty_divisors root.Std_k98ojb.List.IsEmpty {\n            list: filter_divisors.result\n        }\n\n        \n        instance ifexpr_empty root.Std_k98ojb.Std.IfExpression {\n            expression: \"isempty_divisors.result\"\n        }\n\n        \n        ifexpr_edge.else \u2192 pow_sqrt.execute\n        pow_sqrt.continue \u2192 floor_sqrt.execute\n        floor_sqrt.continue \u2192 genrange_divisors.execute\n        genrange_divisors.continue \u2192 filter_divisors.execute\n        filter_divisors.continue \u2192 isempty_divisors.execute\n        isempty_divisors.continue \u2192 ifexpr_empty.execute\n\n        \n        ifexpr_empty.then \u2192 setter_true.execute\n        ifexpr_empty.else \u2192 setter_false.execute\n\n        \n        setter_true.new_value = true \n        setter_false.new_value = false \n\n        setter_true.continue \u2192 continue_9a54bb\n        setter_false.continue \u2192 continue_9a54bb\n\n        \n        getter_is_prime.value \u2192 output_c457b3\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_coverage_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12451,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n   func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n        \n        instance(x: 50, y: 0) multiply_6e3c4d root.Std_k98ojb.Math.Mul {}\n        x_853326 -> multiply_6e3c4d.first\n        y_5390f5 -> multiply_6e3c4d.second\n\n        instance(x: 100, y: 0) expr_opposite root.Std_k98ojb.Math.Expression {\n            expression: \"gen_0 < 0\"\n        }\n        \n        multiply_6e3c4d.result -> expr_opposite.gen_0\n        \n        expr_opposite.output -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_signs_node root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 150, y: 50) modulo_b4e8a6 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 50) equal_9d7c4d root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_b4e8a6.value\n        11 -> modulo_b4e8a6.divisor\n\n        modulo_b4e8a6.result -> equal_9d7c4d.left\n        0 -> equal_9d7c4d.right\n        \n        equal_9d7c4d.equal -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_node root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 79, y: 200) replace_d9f1a7 root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_d9f1a7.input\n        search_ai -> replace_d9f1a7.search\n        replace_ai -> replace_d9f1a7.replace\n        replace_d9f1a7.output -> output_ai\n    }\n\n    \n\n    instance(x: -246, y: 30) replace_inst root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 200, y: 150) equal_foo root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_foo.left\n        input_ai -> equal_foo.right\n        equal_foo.equal -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) is_lower_node root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list = Std.List.Empty {}\n        \n        \n        instance collect_unique = Std.Iteration.Reduce {\n            items: list_5fda54,\n            initial_value: empty_list.result,\n            handler: (accum, item) => {\n                contains = Std.List.Contains { list=accum; item=item }\n                condition_not_contained = Std.Logic.Not { input=contains.isContained }\n                \n                \n                return Std.IfExpression {\n                    expression: \"condition_not_contained.output\",\n                    thenValue: Std.List.Add { list=accum, item=item },\n                    elseValue: accum\n                };\n            }\n        }\n\n        \n        instance initial_product = Std.Number.Literal { value: 1.0 }\n        \n        \n        instance calculate_product = Std.Iteration.Reduce {\n            items: collect_unique.output_list,\n            initial_value: initial_product.value,\n            handler: (acc, element) => \n                Std.Math.Multiply { first=acc; second=element } \u2192 result\n        }\n\n        \n        calculate_product.result \u2192 output_cffcc2\n        \n        \n        execute_19300c \u2192 collect_unique.start_trigger   \n        calculate_product.completed \u2192 continue_45190b\n    }\n\n    instance unique_product_instance = main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 300, y: 50) setdiff_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: -200) setdiff_2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 700, y: -50) concat_5a2cdd root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> setdiff_1.left\n        list2_ai -> setdiff_1.right\n\n        list2_ai -> setdiff_2.left\n        list1_ai -> setdiff_2.right\n\n        setdiff_1.difference -> concat_5a2cdd.left\n        setdiff_2.difference -> concat_5a2cdd.right\n        concat_5a2cdd.result -> output_ai\n    }\n\n    \n\n    instance(x: -89, y: 40) find_dissimilar_f3e3f7 root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: -200, y: -100) len_node root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 len_node.list\n\n        \n        instance(x: -50, y: -100) eq_zero root.Std_k98ojb.Math.Equal {\n            left: len_node.length,\n            right: 0\n        }\n        \n        \n        instance(x: 100, y: -120) if_branch root.Std_k98ojb.Std.If {} \n        eq_zero.output \u2192 if_branch.predicate\n\n        \n        in if_branch.then {\n            list_48148f \u2192 output_823209\n            return  \n        }\n\n        \n        in if_branch.else {\n            \n            instance modulo_node root.Std_k98ojb.Math.Modulo {}\n            n_68068c \u2192 modulo_node.value\n            len_node.length \u2192 modulo_node.divisor\n\n            \n            instance sub_node root.Std_k98ojb.Math.Sub {\n                a: len_node.length,\n                b: modulo_node.result\n            }\n\n            \n            instance slice1 root.Std_k98ojb.List.Slice {} \n            list_48148f \u2192 slice1.list\n            sub_node.result \u2192 slice1.start\n            -1 \u2192 slice1.end  \n\n            instance slice2 root.Std_k98ojb.List.Slice {}\n            list_48148f \u2192 slice2.list\n            0 \u2192 slice2.start\n            sub_node.result \u2192 slice2.end  \n\n            \n            instance concat_node root.Std_k98ojb.List.Concat {} \n            slice1.output \u2192 concat_node.left\n            slice2.output \u2192 concat_node.right\n\n            concat_node.result \u2192 output_823209  \n        }\n    }\n\n    \n    instance(x: -34, y: 127) rotate_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 98, y: -10) reduce_7d9b3a root.Std_k98ojb.Iteration.Reduce {}\n        \n        list_2c62ab -> reduce_7d9b3a.items\n        0 -> reduce_7d9b3a.initial\n\n        func() {\n            in(x: -150, y: -50, name: \"acc\") property(Number) acc_f4c0e8\n            in(x: -140, y: 20, name: \"item\") property(Number) item_6b7d3a\n\n            out(x: 200, y: -30, name: \"\") property(Number) _result_a9f3dd\n\n            instance(x: 50, y: -20) add_8e5e4c root.Std_k98ojb.Math.Add {}\n            \n            acc_f4c0e8 -> add_8e5e4c.first\n            item_6b7d3a -> add_8e5e4c.second\n            \n            add_8e5e4c.result -> _result_a9f3dd\n        } -> reduce_7d9b3a.handler\n\n        reduce_7d9b3a.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -160, y: 20) sum_func root.main._sum {}\n\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o6hc)\n\nmodule() main {\n    func(doc: \"Check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x:-30,y:-180) check_leq_one root.Std.IfExpression {\n            expression: \"num_5c0677 < 2\"\n        }\n\n        instance(x:-50, y:-140) set_false_1 root.Setter {\n            property: output_c457b3,\n            new_value: false\n        }\n        \n        connection from check_leq_one.true \u2192 set_false_1.execute then to continue_9a54bb\n\n        \n        instance(x:-20,y:-160) after_leq root.Std.NoOp()\n        connect check_leq_one.false \u2192 after_leq.execute\n\n        \n        instance(...) check_eq_two root.Std.IfExpression {\n            expression: \"num_5c0677 == 2\"\n        }\n        \n        instance(x:...) set_true root.Setter { \n            property: output_c457b3,\n            new_value: true\n        }\n\n        connection from check_eq_two.true \u2192 set_true.execute then to continue_9a54bb\n\n        \n        instance(...) after_two_check root.Std.NoOp()\n        connect check_eq_two.false \u2192 after_two_check.execute\n        \n        \n        instance(...) mod_two_node root.Math.Modulo {\n            value: num_5c0677,\n            divisor: 2\n        }\n\n        instance(...) is_even root.Std.IfExpression {\n            expression: \"mod_two_node.result == 0\"\n        }\n        \n        instance(x:...) set_false_even root.Setter { \n            property: output_c457b3, \n            new_value: false\n        }\n        \n        connection from is_even.true \u2192 set_false_even.execute then to continue_9a54bb\n\n        \n        instance(...) after_even_check root.Std.NoOp()\n        connect is_even.false \u2192 after_even_check.execute\n\n        \n        instance(...) sqrt_val root.Math.Pow { \n            x: num_5c0677, \n            y: 0.5 \n        }\n        \n        instance(...) floor_node root.Math.Floor {\n            input: sqrt_val.output\n        }\n\n        \n        instance(...) gen_range root.List.GenerateRange {\n            from: 3,\n            to: floor_node.output\n        }\n\n        \n        handler(divisor_check) {\n            inputs(current:Number),\n            outputs(predicate:Boolean)\n            \n            body: return (num_5c0677 % current == 0);\n        }\n        \n        instance(...) check_divisors root.Iteration.Any {\n            items: gen_range.output,\n            predicate: divisor_check\n        }\n\n        \n        instance(...) invert_result root.Std.IfExpression { \n            expression: \"!check_divisors.result\" \n        }\n        \n        instance(...) set_final_output root.Setter {\n            property: output_c457b3,\n            new_value: invert_result.output\n        }\n\n        connection from after_even_check \u2192 check_divisors.execute then to set_final_output.execute\n        \n        \n        connect set_false_1 \u2192 continue_9a54bb\n        connect set_true \u2192 continue_9a54bb\n        connect set_false_even \u2192 continue_9a54bb\n        connect set_final_output \u2192 continue_9a54bb\n    }\n}"
            ]
        }
    }
]