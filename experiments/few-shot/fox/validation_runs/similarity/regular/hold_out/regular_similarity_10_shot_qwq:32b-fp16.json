[
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") check_opposite_signs {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_input\n        in(x: -180, y: 100, name: \"b\") property(Number) b_input\n\n        out(x: 300, y: 75, name: \"output\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) sign_check root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        \n        a_input -> sign_check.gen_0\n        b_input -> sign_check.gen_1\n        sign_check.value -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 20) check_opposite_signs_inst root.main.check_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -250, y: -43, name: \"number\") property(Number) input_num\n        out(x: 487, y: -43, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -234, y: 114) check_divisible root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace_with\") property(String) replace_val\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_val -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_chars_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) to_lower_flow_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7a3c0)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -400, y: 200, name: \"list\") property(List) input_list\n        out(x: 600, y: 300, name: \"product\") property(Number) output_product\n\n        \n        instance(x: -150, y: 50) filter_node root.Std_k98ojb.Iteration.Filter {}\n\n        \n        func() predicate_handler {\n            in(x: -200, y: 0, name: \"item\") property(Number) item_in\n            in(x: -150, y: 30, name: \"context\") property(List) context_in\n\n            out(x: 200, y: 0, name: \"result\") property(Bool) result_out\n\n            \n            instance(x: 0, y: 50) filter_count root.Std_k98ojb.Query.Filter {\n                where: \"it == item_in\"\n            }\n            context_in -> filter_count.list\n\n            \n            instance(x: 100, y: 50) get_length root.Std_k98ojb.List.Length {}\n            filter_count.result -> get_length.items\n\n            \n            instance(x: 200, y: 50) equal_one root.Std_k98ojb.Logic.Equal {\n                right: 1\n            }\n            get_length.length -> equal_one.left\n            equal_one.result -> result_out\n        } -> filter_node.handler\n\n        \n        input_list -> filter_node.list\n        input_list -> predicate_handler.context_in\n\n        \n        instance(x: 300, y: 100) reduce_node root.Std_k98ojb.Iteration.Reduce {}\n\n        \n        func() multiply_handler {\n            in(x: -50, y: 0, name: \"accumulated\") property(Number) acc_in\n            in(x: 0, y: 30, name: \"current\") property(Number) curr_in\n\n            out(x: 200, y: 15, name: \"\") property(Number) result_out\n\n            instance(x: 75, y: 25) multiply root.Std_k98ojb.Math.Mul {}\n            acc_in -> multiply.first\n            curr_in -> multiply.second\n            multiply.result -> result_out\n        } -> reduce_node.reducer\n\n        \n        1 -> reduce_node.initial_value\n        filter_node.result -> reduce_node.items\n        reduce_node.result -> output_product\n    }\n\n    instance(x: 0, y: 0) unique_prod root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -250, y: -143, name: \"list1\") property(List) list1_8e7a3d\n        in(x: -269, y: 10, name: \"list2\") property(List) list2_7b8c4f\n\n        out(x: 550, y: -66, name: \"result\") property(List) result_7e3a6d\n\n        instance(x: -109, y: -143) difference_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: -128, y: 10) difference_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: -66) concat_7e3a6d root.Std_k98ojb.List.Concat {}\n\n        list1_8e7a3d -> difference_ab.left\n        list2_7b8c4f -> difference_ab.right\n\n        list2_7b8c4f -> difference_ba.left\n        list1_8e7a3d -> difference_ba.right\n\n        difference_ab.difference -> concat_7e3a6d.left\n        difference_ba.difference -> concat_7e3a6d.right\n\n        concat_7e3a6d.concatenated -> result_7e3a6d\n    }\n\n    \n\n    instance(x: 10, y: -5) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_list {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        in(x: -180, y: 150, name: \"k\") property(Number) rotationCount\n\n        out(x: 600, y: 100, name: \"rotatedList\") property(List) outputList\n\n        instance(x: 30, y: 20) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 150, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 70) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 350, y: 100) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 450, y: 150) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 550, y: 200) concat_node root.Std_k98ojb.List.Concat {}\n\n        inputList -> length_node.list\n        rotationCount -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n        inputList -> first_slice.list\n\n        sub_node.result -> second_slice.start\n        length_node.length -> second_slice.end\n        inputList -> second_slice.list\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> outputList\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_list_instance root.main.rotate_list {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_0e8d7a\n\n        out(x: 659, y: 143, name: \"sum\") property(Number) sum_7b5c3f\n\n        instance(x: 200, y: 143) reduce_3a8e90 root.Std_k98ojb.Iteration.Reduce {}\n        list_0e8d7a -> reduce_3a8e90.items\n        0 -> reduce_3a8e90.initialValue\n        func() {\n            in(x: -185, y: -84, name: \"accumulated\") property(Number) accumulated_ai\n            in(x: -177, y: 22, name: \"current\") property(Number) current_ai\n\n            out(x: 1072, y: -77, name: \"sum\") property(Number) sum_ai\n\n            instance(x: 500, y: 0) add_8974a2 root.Std_k98ojb.Math.Add {}\n            accumulated_ai -> add_8974a2.first\n            current_ai -> add_8974a2.second\n            add_8974a2.result -> sum_ai\n        } -> reduce_3a8e90.reducer\n        reduce_3a8e90.output -> sum_7b5c3f\n    }\n\n    \n\n    instance(x: -272, y: 115) array_sum_6c92e0 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks whether a given integer is a prime number.\") is_prime {\n        in(x: -450, y: -213, name=\"n\") property(Number) n\n        in(x: -478, y: 9, name=\"execute\") trigger() execute\n\n        out(x: 600, y: 270, name=\"output\") property(Bool) output\n        out(x: 588, y: 123, name=\"continue\") trigger() continue\n\n        \n        instance if_edge_case root.Std_k98ojb.Std.IfExpression {\n            expression: \"n < 2\"\n        }\n        connect n \u2192 gen_0 of if_edge_case\n\n        \n        setter_false:\n        setter(x: -300, y: 150, name=\"setter_false\") = output {\n            new_value: false\n        }\n\n        \n        connect if_edge_case.then \u2192 setter_false.execute\n        connect setter_false.continue \u2192 continue\n\n        \n        instance pow_sqrt root.Std_k98ojb.Math.Pow {\n            exponent: 0.5\n        }\n        connect n \u2192 base of pow_sqrt\n\n        instance floor_node root.Std_k98ojb.Math.Floor {}\n        connect pow_sqrt.output \u2192 input of floor_node\n\n        instance gen_range root.Std_k98ojb.List.GenerateRange {\n            start: 2\n        }\n        connect floor_node.output \u2192 end of gen_range\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {}\n        connect gen_range.list \u2192 items of find_divisor\n        connect n \u2192 context of find_divisor\n\n        func() {\n            in(x: ..., name=\"current\") property(Number) current_d\n            in(..., name=\"_context\") property(Number) _context_n\n\n            out(...) property(Bool) output\n\n            instance modulo root.Std_k98ojb.Math.Modulo {}\n            instance equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            connect _context_n \u2192 value of modulo\n            connect current_d \u2192 divisor of modulo\n            connect modulo.result \u2192 left of equal_zero\n            0 \u2192 right of equal_zero\n            connect equal_zero.result \u2192 output\n        } \u2192 find_divisor.handler\n\n        \n        instance check_item root.Std_k98ojb.Std.IfExpression {\n            expression: \"find_divisor.item != null\"\n        }\n\n        \n        connect check_item.then \u2192 setter_false.execute\n\n        setter_true:\n        setter(x: 200, y: 150, name=\"setter_true\") = output {\n            new_value: true\n        }\n        connect check_item.else \u2192 setter_true.execute\n\n        \n        connect setter_false.continue \u2192 continue\n        connect setter_true.continue \u2192 continue\n\n        \n        connect if_edge_case.else \u2192 (next node in main processing)\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") opposite_sign {\n        in(x: -250, y: -140, name: \"a\") property(Number) a_3f7e8b\n        in(x: -240, y: 20, name: \"b\") property(Number) b_9d6c0a\n\n        out(x: 250, y: -100, name: \"output\") property(Bool) output_3f7e8b\n\n        instance(x: -50, y: -100) multiply_4a5b2c root.Std_k98ojb.Math.Mul {}\n        instance(x: 100, y: -100) lessthanequal_6d05b0 root.Std_k98ojb.Math.LessThanOrEqual {}\n\n        a_3f7e8b -> multiply_4a5b2c.first\n        b_9d6c0a -> multiply_4a5b2c.second\n        multiply_4a5b2c.result -> lessthanequal_6d05b0.left\n        -1 -> lessthanequal_6d05b0.right\n        lessthanequal_6d05b0.result -> output_3f7e8b\n    }\n\n    \n\n    instance(x: 0, y: 0) opposite_sign_check root.main.opposite_sign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -240, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 0) check_divisible root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace all occurrences of a character in a string with another character.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replace_306f69 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_306f69.input\n        search_char -> replace_306f69.search\n        replace_char -> replace_306f69.replace\n        replace_306f69.output -> output_str\n    }\n\n    \n\n    instance(x: 175, y: -25) replace_characters_inst root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerCase {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: -192, y: 139) to_lower_flow_935476 root.main.ToLowerCase {}\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -200, y: 50, name=\"numbers\") property(List) input_list\n        out(x: 400, y: 100, name=\"product\") property(Number) output\n\n        \n        instance empty_node Std.List.Empty {}\n\n        \n        instance reduce_unique Iteration.Reduce {\n            items: input_list,\n            initial_value: empty_node.empty,\n\n            handler: [\n                func() {\n                    in(x: 0, name=\"acc\") property(List) acc_ai\n                    in(x: 1, name=\"current\") property(Number) current_ai\n\n                    out(x: 2, name=\"new_acc\") property(List) new_list_ai\n\n                    \n                    instance contains_node Std.List.Contains {\n                        list: acc_ai,\n                        item: current_ai\n                    }\n\n                    \n                    instance if_node Std.If {\n                        input: !contains_node.result  \n                    }\n\n                    instance add_node Std.List.Add {\n                        list: acc_ai,\n                        item: current_ai\n                    }\n\n                    \n                    if_node.then -> add_node.execute\n\n                    \n                    instance merge_node Std.Merge {\n                        inputs: [add_node.listWithItem, acc_ai]\n                    }\n                    \n                    \n                    \n                    merge_node.selected -> new_list_ai\n                }\n            ]\n        }\n\n        \n        instance reduce_product Iteration.Reduce {\n            items: reduce_unique.result,\n            \n            \n            data_instance(initial_value_1) = 1.0\n            initial_value: initial_value_1,\n\n            handler: [\n                func() {\n                    in(x: 0, name=\"acc\") property(Number) acc_ai\n                    in(x: 1, name=\"current\") property(Number) current_ai\n\n                    instance multiply_node Std.Math.Mul {\n                        first: acc_ai,\n                        second: current_ai\n                    }\n\n                    \n                    multiply_node.result -> output\n                }\n            ]\n        }\n\n        \n        reduce_product.result -> output\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -200, y: -100, name: \"listA\") property(List) listA_0x1\n        in(x: -200, y: 50, name: \"listB\") property(List) listB_0x2\n\n        out(x: 400, y: -25, name: \"result\") property(List) result_0x3\n\n        instance(x: 100, y: -100) diffAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 50) diffBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: -25) concat root.Std_k98ojb.List.Concat {}\n\n        listA_0x1 -> diffAB.left\n        listB_0x2 -> diffAB.right\n\n        listB_0x2 -> diffBA.left\n        listA_0x1 -> diffBA.right\n\n        diffAB.difference -> concat.left\n        diffBA.difference -> concat.right\n\n        concat.concatenated -> result_0x3\n    }\n\n    \n\n    instance(x: 50, y: -50) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_list {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 100, name: \"n\") property(Number) rotation_count\n\n        out(x: 600, y: 70, name: \"rotated\") property(List) output_list\n\n        instance(x: 50, y: 30) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 40) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: 100) subtract_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 300, y: 50) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 120) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 500, y: 70) concat_node root.Std_k98ojb.List.Concat {}\n\n        input_list -> length_node.list\n        rotation_count -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        length_node.length -> subtract_node.first\n        modulo_node.result -> subtract_node.second\n\n        input_list -> first_slice.list\n        0 -> first_slice.start\n        subtract_node.result -> first_slice.end\n\n        input_list -> second_slice.list\n        subtract_node.result -> second_slice.start\n        -1 -> second_slice.end\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n\n        concat_node.result -> output_list\n    }\n\n    \n\n    instance(x: 0, y: 0) rotate_list_instance root.main.rotate_list {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -253, y: 140, name: \"numbers\") property(List) numbers_0a1d8b\n\n        out(x: 749, y: 146, name: \"total\") property(Number) total_3e3c6f\n\n        instance(x: 256, y: 143) reduce_9e3e3e root.Std_k98ojb.Iteration.Reduce {}\n        numbers_0a1d8b -> reduce_9e3e3e.items\n        0 -> reduce_9e3e3e.initialValue\n        func() {\n            in(x: -247, y: -65, name: \"accumulated\") property(Number) accumulated_6c3f3a\n            in(x: -180, y: -65, name: \"current\") property(Number) current_9e3d3b\n\n            out(x: 247, y: -65, name: \"sum\") property(Number) sum_4e3c3c\n\n            instance(x: 100, y: -65) add_8eaf3f root.Std_k98ojb.Math.Add {}\n            accumulated_6c3f3a -> add_8eaf3f.first\n            current_9e3d3b -> add_8eaf3f.second\n            add_8eaf3f.result -> sum_4e3c3c\n        } -> reduce_9e3e3e.reducer\n        reduce_9e3e3e.output -> total_3e3c6f\n    }\n\n    \n\n    instance(x: -271, y: 105) array_sum_8d3b3a root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") is_prime {\n        in(x: -450, y: -213, name: \"n\") property(Number) n_6b655b\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n\n        out(x: 1169, y: -269, name: \"output\") property(Bool) output_e9fa68\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n\n        \n        instance if_n_le_1 root.Std_k98ojb.Std.IfExpression {\n            expression \"n_6b655b <= 1\"\n        }\n        n_6b655b -> if_n_le_1.gen_0\n        execute_cdac2a -> if_n_le_1.execute\n\n        \n        setter(x: -300, y: -200, name=\"setter_false\") setter_false = output_e9fa68\n        false -> setter_false.new_value\n        if_n_le_1.then -> setter_false.execute\n        setter_false.continue -> continue_d9efd7\n\n        \n        instance equal_to_2 root.Std_k98ojb.Logic.Equal {\n            left = n_6b655b\n            right = 2\n        }\n        if_n_le_1.else -> equal_to_2.input\n        equal_to_2.result -> if_eq_2.predicate\n\n        \n        instance if_eq_2 root.Std_k98ojb.Std.If {\n            condition = equal_to_2.result\n        }\n        if_eq_2.then -> setter_true.execute\n        instance setter_true root.Std_k98ojb.Setter {\n            property = output_e9fa68\n            new_value = true\n        }\n        setter_true.continue -> continue_d9efd7\n\n        \n        instance modulo_2 root.Std_k98ojb.Math.Modulo {\n            value = n_6b655b\n            divisor = 2\n        }\n        if_eq_2.else -> modulo_2.input\n\n        instance equal_mod_zero root.Std_k98ojb.Logic.Equal {\n            left = modulo_2.result\n            right = 0\n        }\n\n        \n        instance if_even root.Std_k98ojb.Std.If {\n            condition = equal_mod_zero.result\n        }\n        modulo_2.result -> equal_mod_zero.left\n        if_even.then -> setter_false.execute\n\n        \n        instance pow_half root.Std_k98ojb.Math.Pow {\n            x = n_6b655b\n            y = 0.5\n        }\n        instance floor_sqrt root.Std_k98ojb.Math.Floor {\n            input = pow_half.output\n        }\n\n        \n        instance gen_range root.Std_k98ojb.List.GenerateRange {\n            from = 3\n            to = floor_sqrt.output\n        }\n        \n        \n        func() predicate_handler {\n            in(x: -10, y: 0, name=\"current\") property(Number) current_4524be\n\n            out(x: 200, y: 0, name=\"result\") property(Bool) result_8d07dc\n\n            instance modulo_current root.Std_k98ojb.Math.Modulo {\n                value = n_6b655b\n                divisor = current_4524be\n            }\n            \n            instance equal_zero root.Std_k98ojb.Logic.Equal {\n                left = modulo_current.result\n                right = 0\n            }\n            equal_zero.result -> result_8d07dc\n        } -> find_divisor.handler\n\n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items = gen_range.range\n        }\n\n        \n        instance not_found root.Std_k98ojb.Logic.Not {\n            input = find_divisor.found\n        }\n        \n        \n        if_even.else -> pow_half.input\n        floor_sqrt.output -> gen_range.to\n        gen_range.range -> find_divisor.items\n\n        find_divisor.done -> not_found.input\n        not_found.output -> output_e9fa68\n        find_divisor.continue -> continue_d9efd7\n    }\n\n    instance(x: -174, y: -63) is_prime_0 root.main.is_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") opposite_signs {\n        in(x: -200, y: 50, name: \"a\") property(Number) a\n        in(x: -180, y: 100, name: \"b\") property(Number) b\n\n        out(x: 300, y: 75, name: \"output\") property(Bool) output\n\n        instance(x: 0, y: 0) check_sign root.Std_k98ojb.Std.IfExpression {\n            expression: \"(a * b) < 0\"\n        }\n        a -> check_sign.a\n        b -> check_sign.b\n        check_sign.value -> output\n    }\n\n    \n\n    instance(x: -50, y: 200) opposite_signs_inst root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given number is divisible by 11.\") check_divisible_by_11 {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"output\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 100, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 20) check_divisible_by_11_node root.main.check_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replace_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_1.input\n        search_char -> replace_1.search\n        replace_char -> replace_1.replace\n        replace_1.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_chars_59bc6e root.main.replace_characters {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -240, y: 50, name: \"input\") property(String) input_ai\n        out(x: 300, y: 60, name: \"output\") property(String) output_ai\n\n        instance(x: 100, y: 55) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 20) tolower_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule main {\n\n    func calculate_unique_product {\n        in(list: List) trigger() execute\n        out(continue) product: Number\n\n        instance empty_list root.Std.List.Empty {}\n        \n        \n        instance reduce_unique root.Iteration.Reduce<List> {\n            initial: empty_list.list  \n        }\n        list -> reduce_unique.items\n        \n        \n        func handler_unique {\n            in(accumulated: List, current_item: Number) trigger() execute\n            out(continue) new_accumulated: List\n\n            instance contains_node root.Std.List.Contains {}\n            accumulated -> contains_node.list\n            current_item -> contains_node.item\n            \n            instance if_node root.Std.If {}\n            contains_node.is_contained -> if_node.input\n            \n            \n            instance then_out root.SomeNode? Or just:\n            \n            if_node.then -> accumulated \u2192 new_accumulated\n\n            \n            instance add_node root.Std.List.Add {}\n            accumulated -> add_node.list\n            current_item -> add_node.item\n            add_node.listWithItem \u2192 new_accumulated\n            \n            \n            if_node.else -> add_node.execute\n        }\n        handler_unique \u2192 reduce_unique.handler\n\n        \n        instance reduce_product root.Iteration.Reduce<Number> {\n            initial: 1.0  \n        }\n        reduce_unique.result -> reduce_product.items\n        \n        \n        func handler_product {\n            in(accumulated: Number, current_item: Number) trigger() execute\n            out(continue) new_accumulated: Number\n\n            instance multiply root.Std.Math.Mul {}\n            accumulated \u2192 multiply.first\n            current_item \u2192 multiply.second\n            multiply.result \u2192 new_accumulated\n        }\n        handler_product \u2192 reduce_product.handler\n        \n        \n        reduce_product.result \u2192 product\n    }\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -200, y: -150, name: \"list1\") property(List) list1_0x\n        in(x: -200, y: 0, name: \"list2\") property(List) list2_0x\n\n        out(x: 300, y: -75, name: \"result\") property(List) result_0x\n\n        instance(x: 100, y: -150) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 30) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: -75) concat root.Std_k98ojb.List.Concat {}\n\n        list1_0x -> diff1.left\n        list2_0x -> diff1.right\n\n        list2_0x -> diff2.left\n        list1_0x -> diff2.right\n\n        diff1.difference -> concat.left\n        diff2.difference -> concat.right\n\n        concat.concatenated -> result_0x\n    }\n\n    \n\n    instance(x: 50, y: -100) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 100, name: \"rotation_num\") property(Number) rotation_num\n\n        out(x: 600, y: 75, name: \"rotated\") property(List) rotated_list\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        input_list -> length_node.list\n        \n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotation_num -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n        \n        \n        instance(x: 400, y: 100) first_slice root.Std_k98ojb.List.Slice {}\n        input_list -> first_slice.list\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n\n        \n        instance(x: 500, y: 100) second_slice root.Std_k98ojb.List.Slice {}\n        input_list -> second_slice.list\n        sub_node.result -> second_slice.start\n        length_node.length -> second_slice.end\n\n        \n        instance(x: 600, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        \n        concat_node.result -> rotated_list\n    }\n\n    \n\n    instance(x: -200, y: 50) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_8e3a1b\n\n        out(x: 796, y: 145, name: \"sum\") property(Number) sum_7d7c3f\n\n        instance(x: 200, y: 144) reduce_3a8e90 root.Std_k98ojb.Iteration.Reduce {}\n        list_8e3a1b -> reduce_3a8e90.items\n        0 -> reduce_3a8e90.initialValue\n        func() {\n            in(x: -245, y: -76, name: \"accumulated\") property(Number) current_c750f1\n            in(x: -237, y: 24, name: \"current\") property(Number) item_3f11cd\n\n            out(x: 800, y: -79, name: \"sum\") property(Number) sum_72dd2a\n\n            instance(x: 568, y: -79) add_8974a2 root.Std_k98ojb.Math.Add {}\n            current_c750f1 -> add_8974a2.first\n            item_3f11cd -> add_8974a2.second\n            add_8974a2.result -> sum_72dd2a\n        } -> reduce_3a8e90.reducer\n        reduce_3a8e90.output -> sum_7d7c3f\n    }\n\n    \n\n    instance(x: -272, y: 115) array_sum_6c92e0 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") is_prime {\n        in(x: -500, y: -400, name: \"n\") property(Number) n_2a3b4c\n        in(x: -500, y: -100, name: \"execute\") trigger() execute_7f8e9d\n\n        out(x: 1200, y: -400, name: \"output\") property(Bool) output_1a2b3c\n        out(x: 1200, y: -100, name: \"continue\") trigger() continue_4d5e6f\n\n        \n        instance(x: -300, y: -300) less_than_or_equal root.Std_k98ojb.Math.LessThanOrEqual {}\n        n_2a3b4c -> less_than_or_equal.left\n        1 -> less_than_or_equal.right\n\n        instance(x: -200, y: -300) if_initial root.Std_k98ojb.Std.If {}\n        less_than_or_equal.result -> if_initial.predicate\n        execute_7f8e9d -> if_initial.execute\n\n        \n        instance(x: 50, y: -250) setter_false root.Std_k98ojb.Setter {}\n        false -> setter_false.new_value\n        if_initial.then -> setter_false.execute\n        setter_false.value -> output_1a2b3c\n\n        \n        instance(x: 100, y: -450) check_n_equals_2 root.Std_k98ojb.Logic.Equal {}\n        n_2a3b4c -> check_n_equals_2.left\n        2 -> check_n_equals_2.right\n\n        instance(x: 200, y: -450) if_n_is_2 root.Std_k98ojb.Std.If {}\n        check_n_equals_2.result -> if_n_is_2.predicate\n        if_initial.else -> if_n_is_2.execute\n\n        \n        instance(x: 300, y: -450) setter_true root.Std_k98ojb.Setter {}\n        true -> setter_true.new_value\n        if_n_is_2.then -> setter_true.execute\n        setter_true.value -> output_1a2b3c\n\n        \n        instance(x: 400, y: -450) modulo_2 root.Std_k98ojb.Math.Modulo {}\n        n_2a3b4c -> modulo_2.value\n        2 -> modulo_2.divisor\n\n        instance(x: 500, y: -450) is_even root.Std_k98ojb.Logic.Equal {}\n        modulo_2.result -> is_even.left\n        0 -> is_even.right\n\n        instance(x: 600, y: -450) if_even root.Std_k98ojb.Std.If {}\n        is_even.result -> if_even.predicate\n        if_n_is_2.else -> if_even.execute\n\n        \n        instance(x: 700, y: -450) setter_false_even root.Std_k98ojb.Setter {}\n        false -> setter_false_even.new_value\n        if_even.then -> setter_false_even.execute\n        setter_false_even.value -> output_1a2b3c\n\n        \n        instance(x: 800, y: -450) pow_half root.Std_k98ojb.Math.Pow {}\n        n_2a3b4c -> pow_half.x\n        0.5 -> pow_half.y\n\n        instance(x: 900, y: -450) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        pow_half.result -> floor_sqrt.input\n\n        \n        instance(x: 1000, y: -450) generate_range root.Std_k98ojb.List.GenerateRange {}\n        3 -> generate_range.from\n        floor_sqrt.output -> generate_range.to\n\n        \n        instance(x: 1100, y: -450) find_divisor root.Std_k98ojb.Iteration.Find {}\n        generate_range.list -> find_divisor.items\n\n        func() {\n            in(x: -200, y: -300, name: \"current\") property(Number) current_1\n            out(x: 200, y: -300, name: \"found\") property(Bool) found_1\n\n            instance(x: 50, y: -300) modulo_current root.Std_k98ojb.Math.Modulo {}\n            n_2a3b4c -> modulo_current.value\n            current_1 -> modulo_current.divisor\n\n            instance(x: 150, y: -300) is_zero root.Std_k98ojb.Logic.Equal {}\n            modulo_current.result -> is_zero.left\n            0 -> is_zero.right\n\n            is_zero.result -> found_1\n        } -> find_divisor.handler\n\n        \n        instance(x: 1200, y: -450) not_found root.Std_k98ojb.Logic.Not {}\n        find_divisor.found -> not_found.input\n\n        \n        instance(x: 1300, y: -450) final_output root.Std_k98ojb.Setter {}\n        not_found.result -> final_output.new_value\n        if_even.else -> final_output.execute\n        final_output.value -> output_1a2b3c\n\n        \n        setter_false.continue -> continue_4d5e6f\n        setter_true.continue -> continue_4d5e6f\n        setter_false_even.continue -> continue_4d5e6f\n        final_output.continue -> continue_4d5e6f\n    }\n\n    instance(x: -200, y: 100) is_prime_instance root.main.is_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSign {\n        in(x: -200, y: 0, name: \"a\") property(Number) a\n        in(x: -180, y: 30, name: \"b\") property(Number) b\n\n        out(x: 200, y: 0, name: \"output\") property(Bool) output\n\n        instance(x: 50, y: 0) multiply root.Std_k98ojb.Math.Mul {}\n        a -> multiply.first\n        b -> multiply.second\n\n        instance(x: 100, y: 0) greaterThan root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greaterThan.left\n        multiply.result -> greaterThan.right\n\n        greaterThan.result -> output\n    }\n\n    instance(x: -174, y: -63) OppositeSignInstance root.main.OppositeSign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_node.value\n        modulo_node.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -100, y: 0) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace_with\") property(String) replace_val\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_val -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_chars_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) to_lower_flow_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n\n    func(doc: \"Calculates the product of unique numbers in a given list.\") product_unique {\n        in(x: -200, y: 50, name: \"list\") property(List) list_ai\n\n        out(x: 400, y: 100, name: \"product\") property(Number) product_ai\n\n        instance empty_list List.Empty {}\n\n        \n        instance reduce_unique Iteration.Reduce {\n            initial_value: empty_list.list\n            items: list_ai\n            handler: [handler_uniq]\n        }\n\n        \n        instance reduce_product Iteration.Reduce {\n            initial_value: 1.0\n            items: reduce_unique.output_list\n            handler: [handler_prod]\n        }\n\n        reduce_product.output -> product_ai\n    }\n\n    \n    func() handler_uniq {\n        in acc: List, item: Number\n\n        out new_acc: List\n\n        instance contains_ List.Contains {\n            list: acc\n            item: item\n        }\n\n        instance add_ List.Add {\n            list: acc\n            item: item\n        }\n\n        instance expr_ Std.IfExpression {\n            expression: \"gen_0 ? gen_1 : gen_2\"\n        }\n\n        \n        contains_.is_contained -> expr_.gen_0\n        acc -> expr_.gen_1  \n        add_.listWithItem -> expr_.gen_2 \n\n        expr_.result -> new_acc\n    }\n\n    \n    func() handler_prod {\n        in acc: Number, item: Number\n\n        out new_acc: Number\n\n        instance mul_ Math.Mul {\n            first: acc\n            second: item\n        }\n\n        mul_.result -> new_acc\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -250, y: -143, name: \"list1\") property(List) list1_8e7a3d\n        in(x: -269, y: 10, name: \"list2\") property(List) list2_7b8c4f\n\n        out(x: 550, y: -66, name: \"result\") property(List) result_7e3a6d\n\n        instance(x: -109, y: -143) difference_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: -128, y: 10) difference_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: -66) concat_7e3a6d root.Std_k98ojb.List.Concat {}\n\n        list1_8e7a3d -> difference_ab.left\n        list2_7b8c4f -> difference_ab.right\n\n        list2_7b8c4f -> difference_ba.left\n        list1_8e7a3d -> difference_ba.right\n\n        difference_ab.difference -> concat_7e3a6d.left\n        difference_ba.difference -> concat_7e3a6d.right\n\n        concat_7e3a6d.concatenated -> result_7e3a6d\n    }\n\n    \n\n    instance(x: 10, y: -5) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -300, y: 25, name: \"list\") property(List) input_list\n        in(x: -300, y: 100, name: \"k\") property(Number) rotation_k\n\n        out(x: 800, y: 75, name: \"rotated\") property(List) rotated_output\n\n        instance(x: 200, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 350, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 500, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 650, y: 100) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 650, y: -30) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 750, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        input_list -> length_node.list\n        rotation_k -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        input_list -> first_slice.list\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n\n        input_list -> second_slice.list\n        sub_node.result -> second_slice.start\n        length_node.length -> second_slice.end\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> rotated_output\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_right_7a4dad root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_0e8d7a\n\n        out(x: 659, y: 143, name: \"sum\") property(Number) sum_7b5c3f\n\n        instance(x: 200, y: 143) reduce_3a8e90 root.Std_k98ojb.Iteration.Reduce {}\n        list_0e8d7a -> reduce_3a8e90.items\n        0 -> reduce_3a8e90.initialValue\n        func() {\n            in(x: -185, y: -84, name: \"accumulated\") property(Number) accumulated_ai\n            in(x: -177, y: 22, name: \"current\") property(Number) current_ai\n\n            out(x: 1072, y: -77, name: \"sum\") property(Number) sum_ai\n\n            instance(x: 500, y: 0) add_8974a2 root.Std_k98ojb.Math.Add {}\n            accumulated_ai -> add_8974a2.first\n            current_ai -> add_8974a2.second\n            add_8974a2.result -> sum_ai\n        } -> reduce_3a8e90.reducer\n        reduce_3a8e90.output -> sum_7b5c3f\n    }\n\n    \n\n    instance(x: -272, y: 115) array_sum_6c92e0 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if given integer is a prime number.\") IsPrime {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_trigger\n        in(x: -436, y: -213, name: \"n\") property(Number) n_input\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_out\n        out(x: 1169, y: -269, name: \"output\") property(Bool) output_bool\n\n        \n        instance(x: -300, y: -200) if_less_than_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n <= 1\"\n        }\n        n_input -> if_less_than_2.gen_0\n        execute_trigger -> if_less_than_2.execute\n\n        \n        instance(x: -250, y: -250) set_false root.Std_k98ojb.Logic.False {}\n        set_false.output -> output_bool\n        if_less_than_2.then -> continue_out\n        if_less_than_2.else -> next_step1\n\n        \n        instance(x: -200, y: -200) if_eq_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n == 2\"\n        }\n        n_input -> if_eq_2.gen_0\n        next_step1 -> if_eq_2.execute\n\n        instance(x: -150, y: -150) set_true root.Std_k98ojb.Logic.True {}\n        set_true.output -> output_bool\n        if_eq_2.then -> continue_out\n        if_eq_2.else -> check_evenness\n\n        \n        instance(x: -100, y: -100) modulo_2 root.Std_k98ojb.Math.Modulo {}\n        n_input -> modulo_2.value\n        2 -> modulo_2.divisor\n\n        instance(x: -50, y: -50) eq_zero root.Std_k98ojb.Logic.Equal {}\n        modulo_2.result -> eq_zero.left\n        0 -> eq_zero.right\n\n        instance(x: -0, y: -0) if_even root.Std_k98ojb.Std.IfExpression {\n            predicate: eq_zero.result\n        }\n        check_evenness -> if_even.execute\n\n        \n        set_false.output -> output_bool\n        if_even.then -> continue_out\n        if_even.else -> compute_sqrt\n\n        \n        instance(x: 50, y: -100) pow_half root.Std_k98ojb.Math.Pow {}\n        n_input -> pow_half.base\n        0.5 -> pow_half.exponent\n\n        instance(x: 100, y: -100) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        pow_half.output -> floor_sqrt.input\n\n        \n        instance(x: 150, y: -100) list_gen root.Std_k98ojb.List.GenerateRange {\n            from: 2\n            to: floor_sqrt.output\n        }\n\n        \n        instance(x: 200, y: -100) filter_divisors root.Std_k98ojb.Iteration.Filter {}\n        list_gen.list -> filter_divisors.items\n\n        func() handler_modulo {\n            in(x: -50, y: -50, name: \"current\") property(Number) current\n            in(x: 0, y: 50, name: \"_index\") property(Number) _index_ignored\n\n            out(x: 100, y: 0, name: \"result\") property(Bool) result_out\n\n            instance(x: 25, y: 25) mod_node root.Std_k98ojb.Math.Modulo {}\n            n_input -> mod_node.value\n            current -> mod_node.divisor\n\n            instance(x: 75, y: 25) eq_zero_mod root.Std_k98ojb.Logic.Equal {}\n            mod_node.result -> eq_zero_mod.left\n            0 -> eq_zero_mod.right\n\n            eq_zero_mod.result -> result_out\n        } -> filter_divisors.handler\n\n        \n        instance(x: 250, y: -100) list_length root.Std_k98ojb.List.Length {}\n        filter_divisors.output_list -> list_length.list\n\n        instance(x: 300, y: -100) non_zero root.Std_k98ojb.Logic.NotEqual {}\n        list_length.length -> non_zero.left\n        0 -> non_zero.right\n\n        \n        instance(x: 350, y: -100) not_nonzero root.Std_k98ojb.Logic.Not {}\n        non_zero.result -> not_nonzero.input\n\n        not_nonzero.output -> output_bool\n        compute_sqrt -> list_gen.start\n        list_gen.done -> filter_divisors.execute\n        filter_divisors.done -> continue_out\n    }\n\n    instance(x: 0, y: 0) IsPrime_instance root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") check_opposite_signs {\n        in(x: -250, y: 0, name: \"a\") property(Number) a_input\n        in(x: -230, y: 30, name: \"b\") property(Number) b_input\n\n        out(x: 300, y: 0, name: \"result\") property(Bool) result_output\n\n        instance(x: 50, y: 0) expr_node Std_k98ojb.Math.Expression {\n            expression: \"a * b < 0\"\n        }\n\n        a_input -> expr_node.a\n        b_input -> expr_node.b\n        expr_node.result -> result_output\n    }\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if the number is divisible by 11.\") check_divisible_by_11 {\n        in(x: -200, y: 50) property(Number) input_number\n        out(x: 300, y: 50) property(Bool) output_result\n\n        instance expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"n % 11 == 0\"\n        }\n\n        input_number -> expr_node.gen_0\n        expr_node.result -> output_result\n    }\n\n    \n\n    instance(x: -55, y: 529) check_divisible_by_11_instance root.main.check_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace all occurrences of a character in a string with another character.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replace_306f69 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_306f69.input\n        search_char -> replace_306f69.search\n        replace_char -> replace_306f69.replace\n        replace_306f69.output -> output_str\n    }\n\n    \n\n    instance(x: 175, y: -25) replace_characters_inst root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerCase {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: -192, y: 139) to_lower_flow_935476 root.main.ToLowerCase {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") product_unique {\n        in(x: -200, y: 100) property(List) input_list\n        out(x: 300, y: 200) property(Number) result\n\n        instance empty_list_node root.Std_k98ojb.List.Empty {}\n        \n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            initial_value: empty_list_node.list\n        }\n        input_list -> reduce_unique.items\n        \n        func() {  \n            in(x: -20, y: 10) property(List) acc\n            in(x: 30, y: 10) property(Number) item\n\n            out(x: 150, y: 10) property(List) new_acc\n\n            instance contains_node root.Std_k98ojb.List.Contains {\n                list: acc\n                item: item\n            }\n\n            instance if_not_contain root.Std_k98ojb.Std.If {\n                condition: !contains_node.is_contained\n            }\n            \n            \n            instance add_item root.Std_k98ojb.List.Add {\n                list: acc\n                item: item\n            }\n\n            if_not_contain.then -> add_item.execute\n            add_item.listWithItem -> new_acc\n\n            \n            if_not_contain.else -> (acc) -> new_acc\n        } -> reduce_unique.handler\n        \n        \n        instance compute_product root.Std_k98ojb.Iteration.Reduce {\n            initial_value: 1\n        }\n        \n        reduce_unique.output_value -> compute_product.items\n\n        func() {  \n            in(x: -50, y: 0) property(Number) acc\n            in(x: 20, y: 0) property(Number) item\n\n            out(x: 100, y: 0) property(Number) new_acc\n\n            instance multiply root.Std_k98ojb.Math.Mul {\n                first: acc\n                second: item\n            }\n            \n            multiply.result -> new_acc\n        } -> compute_product.handler\n        \n        \n        compute_product.output_value -> result\n    }\n\n    \n\n    instance(x: 100, y: -50) product_unique_node root.main.product_unique {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -240, y: -153, name: \"list1\") property(List) list1_8e3b0f\n        in(x: -246, y: 27, name: \"list2\") property(List) list2_9d1a4c\n\n        out(x: 578, y: -63, name: \"result\") property(List) result_6e3b0f\n\n        instance(x: 100, y: -131) diff_left root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 57) diff_right root.Std_k98ojb.Sets.Difference {}\n        instance(x: 340, y: -32) concat_6e3b0f root.Std_k98ojb.List.Concat {}\n\n        list1_8e3b0f -> diff_left.left\n        list2_9d1a4c -> diff_left.right\n\n        list2_9d1a4c -> diff_right.left\n        list1_8e3b0f -> diff_right.right\n\n        diff_left.difference -> concat_6e3b0f.left\n        diff_right.difference -> concat_6e3b0f.right\n\n        concat_6e3b0f.concatenated -> result_6e3b0f\n    }\n\n    \n\n    instance(x: 10, y: -5) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_list {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        in(x: -180, y: 100, name: \"n\") property(Number) rotationCount\n\n        out(x: 600, y: 75, name: \"rotated_list\") property(List) outputList\n\n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) splitIndexCalc root.Std_k98ojb.Math.Sub {} \n        instance(x: 400, y: 100) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 200) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 550, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n\n        inputList -> len_node.list\n        len_node.length -> modulo_node.divisor\n        rotationCount -> modulo_node.value\n\n        len_node.length -> splitIndexCalc.first\n        modulo_node.result -> splitIndexCalc.second\n\n        0 -> slice_first_part.start\n        splitIndexCalc.result -> slice_first_part.end\n        inputList -> slice_first_part.list\n\n        splitIndexCalc.result -> slice_second_part.start\n        -1 -> slice_second_part.end\n        inputList -> slice_second_part.list\n\n        slice_second_part.slice -> concat_node.left\n        slice_first_part.slice -> concat_node.right\n\n        concat_node.result -> outputList\n    }\n\n    instance(x: 10, y: -5) rotate_list_instance root.main.rotate_list {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -243, y: 150, name: \"list\") property(List) list_8a3b2f\n\n        out(x: 769, y: 146, name: \"total\") property(Number) total_7d3e8c\n\n        instance(x: 256, y: 145) reduce_0a7c3b root.Std_k98ojb.Iteration.Reduce {}\n        list_8a3b2f -> reduce_0a7c3b.items\n        0 -> reduce_0a7c3b.initialValue\n        func() {\n            in(x: -165, y: -45, name: \"accumulated\") property(Number) accumulated_9d0e8a\n            in(x: -162, y: 30, name: \"current\") property(Number) current_7b5c1f\n\n            out(x: 800, y: -40, name: \"sum\") property(Number) sum_4e9d0e\n\n            instance(x: 100, y: 0) add_6a3e2d root.Std_k98ojb.Math.Add {}\n            accumulated_9d0e8a -> add_6a3e2d.first\n            current_7b5c1f -> add_6a3e2d.second\n            add_6a3e2d.result -> sum_4e9d0e\n        } -> reduce_0a7c3b.reducer\n        reduce_0a7c3b.output -> total_7d3e8c\n    }\n\n    \n\n    instance(x: -150, y: 100) array_sum_6f2a4d root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime.\") is_prime {\n        in(x: -450, y: -213, name: \"n\") property(Number) n_6b655b\n        out(x: 1169, y: -269, name: \"output\") property(Bool) output_732a8a\n\n        instance pow_node root.Std_k98ojb.Math.Pow {}\n        instance floor_node root.Std_k98ojb.Math.Floor {}\n        instance generate_range root.Std_k98ojb.List.GenerateRange {}\n        instance find_divisor root.Std_k98ojb.Iteration.Find {}\n        instance not_null root.Std_k98ojb.Logic.NotEqual {}\n        instance invert root.Std_k98ojb.Logic.Not {}\n        instance less_than_2 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance final_and root.Std_k98ojb.Logic.And {}\n\n        \n        n_6b655b -> pow_node.x\n        0.5 -> pow_node.y\n        pow_node.output -> floor_node.input\n\n        \n        2 -> generate_range.from\n        floor_node.output -> generate_range.to\n\n        \n        generate_range.list -> find_divisor.items\n\n        \n        func() {\n            in(x: -30, y: -25, name: \"current\") property(Number) current_170471\n\n            instance mod_node root.Std_k98ojb.Math.Modulo {}\n            instance eq_zero root.Std_k98ojb.Logic.Equal {}\n\n            n_6b655b -> mod_node.value\n            current_170471 -> mod_node.divisor\n            mod_node.result -> eq_zero.left\n            0 -> eq_zero.right\n\n            out(eq_zero.result) as predicate\n        } -> find_divisor.handler\n\n        \n        find_divisor.item -> not_null.left\n        null -> not_null.right  \n\n        invert.input <- not_null.result  \n\n        \n        n_6b655b -> less_than_2.left\n        1 -> less_than_2.right  \n\n        instance not_less root.Std_k98ojb.Logic.Not {}\n        less_than_2.result -> not_less.input\n\n        \n        invert.output -> final_and.left\n        not_less.output -> final_and.right\n\n        final_and.result -> output_732a8a\n    }\n}\n\ninstance(x: -176, y: -38) is_prime_86117a root.main.is_prime {}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") opposite_signs {\n        in(x: -200, y: 0, name: \"a\") property(Number) a\n        in(x: -190, y: 30, name: \"b\") property(Number) b\n\n        out(x: 400, y: 0, name: \"output\") property(Bool) output\n\n        instance(x: 50, y: 20) ifexpr root.Std_k98ojb.Std.IfExpression {\n            expression: \"a != 0 && b !=0 && ( (a <0)!=(b <0) )\"\n        }\n\n        a -> ifexpr.gen_a\n        b -> ifexpr.gen_b\n        ifexpr.value -> output\n    }\n\n    instance(x: 10, y: -50) opposite_signs_1 root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_number\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 100) eleven_node root.Std_k98ojb.Math.Expression {\n            expression: \"11\"\n        }\n\n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo\n        input_number -> modulo_node.value\n        eleven_node.result -> modulo_node.divisor\n\n        instance(x: 300, y: 100) equal_node root.Std_k98ojb.Logic.Equal {\n            right: 0\n        }\n        modulo_node.result -> equal_node.left\n        equal_node.result -> output_bool\n    }\n\n    \n    instance(x: -50, y: 200) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace all occurrences of a character with another in a string.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 150, y: 40) replace_306f69 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_306f69.input\n        search_char -> replace_306f69.search\n        replace_char -> replace_306f69.replace\n        replace_306f69.output -> output_str\n    }\n\n    \n\n    instance(x: 175, y: -25) replace_characters_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -240, y: 50, name: \"input\") property(String) input_ai\n        out(x: 300, y: 60, name: \"output\") property(String) output_ai\n\n        instance(x: 100, y: 55) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 20) tolower_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -425, y: 209, name: \"list\") property(List) input_list\n        out(x: 866, y: 132, name: \"product\") property(Number) output_product\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Iteration.Reduce {\n            items: input_list\n            initial_value: empty_list.list\n        }\n\n        \n        func() { \n            in acc property(List)  \n            in current property(Number)  \n\n            out new_acc property(List)\n\n            instance contains_node root.Std_k98ojb.List.Contains {\n                list: acc\n                item: current\n            }\n\n            instance not_contained root.Std_k98ojb.Logic.Not {\n                input: contains_node.is_contained\n            }\n\n            \n            instance if_add root.Std_k98ojb.Std.If {\n                input: not_contained.result\n            }\n\n            \n            instance add_to_list root.Std_k98ojb.List.Add {\n                list: acc\n                item: current\n            }\n\n            \n            \n            if_add.then -> add_to_list.list  \n            add_to_list.listWithItem -> new_acc\n\n            \n            if_add.else -> acc -> new_acc\n        } -> reduce_unique.handler\n\n        \n        instance product_reduce root.Iteration.Reduce {\n            items: reduce_unique.result  \n            initial_value: 1.0  \n        }\n\n        \n        func() { \n            in acc property(Number)  \n            in current property(Number)\n\n            out result property(Number)\n\n            instance multiply root.Std_k98ojb.Math.Mul {\n                first: acc\n                second: current\n            }\n\n            multiply.result -> result\n        } -> product_reduce.handler\n\n        \n        product_reduce.result -> output_product\n    }\n\n    \n    instance test_unique root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -200, y: -150, name: \"list1\") property(List) list1_0x\n        in(x: -200, y: 0, name: \"list2\") property(List) list2_0x\n\n        out(x: 300, y: -75, name: \"result\") property(List) result_0x\n\n        instance(x: 100, y: -150) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 30) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: -75) concat root.Std_k98ojb.List.Concat {}\n\n        list1_0x -> diff1.left\n        list2_0x -> diff1.right\n\n        list2_0x -> diff2.left\n        list1_0x -> diff2.right\n\n        diff1.difference -> concat.left\n        diff2.difference -> concat.right\n\n        concat.concatenated -> result_0x\n    }\n\n    \n\n    instance(x: 50, y: -100) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_list {\n        in(x: -200, y: 50) property(List) input_list\n        in(x: -180, y: 100) property(Number) rotation_num\n\n        out(x: 600, y: 75) property(List) rotated_list\n\n        instance length_node root.Std_k98ojb.List.Length {}\n        instance modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance sub_node root.Std_k98ojb.Math.Sub {}\n        instance first_slice root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        instance second_slice root.Std_k98ojb.List.Slice {}\n        instance concat_node root.Std_k98ojb.List.Concat {}\n\n        \n        input_list -> length_node.list\n\n        \n        rotation_num -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        \n        sub_node.first <- length_node.length\n        sub_node.second <- modulo_node.result\n\n        \n        input_list -> first_slice.list\n        sub_node.result -> first_slice.end\n\n        \n        input_list -> second_slice.list\n        sub_node.result -> second_slice.start\n        length_node.length -> second_slice.end\n\n        \n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> rotated_list\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_8e3a5b\n\n        out(x: 769, y: 145, name: \"sum\") property(Number) sum_7c1d3f\n\n        instance(x: 280, y: 144) reduce_7e3d0a root.Std_k98ojb.Iteration.Reduce {}\n        list_8e3a5b -> reduce_7e3d0a.items\n        0 -> reduce_7e3d0a.initialValue\n        func() {\n            in(x: -162, y: -74, name: \"accumulated\") property(Number) current_c750f1\n            in(x: -158, y: 22, name: \"current_item\") property(Any) item_3a9d8b\n\n            out(x: 602, y: -74, name: \"new_accumulated\") property(Number) sum_72dd2a\n\n            instance(x: 150, y: 0) add_0f3be6 root.Std_k98ojb.Math.Add {}\n            current_c750f1 -> add_0f3be6.first\n            item_3a9d8b -> add_0f3be6.second\n            add_0f3be6.result -> sum_72dd2a\n        } -> reduce_7e3d0a.reducer\n        reduce_7e3d0a.output -> sum_7c1d3f\n    }\n\n    \n\n    instance(x: -280, y: 136) array_sum_72ef29 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") is_prime {\n        in(x: -500, y: -300, name: \"n\") property(Number) n_input\n        in(x: -480, y: 10, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: -200, name: \"continue\") trigger() continue_out\n        out(x: 650, y: -300, name: \"output\") property(Bool) output_bool\n\n        \n        instance(x: -100, y: -280) ifexpr_edge1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_input <= 1\"\n        }\n        instance(x: 50, y: -280) false_out root.Std_k98ojb.Logic.False {}\n        instance(x: 150, y: -280) true_out root.Std_k98ojb.Logic.True {}\n\n        \n        instance(x: -100, y: -200) ifexpr_edge2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_input == 2\"\n        }\n\n        \n        instance(x: -100, y: -120) modulo_even root.Std_k98ojb.Math.Modulo {}\n        instance(x: 50, y: -120) equal_zero_even root.Std_k98ojb.Logic.Equal {}\n        instance(x: 150, y: -120) ifexpr_edge3 root.Std_k98ojb.Std.IfExpression {\n            expression: \"equal_zero_even.output\"\n        }\n\n        \n        instance(x: -100, y: -40) pow_sqrt root.Std_k98ojb.Math.Pow {}\n        instance(x: 50, y: -40) floor_sqrt root.Std_k98ojb.Math.Floor {}\n\n        \n        instance(x: 200, y: -40) generate_range root.Std_k98ojb.List.GenerateRange {}\n        \n        \n        instance(x: 350, y: -100) filter_divisors root.Std_k98ojb.Iteration.Filter {}\n        func() {\n            in(x: -20, y: -20, name: \"current\") property(Number) current_i\n            out(x: 200, y: -20, name: \"keep\") property(Bool) keep_out\n\n            instance(x: 50, y: -20) mod_node root.Std_k98ojb.Math.Modulo {}\n            instance(x: 150, y: -20) eq_zero root.Std_k98ojb.Logic.Equal {}\n\n            n_input -> mod_node.value\n            current_i -> mod_node.divisor\n\n            0 -> eq_zero.right\n            mod_node.result -> eq_zero.left\n\n            eq_zero.output -> keep_out\n        } -> filter_divisors.handler\n\n        \n        instance(x: 500, y: -40) is_empty root.Std_k98ojb.List.IsEmpty {}\n\n        \n\n        \n        n_input -> ifexpr_edge1.gen_0\n        false_out.output -> output_bool when ifexpr_edge1.then\n        execute_trigger -> ifexpr_edge1.execute\n\n        \n        ifexpr_edge1.else -> ifexpr_edge2.execute\n        true_out.output -> output_bool when ifexpr_edge2.then\n        ifexpr_edge2.else -> modulo_even.value  \n\n        n_input -> modulo_even.value\n        2 -> modulo_even.divisor\n        modulo_even.result -> equal_zero_even.left\n        0 -> equal_zero_even.right\n        equal_zero_even.output -> ifexpr_edge3.predicate\n        execute_trigger -> ifexpr_edge3.execute when ifexpr_edge2.else\n\n        \n        false_out.output -> output_bool when ifexpr_edge3.then\n        ifexpr_edge3.else -> pow_sqrt.base  \n\n        n_input -> pow_sqrt.base\n        0.5 -> pow_sqrt.exponent\n        pow_sqrt.result -> floor_sqrt.input\n        floor_sqrt.output -> generate_range.to\n        3 -> generate_range.from\n\n        generate_range.list -> filter_divisors.items\n        filter_divisors.output_list -> is_empty.list\n\n        is_empty.is_empty -> output_bool when ifexpr_edge3.else\n\n        \n        false_out.continue -> continue_out when ifexpr_edge1.then\n        true_out.continue -> continue_out when ifexpr_edge2.then\n        false_out.continue -> continue_out when ifexpr_edge3.then\n        is_empty.continue -> continue_out when ifexpr_edge3.else\n    }\n\n    instance(x: 0, y: 0) is_prime_instance root.main.is_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSign {\n        in(x: -200, y: 0, name: \"a\") property(Number) a\n        in(x: -180, y: 30, name: \"b\") property(Number) b\n\n        out(x: 200, y: 0, name: \"output\") property(Bool) output\n\n        instance(x: 50, y: 0) multiply root.Std_k98ojb.Math.Mul {}\n        a -> multiply.first\n        b -> multiply.second\n\n        instance(x: 100, y: 0) greaterThan root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greaterThan.left\n        multiply.result -> greaterThan.right\n\n        greaterThan.result -> output\n    }\n\n    instance(x: -174, y: -63) OppositeSignInstance root.main.OppositeSign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_node.value\n        modulo_node.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -100, y: 0) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace_with\") property(String) replace_val\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_val -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_chars_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) to_lower_flow_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") calculate_product {\n        in(x: -425, y: 100, name: \"list\") property(List) input_list\n        out(x: 800, y: 100, name: \"product\") property(Number) output_product\n\n        instance(x: 100, y: 100) unique_reducer root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 400, y: 100) product_reducer root.Std_k98ojb.Iteration.Reduce {\n            initial: 1.0\n        }\n\n        \n        func() unique_handler {\n            in(x: -200, y: 0, name: \"acc\") property(List) acc_in\n            in(x: -200, y: 50, name: \"item\") property(Number) item_in\n\n            out(x: 300, y: 0, name: \"\") property(List) new_acc_out\n\n            instance(x: 0, y: 0) contains_node root.Std_k98ojb.List.Contains {}\n            instance(x: 150, y: 0) not_node root.Std_k98ojb.Logic.Not {}\n            instance(x: 300, y: 0) if_node root.Std_k98ojb.Std.If {}\n            \n            \n            acc_in -> contains_node.list\n            item_in -> contains_node.item\n\n            contains_node.is_contained -> not_node.input\n            not_node.result -> if_node.condition\n\n            \n            instance(x: 200, y: -50) add_node root.Std_k98ojb.List.Add {}\n            acc_in -> add_node.list\n            item_in -> add_node.item\n            add_node.listWithItem -> if_node.then_value\n\n            \n            acc_in -> if_node.else_value\n\n            if_node.value -> new_acc_out\n        } -> unique_reducer.handler\n\n        \n        func() product_handler {\n            in(x: -200, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: -200, y: 50, name: \"item\") property(Number) item_in\n\n            out(x: 300, y: 0, name: \"\") property(Number) new_acc_out\n\n            instance(x: 100, y: 0) multiply_node root.Std_k98ojb.Math.Mul {}\n            acc_in -> multiply_node.first\n            item_in -> multiply_node.second\n            multiply_node.result -> new_acc_out\n        } -> product_reducer.handler\n\n        \n        input_list -> unique_reducer.items\n        unique_reducer.result -> product_reducer.items\n        product_reducer.result -> output_product\n    }\n\n    \n\n    instance(x: 200, y: -192) calculate_product_1 root.main.calculate_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -250, y: -143, name: \"list1\") property(List) list1_8e7a3d\n        in(x: -269, y: 10, name: \"list2\") property(List) list2_7b8c4f\n\n        out(x: 550, y: -66, name: \"result\") property(List) result_7e3a6d\n\n        instance(x: -109, y: -143) difference_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: -128, y: 10) difference_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: -66) concat_7e3a6d root.Std_k98ojb.List.Concat {}\n\n        list1_8e7a3d -> difference_ab.left\n        list2_7b8c4f -> difference_ab.right\n\n        list2_7b8c4f -> difference_ba.left\n        list1_8e7a3d -> difference_ba.right\n\n        difference_ab.difference -> concat_7e3a6d.left\n        difference_ba.difference -> concat_7e3a6d.right\n\n        concat_7e3a6d.concatenated -> result_7e3a6d\n    }\n\n    \n\n    instance(x: 10, y: -5) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -300, y: 25, name: \"list\") property(List) input_list\n        in(x: -300, y: 100, name: \"k\") property(Number) rotation_k\n\n        out(x: 800, y: 75, name: \"rotated\") property(List) rotated_output\n\n        instance(x: 200, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 350, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 500, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 650, y: 100) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 650, y: -30) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 750, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        input_list -> length_node.list\n        rotation_k -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        input_list -> first_slice.list\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n\n        input_list -> second_slice.list\n        sub_node.result -> second_slice.start\n        length_node.length -> second_slice.end\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> rotated_output\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_right_7a4dad root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_0e8d7a\n\n        out(x: 659, y: 143, name: \"sum\") property(Number) sum_7b5c3f\n\n        instance(x: 200, y: 143) reduce_3a8e90 root.Std_k98ojb.Iteration.Reduce {}\n        list_0e8d7a -> reduce_3a8e90.items\n        0 -> reduce_3a8e90.initialValue\n        func() {\n            in(x: -185, y: -84, name: \"accumulated\") property(Number) accumulated_ai\n            in(x: -177, y: 22, name: \"current\") property(Number) current_ai\n\n            out(x: 1072, y: -77, name: \"sum\") property(Number) sum_ai\n\n            instance(x: 500, y: 0) add_8974a2 root.Std_k98ojb.Math.Add {}\n            accumulated_ai -> add_8974a2.first\n            current_ai -> add_8974a2.second\n            add_8974a2.result -> sum_ai\n        } -> reduce_3a8e90.reducer\n        reduce_3a8e90.output -> sum_7b5c3f\n    }\n\n    \n\n    instance(x: -272, y: 115) array_sum_6c92e0 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a given integer is a prime number.\") is_prime {\n        in(x: -450, y: -321, name: \"execute\") trigger() execute_12bf99\n        in(x: -436, y: -213, name: \"n\") property(Number) n_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Bool) output_732a8a\n\n        \n        instance(x: -200, y: -400) if_edge_case root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_6b655b < 2\"\n        }\n        setter(x: -300, y: -450, name: \"setter_false\") setter_1a2b3c = output_val\n        getter(x: -280, y: -470, name: \"getter_output\") getter_4d5e6f = output_val\n\n        \n        instance(x: 50, y: -300) modulo_even root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: -300) if_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"modulo_even.result == 0\"\n        }\n        instance(x: 250, y: -300) equal_2 root.Std_k98ojb.Logic.Equal {}\n        \n        \n        instance(x: 400, y: -200) pow_sqrt root.Std_k98ojb.Math.Pow {\n            exponent: 0.5\n        }\n        instance(x: 450, y: -200) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        \n        \n        instance(x: 600, y: -150) generate_range root.Std_k98ojb.List.GenerateRange {\n            from: 2\n        }\n        \n        \n        func() handler_divisor_check {\n            in(x: -30, y: -25, name: \"current\") property(Number) current;\n            \n            out(x: 705, y: 49, name: \"output\") property(Bool);\n            \n            instance(x: 100, y: 50) modulo_check root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n            \n            n_6b655b \u2192 modulo_check.value\n            current \u2192 modulo_check.divisor\n            modulo_check.result \u2192 equal_zero.left\n            0 \u2192 equal_zero.right\n            equal_zero.result \u2192 output\n        } \u2192 filter_handler\n        \n        instance(x: 750, y: -100) filter_divisors root.Std_k98ojb.Iteration.Filter {\n            handler: filter_handler\n        }\n        \n        \n        instance(x: 900, y: -50) count_divisors root.Std_k98ojb.List.Count {}\n        instance(x: 1000, y: 0) greater_than_zero root.Std_k98ojb.Math.GreaterThan {\n            second: 0\n        }\n        \n        \n        \n        \n        n_6b655b \u2192 pow_sqrt.value\n        execute_12bf99 \u2192 if_edge_case.execute\n        if_edge_case.then \u2192 setter_1a2b3c.execute\n        false \u2192 setter_1a2b3c.new_value\n        getter_4d5e6f.value \u2192 output_732a8a\n        \n        \n        n_6b655b \u2192 modulo_even.value\n        2 \u2192 modulo_even.divisor\n        if_edge_case.else \u2192 modulo_even.execute\n        modulo_even.result \u2192 if_even.gen_0\n        \n        \n        if_even.then \u2192 equal_2.left\n        2 \u2192 equal_2.right\n        equal_2.result \u2192 if_even.predicate\n        \n        instance(x: 350, y: -400) if_even_true root.Std_k98ojb.Std.If {\n            predicate: equal_2.result\n        }\n        \n        \n        if_even_true.then \u2192 setter_prime.execute\n        true \u2192 setter_prime.new_value\n        \n        \n        instance(x: 350, y: -450) else_false root.Std_k98ojb.Setter {\n            value: false\n        }\n        \n        \n        if_even.else \u2192 pow_sqrt.execute\n        \n        floor_sqrt.input \u2190 pow_sqrt.output\n        generate_range.to \u2190 floor_sqrt.output\n        \n        filter_divisors.items \u2190 generate_range.list\n        \n        count_divisors.list \u2190 filter_divisors.output_list\n        count_divisors.count \u2192 greater_than_zero.first\n        \n        \n        instance(x: 1050, y: 50) not_prime root.Std_k98ojb.Setter {\n            value: greater_than_zero.result\n        }\n        \n        instance(x: 1100, y: 50) invert_result root.Std_k98ojb.Logic.Not {}\n        not_prime.value \u2192 invert_result.input\n        \n        invert_result.output \u2192 output_732a8a\n        \n        \n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") opposite_signs {\n        in(x: -250, y: -130, name: \"a\") property(Number) a_4e8d3b\n        in(x: -240, y: 20, name: \"b\") property(Number) b_7f6c9a\n\n        out(x: 350, y: -100, name: \"output\") property(Bool) output_1a2e8d\n\n        instance(x: 0, y: 0) expr_oppo root.Std_k98ojb.Math.Expression {\n            expression: \"a * b < 0\"\n        }\n        a_4e8d3b -> expr_oppo.a\n        b_7f6c9a -> expr_oppo.b\n        expr_oppo.result -> output_1a2e8d\n    }\n\n    \n\n    instance(x: -50, y: 100) opposite_signs_4a3b2c root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if the number is divisible by 11.\") check_divisible_by_11 {\n        in(x: -200, y: 50) property(Number) input_number\n        out(x: 300, y: 50) property(Bool) output_result\n\n        instance expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"n % 11 == 0\"\n        }\n\n        input_number -> expr_node.gen_0\n        expr_node.result -> output_result\n    }\n\n    \n\n    instance(x: -55, y: 529) check_divisible_by_11_instance root.main.check_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace all occurrences of a character in a string with another character.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replace_306f69 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_306f69.input\n        search_char -> replace_306f69.search\n        replace_char -> replace_306f69.replace\n        replace_306f69.output -> output_str\n    }\n\n    \n\n    instance(x: 175, y: -25) replace_characters_inst root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerCase {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: -192, y: 139) to_lower_flow_935476 root.main.ToLowerCase {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") product_unique {\n        in(x: -200, y: 100) property(List) input_list\n        out(x: 300, y: 200) property(Number) result\n\n        instance empty_list_node root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            initial_value: empty_list_node.list\n        }\n        \n        input_list -> reduce_unique.items\n        \n        func() {  \n            in(x: -10, y: 20) property(List) acc\n            in(x: 30, y: 20) property(Number) item\n\n            out(x: 150, y: 20) property(List) new_acc\n\n            instance contains_node root.Std_k98ojb.List.Contains {\n                list: acc\n                item: item\n            }\n\n            instance if_not_contain root.Std_k98ojb.Std.If {\n                condition: !contains_node.is_contained\n            }\n            \n            \n            instance add_item root.Std_k98ojb.List.Add {\n                list: acc\n                item: item\n            }\n            \n            if_not_contain.then -> add_item.execute\n            add_item.listWithItem -> new_acc\n\n            \n            if_not_contain.else -> (acc) -> new_acc\n        } -> reduce_unique.handler\n        \n        \n        reduce_unique.output_value -> unique_list\n\n        \n        instance compute_product root.Std_k98ojb.Iteration.Reduce {\n            initial_value: 1\n        }\n        \n        unique_list -> compute_product.items\n        \n        func() {  \n            in(x: -50, y: 0) property(Number) acc\n            in(x: 20, y: 0) property(Number) item\n\n            out(x: 100, y: 0) property(Number) new_acc\n\n            instance multiply root.Std_k98ojb.Math.Mul {\n                first: acc\n                second: item\n            }\n            \n            multiply.result -> new_acc\n        } -> compute_product.handler\n        \n        \n        compute_product.output_value -> result\n    }\n\n    \n\n    instance(x: 100, y: -50) product_unique_inst root.main.product_unique {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -240, y: -153, name: \"list1\") property(List) list1_8e3b0f\n        in(x: -246, y: 27, name: \"list2\") property(List) list2_9d1a4c\n\n        out(x: 578, y: -63, name: \"result\") property(List) result_6e3b0f\n\n        instance(x: 100, y: -131) diff_left root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 57) diff_right root.Std_k98ojb.Sets.Difference {}\n        instance(x: 340, y: -32) concat_6e3b0f root.Std_k98ojb.List.Concat {}\n\n        list1_8e3b0f -> diff_left.left\n        list2_9d1a4c -> diff_left.right\n\n        list2_9d1a4c -> diff_right.left\n        list1_8e3b0f -> diff_right.right\n\n        diff_left.difference -> concat_6e3b0f.left\n        diff_right.difference -> concat_6e3b0f.right\n\n        concat_6e3b0f.concatenated -> result_6e3b0f\n    }\n\n    \n\n    instance(x: 10, y: -5) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_list {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        in(x: -180, y: 100, name: \"n\") property(Number) rotationCount\n\n        out(x: 600, y: 75, name: \"rotated_list\") property(List) outputList\n\n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) split_sub root.Std_k98ojb.Math.Sub {} \n        instance(x: 400, y: 100) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 200) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 550, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n\n        inputList -> list_length.list\n        rotationCount -> modulo_node.value\n        list_length.length -> modulo_node.divisor\n\n        list_length.length -> split_sub.first\n        modulo_node.result -> split_sub.second\n\n        0 -> first_slice.start\n        split_sub.result -> first_slice.end\n        inputList -> first_slice.list\n\n        split_sub.result -> second_slice.start\n        -1 -> second_slice.end\n        inputList -> second_slice.list\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> outputList\n    }\n\n    \n\n    instance(x: 0, y: 0) rotate_list_instance root.main.rotate_list {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -243, y: 150, name: \"list\") property(List) list_8a3b2f\n\n        out(x: 769, y: 146, name: \"total\") property(Number) total_7d3e8c\n\n        instance(x: 256, y: 145) reduce_0a7c3b root.Std_k98ojb.Iteration.Reduce {}\n        list_8a3b2f -> reduce_0a7c3b.items\n        0 -> reduce_0a7c3b.initialValue\n        func() {\n            in(x: -165, y: -45, name: \"accumulated\") property(Number) accumulated_9d0e8a\n            in(x: -162, y: 30, name: \"current\") property(Number) current_7b5c1f\n\n            out(x: 800, y: -40, name: \"sum\") property(Number) sum_4e9d0e\n\n            instance(x: 100, y: 0) add_6a3e2d root.Std_k98ojb.Math.Add {}\n            accumulated_9d0e8a -> add_6a3e2d.first\n            current_7b5c1f -> add_6a3e2d.second\n            add_6a3e2d.result -> sum_4e9d0e\n        } -> reduce_0a7c3b.reducer\n        reduce_0a7c3b.output -> total_7d3e8c\n    }\n\n    \n\n    instance(x: -150, y: 100) array_sum_6f2a4d root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") is_prime {\n        in(x: -450, y: -321, name: \"input\") property(Number) input_6a8d3b\n        in(x: -479, y: 17, name: \"execute\") trigger() execute_3c3e8f\n\n        out(x: 1150, y: -296, name: \"continue\") trigger() continue_4e0a8d\n        out(x: 1163, y: -27, name: \"output\") property(Bool) output_5b1c7f\n\n        instance(x: -200, y: -319) if_expression_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"input < 2\"\n        }\n        \n        \n        instance(x: 140, y: -316) false_5e3d7a root.Std_k98ojb.Logic.False {}\n        instance(x: 290, y: -316) true_3c8f1a root.Std_k98ojb.Logic.True {}\n\n        \n        instance(x: -200, y: -150) sqrt_expression root.Std_k98ojb.Math.Expression {\n            expression: \"Math.Pow(input, 0.5)\"\n        }\n        instance(x: 140, y: -150) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        instance(x: 290, y: -150) generate_range root.Std_k98ojb.List.GenerateRange {\n            from: 2\n        }\n        \n        \n        instance(x: 450, y: -150) find_divisor root.Std_k98ojb.Iteration.Find {}\n        func() {\n            in(x: -30, y: -25, name: \"current\") property(Number) current_7a6e3d\n\n            out(x: 400, y: -25, name: \"predicate\") property(Bool) predicate_9f8b1c\n\n            instance(x: 70, y: -25) modulo_8a5a1d root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: -25) equal_4e3d7a root.Std_k98ojb.Logic.Equal {}\n\n            input_6a8d3b -> modulo_8a5a1d.value\n            current_7a6e3d -> modulo_8a5a1d.divisor\n            0 -> equal_4e3d7a.right\n            modulo_8a5a1d.result -> equal_4e3d7a.left\n            equal_4e3d7a.result -> predicate_9f8b1c\n        } -> find_divisor.handler\n\n        \n        instance(x: 600, y: -150) is_null root.Std_k98ojb.Logic.Equal {\n            right: null\n        }\n        \n        \n        input_6a8d3b -> sqrt_expression.value\n        sqrt_expression.value -> floor_sqrt.input\n        floor_sqrt.output -> generate_range.to\n        generate_range.list -> find_divisor.items\n        \n        find_divisor.item -> is_null.left\n\n        \n        instance(x: 750, y: -316) final_output root.Std_k98ojb.Std.If {\n            condition: if_expression_edge.value\n        }\n        \n        false_5e3d7a.output -> final_output.then\n        is_null.result -> final_output.else\n        \n        \n        final_output.result -> output_5b1c7f\n\n        execute_3c3e8f -> if_expression_edge.execute\n        execute_3c3e8f -> generate_range.from (fixed to 2)\n        \n        \n        if_expression_edge.then -> false_5e3d7a.execute\n        if_expression_edge.else -> sqrt_expression.execute\n        \n        \n        find_divisor.done -> continue_4e0a8d\n    }\n}\n\ninstance(x: -192, y: -63) is_prime_9d8e3a root.main.is_prime {}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSigns {\n        in(x: -200, y: 0, name: \"a\") property(Number) a\n        in(x: -150, y: 0, name: \"b\") property(Number) b\n\n        out(x: 300, y: 0, name: \"output\") property(Bool) output\n\n        instance(x: 0, y: 0) ifexpr root.Std_k98ojb.Std.IfExpression {\n            expression: \"a != 0 && b != 0 && ((a < 0)!=(b <0))\"\n        }\n\n        a -> ifexpr.gen_0\n        b -> ifexpr.gen_1\n        ifexpr.value -> output\n    }\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_number\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: 100) eleven_node root.Std_k98ojb.Math.Expression {\n            expression: \"11\"\n        }\n\n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo\n        input_number -> modulo_node.value\n        eleven_node.result -> modulo_node.divisor\n\n        instance(x: 300, y: 100) equal_node root.Std_k98ojb.Logic.Equal {\n            right: 0\n        }\n        modulo_node.result -> equal_node.left\n        equal_node.result -> output_bool\n    }\n\n    \n    instance(x: -50, y: 200) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace all occurrences of a character with another in a string.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 150, y: 40) replace_306f69 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_306f69.input\n        search_char -> replace_306f69.search\n        replace_char -> replace_306f69.replace\n        replace_306f69.output -> output_str\n    }\n\n    \n\n    instance(x: 175, y: -25) replace_characters_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -240, y: 50, name: \"input\") property(String) input_ai\n        out(x: 300, y: 60, name: \"output\") property(String) output_ai\n\n        instance(x: 100, y: 55) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 20) tolower_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -425, y: 209, name: \"list\") property(List) input_list\n        out(x: 866, y: 132, name: \"product\") property(Number) output_product\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Iteration.Reduce {\n            items: input_list\n            initial_value: empty_list.list\n        }\n\n        \n        func() { \n            in acc property(List)  \n            in current property(Number)  \n\n            out new_acc property(List)\n\n            instance contains_node root.Std_k98ojb.List.Contains {\n                list: acc\n                item: current\n            }\n\n            instance not_contained root.Std_k98ojb.Logic.Not {\n                input: contains_node.is_contained\n            }\n\n            \n            instance if_add root.Std_k98ojb.Std.If {\n                input: not_contained.result\n            }\n\n            \n            instance add_to_list root.Std_k98ojb.List.Add {\n                list: acc\n                item: current\n            }\n\n            \n            \n            if_add.then -> add_to_list.list  \n            add_to_list.listWithItem -> new_acc\n\n            \n            if_add.else -> acc -> new_acc\n        } -> reduce_unique.handler\n\n        \n        instance product_reduce root.Iteration.Reduce {\n            items: reduce_unique.result  \n            initial_value: 1.0  \n        }\n\n        \n        func() { \n            in acc property(Number)  \n            in current property(Number)\n\n            out result property(Number)\n\n            instance multiply root.Std_k98ojb.Math.Mul {\n                first: acc\n                second: current\n            }\n\n            multiply.result -> result\n        } -> product_reduce.handler\n\n        \n        product_reduce.result -> output_product\n    }\n\n    \n    instance test_unique root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -200, y: -150, name: \"list1\") property(List) list1_0x\n        in(x: -200, y: 0, name: \"list2\") property(List) list2_0x\n\n        out(x: 300, y: -75, name: \"result\") property(List) result_0x\n\n        instance(x: 100, y: -150) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 30) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: -75) concat root.Std_k98ojb.List.Concat {}\n\n        list1_0x -> diff1.left\n        list2_0x -> diff1.right\n\n        list2_0x -> diff2.left\n        list1_0x -> diff2.right\n\n        diff1.difference -> concat.left\n        diff2.difference -> concat.right\n\n        concat.concatenated -> result_0x\n    }\n\n    \n\n    instance(x: 50, y: -100) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_list {\n        in(x: -200, y: 50) property(List) input_list\n        in(x: -180, y: 100) property(Number) rotation_num\n\n        out(x: 600, y: 75) property(List) rotated_list\n\n        instance length_node root.Std_k98ojb.List.Length {}\n        instance modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance sub_node root.Std_k98ojb.Math.Sub {}\n        instance first_slice root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        instance second_slice root.Std_k98ojb.List.Slice {}\n        instance concat_node root.Std_k98ojb.List.Concat {}\n\n        \n        input_list -> length_node.list\n\n        \n        rotation_num -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        \n        sub_node.first <- length_node.length\n        sub_node.second <- modulo_node.result\n\n        \n        input_list -> first_slice.list\n        sub_node.result -> first_slice.end\n\n        \n        input_list -> second_slice.list\n        sub_node.result -> second_slice.start\n        length_node.length -> second_slice.end\n\n        \n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> rotated_list\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_8e3a5b\n\n        out(x: 769, y: 145, name: \"sum\") property(Number) sum_7c1d3f\n\n        instance(x: 280, y: 144) reduce_7e3d0a root.Std_k98ojb.Iteration.Reduce {}\n        list_8e3a5b -> reduce_7e3d0a.items\n        0 -> reduce_7e3d0a.initialValue\n        func() {\n            in(x: -162, y: -74, name: \"accumulated\") property(Number) current_c750f1\n            in(x: -158, y: 22, name: \"current_item\") property(Any) item_3a9d8b\n\n            out(x: 602, y: -74, name: \"new_accumulated\") property(Number) sum_72dd2a\n\n            instance(x: 150, y: 0) add_0f3be6 root.Std_k98ojb.Math.Add {}\n            current_c750f1 -> add_0f3be6.first\n            item_3a9d8b -> add_0f3be6.second\n            add_0f3be6.result -> sum_72dd2a\n        } -> reduce_7e3d0a.reducer\n        reduce_7e3d0a.output -> sum_7c1d3f\n    }\n\n    \n\n    instance(x: -280, y: 136) array_sum_72ef29 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") is_prime {\n        in(x: -450, y: -213, name: \"n\") property(Number) n_input\n        out(x: 600, y: -269, name: \"output\") property(Bool) output\n\n        \n        instance if_less_than_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n <= 1\"\n        }\n        instance return_false root.Std_k98ojb.Logic.False {}\n        instance return_true root.Std_k98ojb.Logic.True {}\n\n        n_input -> if_less_than_2.gen_0\n        return_false.output -> if_less_than_2.then_value\n        \n\n        instance if_equal_to_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n == 2\"\n        }\n        if_less_than_2.else -> if_equal_to_2.execute\n        return_true.output -> if_equal_to_2.then_value\n\n        \n        instance modulo_2 root.Std_k98ojb.Math.Modulo {}\n        n_input -> modulo_2.value\n        2 -> modulo_2.divisor\n        instance equal_zero root.Std_k98ojb.Logic.Equal {\n            right: 0\n        }\n        modulo_2.result -> equal_zero.left\n        instance if_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"equal_zero\"\n        }\n        if_equal_to_2.else -> if_even.execute\n        return_false.output -> if_even.then_value\n\n        \n        instance proceed root.Std_k98ojb.Logic.True {}\n        if_even.else -> proceed.input\n\n        \n        instance pow_half root.Std_k98ojb.Math.Pow {\n            second: 0.5\n        }\n        n_input -> pow_half.first\n        instance floor_sqrt root.Std_k98ojb.Math.Floor {}\n        pow_half.output -> floor_sqrt.input\n\n        \n        instance generate_range root.Std_k98ojb.List.GenerateRange {\n            from: 3\n        }\n        floor_sqrt.output -> generate_range.to\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {}\n        generate_range.list -> find_divisor.items\n\n        func() { \n            in(x: -30, y: 25, name: \"current\") property(Number) current\n            out(x: 400, y: 100, name: \"result\") property(Bool) result\n\n            instance mod_current root.Std_k98ojb.Math.Modulo {}\n            n_input -> mod_current.value \n            current -> mod_current.divisor\n            instance is_divisible root.Std_k98ojb.Logic.Equal {\n                right: 0\n            }\n            mod_current.result -> is_divisible.left\n            is_divisible.result -> result\n        } -> find_divisor.handler\n\n        \n        instance not_found root.Std_k98ojb.Logic.Not {}\n        find_divisor.found -> not_found.input\n        not_found.output -> output\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") check_opposite_signs {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_input\n        in(x: -180, y: 100, name: \"b\") property(Number) b_input\n\n        out(x: 300, y: 75, name: \"output\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) sign_check root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        \n        a_input -> sign_check.gen_0\n        b_input -> sign_check.gen_1\n        sign_check.value -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 20) check_opposite_signs_inst root.main.check_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") check_divisible_by_11 {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 400, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 50) check_divisible_by_11_node root.main.check_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace_with\") property(String) replace_val\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_val -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_chars_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) to_lower_flow_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -425, y: 100, name: \"list\") property(List) list_ai\n        out(x: 800, y: 100, name: \"product\") property(Number) product_ai\n\n        instance(x: 100, y: 200) map_count root.Std_k98ojb.Iteration.Map {}\n        \n        func() {\n            in(x: -300, y: 50, name: \"current\") property(Number) current\n            in(x: -300, y: 150, name: \"context\") property(List) context\n\n            out(x: 200, y: 100, name: \"\") property(Tuple<Number, Number>) output_tuple\n\n            instance(x: 0, y: 0) filter_eq root.Std_k98ojb.Query.Filter {\n                where: \"it == current\"\n            }\n            context -> filter_eq.list\n            instance(x: 200, y: 50) count_node root.Std_k98ojb.List.Length {}\n            filter_eq.result -> count_node.items\n\n            data_instance result = [current, count_node.length]\n            result -> output_tuple\n        } -> map_count.handler\n        \n        list_ai -> map_count.items\n        list_ai -> map_count.context\n\n        instance(x: 400, y: 200) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        \n        func() {\n            in(x: -150, y: 300, name: \"current\") property(Tuple<Number, Number>) current_tuple\n\n            out(x: 150, y: 300, name: \"\") property(Bool) is_unique\n\n            instance(x: 0, y: 250) get_second root.Std_k98ojb.List.GetAt { index: 1 }\n            current_tuple -> get_second.list\n            instance(x: 100, y: 250) eq_one root.Std_k98ojb.Logic.Equal {}\n            get_second.item -> eq_one.left\n            1 -> eq_one.right\n            eq_one.result -> is_unique\n        } -> filter_unique.handler\n        \n        map_count.output_list -> filter_unique.items\n\n        instance(x: 600, y: 200) extract_values root.Std_k98ojb.Iteration.Map {}\n        \n        func() {\n            in(x: -150, y: 400, name: \"current\") property(Tuple<Number, Number>) current_tuple\n\n            out(x: 150, y: 400, name: \"\") property(Number) value\n\n            instance(x: 0, y: 350) get_first root.Std_k98ojb.List.GetAt { index: 0 }\n            current_tuple -> get_first.list\n            get_first.item -> value\n        } -> extract_values.handler\n        \n        filter_unique.output_list -> extract_values.items\n\n        instance(x: 800, y: 200) compute_product root.Std_k98ojb.Iteration.Reduce {}\n        \n        func() {\n            in(x: -150, y: 500, name: \"acc\") property(Number) acc\n            in(x: -150, y: 600, name: \"current\") property(Number) current\n\n            out(x: 150, y: 550, name: \"\") property(Number) result\n\n            instance(x: 0, y: 500) multiply root.Std_k98ojb.Math.Mul {}\n            acc -> multiply.first\n            current -> multiply.second\n            multiply.result -> result\n        } -> compute_product.reducer\n        \n        1 -> compute_product.initial_value\n        extract_values.output_list -> compute_product.items\n\n        compute_product.reduced -> product_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) unique_product_node root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -250, y: -143, name: \"list1\") property(List) list1_8e7a3d\n        in(x: -269, y: 13, name: \"list2\") property(List) list2_7b8c4f\n\n        out(x: 500, y: -130, name: \"result\") property(List) result_9e3d5a\n\n        instance(x: -60, y: -130) concat_3a5d0a root.Std_k98ojb.List.Concat {}\n        instance(x: -247, y: 13) diff2_7c3f1b root.Std_k98ojb.Sets.Difference {}\n        instance(x: -266, y: -143) diff1_0e5a2d root.Std_k98ojb.Sets.Difference {}\n        \n        list1_8e7a3d -> diff1_0e5a2d.left\n        list2_7b8c4f -> diff1_0e5a2d.right\n        \n        list2_7b8c4f -> diff2_7c3f1b.left\n        list1_8e7a3d -> diff2_7c3f1b.right\n\n        diff1_0e5a2d.difference -> concat_3a5d0a.listA\n        diff2_7c3f1b.difference -> concat_3a5d0a.listB\n        \n        concat_3a5d0a.concatenated -> result_9e3d5a\n    }\n\n    \n\n    instance(x: -284, y: -63) find_dissimilar_7c3f1b root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 150, name: \"rotation_count\") property(Number) rotation\n\n        out(x: 600, y: 100, name: \"rotated\") property(List) output_list\n\n        instance(x: 100, y: 20) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 80) sub_node root.Std_k98ojb.Math.Sub {}\n        \n        instance(x: 200, y: 150) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 150) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 500, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n\n        \n        input_list -> length_node.list\n        rotation -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        \n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n        input_list -> first_slice.list\n\n        sub_node.result -> second_slice.start\n        -1 -> second_slice.end\n        input_list -> second_slice.list\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        \n        concat_node.result -> output_list\n    }\n\n    \n\n    instance(x: 0, y: 0) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_3a8e90\n\n        out(x: 746, y: 146, name: \"total\") property(Number) total_2ad0d5\n\n        instance(x: 150, y: 75) reduce_3a8e90 root.Std_k98ojb.Iteration.Reduce {}\n        list_3a8e90 -> reduce_3a8e90.items\n        0 -> reduce_3a8e90.initialValue\n        func() {\n            in(x: -185, y: -84, name: \"accumulated\") property(Number) acc_c750f1\n            in(x: -177, y: 22, name: \"current\") property(Number) current_3f11cd\n\n            out(x: 1072, y: -77, name: \"sum\") property(Number) sum_72dd2a\n\n            instance(x: 500, y: 0) add_8974a2 root.Std_k98ojb.Math.Add {}\n            acc_c750f1 -> add_8974a2.first\n            current_3f11cd -> add_8974a2.second\n            add_8974a2.result -> sum_72dd2a\n        } -> reduce_3a8e90.reducer\n        reduce_3a8e90.output -> total_2ad0d5\n    }\n\n    \n\n    instance(x: -150, y: 100) array_sum_instance root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if given integer is a prime number.\") is_prime {\n        in(x: -450, y: -213, name: \"n\") property(Number) n\n        in(x: -450, y: -421, name: \"execute\") trigger() execute\n\n        out(x: 600, y: 270, name: \"output\") property(Bool) output\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n\n        \n        instance edge_case root.Std_k98ojb.Std.IfExpression {\n            expression = \"n < 2\"\n        }\n\n        \n        variable is_prime_result: Bool\n\n        \n        setter_false:\n        instance set_false root.Std_k98ojb.setter_41e4ad = is_prime_result {\n            new_value = false\n        }\n        getter_38583a.value -> output\n\n        edge_case.then -> set_false.execute\n        set_false.continue -> continue_d9efd7\n\n        \n        instance pow_node root.Std_k98ojb.Math.Pow {\n            first = n\n            second = 0.5\n        }\n\n        instance floor_node root.Std_k98ojb.Math.Floor {\n            input = pow_node.output\n        }\n\n        instance generate_range root.Std_k98ojb.List.GenerateRange {\n            start = 2\n            end = floor_node.output\n        }\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items = generate_range.list\n            context = n\n        }\n\n        func() {  \n            in current (d) property(Number)\n            in context (n_val) property(Number)\n\n            instance modulo root.Std_k98ojb.Math.Modulo {\n                value = n_val\n                divisor = d\n            }\n            \n            instance equal_zero root.Std_k98ojb.Logic.Equal {\n                left = modulo.result\n                right = 0\n            }\n\n            out result: equal_zero.result\n        } -> find_divisor.handler\n\n        \n        instance is_not_null root.Std_k98ojb.Logic.NotEqual {\n            left = find_divisor.item\n            right = Null\n        }\n\n        instance final_if root.Std_k98ojb.Std.If {\n            predicate = is_not_null.result  \n        }\n\n        \n        final_if.then -> set_false.execute\n\n        \n        setter_true:\n        instance set_true root.Std_k98ojb.setter_41e4ad = is_prime_result {\n            new_value = true\n        }\n        set_true.continue -> continue_d9efd7\n        set_true.new_value -> output\n\n        \n        edge_case.else -> generate_range.start\n        generate_range.done -> find_divisor.execute\n        find_divisor.done -> is_not_null.input\n        final_if.else -> set_true.execute\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks whether two integers have opposite signs.\") check_opposite_signs {\n        in(x: -250, y: 100, name: \"a\") property(Number) a_input\n        in(x: -230, y: 150, name: \"b\") property(Number) b_input\n\n        out(x: 400, y: 125, name: \"output\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) condition root.Std_k98ojb.Std.IfExpression {\n            expression: \"(a > 0 && b < 0) || (a < 0 && b > 0)\"\n        }\n        \n        a_input -> condition.gen_0\n        b_input -> condition.gen_1\n        condition.value -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 200) check_opposite_signs_instance root.main.check_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -205, y: -34, name: \"number\") property(Number) input_num\n        out(x: 389, y: -37, name: \"result\") property(Bool) output_bool\n\n        instance(x: 100, y: -40) modulo_6d2a5c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: -40) equal_b3e7f8 root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_6d2a5c.value\n        11 -> modulo_6d2a5c.divisor\n        modulo_6d2a5c.result -> equal_b3e7f8.left\n        0 -> equal_b3e7f8.right\n        equal_b3e7f8.result -> output_bool\n    }\n\n    \n\n    instance(x: -149, y: 11) is_divisible_by_11_node root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 170, y: 40) replace_306f69 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_306f69.input\n        search_char -> replace_306f69.search\n        replace_char -> replace_306f69.replace\n        \n        replace_306f69.output -> output_str\n    }\n\n    \n\n    instance(x: 175, y: -25) replace_chars_695b5e root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerConverter {\n        in(x: -240, y: 50, name: \"input\") property(String) input_ai\n        out(x: 300, y: 60, name: \"output\") property(String) output_ai\n\n        instance(x: 100, y: 55) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 20) converterInstance root.main.ToLowerConverter {}\n\n}"
            ],
            "16": [
                "module() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") product_of_unique {\n        in(x: -300, y: 50) property(List) input_list\n        out(x: 600, y: 200) property(Number) output\n\n        \n        data_instance(x: 100, y: 50) empty_list = []\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: input_list\n            initial_value: empty_list\n            handler: unique_element_handler\n        }\n\n        \n        data_instance(x: 200, y: 150) const_1 = 1\n\n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: const_1\n            handler: multiply_handler\n        }\n\n        \n        reduce_product.output -> output\n    }\n\n    \n    func() unique_element_handler {\n        in(x: -200, y: 50) property(List) acc\n        in(x: -150, y: 100) property(Number) current\n\n        out(x: 300, y: 100) property(List) new_acc\n\n        \n        instance contains_node root.Std_k98ojb.List.Contains {\n            list: acc\n            item: current\n        }\n\n        \n        instance not_node root.Std_k98ojb.Logic.Not {\n            input: contains_node.is_contained\n        }\n\n        \n        instance if_node root.Std_k98ojb.Std.If {\n            input: not_node.result\n        }\n\n        \n        instance add_node root.Std_k98ojb.List.Add on if_node.then {\n            list: acc\n            item: current\n        }\n        add_node.listWithItem -> new_acc\n\n        \n        instance identity_node root.Std_k98ojb.Identity on if_node.else {\n            input: acc\n        }\n        identity_node.output -> new_acc\n    }\n\n    \n    func() multiply_handler {\n        in(x: -100, y: 50) property(Number) acc\n        in(x: -50, y: 100) property(Number) current\n\n        out(x: 200, y: 100) property(Number) result\n\n        \n        instance mul_node root.Std_k98ojb.Math.Mul {\n            first: acc\n            second: current\n        }\n        mul_node.result -> result\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds dissimilar elements between two lists.\") dissimilar_elements {\n        in(x: -200, y: -100, name: \"list1\") property(List) list1_8f3a\n        in(x: -200, y: 50, name: \"list2\") property(List) list2_8f3b\n\n        out(x: 400, y: -25, name: \"result\") property(List) result_8f3c\n\n        instance(x: 100, y: -100) diff_AB root.Std_k98ojb.Sets.Difference {}\n        list1_8f3a -> diff_AB.left\n        list2_8f3b -> diff_AB.right\n        \n        instance(x: 100, y: 50) diff_BA root.Std_k98ojb.Sets.Difference {}\n        list2_8f3b -> diff_BA.left\n        list1_8f3a -> diff_BA.right\n\n        instance(x: 300, y: -25) concat_8f3d root.Std_k98ojb.List.Concat {}\n        diff_AB.difference -> concat_8f3d.list_a\n        diff_BA.difference -> concat_8f3d.list_b\n        concat_8f3d.concatenated -> result_8f3c\n    }\n\n    \n\n    instance(x: 10, y: -5) dissimilar_elements_node root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50) property(List) list_in\n        in(x: -180, y: 150) property(Number) rotation_num\n\n        out(x: 600, y: 100) property(List) result_out\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        list_in -> length_node.list\n        \n        instance(x: 200, y: 70) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotation_num -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        instance(x: 400, y: 30) slice1_node root.Std_k98ojb.List.Slice {}\n        list_in -> slice1_node.list\n        0 \u2192 slice1_node.start\n        sub_node.result \u2192 slice1_node.end\n\n        instance(x: 400, y: 120) slice2_node root.Std_k98ojb.List.Slice {}\n        list_in -> slice2_node.list\n        sub_node.result \u2192 slice2_node.start\n        -1 \u2192 slice2_node.end\n\n        instance(x: 550, y: 75) concat_node root.Std_k98ojb.List.Concat {}\n        slice2_node.slice \u2192 concat_node.left\n        slice1_node.slice \u2192 concat_node.right\n\n        concat_node.result \u2192 result_out\n    }\n\n    \n    \n    instance(x: -30, y: 45) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -240, y: 150, name: \"list\") property(List) list_8d3b0a\n\n        out(x: 796, y: 150, name: \"total\") property(Number) total_0c3e1f\n\n        instance(x: 240, y: 150) reduce_4e3d1a root.Std_k98ojb.Iteration.Reduce {}\n        list_8d3b0a -> reduce_4e3d1a.items\n        0 -> reduce_4e3d1a.initialValue\n\n        func() {\n            in(x: -200, y: -50, name: \"accumulated\") property(Number) acc_7c6f9a\n            in(x: -180, y: 50, name: \"current\") property(Number) current_3e4a2b\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) sum_5a7d8c\n\n            instance(x: 0, y: 0) add_1a9f3c root.Std_k98ojb.Math.Add {}\n            acc_7c6f9a -> add_1a9f3c.first\n            current_3e4a2b -> add_1a9f3c.second\n            add_1a9f3c.result -> sum_5a7d8c\n        } -> reduce_4e3d1a.reducer\n\n        reduce_4e3d1a.output -> total_0c3e1f\n    }\n\n    \n\n    instance(x: -272, y: 115) array_sum_6c92e0 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") IsPrime {\n        in(x: -450, y: -213, name: \"n\") property(Number) n_input\n        in(x: -480, y: -190, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: -200, name: \"isPrime\") property(Bool) is_prime_output\n        out(x: 700, y: -150, name: \"continue\") trigger() continue_out\n\n        \n        instance(x: -300, y: -180) if_edge root.Std.IfExpression {\n            expression: \"n_input < 2\"\n        }\n        n_input -> if_edge.gen_0\n        execute_trigger -> if_edge.execute\n\n        \n        setter_false = setter(x: -200, y: -180) root.setter_isPrime {\n            property: is_prime_output,\n            new_value: false\n        }\n        if_edge.then -> setter_false.execute\n\n        \n        instance(x: -150, y: 0) pow_node root.Math.Pow {\n            first: n_input,\n            second: 0.5\n        }\n\n        instance(x: -100, y: 50) floor_node root.Math.Floor {\n            input: pow_node.result\n        }\n\n        \n        instance(x: 0, y: 100) generate_range root.List.GenerateRange {\n            from: 2,\n            to: floor_node.output\n        }\n\n        \n        instance(x: 150, y: 0) find_divisor root.Iteration.Find {\n            items: generate_range.list,\n\n            handler: func() {\n                in(x: -30, y: -20, name: \"current\") property(Number) current_in\n\n                instance modulo_node root.Math.Modulo {\n                    value: n_input,\n                    divisor: current_in\n                }\n\n                instance equal_zero root.Logic.Equal {\n                    left: modulo_node.result,\n                    right: 0\n                }\n\n                out(x: 150, y: -20, name: \"predicate\") property(Bool) predicate_out\n                equal_zero.result -> predicate_out\n            }\n        }\n\n        \n        instance check_null root.Std.IfExpression {\n            expression: \"find_divisor.item == null\"\n        }\n        find_divisor.item -> check_null.gen_0\n\n        \n        setter_true = setter(x: 250, y: -100) root.setter_isPrime {\n            property: is_prime_output,\n            new_value: true\n        }\n\n        setter_false_final = setter(x: 300, y: -100) root.setter_isPrime {\n            property: is_prime_output,\n            new_value: false\n        }\n\n        check_null.then -> setter_true.execute\n        check_null.else -> setter_false_final.execute\n\n        \n        joiner_node root.Join {\n            inputs: [setter_true.continue, setter_false_final.continue]\n            outputs: continue_out\n        }\n        \n        \n        if_edge.else -> pow_node.input\n    }\n\n    instance(x: 0, y: 0) IsPrime_instance root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") checkOppositeSigns {\n        in(x:-200, y:50, name:\"a\") property(Number) a\n        in(name:\"b\") property(Number) b\n\n        out(x: 300, y:50, name:\"output\") property(Bool)\n\n        instance(x:100,y:100,name: \"if_expression\") ifExpression root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n\n        a -> if_expression.a\n        b -> if_expression.b\n\n        if_expression.value -> output\n    }\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11.\") check_divisible_by_11 {\n        in(x: -234, y: -50, name: \"number\") property(Number) input_number\n        out(x: 387, y: 65, name: \"result\") property(Bool) output_result\n\n        instance(x: 100, y: -25) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 40) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_number -> modulo_node.value\n        11 -> modulo_node.divisor\n        modulo_node.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_result\n    }\n\n    \n\n    instance(x: -150, y: 20) check_div_11 root.main.check_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_0\n        in(x: -150, y: 40, name: \"search\") property(String) search_str\n        in(x: -170, y: 80, name: \"replace\") property(String) replace_with\n\n        out(x: 600, y: 0, name: \"output\") property(String) output_0\n\n        instance(x: 350, y: 40) replacer_e2f1a9 root.Std_k98ojb.Strings.Replace {}\n        \n        input_0 -> replacer_e2f1a9.input\n        search_str -> replacer_e2f1a9.search\n        replace_with -> replacer_e2f1a9.replace\n        \n        replacer_e2f1a9.output -> output_0\n    }\n\n    \n\n    instance(x: 150, y: -50) replace_chars_inst root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Convert a given string to lower case.\") ToLower {\n        in(x: -240, y: 69, name: \"input\") property(String) input_str\n        out(x: 340, y: 77, name: \"output\") property(String) output_str\n\n        instance(x: 150, y: 70) tolower_8f2a root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_8f2a.input\n        tolower_8f2a.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) converter_instance root.main.ToLower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -320, y: 54, name: \"list\") property(List) input_list\n        out(x: 814, y: 65, name: \"product\") property(Number) output_ai\n\n        instance(x: -407, y: -19) empty_list_node root.Std_k98ojb.List.Empty {}\n        \n        \n        instance(x: -243, y: 146) reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items = input_list,\n            initial_value = empty_list_node.list\n        }\n        func() handler_unique {\n            in(x: -50, y: 76, name: \"acc\") property(List) acc_23c1d4\n            in(x: 23, y: 198, name: \"current\") property(Number) current_ea7b8e\n\n            out(x: 230, y: 250, name: \"\") property(List) newacc_6f5f6a\n\n            instance(x: -43, y: 134) contains_3c9d7b root.Std_k98ojb.List.Contains {\n                list = acc_23c1d4,\n                item = current_ea7b8e\n            }\n            \n            instance(x: 60, y: 151) not_contain_6f5d42 root.Std_k98ojb.Logic.Not { input = contains_3c9d7b.is_contained }\n\n            instance(x: -87, y: 210) if_node_4a3e5e root.Std_k98ojb.Std.If {\n                input = not_contain_6f5d42.output\n            }\n            \n            \n            instance(x: 120, y: 220) add_list_7c3b1a root.Std_k98ojb.List.Add {\n                list = acc_23c1d4,\n                item = current_ea7b8e\n            }\n            \n            \n            if_node_4a3e5e.then \u2192 add_list_7c3b1a.execute\n\n            \n            instance(x: 20, y: 290) selector root.Std_k98ojb.Std.If {\n                input = false \n            }\n            \n            add_list_7c3b1a.listWithItem \u2192 newacc_6f5f6a\n            acc_23c1d4 \u2192 selector.else_input\n            \n            selector.output \u2192 newacc_6f5f6a \n        } \u2192 reduce_unique.handler\n        \n        \n        instance(x: 0, y: 300) initial_value root.Std_k98ojb.Math.Expression {\n            expression = \"1\"\n        }\n        \n        instance(x: 245, y: 367) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items = reduce_unique.result,\n            initial_value = initial_value.result\n        }\n        \n        func() handler_product {\n            in(x: -20, y: 345, name: \"acc\") property(Number) acc_7a6c1d\n            in(x: 30, y: 380, name: \"current\") property(Number) current_f2e9b3\n\n            out(x: 200, y: 420, name: \"\") property(Number) newacc_5f7a6c\n            \n            instance multiply_1d3a8 root.Std_k98ojb.Math.Mul {\n                first = acc_7a6c1d,\n                second = current_f2e9b3\n            }\n            \n            multiply_1d3a8.result \u2192 newacc_5f7a6c\n        } \u2192 reduce_product.handler\n        \n        reduce_product.result \u2192 output_ai\n    }\n\n    instance(x: 100, y: -50) product_func root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds elements present in either of the two lists but not both.\") dissimilar_elements {\n        in(x: -203, y: -154, name: \"listA\") property(List) list_a\n        in(x: -203, y: 30, name: \"listB\") property(List) list_b\n\n        out(x: 300, y: -60, name: \"result\") property(List) result_list\n\n        instance(x: 50, y: -100) difference_a root.Std_k98ojb.Sets.Difference {}\n        instance(x: 50, y: 50) difference_b root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 25) concat_7a4dad root.Std_k98ojb.List.Concat {}\n\n        list_a -> difference_a.left\n        list_b -> difference_a.right\n        list_b -> difference_b.left\n        list_a -> difference_b.right\n\n        difference_a.difference -> concat_7a4dad.first_list\n        difference_b.difference -> concat_7a4dad.second_list\n\n        concat_7a4dad.concatenated -> result_list\n    }\n\n    \n\n    instance(x: 0, y: -100) dissimilar_elements_node root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 100, name: \"shift\") property(Number) shift_amount\n\n        out(x: 600, y: 75, name: \"rotatedList\") property(List) output_list\n\n        instance(x: 0, y: 0) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 150, y: 30) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 0) split_point_sub root.Std_k98ojb.Math.Sub {}\n        instance(x: 450, y: -50) left_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 450, y: 100) right_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        input_list -> length_node.list\n        shift_amount -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        split_point_sub.first <- length_node.length\n        split_point_sub.second <- modulo_node.result\n\n        left_slice.start <- 0\n        left_slice.end <- split_point_sub.result\n        input_list -> left_slice.list\n\n        right_slice.start <- split_point_sub.result\n        right_slice.end <- -1\n        input_list -> right_slice.list\n\n        concat_node.left <- right_slice.slice\n        concat_node.right <- left_slice.slice\n        concat_node.result -> output_list\n    }\n\n    \n\n    instance(x: 0, y: 200) rotate_inst root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -250, y: 43, name: \"list\") property(List) list_1d8a2e\n\n        out(x: 790, y: 56, name: \"total\") property(Number) total_8b7c0f\n\n        instance(x: 230, y: 54) reduce_e2b7a9 root.Std_k98ojb.Iteration.Reduce {}\n        list_1d8a2e -> reduce_e2b7a9.items\n        0 -> reduce_e2b7a9.initialValue\n        func() {\n            in(x: -164, y: -35, name: \"accumulated\") property(Number) accumulated_3f4c7b\n            in(x: -181, y: 28, name: \"current\") property(Any) current_90d3a6\n\n            out(x: 771, y: -57, name: \"sum\") property(Number) sum_ea5e4c\n\n            instance(x: 135, y: -4) add_8b2f6b root.Std_k98ojb.Math.Add {}\n            accumulated_3f4c7b -> add_8b2f6b.first\n            current_90d3a6 -> add_8b2f6b.second\n            add_8b2f6b.result -> sum_ea5e4c\n        } -> reduce_e2b7a9.reducer\n        reduce_e2b7a9.output -> total_8b7c0f\n    }\n\n    \n\n    instance(x: -13, y: 4) array_sum_ba0d6d root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks whether a given integer is a prime number.\") IsPrime {\n        in(x: -500, y: -400, name: \"n\") property(Number) n_input\n        in(x: -600, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 800, y: -300, name: \"output\") property(Bool) output_bool\n        out(x: 900, y: 200, name: \"continue\") trigger() continue_out\n\n        \n        instance(x: -450,y:-350,name=\"Check n < 2\") lt_two root.Std_k98ojb.Math.LessThanOrEqual {}\n            n_input \u2192 lt_two.first\n            1 \u2192 lt_two.second\n\n        instance(x: -350,y:-300) if_lt2 root.Std_k98ojb.Std.If {}\n            lt_two.result \u2192 if_lt2.predicate\n            execute_trigger \u2192 if_lt2.execute\n\n        \n        setter(x: -250,y:-150,name=\"Set False\") setter_false root.main.setter_f = output_bool {\n            new_value \u2190 False\n            if_lt2.then \u2192 execute\n            continue_out \u2190 continue\n        }\n\n        \n        instance(x: -300,y:-200) eq_two root.Std_k98ojb.Logic.Equal {}\n            n_input \u2192 eq_two.left\n            2 \u2192 eq_two.right\n\n        instance(x: -250,y:-150) if_eq2 root.Std_k98ojb.Std.If {}\n            eq_two.result \u2192 if_eq2.predicate\n            if_lt2.else \u2192 execute\n\n        \n        setter(x: -150,y:-50,name=\"Set True\") setter_true root.main.setter_t = output_bool {\n            new_value \u2190 True\n            if_eq2.then \u2192 execute\n            continue_out \u2190 continue\n        }\n\n        \n        instance(x: -100,y:-50) mod_two_node root.Std_k98ojb.Math.Modulo {}\n            n_input \u2192 mod_two_node.value\n            2 \u2192 mod_two_node.divisor\n\n        instance(x: 0,y:-50,name=\"Mod ==0?\") equal_zero root.Std_k98ojb.Logic.Equal {}\n            mod_two_node.result \u2192 equal_zero.left\n            0 \u2192 equal_zero.right\n\n        instance(x: 100,y:-50) if_even root.Std_k98ojb.Std.If {}\n            equal_zero.result \u2192 if_even.predicate\n            if_eq2.else \u2192 execute\n\n        \n        setter(x: 200,y:-50,name=\"Set False Even\") setter_f_even root.main.setter_f = output_bool {\n            new_value \u2190 False\n            if_even.then \u2192 execute\n            continue_out \u2190 continue\n        }\n\n        \n        instance(x: 250,y:100) compute_sqrt root.Std_k98ojb.Math.Pow {}\n            n_input \u2192 compute_sqrt.value\n            0.5 \u2192 compute_sqrt.exponent\n\n        instance(x:300,y:100,name=\"Floor sqrt\") floor_node root.Std_k98ojb.Math.Floor {}\n            compute_sqrt.output \u2192 floor_node.input\n\n        \n        instance(x:350,y:100) gen_range root.Std_k98ojb.List.GenerateRange {}\n            3 \u2192 gen_range.from\n            floor_node.output \u2192 gen_range.to\n\n        \n        func() handler_filter_odds {\n            in(x:-10,y:0,name=\"current\") property(Number) current_1\n            out(x:150,y:0,name=\"include\") property(Bool) include_out\n\n            instance(x:30,y:0) mod_two_current root.Std_k98ojb.Math.Modulo {}\n                current_1 \u2192 mod_two_current.value\n                2 \u2192 mod_two_current.divisor\n\n            instance(x:60,y:0,name=\"% !=0?\") not_eq_zero root.Std_k98ojb.Logic.NotEqual {}\n                mod_two_current.result \u2192 not_eq_zero.left\n                0 \u2192 not_eq_zero.right\n\n            include_out \u2190 not_eq_zero.result\n        } -> filter_odds_hndlr\n\n        instance(x:450,y:150) filter_odds_list root.Std_k98ojb.Iteration.Filter {}\n            gen_range.list \u2192 filter_odds_list.items\n            handler: filter_odds_hndlr\n\n        \n        func() handler_check_divisor {\n            in(x:-10,y:0,name=\"current\") property(Number) current_i\n            out(x:150,y:0,name=\"divides?\") property(Bool) divides_out\n\n            instance(x:30,y:0) mod_n root.Std_k98ojb.Math.Modulo {}\n                n_input \u2192 mod_n.value\n                current_i \u2192 mod_n.divisor\n\n            instance(x:60,y:0,name=\"% ==0?\") eq_zero_mod root.Std_k98ojb.Logic.Equal {}\n                mod_n.result \u2192 eq_zero_mod.left\n                0 \u2192 eq_zero_mod.right\n\n            divides_out \u2190 eq_zero_mod.result\n        } -> check_div_hndlr\n\n        instance(x:550,y:200) filter_divisors root.Std_k98ojb.Iteration.Filter {}\n            filter_odds_list.output_list \u2192 filter_divisors.items\n            handler: check_div_hndlr\n\n        \n        instance(x:650,y:250,name=\"List is Empty?\") is_empty root.Std_k98ojb.List.IsEmpty {}\n            filter_divisors.output_list \u2192 is_empty.list\n\n        \n        setter(x:750,y:300,name=\"Final Result Setter\") final_setter root.main.setter_final = output_bool {\n            new_value \u2190 is_empty.result\n            filter_divisors.done \u2192 execute\n            continue_out \u2190 continue\n        }\n\n        \n        if_even.else \u2192 compute_sqrt.execute\n\n        \n    }\n    \n    instance(x: 100, y: -50) IsPrime_inst root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") opposite_sign {\n        in(x: -250, y: 0, name:\"a\") property(Number) a_3f4d\n        in(x: -180, y: 0, name:\"b\") property(Number) b_7a1e\n\n        out(x: 300, y: 0, name:\"output\") property(Bool) output_9c2a\n\n        instance(x: 50, y: 0) multiply_8d6f root.Std_k98ojb.Math.Mul {}\n        a_3f4d -> multiply_8d6f.first\n        b_7a1e -> multiply_8d6f.second\n\n        instance(x: 200, y: 0) greaterthan_5a3c root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greaterthan_5a3c.left\n        multiply_8d6f.result -> greaterthan_5a3c.right\n\n        greaterthan_5a3c.result -> output_9c2a\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_sign_eb0e root.main.opposite_sign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_node.value\n        modulo_node.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -100, y: 0) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace_with\") property(String) replace_val\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_val -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_chars_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) to_lower_flow_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a list.\") unique_product {\n        in(x: -200, y: 100, name: \"list\") property(List) list_ai\n        out(x: 500, y: 200, name: \"product\") property(Number) product_ai\n\n        instance empty_list List.Empty {}\n        \n        instance reduce_unique Iteration.Reduce {\n            initial_value: empty_list.list\n            items: list_ai\n            handler: [handler1]\n        }\n\n        instance const_one Math.Constant { value: 1 }\n        \n        instance reduce_product Iteration.Reduce {\n            initial_value: const_one.output\n            items: reduce_unique.output_list\n            handler: [handler2]\n        }\n\n        reduce_product.output -> product_ai\n    }\n\n    func() handler1 {\n        in acc: List, item: Number\n        out new_acc: List\n\n        instance contains_ List.Contains {\n            list: acc\n            item: item\n        }\n\n        instance if_node Std.If {\n            input: contains_.is_contained\n        }\n\n        instance add_ List.Add {\n            list: acc\n            item: item\n        }\n\n        \n        data_instance then_data = acc\n        if_node.then -> then_data.execute\n        then_data.value -> new_acc\n\n        \n        if_node.else -> add_.execute\n        add_.listWithItem -> new_acc\n    }\n\n    func() handler2 {\n        in acc: Number, item: Number\n        out new_acc: Number\n\n        instance mul Math.Mul {\n            first: acc\n            second: item\n        }\n        \n        mul.result -> new_acc\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -250, y: -143, name: \"list1\") property(List) list1_8e7a3d\n        in(x: -269, y: 13, name: \"list2\") property(List) list2_7b8c4f\n\n        out(x: 500, y: -130, name: \"result\") property(List) result_9e3d5a\n\n        instance(x: -60, y: -130) concat_3e3d5a root.Std_k98ojb.List.Concat {}\n        instance(x: -240, y: -70) diff1_8e7a3d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 60, y: -70) diff2_7b8c4f root.Std_k98ojb.Sets.Difference {}\n\n        list1_8e7a3d -> diff1_8e7a3d.left\n        list2_7b8c4f -> diff1_8e7a3d.right\n\n        list2_7b8c4f -> diff2_7b8c4f.left\n        list1_8e7a3d -> diff2_7b8c4f.right\n\n        diff1_8e7a3d.difference -> concat_3e3d5a.listA\n        diff2_7b8c4f.difference -> concat_3e3d5a.listB\n\n        concat_3e3d5a.concatenated -> result_9e3d5a\n    }\n\n    \n\n    instance(x: -10, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50) property(List) input_list\n        in(x: -180, y: 100) property(Number) rotation_count\n\n        out(x: 600, y: 75) property(List) output_list\n\n        instance(x: 20, y: 30) get_length root.Std_k98ojb.List.Length {}\n        input_list -> get_length.list\n\n        instance(x: 150, y: 40) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotation_count -> modulo_node.value\n        get_length.length -> modulo_node.divisor\n\n        instance(x: 280, y: 35) subtract_node root.Std_k98ojb.Math.Sub {}\n        get_length.length -> subtract_node.first\n        modulo_node.result -> subtract_node.second\n\n        instance(x: 410, y: 25) first_slice root.Std_k98ojb.List.Slice {}\n        input_list -> first_slice.list\n        0 -> first_slice.start\n        subtract_node.result -> first_slice.end\n\n        instance(x: 410, y: 120) second_slice root.Std_k98ojb.List.Slice {}\n        input_list -> second_slice.list\n        subtract_node.result -> second_slice.start\n        -1 -> second_slice.end\n\n        instance(x: 600, y: 75) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> output_list\n    }\n\n    \n\n    instance(x: -240, y: 130) rotate_right_6f7e5d root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_0e8d7a\n\n        out(x: 659, y: 143, name: \"sum\") property(Number) sum_4b7c3f\n\n        instance(x: 200, y: 143) reduce_7e3a1d root.Std_k98ojb.Iteration.Reduce {}\n        list_0e8d7a -> reduce_7e3a1d.items\n        0 -> reduce_7e3a1d.initialValue\n        func() {\n            in(x: -245, y: -65, name: \"accumulated\") property(Number) accumulated_9b5c3f\n            in(x: -245, y: 28, name: \"current\") property(Number) current_7a1d0e\n\n            out(x: 400, y: -20, name: \"sum\") property(Number) sum_6e9b2c\n\n            instance(x: 150, y: 0) add_8f3d2a root.Std_k98ojb.Math.Add {}\n            accumulated_9b5c3f -> add_8f3d2a.first\n            current_7a1d0e -> add_8f3d2a.second\n            add_8f3d2a.result -> sum_6e9b2c\n        } -> reduce_7e3a1d.reducer\n        reduce_7e3a1d.output -> sum_4b7c3f\n    }\n\n    \n\n    instance(x: -250, y: 143) array_sum_8e3a1d root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -450, y: 0, name: \"execute\") trigger() execute_trigger\n        in(x: -300, y: 0, name: \"n\") property(Number) n_input\n\n        out(x: 800, y: 0, name: \"output\") property(Bool) output_bool\n\n        \n        \n        \n        instance(x: -350, y: 100) less_than_two root.Std_k98ojb.Math.LessThan {}\n        n_input -> less_than_two.first\n        2 -> less_than_two.second\n\n        instance(x: -250, y: 100) if_less_than_two root.Std_k98ojb.Std.If {}\n        less_than_two.result -> if_less_than_two.predicate\n        \n        \n        setter(x: 300, y: 100) set_false = output_bool { new_value: false }\n        if_less_than_two.then -> set_false.execute\n\n        \n        instance(x: -250, y: 200) equal_to_two root.Std_k98ojb.Math.Equal {}\n        n_input -> equal_to_two.first\n        2 -> equal_to_two.second\n        \n        instance(x: -150, y: 200) if_is_two root.Std_k98ojb.Std.If {}\n        equal_to_two.result -> if_is_two.predicate\n\n        \n        setter(x: 300, y: 200) set_true = output_bool { new_value: true }\n        if_is_two.then -> set_true.execute\n        \n        \n        instance(x: -150, y: 300) mod_by_2 root.Std_k98ojb.Math.Modulo {}\n        n_input -> mod_by_2.value\n        2 -> mod_by_2.divisor\n\n        instance(x: -50, y: 300) equal_zero_mod root.Std_k98ojb.Math.Equal {}\n        mod_by_2.result -> equal_zero_mod.first\n        0 -> equal_zero_mod.second\n        \n        instance(x: 50, y: 300) if_even root.Std_k98ojb.Std.If {}\n        equal_zero_mod.result -> if_even.predicate\n\n        \n        setter(x: 300, y: 300) set_false_even = output_bool { new_value: false }\n        if_even.then -> set_false_even.execute\n        \n        \n        instance(x: -450, y: 400) sqrt_calc root.Std_k98ojb.Math.Pow {}\n        n_input -> sqrt_calc.base\n        0.5 -> sqrt_calc.exponent\n\n        instance(x: -350, y: 400) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        sqrt_calc.result -> floor_sqrt.input\n        \n        \n        instance(x: -250, y: 450) generate_divisors root.Std_k98ojb.List.GenerateRange {}\n        3 -> generate_divisors.from\n        floor_sqrt.output -> generate_divisors.to\n\n        \n        func() find_handler {\n            in(x: -10, y: 0, name: \"current\") property(Number) current_element\n            \n            out(x: 200, y: 0, name: \"found\") property(Bool) found_result\n\n            instance(x: 50, y: 0) mod_check root.Std_k98ojb.Math.Modulo {}\n            n_input -> mod_check.value\n            current_element -> mod_check.divisor\n            \n            instance(x: 150, y: 0) is_divisible root.Std_k98ojb.Math.Equal {}\n            mod_check.result -> is_divisible.first\n            0 -> is_divisible.second\n\n            is_divisible.result -> found_result\n        } -> find_handler\n        \n        instance(x: -150, y: 450) find_divisor root.Std_k98ojb.Iteration.Find {}\n        generate_divisors.list -> find_divisor.items\n        find_handler -> find_divisor.handler\n\n        \n        instance(x: -50, y: 500) invert_result root.Std_k98ojb.Logic.Not {}\n        find_divisor.is_found -> invert_result.input\n        \n        \n        setter(x: 200, y: 500) set_final = output_bool { new_value: invert_result.result }\n        find_divisor.done -> set_final.execute\n\n        \n        execute_trigger -> if_less_than_two.execute\n        if_less_than_two.else -> equal_to_two.first\n        equal_to_two.output -> if_is_two.execute\n        if_is_two.else -> mod_by_2.value\n        mod_by_2.divisor -> equal_zero_mod.second\n        equal_zero_mod.result -> if_even.predicate\n        if_even.else -> sqrt_calc.base\n        floor_sqrt.output -> generate_divisors.to\n        generate_divisors.list -> find_divisor.items\n    }\n\n    instance(x: -176, y: -38) IsPrime_Inst root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether two integers have opposite signs\") opposite_signs {\n        in(x: -200, y: 0, name: \"a\") property(Number) a\n        in(name: \"b\") property(Number) b\n\n        out(name: \"output\") property(Bool) output\n\n        instance EqualA root.Logic.Equal { left = a; right = 0 }\n        instance EqualB root.Logic.Equal { left = b; right = 0 }\n\n        instance EitherZero root.Logic.Or {\n            left = EqualA.result\n            right = EqualB.result\n        }\n\n        instance IfNode root.Std.If {\n            predicate = EitherZero\n            then -> SetFalse.execute\n            else -> ComputeSigns.execute\n        }\n\n        \n        setter(SetFalse) {\n            property: output\n            new_value = false\n            execute -> continue1\n        }\n\n        \n        instance APositive root.Math.GreaterThan { left = a; right = 0 }\n        instance BPositive root.Math.GreaterThan { left = b; right = 0 }\n\n        instance NotEqualSigns root.Logic.NotEqual {\n            left = APositive.result\n            right = BPositive.result\n        }\n\n        \n        setter(SetOutput) {\n            property: output\n            new_value = NotEqualSigns.result\n            execute -> continue2\n        }\n\n        \n        ComputeSigns -> APositive.execute\n        ComputeSigns -> BPositive.execute\n\n        \n        NotEqualSigns.result -> SetOutput.new_value\n    }\n\n    instance(x: 0, y: 0) opposite_signs_1 root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_node root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_node.value\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n        equal_node.result -> output_bool\n    }\n\n    \n\n    instance(x: -150, y: 20) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -250, y: 40, name: \"search\") property(String) search_char\n        in(x: -260, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 40, name: \"output\") property(String) output_str\n\n        instance(x: 150, y: 40) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_str -> replacer_7b3b7b.input\n        search_char -> replacer_7b3b7b.search\n        replace_char -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_chars_59bc6e root.main.replace_characters {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerConverter {\n        in(x: -240, y: 50, name: \"input\") property(String) input_ai\n        out(x: 300, y: 60, name: \"output\") property(String) output_ai\n\n        instance(x: 100, y: 55) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 20) converterInstance root.main.ToLowerConverter {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -300, y: 50, name:\"list\") property(List) list_ai\n        out(x: 400, y: 100, name:\"product\") property(Number) product_ai\n\n        instance(x: -200, y: 50) empty_list_node root.Std_k98ojb.List.Empty {}\n\n        instance(x: 0, y: 100) reduce_unique root.Iteration.Reduce {\n            items -> list_ai\n            initial_value <- empty_list_node.empty_list\n        }\n\n        func() handler_unique { \n            in(x: -250, y: 0, name:\"acc\") property(List) acc_in\n            in(x: -200, y: 50, name:\"current\") property(Number) current_in\n\n            out(x: 300, y: 0, name:\"new_list\") property(List) new_list_out\n\n            instance contains_node root.Std_k98ojb.List.Contains {\n                list <- acc_in\n                contains <- current_in\n            }\n\n            instance if_node root.Std_k98ojb.Std.If {\n                input <- contains_node.is_contained\n            }\n\n            acc_in -> new_list_out [if_node.then]\n\n            instance add_node root.Std_k98ojb.List.Add {\n                list <- acc_in\n                item <- current_in\n            }\n            add_node.listWithItem -> new_list_out [if_node.else]\n        } -> reduce_unique.handler\n\n        data_instance init_val = 1\n\n        instance(x: 200, y: 150) reduce_product root.Iteration.Reduce {\n            items <- reduce_unique.output_list\n            initial_value <- init_val\n        }\n\n        func() handler_product {\n            in(x: -200, y: 0, name:\"acc\") property(Number) acc_in\n            in(x: -150, y: 50, name:\"current\") property(Number) current_in\n\n            out(x: 300, y: 0, name:\"result\") property(Number) result_out\n\n            instance multiply_node root.Std_k98ojb.Math.Mul {\n                first <- acc_in\n                second <- current_in\n            }\n            multiply_node.result -> result_out\n        } -> reduce_product.handler\n\n        reduce_product.result -> product_ai\n    }\n\n    instance(x: 100, y: -50) unique_prod_node root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of two lists but not both.\") find_dissimilar {\n        in(x: -300, y: -150, name: \"listA\") property(List) listA_0x1\n        in(x: -290, y: 50, name: \"listB\") property(List) listB_0x2\n\n        out(x: 400, y: -50, name: \"result\") property(List) result_0x3\n\n        instance(x: 100, y: -100) diffAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 100) diffBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 0) concat_result root.Std_k98ojb.List.Concat {}\n\n        listA_0x1 -> diffAB.left\n        listB_0x2 -> diffAB.right\n\n        listB_0x2 -> diffBA.left\n        listA_0x1 -> diffBA.right\n\n        diffAB.difference -> concat_result.left\n        diffBA.difference -> concat_result.right\n\n        concat_result.concatenated -> result_0x3\n    }\n\n    \n\n    instance(x: 50, y: -20) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 150, name: \"rotations\") property(Number) rotations\n\n        out(x: 600, y: 100, name: \"output\") property(List) output_list\n\n        instance(x: 200, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 350, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 500, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 650, y: 100) slice1 root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 200) slice2 root.Std_k98ojb.List.Slice {}\n        instance(x: 700, y: 300) concat_node root.Std_k98ojb.List.Concat {}\n\n        input_list -> length_node.list\n        rotations -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        sub_node.result -> slice1.start\n        -1 -> slice1.end\n        input_list -> slice1.list\n\n        0 -> slice2.start\n        sub_node.result -> slice2.end\n        input_list -> slice2.list\n\n        slice1.slice -> concat_node.left\n        slice2.slice -> concat_node.right\n        concat_node.result -> output_list\n    }\n\n    \n\n    instance(x: -50, y: 50) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -240, y: 150, name: \"list\") property(List) list_8d3b0a\n\n        out(x: 796, y: 150, name: \"total\") property(Number) total_0c7e1f\n\n        instance(x: 240, y: 150) reduce_4e3a7c root.Std_k98ojb.Iteration.Reduce {}\n        list_8d3b0a -> reduce_4e3a7c.items\n        0 -> reduce_4e3a7c.initialValue\n        func() {\n            in(x: -150, y: 0, name: \"accumulated\") property(Number) accumulated_ai\n            in(x: -150, y: 50, name: \"current\") property(Number) current_ai\n\n            out(x: 200, y: 30, name: \"sum\") property(Number) sum_ai\n\n            instance(x: 50, y: 25) add_8e1d7a root.Std_k98ojb.Math.Add {}\n            accumulated_ai -> add_8e1d7a.first\n            current_ai -> add_8e1d7a.second\n            add_8e1d7a.result -> sum_ai\n        } -> reduce_4e3a7c.reducer\n        reduce_4e3a7c.output -> total_0c7e1f\n    }\n\n    \n\n    instance(x: -256, y: 150) array_sum_9b8d2a root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") is_prime {\n        in(x: -450, y: -300, name: \"n\") property(Number) n_input\n        in(x: -480, y: -270, name: \"execute\") trigger() execute_in\n\n        out(x: 600, y: -150, name: \"output\") property(Bool) output_out\n\n        \n        instance lte_node root.Std_k98ojb.Math.LessThanOrEqual {\n            left = n_input,\n            right = 1\n        }\n\n        \n        instance pow_node root.Std_k98ojb.Math.Pow {\n            x = n_input,\n            y = 0.5\n        }\n        \n        instance floor_node root.Std_k98ojb.Math.Floor {\n            input = pow_node.result\n        }\n\n        \n        instance gen_range root.Std_k98ojb.List.GenerateRange {\n            from = 2,\n            to = floor_node.output\n        }\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items = gen_range.list,\n\n            handler: func() {\n                in current property(Number) _current\n                in _index property(Number) _index  \n                in context property(Number) _context\n\n                instance modulo root.Std_k98ojb.Math.Modulo {\n                    value = _context,\n                    divisor = _current\n                }\n\n                instance equal_zero root.Std_k98ojb.Logic.Equal {\n                    left = modulo.result,\n                    right = 0\n                }\n\n                out result property(Bool) equal_zero.result\n            },\n            \n            context = n_input \n        }\n\n        \n        instance null_constant root.Std_k98ojb.Constant { value = null }\n        \n        instance not_equal_node root.Std_k98ojb.Logic.NotEqual {\n            left = find_divisor.item,\n            right = null_constant.value\n        }\n\n        \n        instance not_node root.Std_k98ojb.Logic.Not {\n            input = not_equal_node.result\n        }\n\n        \n        instance if_edge_case root.Std_k98ojb.Std.IfExpression {\n            condition = lte_node.result,\n            then_value = false,\n            else_value = not_node.output\n        }\n\n        \n        getter(output_out) value: if_edge_case.then_or_else\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") opposite_signs {\n        in(x: -250, y: -143, name: \"a\") property(Number) a_8e7d1c\n        in(x: -244, y: 6, name: \"b\") property(Number) b_f99d3f\n\n        out(x: 395, y: -102, name: \"output\") property(Bool) output_e9a1e7\n\n        instance(x: 86, y: -104) ifexpression_4c61b3 root.Std_k98ojb.Std.IfExpression {\n            expression: \"left * right < 0\"\n        }\n        a_8e7d1c -> ifexpression_4c61b3.gen_0\n        b_f99d3f -> ifexpression_4c61b3.gen_1\n        ifexpression_4c61b3.value -> output_e9a1e7\n    }\n\n    \n\n    instance(x: -158, y: 2) opposite_signs_c0b5db root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") check_divisible_by_11 {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 80, y: 100) modulo_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11 \n        }\n        instance(x: 250, y: 100) equal_node root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        modulo_11.result -> equal_node.left\n        0 -> equal_node.right\n        equal_node.result -> output_bool\n    }\n\n    \n\n    instance(x: -84, y: 59) check_divisible_11_node root.main.check_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_with\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replace_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_1.input\n        search_char -> replace_1.search\n        replace_with -> replace_1.replace\n        \n        replace_1.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_chars_e54b7f root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Convert a given string to lowercase.\") ToLowerCase {\n        in(x: -240, y: 69, name: \"input\") property(String) input_ai\n        out(x: 340, y: 58, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) convert_lowercase_node root.main.ToLowerCase {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a given list.\") product_unique_numbers {\n        in(x: -300, y: 50, name: \"list\") property(List) input_list\n        out(x: 800, y: 200, name: \"product\") property(Number) output_product\n\n        \n        instance(x: -100, y: 50) reduce_unique root.Std_k98ojb.Iteration.Reduce {}\n        \n        data_instance(x: -200, y: -30) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        func() {\n            in(x: 50, y: 0, name: \"current_element\") property(Number) elem\n            in(x: 0, y: -30, name: \"acc_list\") property(List) acc_list\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc\n            \n            instance(x: 100, y: 50) contains_check root.Std_k98ojb.List.Contains {}\n            \n            acc_list -> contains_check.list\n            elem -> contains_check.item\n\n            instance(x: 120, y: -20) not_1 root.Std_k98ojb.Logic.Not {}\n            contains_check.is_contained -> not_1.input\n            \n            instance(x: 150, y: 30) if_node root.Std_k98ojb.Std.If {\n                condition: not_1.result\n            }\n\n            instance(x: 200, y: 30) add_to_list root.Std_k98ojb.List.Add {}\n            \n            acc_list -> if_node.else_input  \n            add_to_list.listWithItem -> if_node.then_value\n            \n            acc_list -> add_to_list.list\n            elem -> add_to_list.item\n\n            if_node.value -> new_acc\n        } -> reduce_unique.handler\n        \n        empty_list -> reduce_unique.initial_value\n        input_list -> reduce_unique.items\n\n        \n        instance(x: 300, y: 100) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        \n        data_instance(x: 250, y: -100) initial_one = 1\n\n        \n        func() {\n            in(x: 10, y: 50, name: \"current_product\") property(Number) acc_prod\n            in(x: 0, y: 80, name: \"element\") property(Number) elem\n            \n            out(x: 200, y: 70, name: \"\") property(Number) new_prod\n\n            instance(x: 150, y: 60) multiply root.Std_k98ojb.Math.Mul {}\n            \n            acc_prod -> multiply.first\n            elem -> multiply.second\n            multiply.result -> new_prod\n        } -> reduce_product.handler\n        \n        reduce_unique.result -> reduce_product.items\n        initial_one -> reduce_product.initial_value\n\n        reduce_product.result -> output_product\n    }\n\n    instance(x: 0, y: 0) product_unique_instance root.main.product_unique_numbers {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n   func(doc: \"Find dissimilar elements between two lists (elements present in one but not both).\") find_dissimilar {\n        in(x: -201, y: 35, name: \"listA\") property(List) list_a\n        in(x: -208, y: -96, name: \"listB\") property(List) list_b\n\n        out(x: 476, y: -30, name: \"dissimilar\") property(List) output_list\n\n        instance(x: 150, y: 35) diff_a_minus_b root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: -96) diff_b_minus_a root.Std_k98ojb.Sets.Difference {}\n        instance(x: 350, y: -30) concat_4e7c4a root.Std_k98ojb.List.Concat {}\n\n        list_a -> diff_a_minus_b.left\n        list_b -> diff_a_minus_b.right\n\n        list_b -> diff_b_minus_a.left\n        list_a -> diff_b_minus_a.right\n\n        diff_a_minus_b.difference -> concat_4e7c4a.first_list\n        diff_b_minus_a.difference -> concat_4e7c4a.second_list\n\n        concat_4e7c4a.concatenated -> output_list\n    }\n\n    \n\n    instance(x: -201, y: 35) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -320, y: -154, name: \"list\") property(List) input_list\n        in(x: -318, y: 64, name: \"rotateBy\") property(Number) rotate_by\n\n        out(x: 798, y: -208, name: \"output\") property(List) rotated_result\n\n        instance(x: -150, y: -150) get_length root.Std_k98ojb.List.Length {}\n        input_list -> get_length.list\n\n        instance(x: 100, y: -150) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotate_by -> modulo_node.value\n        get_length.length -> modulo_node.divisor\n\n        instance(x: 250, y: -150) compute_split root.Std_k98ojb.Math.Sub {}\n        get_length.length -> compute_split.first\n        modulo_node.result -> compute_split.second\n\n        instance(x: 400, y: -150) first_slice root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        input_list -> first_slice.list\n        compute_split.result -> first_slice.end\n\n        instance(x: 550, y: -150) second_slice root.Std_k98ojb.List.Slice {\n            end: -1\n        }\n        input_list -> second_slice.list\n        compute_split.result -> second_slice.start\n\n        instance(x: 700, y: -150) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n\n        concat_node.result -> rotated_result\n    }\n\n    \n\n    instance(x: -320, y: -154) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -250, y: 43, name: \"list\") property(List) list_1f8e0a\n\n        out(x: 790, y: 60, name: \"total\") property(Number) total_2d7bfe\n\n        instance(x: 230, y: 55) reduce_4e4d1c root.Std_k98ojb.Iteration.Reduce {}\n        list_1f8e0a -> reduce_4e4d1c.items\n        0 -> reduce_4e4d1c.initialValue\n\n        func() {\n            in(x: -237, y: -76, name: \"accumulated\") property(Number) accumulated_c5b0ed\n            in(x: -230, y: -4, name: \"current\") property(Any) current_8e9d0c\n\n            out(x: 1049, y: -67, name: \"sum\") property(Number) sum_bf1a5b\n\n            instance(x: 263, y: -60) add_c6b7b3 root.Std_k98ojb.Math.Add {}\n            accumulated_c5b0ed -> add_c6b7b3.first\n            current_8e9d0c -> add_c6b7b3.second\n            add_c6b7b3.result -> sum_bf1a5b\n        } -> reduce_4e4d1c.reducer\n\n        reduce_4e4d1c.output -> total_2d7bfe\n    }\n\n    \n\n    instance(x: -298, y: 105) array_sum_3d8e6f root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -400, y: 50, name: \"n\") property(Number) n\n        in(x: -450, y: 0, name: \"execute\") trigger() execute\n\n        out(x: 800, y: -100, name: \"output\") property(Bool) output\n        out(x: 900, y: 20, name: \"continue\") trigger() continue_trigger\n\n        \n        instance(x: -300, y: 50) ifexpr_less_than_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"n < 2\"\n        }\n        \n        instance(x: -200, y: 60) set_false root.Setter {\n            property: output\n            new_value: false\n        }\n\n        ifexpr_less_than_two.then -> set_false.execute\n\n        \n        instance(x: -300, y: 150) ifexpr_equal_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"n == 2\"\n        }\n        \n        instance(x: -200, y: 160) set_true root.Setter {\n            property: output\n            new_value: true\n        }\n\n        ifexpr_equal_two.then -> set_true.execute\n\n        \n        instance(x: -300, y: 250) modulo_two root.Std_k98ojb.Math.Modulo {\n            value: n\n            divisor: 2\n        }\n        \n        instance(x: -250, y: 260) eq_zero_even root.Std_k98ojb.Logic.Equal {\n            left: modulo_two.result\n            right: 0\n        }\n\n        instance(x: -300, y: 300) if_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"eq_zero_even.result\"\n        }\n        \n        \n        if_even.then -> set_false.execute\n\n        \n        instance(x: -100, y: 50) sqrt_expr root.Std_k98ojb.Math.Expression {\n            expression: \"Math.sqrt(n)\"\n            inputs: [n]\n        }\n\n        instance(x: -50, y: 60) floor_sqrt root.Std_k98ojb.Math.Floor {\n            input: sqrt_expr.output\n        }\n\n        \n        instance(x: 100, y: 50) generate_list root.Std_k98ojb.List.GenerateRange {\n            from: 3\n            to: floor_sqrt.result\n        }\n        \n        \n        func(handler_for_find) {\n            in(x: -50, y: 0, name:\"current\") property(Number) current\n\n            instance(x: 100, y: 0) mod_current root.Std_k98ojb.Math.Modulo {\n                value: n\n                divisor: current\n            }\n            \n            instance(x: 200, y: 0) eq_zero_mod root.Std_k98ojb.Logic.Equal {\n                left: mod_current.result\n                right: 0\n            }\n\n            out(x: 300, y: 0, name:\"predicate\") property(Bool) predicate = eq_zero_mod.result\n        }\n        \n        instance(x: 400, y: 50) find_divisor root.Std_k98ojb.Iteration.Find {\n            items: generate_list.list\n            handler: handler_for_find\n        }\n\n        \n        instance(x: 500, y: 100) if_found root.Std_k98ojb.Std.If {\n            condition: find_divisor.found\n        }\n        \n        instance(x: 600, y: 200) set_not_prime root.Setter {\n            property: output\n            new_value: false\n        }\n\n        instance(x: 600, y: -100) set_prime root.Setter {\n            property: output\n            new_value: true\n        }\n\n        if_found.then -> set_not_prime.execute\n        if_found.else -> set_prime.execute\n\n        \n        \n        execute -> ifexpr_less_than_two.execute\n        \n        ifexpr_less_than_two.else -> ifexpr_equal_two.execute\n        ifexpr_equal_two.else -> if_even.execute\n        \n        \n        if_even.else -> sqrt_expr.execute\n        \n        floor_sqrt.output -> generate_list.to\n        \n        generate_list.list -> find_divisor.items\n        \n        set_false.continue -> continue_trigger\n        set_true.continue -> continue_trigger\n        set_not_prime.continue -> continue_trigger\n        set_prime.continue -> continue_trigger\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSigns {\n        in(x: -200, y: 0, name: \"a\") property(Number) a_3f5d\n        in(x: -180, y: 30, name: \"b\") property(Number) b_7a1e\n\n        out(x: 400, y: 0, name: \"output\") property(Bool) output_9c2a\n\n        instance(x: 50, y: 20) multiply root.Std_k98ojb.Math.Mul {}\n        instance(x: 150, y: 20) greaterThan root.Std_k98ojb.Math.GreaterThan {}\n\n        a_3f5d \u2192 multiply.first\n        b_7a1e \u2192 multiply.second\n\n        0 \u2192 greaterThan.left\n        multiply.result \u2192 greaterThan.right\n\n        greaterThan.result \u2192 output_9c2a\n    }\n\n    \n\n    instance(x: -50, y: 100) OppositeSigns_Example root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_node.value\n        modulo_node.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -100, y: 0) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace_with\") property(String) replace_val\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_val -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_chars_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) to_lower_flow_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -300, y: 50) property(List) input_list\n        out(x: 400, y: 50) property(Number) output\n\n        instance(x: 100, y: 200) reduce_7b3b7b root.Std_k98ojb.Iteration.Reduce {}\n        \n        data_instance(x: -200, y: 150) init_acc = [1.0, []]\n        init_acc -> reduce_7b3b7b.initial_value\n        input_list -> reduce_7b3b7b.items\n\n        func() {\n            in(x: -100, y: 0) property(List) acc_in\n            in(x: 50, y: 0) property(Number) item\n\n            out(x: 200, y: 0) property(List) acc_out\n\n            instance(x: 0, y: 50) get_product root.Std_k98ojb.List.GetAt { index: 0 }\n            instance(x: 0, y: 100) get_seen_list root.Std_k98ojb.List.GetAt { index: 1 }\n\n            acc_in -> get_product.list\n            acc_in -> get_seen_list.list\n\n            instance(x: 150, y: 75) contains_node root.Std_k98ojb.List.Contains {\n                item: item\n            }\n            get_seen_list.item -> contains_node.list\n\n            instance(x: 250, y: 50) if_node root.Std_k98ojb.Std.If {}\n            contains_node.is_contained -> if_node.input\n\n            \n            instance(x: 350, y: 50) then_mul root.Std_k98ojb.Math.Mul {}\n            get_product.item -> then_mul.first\n            item -> then_mul.second\n\n            instance(x: 400, y: 100) add_item root.Std_k98ojb.List.Add {\n                item: item\n            }\n            get_seen_list.item -> add_item.list\n\n            data_instance(x: 500, y: 75) then_acc = [then_mul.result, add_item.listWithItem]\n            then_acc -> acc_out\n\n            \n            data_instance(x: 350, y: 150) else_acc = [get_product.item, get_seen_list.item]\n            else_acc -> acc_out\n\n            if_node.then -> then_mul\n            if_node.else -> else_acc\n        } -> reduce_7b3b7b.handler\n\n        instance(x: 450, y: 250) final_get root.Std_k98ojb.List.GetAt { index: 0 }\n        reduce_7b3b7b.result -> final_get.list\n        final_get.item -> output\n    }\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -250, y: -143, name: \"list1\") property(List) list1_8e7a3d\n        in(x: -269, y: 13, name: \"list2\") property(List) list2_7b8c4f\n\n        out(x: 500, y: -130, name: \"result\") property(List) result_9e3d5a\n\n        instance(x: -60, y: -130) concat_3e3d5a root.Std_k98ojb.List.Concat {}\n        instance(x: -240, y: -70) diff1_8e7a3d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 60, y: -70) diff2_7b8c4f root.Std_k98ojb.Sets.Difference {}\n\n        list1_8e7a3d -> diff1_8e7a3d.left\n        list2_7b8c4f -> diff1_8e7a3d.right\n\n        list2_7b8c4f -> diff2_7b8c4f.left\n        list1_8e7a3d -> diff2_7b8c4f.right\n\n        diff1_8e7a3d.difference -> concat_3e3d5a.listA\n        diff2_7b8c4f.difference -> concat_3e3d5a.listB\n\n        concat_3e3d5a.concatenated -> result_9e3d5a\n    }\n\n    \n\n    instance(x: -10, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50) property(List) input_list\n        in(x: -180, y: 100) property(Number) rotation_count\n\n        out(x: 600, y: 75) property(List) output_list\n\n        instance(x: 20, y: 30) get_length root.Std_k98ojb.List.Length {}\n        input_list -> get_length.list\n\n        instance(x: 150, y: 40) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotation_count -> modulo_node.value\n        get_length.length -> modulo_node.divisor\n\n        instance(x: 280, y: 35) subtract_node root.Std_k98ojb.Math.Sub {}\n        get_length.length -> subtract_node.first\n        modulo_node.result -> subtract_node.second\n\n        instance(x: 410, y: 25) first_slice root.Std_k98ojb.List.Slice {}\n        input_list -> first_slice.list\n        0 -> first_slice.start\n        subtract_node.result -> first_slice.end\n\n        instance(x: 410, y: 120) second_slice root.Std_k98ojb.List.Slice {}\n        input_list -> second_slice.list\n        subtract_node.result -> second_slice.start\n        -1 -> second_slice.end\n\n        instance(x: 600, y: 75) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> output_list\n    }\n\n    \n\n    instance(x: -240, y: 130) rotate_right_6f7e5d root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_0e8d7a\n\n        out(x: 659, y: 143, name: \"sum\") property(Number) sum_4b7c3f\n\n        instance(x: 200, y: 143) reduce_7e3a1d root.Std_k98ojb.Iteration.Reduce {}\n        list_0e8d7a -> reduce_7e3a1d.items\n        0 -> reduce_7e3a1d.initialValue\n        func() {\n            in(x: -245, y: -65, name: \"accumulated\") property(Number) accumulated_9b5c3f\n            in(x: -245, y: 28, name: \"current\") property(Number) current_7a1d0e\n\n            out(x: 400, y: -20, name: \"sum\") property(Number) sum_6e9b2c\n\n            instance(x: 150, y: 0) add_8f3d2a root.Std_k98ojb.Math.Add {}\n            accumulated_9b5c3f -> add_8f3d2a.first\n            current_7a1d0e -> add_8f3d2a.second\n            add_8f3d2a.result -> sum_6e9b2c\n        } -> reduce_7e3a1d.reducer\n        reduce_7e3a1d.output -> sum_4b7c3f\n    }\n\n    \n\n    instance(x: -250, y: 143) array_sum_8e3a1d root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -450, y: 0, name: \"execute\") trigger() execute_trigger\n        in(x: -300, y: 0, name: \"n\") property(Number) n_input\n\n        out(x: 800, y: 0, name: \"output\") property(Bool) output_bool\n\n        \n        \n        \n        instance(x: -350, y: 100) less_than_two root.Std_k98ojb.Math.LessThan {}\n        n_input -> less_than_two.first\n        2 -> less_than_two.second\n\n        instance(x: -250, y: 100) if_less_than_two root.Std_k98ojb.Std.If {}\n        less_than_two.result -> if_less_than_two.predicate\n        \n        \n        setter(x: 300, y: 100) set_false = output_bool { new_value: false }\n        if_less_than_two.then -> set_false.execute\n\n        \n        instance(x: -250, y: 200) equal_to_two root.Std_k98ojb.Math.Equal {}\n        n_input -> equal_to_two.first\n        2 -> equal_to_two.second\n        \n        instance(x: -150, y: 200) if_is_two root.Std_k98ojb.Std.If {}\n        equal_to_two.result -> if_is_two.predicate\n\n        \n        setter(x: 300, y: 200) set_true = output_bool { new_value: true }\n        if_is_two.then -> set_true.execute\n        \n        \n        instance(x: -150, y: 300) mod_by_2 root.Std_k98ojb.Math.Modulo {}\n        n_input -> mod_by_2.value\n        2 -> mod_by_2.divisor\n\n        instance(x: -50, y: 300) equal_zero_mod root.Std_k98ojb.Math.Equal {}\n        mod_by_2.result -> equal_zero_mod.first\n        0 -> equal_zero_mod.second\n        \n        instance(x: 50, y: 300) if_even root.Std_k98ojb.Std.If {}\n        equal_zero_mod.result -> if_even.predicate\n\n        \n        setter(x: 300, y: 300) set_false_even = output_bool { new_value: false }\n        if_even.then -> set_false_even.execute\n        \n        \n        instance(x: -450, y: 400) sqrt_calc root.Std_k98ojb.Math.Pow {}\n        n_input -> sqrt_calc.base\n        0.5 -> sqrt_calc.exponent\n\n        instance(x: -350, y: 400) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        sqrt_calc.result -> floor_sqrt.input\n        \n        \n        instance(x: -250, y: 450) generate_divisors root.Std_k98ojb.List.GenerateRange {}\n        3 -> generate_divisors.from\n        floor_sqrt.output -> generate_divisors.to\n\n        \n        func() find_handler {\n            in(x: -10, y: 0, name: \"current\") property(Number) current_element\n            \n            out(x: 200, y: 0, name: \"found\") property(Bool) found_result\n\n            instance(x: 50, y: 0) mod_check root.Std_k98ojb.Math.Modulo {}\n            n_input -> mod_check.value\n            current_element -> mod_check.divisor\n            \n            instance(x: 150, y: 0) is_divisible root.Std_k98ojb.Math.Equal {}\n            mod_check.result -> is_divisible.first\n            0 -> is_divisible.second\n\n            is_divisible.result -> found_result\n        } -> find_handler\n        \n        instance(x: -150, y: 450) find_divisor root.Std_k98ojb.Iteration.Find {}\n        generate_divisors.list -> find_divisor.items\n        find_handler -> find_divisor.handler\n\n        \n        instance(x: -50, y: 500) invert_result root.Std_k98ojb.Logic.Not {}\n        find_divisor.is_found -> invert_result.input\n        \n        \n        setter(x: 200, y: 500) set_final = output_bool { new_value: invert_result.result }\n        find_divisor.done -> set_final.execute\n\n        \n        execute_trigger -> if_less_than_two.execute\n        if_less_than_two.else -> equal_to_two.first\n        equal_to_two.output -> if_is_two.execute\n        if_is_two.else -> mod_by_2.value\n        mod_by_2.divisor -> equal_zero_mod.second\n        equal_zero_mod.result -> if_even.predicate\n        if_even.else -> sqrt_calc.base\n        floor_sqrt.output -> generate_divisors.to\n        generate_divisors.list -> find_divisor.items\n    }\n\n    instance(x: -176, y: -38) IsPrime_Inst root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") opposite_sign {\n        in(x: -300, y: -200, name: \"a\") property(Number) a_9f7759\n        in(x: -280, y: -180, name: \"b\") property(Number) b_f9110a\n\n        out(x: 400, y: 0, name: \"output\") property(Bool) output_b2508f\n\n        instance(x: -200, y: -100, name: \"equal_a_zero\") equal_a_zero = Std.Logic.Equal {\n            left: a_9f7759,\n            right: 0\n        }\n\n        instance(x: -150, y: -100, name: \"equal_b_zero\") equal_b_zero = Std.Logic.Equal {\n            left: b_f9110a,\n            right: 0\n        }\n\n        instance(x: -100, y: -100, name: \"either_zero\") either_zero = Std.Logic.Or {\n            left: equal_a_zero.result,\n            right: equal_b_zero.result\n        }\n\n        instance(x: 50, y: -200, name: \"a_positive\") a_positive = Std.Math.GreaterThan {\n            left: a_9f7759,\n            right: 0\n        }\n\n        instance(x: 100, y: -200, name: \"b_negative\") b_negative = Std.Math.LessThanOrEqual {\n            left: b_f9110a,\n            right: -1\n        }\n\n        instance(x: 150, y: -200, name: \"part1\") part1 = Std.Logic.And {\n            left: a_positive.result,\n            right: b_negative.result\n        }\n\n        instance(x: 50, y: -100, name: \"a_negative\") a_negative = Std.Math.LessThanOrEqual {\n            left: a_9f7759,\n            right: -1\n        }\n\n        instance(x: 100, y: -100, name: \"b_positive\") b_positive = Std.Math.GreaterThan {\n            left: b_f9110a,\n            right: 0\n        }\n\n        instance(x: 150, y: -100, name: \"part2\") part2 = Std.Logic.And {\n            left: a_negative.result,\n            right: b_positive.result\n        }\n\n        instance(x: 200, y: -150, name: \"sign_condition\") sign_condition = Std.Logic.Or {\n            left: part1.result,\n            right: part2.result\n        }\n\n        instance(x: 300, y: -100, name: \"if_node\") if_node = Std.Std.If {\n            predicate: either_zero.result,\n\n            then: [\n                setter(output_b2508f) { new_value: false }\n            ],\n\n            else: [\n                setter(output_b2508f) { new_value: sign_condition.result }\n            ]\n        }\n\n        \n        a_9f7759 -> if_node.predicate_trigger\n        b_f9110a -> if_node.predicate_trigger\n    }\n\n    instance(x: 0, y: -300) opposite_sign_1 root.main.opposite_sign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_node root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_node.value\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n        equal_node.result -> output_bool\n    }\n\n    \n\n    instance(x: -150, y: 20) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -250, y: 40, name: \"search\") property(String) search_char\n        in(x: -260, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 300, y: 40, name: \"output\") property(String) output_str\n\n        instance(x: 150, y: 40) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_str -> replacer_7b3b7b.input\n        search_char -> replacer_7b3b7b.search\n        replace_char -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_chars_59bc6e root.main.replace_characters {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerConverter {\n        in(x: -240, y: 50, name: \"input\") property(String) input_ai\n        out(x: 300, y: 60, name: \"output\") property(String) output_ai\n\n        instance(x: 100, y: 55) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 20) converterInstance root.main.ToLowerConverter {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a list.\") unique_product {\n        in(x: -300, y: 50, name: \"list\") property(List) input_list\n        out(x: 400, y: 200, name: \"product\") property(Number) output_product\n\n        instance(x: 100, y: 100) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 200, y: 50) reduce_uniq root.Std_k98ojb.Iteration.Reduce {}\n        \n        empty_list.list -> reduce_uniq.initial_value\n        input_list -> reduce_uniq.items\n\n        \n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(List) acc_in\n            in(x: -50, y: 50, name: \"current\") property(Number) current_in\n            \n            out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n            instance(x: 10, y: 30) contains root.Std_k98ojb.List.Contains {}\n            acc_in -> contains.list\n            current_in -> contains.item\n\n            instance(x: 50, y: 60) if_node root.Std_k98ojb.Std.If {\n                input: contains.is_contained\n            }\n\n            \n            instance(x: 100, y: 30) add_item root.Std_k98ojb.List.Add {}\n            \n            acc_in -> add_item.list\n            current_in -> add_item.item\n\n            \n            instance(x: 150, y: 30) expr root.Std_k98ojb.Std.IfExpression {\n                expression: \"gen_0 ? gen_1 : gen_2\"\n            }\n\n            contains.is_contained -> expr.gen_0\n            acc_in -> expr.gen_1\n            add_item.listWithItem -> expr.gen_2\n\n            expr.value -> new_acc_out\n        } -> reduce_uniq.handler\n\n        \n        instance(x: 300, y: 50) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        \n        reduce_uniq.output_list -> reduce_product.items\n        1 -> reduce_product.initial_value\n        \n        func() {\n            in(x: -200, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: -150, y: 50, name: \"current\") property(Number) current_in\n            \n            out(x: 100, y: 0, name: \"\") property(Number) new_acc_out\n\n            instance(x: 20, y: 30) multiply root.Std_k98ojb.Math.Mul {}\n            \n            acc_in -> multiply.first\n            current_in -> multiply.second\n            \n            multiply.result -> new_acc_out\n        } -> reduce_product.handler\n        \n        \n        reduce_product.output_list -> output_product\n    }\n}\n\n\ninstance(x: 0, y: 0) unique_prod root.main.unique_product {}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds dissimilar elements between two lists.\") dissimilar_elements {\n        in(x: -200, y: -100, name: \"list1\") property(List) list1_8f3a\n        in(x: -200, y: 50, name: \"list2\") property(List) list2_8f3b\n\n        out(x: 400, y: -25, name: \"result\") property(List) result_8f3c\n\n        instance(x: 100, y: -100) diff_AB root.Std_k98ojb.Sets.Difference {}\n        list1_8f3a -> diff_AB.left\n        list2_8f3b -> diff_AB.right\n        \n        instance(x: 100, y: 50) diff_BA root.Std_k98ojb.Sets.Difference {}\n        list2_8f3b -> diff_BA.left\n        list1_8f3a -> diff_BA.right\n\n        instance(x: 300, y: -25) concat_8f3d root.Std_k98ojb.List.Concat {}\n        diff_AB.difference -> concat_8f3d.list_a\n        diff_BA.difference -> concat_8f3d.list_b\n        concat_8f3d.concatenated -> result_8f3c\n    }\n\n    \n\n    instance(x: 10, y: -5) dissimilar_elements_node root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_list_right {\n        in(x: -300, y: 50, name: \"list\") property(List) input_list\n        in(x: -280, y: 100, name: \"rotate_by\") property(Number) rotation_k\n\n        out(x: 600, y: 75, name: \"rotated_list\") property(List) output_list\n\n        instance(x: 150, y: 30) list_length root.Std_k98ojb.List.Length {}\n        input_list -> list_length.list\n\n        instance(x: 250, y: 60) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotation_k -> modulo_node.value\n        list_length.length -> modulo_node.divisor\n\n        instance(x: 350, y: 50) compute_start root.Std_k98ojb.Math.Sub {}\n        list_length.length -> compute_start.first\n        modulo_node.result -> compute_start.second\n\n        instance(x: 450, y: 30) slice_end_part root.Std_k98ojb.List.Slice {}\n        input_list -> slice_end_part.list\n        compute_start.result -> slice_end_part.start\n        -1 -> slice_end_part.end\n\n        instance(x: 450, y: 120) slice_start_part root.Std_k98ojb.List.Slice {}\n        input_list -> slice_start_part.list\n        0 -> slice_start_part.start\n        compute_start.result -> slice_start_part.end\n\n        instance(x: 600, y: 75) concatenate_slices root.Std_k98ojb.List.Concat {}\n        slice_end_part.slice -> concatenate_slices.left\n        slice_start_part.slice -> concatenate_slices.right\n        concatenate_slices.result -> output_list\n    }\n\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -240, y: 150, name: \"list\") property(List) list_8d3b0a\n\n        out(x: 796, y: 150, name: \"total\") property(Number) total_0c7e1f\n\n        instance(x: 240, y: 150) reduce_4e3a7c root.Std_k98ojb.Iteration.Reduce {}\n        list_8d3b0a -> reduce_4e3a7c.items\n        0 -> reduce_4e3a7c.initialValue\n        func() {\n            in(x: -150, y: 0, name: \"accumulated\") property(Number) accumulated_ai\n            in(x: -150, y: 50, name: \"current\") property(Number) current_ai\n\n            out(x: 200, y: 30, name: \"sum\") property(Number) sum_ai\n\n            instance(x: 50, y: 25) add_8e1d7a root.Std_k98ojb.Math.Add {}\n            accumulated_ai -> add_8e1d7a.first\n            current_ai -> add_8e1d7a.second\n            add_8e1d7a.result -> sum_ai\n        } -> reduce_4e3a7c.reducer\n        reduce_4e3a7c.output -> total_0c7e1f\n    }\n\n    \n\n    instance(x: -256, y: 150) array_sum_9b8d2a root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if given integer is a prime number\") is_prime {\n        in(x: -450, y: -321, name: \"n\") property(Number) n\n        in(x: -500, y: -100, name: \"execute\") trigger() execute\n\n        out(x: 600, y: -200, name: \"output\") property(Bool) output\n        out(x: 700, y: -100, name: \"continue\") trigger() continue_\n\n        \n        instance edge_case LTE {\n            left = n,\n            right = 1\n        }\n\n        instance if_edge_case Std.IfExpression {\n            expression: \"edge_case.result\",\n            then: { \n                \n                output.set(false),\n                continue_.trigger()\n            },\n            else: {}\n        }\n        \n        \n        instance pow_sqrt Pow {\n            x = n,\n            y = 0.5\n        }\n\n        instance floor_sqrt Floor {\n            input = pow_sqrt.result\n        }\n\n        \n        instance gen_range List.GenerateRange {\n            start = 2,\n            end = floor_sqrt.output\n        }\n\n        \n        instance find_divisor Iteration.Find {\n            items = gen_range.list,\n            context = n, \n            handler: func() { \n                in(x: 0, y: 0, name: \"current\") property(Number) current\n                in(..., name: \"_context\") property(Number) context_n\n\n                instance modulo Modulo {\n                    value = _context.n,\n                    divisor = current\n                }\n\n                instance is_divisible Equal {\n                    left = modulo.result,\n                    right = 0\n                }\n\n                out(name: \"predicate\") property(Bool) = is_divisible.result\n            }\n        }\n\n        \n        instance item_exists NotEqual {\n            left = find_divisor.item,\n            right = null\n        }\n\n        instance final_if Std.IfExpression {\n            expression: \"item_exists.result\",\n            then: { output.set(false) },\n            else: { output.set(true) }\n        }\n\n        \n        execute -> if_edge_case.execute\n        if_edge_case.else -> find_divisor.execute\n        find_divisor.done -> final_if.execute\n        final_if.then -> continue_\n        final_if.else -> continue_\n    }\n}\n\ninstance(x: -200, y: 50) is_prime_instance main.is_prime {}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") has_opposite_signs {\n        in(x: -401, y: -200) property(Number) a_3f5a7d\n        in(x: -385, y: 20) property(Number) b_f9e4b6\n\n        out(x: 200, y: 100) property(Bool) output_5c3d8a\n\n        instance check_signs root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        a_3f5a7d -> check_signs.a\n        b_f9e4b6 -> check_signs.b\n        check_signs.value -> output_5c3d8a\n    }\n\n    \n\n    instance(x: -174, y: -63) has_opposite_signs_d6e930 root.main.has_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if number is divisible by 11\") is_divisible_by_11 {\n        in(x: -250, y: -30, name: \"number\") property(Number) input_num\n        out(x: 400, y: 50, name: \"output\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -150, y: 20) check_divisible_4f3d8a root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_with\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replace_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_1.input\n        search_char -> replace_1.search\n        replace_with -> replace_1.replace\n        \n        replace_1.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_chars_e54b7f root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Convert a given string to lowercase.\") ToLowerCase {\n        in(x: -240, y: 69, name: \"input\") property(String) input_ai\n        out(x: 340, y: 58, name: \"output\") property(String) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) convert_lowercase_node root.main.ToLowerCase {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -345, y: -126, name: \"list\") property(List) list_0a8b4d\n\n        out(x: 798, y: -93, name: \"result\") property(Number) result_7f3eab\n\n        instance(x: -205, y: -91) reduce_unique_6c0b7a root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 415, y: -94) reduce_product_e3d3c2 root.Std_k98ojb.Iteration.Reduce {}\n\n        data_instance(x: -310, y: -216) empty_list_7a5f1b = List.Empty\n\n        list_0a8b4d -> reduce_unique_6c0b7a.items\n        empty_list_7a5f1b -> reduce_unique_6c0b7a.initial_value\n\n        func() {  \n            in(x: -223, y: -198, name: \"acc\") property(List) acc_4e6fde\n            in(x: -209, y: 65, name: \"current\") property(Number) current_7d6a5c\n\n            out(x: 426, y: -198, name: \"\") property(List) _output_list\n\n            instance(x: -103, y: -150) contains_bf6d8b root.Std_k98ojb.List.Contains {}\n            instance(x: 77, y: -142) not_3a3e3c root.Std_k98ojb.Logic.Not {}\n            instance(x: 236, y: -105) add_9d298c root.Std_k98ojb.List.Add {}\n\n            current_7d6a5c -> contains_bf6d8b.item\n            acc_4e6fde -> contains_bf6d8b.list\n            contains_bf6d8b.is_contained -> not_3a3e3c.input\n\n            instance(x: 109, y: -72) if_05e3aa root.Std_k98ojb.Std.If {}\n            not_3a3e3c.result -> if_05e3aa.input\n            acc_4e6fde -> if_05e3aa.else_value\n\n            current_7d6a5c -> add_9d298c.item\n            acc_4e6fde -> add_9d298c.list\n            add_9d298c.listWithItem -> if_05e3aa.then_value\n            if_05e3aa.value -> _output_list\n        } -> reduce_unique_6c0b7a.handler\n\n        reduce_unique_6c0b7a.output_list -> reduce_product_e3d3c2.items\n        1 -> reduce_product_e3d3c2.initial_value\n\n        func() { \n            in(x: -54, y: -83, name: \"acc\") property(Number) acc_0f6a7b\n            in(x: -40, y: 19, name: \"current\") property(Number) current_2e9d9c\n\n            out(x: 315, y: -83, name: \"\") property(Number) _result\n\n            instance(x: 68, y: -67) multiply_f0a4f2 root.Std_k98ojb.Math.Mul {}\n            acc_0f6a7b -> multiply_f0a4f2.first\n            current_2e9d9c -> multiply_f0a4f2.second\n            multiply_f0a4f2.result -> _result\n        } -> reduce_product_e3d3c2.handler\n\n        reduce_product_e3d3c2.accumulated_value -> result_7f3eab\n    }\n\n    \n\n    instance(x: -19, y: 68) unique_product_node root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilar {\n        in(x: -140, y: 30, name: \"listA\") property(List) listA_2f8b5e\n        in(x: -147, y: -130, name: \"listB\") property(List) listB_f9c6d0\n\n        out(x: 650, y: -37, name: \"result\") property(List) result_4a5b8f\n\n        instance(x: 200, y: 50) diffAB_a root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: -100) diffBA_b root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: -30) concat_c root.Std_k98ojb.List.Concat {}\n\n        listA_2f8b5e -> diffAB_a.left\n        listB_f9c6d0 -> diffAB_a.right\n\n        listB_f9c6d0 -> diffBA_b.left\n        listA_2f8b5e -> diffBA_b.right\n\n        diffAB_a.difference -> concat_c.left\n        diffBA_b.difference -> concat_c.right\n\n        concat_c.concatenated -> result_4a5b8f\n    }\n\n    \n\n    instance(x: 10, y: -63) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_list {\n        in(x: -200, y: 50, name: \"list\") property(List) inputList\n        in(x: -180, y: 100, name: \"rotateBy\") property(Number) rotateBy\n\n        out(x: 600, y: 75, name: \"rotatedList\") property(List) outputResult\n\n        instance(x: 0, y: 0) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: -50) sub_node root.Std_k98ojb.Math.Sub {} \n        instance(x: 150, y: 150) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 350, y: 150) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 0) concat_node root.Std_k98ojb.List.Concat {}\n\n        inputList -> length_node.list\n        rotateBy -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n        inputList -> first_slice.list\n\n        sub_node.result -> second_slice.start\n        -1 -> second_slice.end \n        inputList -> second_slice.list\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n\n        concat_node.result -> outputResult\n    }\n\n    \n\n    instance(x: 0, y: 0) rotate_list_496e5e root.main.rotate_list {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -243, y: 105, name: \"list\") property(List) list_3a8e90\n\n        out(x: 746, y: 53, name: \"total\") property(Number) total_2ad0d5\n\n        instance(x: 120, y: 50) reduce_3a8e90 root.Std_k98ojb.Iteration.Reduce {}\n        list_3a8e90 -> reduce_3a8e90.items\n        0 -> reduce_3a8e90.initialValue\n        func() {\n            in(x: -160, y: -74, name: \"accumulated\") property(Number) acc_c750f1\n            in(x: -152, y: 20, name: \"current\") property(Number) current_3f11cd\n\n            out(x: 890, y: -77, name: \"sum\") property(Number) sum_72dd2a\n\n            instance(x: 400, y: -75) add_8974a2 root.Std_k98ojb.Math.Add {}\n            acc_c750f1 -> add_8974a2.first\n            current_3f11cd -> add_8974a2.second\n            add_8974a2.result -> sum_72dd2a\n        } -> reduce_3a8e90.reducer\n        reduce_3a8e90.output -> total_2ad0d5\n    }\n\n    \n\n    instance(x: 100, y: 150) array_sum_6c92e0 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks whether the given integer is a prime number.\") IsPrime {\n        in(x: -450, y: -214, name: \"n\") property(Number) n_input\n        in(x: -272, y: 9, name: \"execute\") trigger() execute_start\n\n        out(x: 1269, y: -209, name: \"is_prime\") property(Bool) output_result\n        out(x: 512, y: -114, name: \"continue\") trigger() continue_out\n\n        \n        instance(x: -300, y: -100) if_less_than_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n < 2\"\n        }\n        \n        n_input -> if_less_than_2.gen_0\n        execute_start -> if_less_than_2.execute\n\n        \n        setter(x: -250, y: -100, name=\"set_false\") setter_false = output_result {\n            new_value: false\n        }\n        \n        instance(x: -200, y: -100) goto_continue_1 root.Std_k98ojb.Std.If {\n            if_less_than_2.then -> setter_false.execute\n            setter_false.continue -> continue_out\n        }\n\n        \n        instance(x: 0, y: -50) else_case_1 root.Std_k98ojb.Std.If {\n            if_less_than_2.else -> else_case_1.execute\n        }\n        \n        \n        instance(x: 100, y: -100) if_equals_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n == 2\"\n        }\n        \n        n_input -> if_equals_2.gen_0\n        else_case_1.execute -> if_equals_2.execute\n\n        \n        setter(x: 50, y: -50, name=\"set_true\") setter_true = output_result {\n            new_value: true\n        }\n        \n        instance(x: 150, y: -50) goto_continue_2 root.Std_k98ojb.Std.If {\n            if_equals_2.then -> setter_true.execute\n            setter_true.continue -> continue_out\n        }\n\n        \n        instance(x: 200, y: -50) else_case_2 root.Std_k98ojb.Std.If {\n            if_equals_2.else -> else_case_2.execute\n        }\n        \n        \n        instance(x: 300, y: -100) modulo_even root.Std_k98ojb.Math.Modulo {}\n        instance(x: 350, y: -100) is_even root.Std_k98ojb.Logic.Equal {}\n\n        n_input -> modulo_even.value\n        2 -> modulo_even.divisor\n\n        modulo_even.result -> is_even.left\n        0 -> is_even.right\n        \n        \n        instance(x: 400, y: -50) if_even root.Std_k98ojb.Std.If {\n            is_even.result -> if_even.predicate\n        }\n        \n        else_case_2.execute -> if_even.execute\n\n        \n        setter(x: 380, y: 0, name=\"set_false_even\") setter_false_even = output_result {\n            new_value: false\n        }\n\n        instance(x: 450, y: -50) goto_continue_3 root.Std_k98ojb.Std.If {\n            if_even.then -> setter_false_even.execute\n            setter_false_even.continue -> continue_out\n        }\n\n        \n        instance(x: 500, y: -50) else_case_3 root.Std_k98ojb.Std.If {\n            if_even.else -> else_case_3.execute\n        }\n        \n        \n        instance(x: 600, y: -100) sqrt_expr root.Std_k98ojb.Math.Expression {\n            expression: \"Math.sqrt(n)\"\n        }\n        \n        n_input -> sqrt_expr.input\n\n        instance(x: 650, y: -100) floored_sqrt root.Std_k98ojb.Math.Floor {}\n        \n        sqrt_expr.result -> floored_sqrt.input\n        \n        \n        instance(x: 700, y: -100) generate_range root.Std_k98ojb.List.GenerateRange {\n            from: 3\n            to: floored_sqrt.output\n        }\n\n        else_case_3.execute -> generate_range.execute\n        \n        \n        instance(x: 800, y: -100) find_divisor root.Std_k98ojb.Iteration.Find {\n            items: generate_range.result\n        }\n        \n        func() { \n            in(x: -20, y: 0, name=\"current\") property(Number) divisor\n\n            instance(x: 50, y: 0) modulo_handler root.Std_k98ojb.Math.Modulo {}\n            instance(x: 100, y: 0) is_divisible root.Std_k98ojb.Logic.Equal {}\n\n            n_input -> modulo_handler.value\n            divisor -> modulo_handler.divisor\n\n            modulo_handler.result -> is_divisible.left\n            0 -> is_divisible.right\n\n            out(x: 200, y: 0, name=\"predicate_result\") property(Bool) predicate_out {\n                value: is_divisible.result\n            }\n        } -> find_divisor.handler\n        \n        generate_range.onDone -> find_divisor.execute\n\n        \n        instance(x: 900, y: -100) check_found root.Std_k98ojb.Logic.IsNotEqual {\n            left: find_divisor.foundItem\n            right: null\n        }\n\n        \n        instance(x: 1000, y: -50) final_if root.Std_k98ojb.Std.If {\n            check_found.result -> final_if.predicate\n        }\n        \n        setter(x: 950, y: 0, name=\"set_false_found\") setter_false_found = output_result {\n            new_value: false\n        }\n\n        setter(x: 1050, y: 0, name=\"set_true_not_found\") setter_true_not = output_result {\n            new_value: true\n        }\n        \n        final_if.then -> setter_false_found.execute\n        final_if.else -> setter_true_not.execute\n\n        \n        instance(x: 1100, y: -50) goto_continue_final root.Std_k98ojb.Std.If {\n            setter_false_found.continue -> continue_out\n            setter_true_not.continue -> continue_out\n        }\n    }\n\n    \n    instance(x: -200, y: -100) is_prime_instance root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") check_opposite_signs {\n        in(x: -200, y: 50, name: \"a\") property(Number) a_input\n        in(x: -180, y: 100, name: \"b\") property(Number) b_input\n\n        out(x: 300, y: 75, name: \"output\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) sign_check root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        \n        a_input -> sign_check.gen_0\n        b_input -> sign_check.gen_1\n        sign_check.value -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 20) check_opposite_signs_inst root.main.check_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") check_divisible_by_11 {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 400, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_11 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_11.value\n        11 -> modulo_11.divisor\n        modulo_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 50) check_divisible_by_11_node root.main.check_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace_with\") property(String) replace_val\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_val -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_chars_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) to_lower_flow_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -425, y: 100, name: \"list\") property(List) list_ai\n        out(x: 800, y: 100, name: \"product\") property(Number) product_ai\n\n        instance(x: 100, y: 200) map_count root.Std_k98ojb.Iteration.Map {}\n        \n        func() {\n            in(x: -300, y: 50, name: \"current\") property(Number) current\n            in(x: -300, y: 150, name: \"context\") property(List) context\n\n            out(x: 200, y: 100, name: \"\") property(Tuple<Number, Number>) output_tuple\n\n            instance(x: 0, y: 0) filter_eq root.Std_k98ojb.Query.Filter {\n                where: \"it == current\"\n            }\n            context -> filter_eq.list\n            instance(x: 200, y: 50) count_node root.Std_k98ojb.List.Length {}\n            filter_eq.result -> count_node.items\n\n            data_instance result = [current, count_node.length]\n            result -> output_tuple\n        } -> map_count.handler\n        \n        list_ai -> map_count.items\n        list_ai -> map_count.context\n\n        instance(x: 400, y: 200) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        \n        func() {\n            in(x: -150, y: 300, name: \"current\") property(Tuple<Number, Number>) current_tuple\n\n            out(x: 150, y: 300, name: \"\") property(Bool) is_unique\n\n            instance(x: 0, y: 250) get_second root.Std_k98ojb.List.GetAt { index: 1 }\n            current_tuple -> get_second.list\n            instance(x: 100, y: 250) eq_one root.Std_k98ojb.Logic.Equal {}\n            get_second.item -> eq_one.left\n            1 -> eq_one.right\n            eq_one.result -> is_unique\n        } -> filter_unique.handler\n        \n        map_count.output_list -> filter_unique.items\n\n        instance(x: 600, y: 200) extract_values root.Std_k98ojb.Iteration.Map {}\n        \n        func() {\n            in(x: -150, y: 400, name: \"current\") property(Tuple<Number, Number>) current_tuple\n\n            out(x: 150, y: 400, name: \"\") property(Number) value\n\n            instance(x: 0, y: 350) get_first root.Std_k98ojb.List.GetAt { index: 0 }\n            current_tuple -> get_first.list\n            get_first.item -> value\n        } -> extract_values.handler\n        \n        filter_unique.output_list -> extract_values.items\n\n        instance(x: 800, y: 200) compute_product root.Std_k98ojb.Iteration.Reduce {}\n        \n        func() {\n            in(x: -150, y: 500, name: \"acc\") property(Number) acc\n            in(x: -150, y: 600, name: \"current\") property(Number) current\n\n            out(x: 150, y: 550, name: \"\") property(Number) result\n\n            instance(x: 0, y: 500) multiply root.Std_k98ojb.Math.Mul {}\n            acc -> multiply.first\n            current -> multiply.second\n            multiply.result -> result\n        } -> compute_product.reducer\n        \n        1 -> compute_product.initial_value\n        extract_values.output_list -> compute_product.items\n\n        compute_product.reduced -> product_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) unique_product_node root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -250, y: -143, name: \"list1\") property(List) list1_8e7a3d\n        in(x: -269, y: 13, name: \"list2\") property(List) list2_7b8c4f\n\n        out(x: 500, y: -130, name: \"result\") property(List) result_9e3d5a\n\n        instance(x: -60, y: -130) concat_3a5d0a root.Std_k98ojb.List.Concat {}\n        instance(x: -247, y: 13) diff2_7c3f1b root.Std_k98ojb.Sets.Difference {}\n        instance(x: -266, y: -143) diff1_0e5a2d root.Std_k98ojb.Sets.Difference {}\n        \n        list1_8e7a3d -> diff1_0e5a2d.left\n        list2_7b8c4f -> diff1_0e5a2d.right\n        \n        list2_7b8c4f -> diff2_7c3f1b.left\n        list1_8e7a3d -> diff2_7c3f1b.right\n\n        diff1_0e5a2d.difference -> concat_3a5d0a.listA\n        diff2_7c3f1b.difference -> concat_3a5d0a.listB\n        \n        concat_3a5d0a.concatenated -> result_9e3d5a\n    }\n\n    \n\n    instance(x: -284, y: -63) find_dissimilar_7c3f1b root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 150, name: \"rotation_count\") property(Number) rotation\n\n        out(x: 600, y: 100, name: \"rotated\") property(List) output_list\n\n        instance(x: 100, y: 20) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 80) sub_node root.Std_k98ojb.Math.Sub {}\n        \n        instance(x: 200, y: 150) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 150) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 500, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n\n        \n        input_list -> length_node.list\n        rotation -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        \n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n        input_list -> first_slice.list\n\n        sub_node.result -> second_slice.start\n        -1 -> second_slice.end\n        input_list -> second_slice.list\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        \n        concat_node.result -> output_list\n    }\n\n    \n\n    instance(x: 0, y: 0) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_7a8d5b\n\n        out(x: 659, y: 145, name: \"total\") property(Number) total_3e3c8f\n\n        instance(x: 200, y: 144) reduce_5a3d1e root.Std_k98ojb.Iteration.Reduce {}\n        list_7a8d5b -> reduce_5a3d1e.items\n        0 -> reduce_5a3d1e.initialValue\n        func() {\n            in(x: -246, y: -75, name: \"accumulated\") property(Number) accumulated_9c3f58\n            in(x: -245, y: 23, name: \"current\") property(Number) current_1e0a6d\n\n            out(x: 1072, y: -77, name: \"sum\") property(Number) sum_72dd2a\n\n            instance(x: 500, y: 0) add_8974a2 root.Std_k98ojb.Math.Add {}\n            accumulated_9c3f58 -> add_8974a2.first\n            current_1e0a6d -> add_8974a2.second\n            add_8974a2.result -> sum_72dd2a\n        } -> reduce_5a3d1e.reducer\n        reduce_5a3d1e.output -> total_3e3c8f\n    }\n\n    \n\n    instance(x: -272, y: 115) array_sum_6c92e0 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if given integer is a prime number.\") is_prime {\n        in(x: -450, y: -213, name: \"n\") property(Number) n\n        in(x: -450, y: -114, name: \"execute\") trigger() execute\n\n        out(x: 600, y: 270, name: \"output\") property(Bool) output\n        out(x: 588, y: 123, name: \"continue\") trigger() continue\n\n        instance edge_case: Std_k98ojb.Std.IfExpression {\n            expression = \"n < 2\"\n        }\n\n        \n        getter_edge_false: getter for output\n        setter_edge_false: setter for output {\n            new_value = false\n        }\n        edge_case.then \u2192 execute(setter_edge_false) \u2192 continue\n\n        \n        pow_node: Std_k98ojb.Math.Pow {\n            first = n,\n            second = 0.5\n        }\n\n        floor_node: Std_k98ojb.Math.Floor {\n            input = pow_node.output\n        }\n\n        generate_range: Std_k98ojb.List.GenerateRange {\n            start = 2,\n            end = floor_node.output\n        }\n\n        \n        func() {\n            in(x: -10, y: 0, name: \"current\") property(Number) current\n            in(x: -5, y: 30, name: \"_context\") property(Number) _context\n\n            modulo: Std_k98ojb.Math.Modulo {\n                value = _context,\n                divisor = current\n            }\n\n            equal_zero: Std_k98ojb.Logic.Equal {\n                left = modulo.result,\n                right = 0\n            }\n\n            out(x: 200, y: 50, name: \"output\") property(Bool) output \u2192 equal_zero.result\n        } \u2192 find_handler\n\n        \n        find_node: Std_k98ojb.Iteration.Find {\n            items = generate_range.list,\n            context = n,\n            handler = find_handler\n        }\n\n        \n        check_null: Std_k98ojb.Std.IfExpression {\n            expression = \"find_node.item == Null\"\n        }\n\n        \n        setter_true: setter for output {\n            new_value = true\n        }\n        setter_false: setter for output {\n            new_value = false\n        }\n\n        check_null.then \u2192 execute(setter_true) \u2192 continue\n        check_null.else \u2192 execute(setter_false) \u2192 continue\n\n        \n        edge_case.else \u2192 execute(pow_node)\n        pow_node.output \u2192 floor_node.input\n        floor_node.output \u2192 generate_range.end\n        generate_range.list \u2192 find_node.items\n        find_node.item \u2192 check_null.gen_0  \n    }\n\n    instance(x: -176, y: -38) is_prime_86117a root.main.is_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") has_opposite_signs {\n        in(x: -200, y: 0) a (Number)\n        in(x: -150, y: 0) b (Number)\n        \n        out(x: 300, y: 0) output (Bool)\n\n        instance A_pos (Std.Math.GreaterThan) {\n            left = a\n            right = 0\n        }\n\n        instance B_neg (Std.Math.GreaterThan) {\n            left = 0\n            right = b\n        }\n\n        instance Cond1 (Std.Logic.And) {\n            A = A_pos.result\n            B = B_neg.result\n        }\n\n        instance A_neg (Std.Math.GreaterThan) {\n            left = 0\n            right = a\n        }\n\n        instance B_pos (Std.Math.GreaterThan) {\n            left = b\n            right = 0\n        }\n\n        instance Cond2 (Std.Logic.And) {\n            A = A_neg.result\n            B = B_pos.result\n        }\n\n        instance Or_cond (Std.Logic.Or) {\n            A = Cond1.result\n            B = Cond2.result\n        }\n\n        Or_cond.result \u2192 output\n    }\n}\n\ninstance(x: 0, y: 50) has_opposite_signs_1 main.has_opposite_signs {}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -200, y: 50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output\n\n        instance(expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"num % 11 == 0\"\n        })\n        \n        input_num -> expr_node.gen_0\n        expr_node.result -> output\n    }\n\n    \n    instance(x: -50, y: 0) check_divisible_by_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_char -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 100, y: -50) replace_chars_func root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerConverter {\n        in(x: -240, y: 50, name: \"input\") property(String) input_ai\n        out(x: 300, y: 60, name: \"output\") property(String) output_ai\n\n        instance(x: 100, y: 55) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 20) converterInstance root.main.ToLowerConverter {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a list.\") calculate_unique_product {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list_ai\n        out(x: 400, y: 300, name: \"product\") property(Number) output_number_ai\n\n        instance(x: -100, y: 100) empty_list root.Std_k98ojb.List.Empty {}\n\n        instance(x: 50, y: 200) reduce_unique root.Std_k98ojb.Iteration.Reduce {}\n        \n        func() {\n            in(x: -300, y: 150, name: \"acc\") property(List) acc_ai\n            in(x: -250, y: 200, name: \"current\") property(Number) current_ai\n\n            out(x: 400, y: 250, name: \"\") property(List) new_acc_ai\n\n            instance(x: -150, y: 170) contains_node root.Std_k98ojb.List.Contains {}\n            acc_ai -> contains_node.list\n            current_ai -> contains_node.item\n\n            instance(x: -120, y: 220) not_node root.Std_k98ojb.Logic.Not {}\n            contains_node.is_contained -> not_node.input\n\n            instance(x: -50, y: 240) if_node root.Std_k98ojb.Std.If {}\n\n            not_node.result -> if_node.input\n            acc_ai -> if_node.else_value\n            \n            instance(x: 100, y: 230) add_node root.Std_k98ojb.List.Add {}\n            acc_ai -> add_node.list\n            current_ai -> add_node.item\n            add_node.listWithItem -> if_node.then_value\n\n            if_node.value -> new_acc_ai\n        } -> reduce_unique.handler\n\n        input_list_ai -> reduce_unique.items\n        empty_list.emptyList -> reduce_unique.initial_value\n        \n        instance(x: 300, y: 250) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        \n        func() {\n            in(x: -100, y: 400, name: \"acc\") property(Number) acc_ai\n            in(x: -200, y: 450, name: \"current\") property(Number) current_ai\n\n            out(x: 300, y: 500, name: \"\") property(Number) new_acc_ai\n\n            instance(x: 100, y: 420) multiply_node root.Std_k98ojb.Math.Mul {}\n            acc_ai -> multiply_node.first\n            current_ai -> multiply_node.second\n            multiply_node.result -> new_acc_ai\n        } -> reduce_product.handler\n        \n        data_instance(x: 250, y: 300) initial_one = 1.0\n        initial_one -> reduce_product.initial_value\n\n        reduce_unique.result -> reduce_product.items\n        reduce_product.result -> output_number_ai\n    }\n\n    instance(x: 100, y: -50) calculator root.main.calculate_unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -254, y: 103, name: \"listA\") property(List) listA_8a3d7b\n        in(x: -256, y: 295, name: \"listB\") property(List) listB_7e8f3c\n\n        out(x: 450, y: 199, name: \"result\") property(List) result_4a9b8d\n\n        instance(x: -46, y: 172) differenceAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: -43, y: 280) differenceBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 257, y: 199) concat_6e1a8d root.Std_k98ojb.List.Concat {}\n\n        listA_8a3d7b -> differenceAB.left\n        listB_7e8f3c -> differenceAB.right\n\n        listB_7e8f3c -> differenceBA.left\n        listA_8a3d7b -> differenceBA.right\n\n        differenceAB.difference -> concat_6e1a8d.left\n        differenceBA.difference -> concat_6e1a8d.right\n\n        concat_6e1a8d.concatenated -> result_4a9b8d\n    }\n\n    \n\n    instance(x: 30, y: -25) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        in(x: -180, y: 100, name: \"rotation\") property(Number) rotation_num\n\n        out(x: 600, y: 75, name: \"rotatedList\") property(List) output_result\n\n        instance(x: 100, y: 20) len_node root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 20) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 500, y: 20) sub_node root.Std_k98ojb.Math.Sub {}\n\n        instance(x: 150, y: 150) slice_first root.Std_k98ojb.List.Slice {}\n        instance(x: 350, y: 150) slice_second root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n\n        \n        input_list -> len_node.list\n        rotation_num -> modulo_node.value\n        len_node.length -> modulo_node.divisor\n\n        len_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        0 -> slice_first.start\n        sub_node.result -> slice_first.end\n        input_list -> slice_first.list\n\n        sub_node.result -> slice_second.start\n        -1 -> slice_second.end\n        input_list -> slice_second.list\n\n        slice_second.slice -> concat_node.left\n        slice_first.slice -> concat_node.right\n\n        concat_node.result -> output_result\n    }\n\n    \n    instance(x: 0, y: 0) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") array_sum {\n        in(x: -253, y: 140, name: \"list\") property(List) list_8e1a3f\n\n        out(x: 769, y: 142, name: \"total\") property(Number) total_b0b6d0\n\n        instance(x: 350, y: 141) reduce_6c1a4e root.Std_k98ojb.Iteration.Reduce {}\n        list_8e1a3f -> reduce_6c1a4e.items\n        0 -> reduce_6c1a4e.initialValue\n        func() {\n            in(x: -207, y: -85, name: \"accumulated\") property(Number) current_c750f1\n            in(x: -199, y: 23, name: \"current\") property(Number) current_3f11cd\n\n            out(x: 648, y: -76, name: \"sum\") property(Number) sum_72dd2a\n\n            instance(x: 205, y: 2) add_ba9e8d root.Std_k98ojb.Math.Add {}\n            current_c750f1 -> add_ba9e8d.first\n            current_3f11cd -> add_ba9e8d.second\n            add_ba9e8d.result -> sum_72dd2a\n        } -> reduce_6c1a4e.reducer\n        reduce_6c1a4e.output -> total_b0b6d0\n    }\n\n    \n\n    instance(x: 53, y: 116) array_sum_9f3a8c root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -450, y: -213, name: \"n\") property(Number) n_input\n        in(x: -478, y: -94, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: -269, name: \"output\") property(Bool) output_bool\n        out(x: 1169, y: -53, name: \"continue\") trigger() continue_trigger\n\n        \n        instance(x: -300, y: -100) less_than_two root.Std_k98ojb.Math.LessThan {}\n        n_input -> less_than_two.left\n        2 -> less_than_two.right\n\n        instance(x: -250, y: -150) if_edge_case root.Std_k98ojb.Std.If {}\n        less_than_two.result -> if_edge_case.predicate\n        execute_trigger -> if_edge_case.execute\n\n        \n        setter(x: -200, y: -200, name: \"setter_false\") setter_1 = output_bool {}\n        False -> setter_1.new_value\n        if_edge_case.then -> setter_1.execute\n        setter_1.continue -> continue_trigger\n\n        \n        instance(x: -150, y: 50) pow_half root.Std_k98ojb.Math.Pow {}\n        n_input -> pow_half.x\n        0.5 -> pow_half.y\n\n        instance(x: -100, y: 50) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        pow_half.output -> floor_sqrt.input\n\n        instance(x: -50, y: 100) generate_range root.Std_k98ojb.List.GenerateRange {}\n        2 -> generate_range.from\n        floor_sqrt.output -> generate_range.to\n\n        \n        instance(x: 0, y: 150) find_divisor root.Std_k98ojb.Iteration.Find {}\n        generate_range.result -> find_divisor.items\n        n_input -> find_divisor.context\n\n        \n        func() {\n            in(x: -20, y: 30, name: \"current\") property(Number) current_i\n            in(x: -15, y: 50, name: \"_index\") property(Number) _index_ignored\n            in(x: 10, y: 40, name: \"context\") property(Number) context_n\n\n            out(x: 200, y: 30, name: \"result\") property(Bool) result_bool\n\n            instance(x: 50, y: 30) modulo_node root.Std_k98ojb.Math.Modulo {}\n            context_n -> modulo_node.value\n            current_i -> modulo_node.divisor\n\n            instance(x: 100, y: 30) equal_zero root.Std_k98ojb.Logic.Equal {}\n            modulo_node.result -> equal_zero.left\n            0 -> equal_zero.right\n\n            equal_zero.result -> result_bool\n        } -> find_divisor.handler\n\n        \n        instance(x: 150, y: 200) is_found root.Std_k98ojb.Logic.NotEqual {}\n        find_divisor.item -> is_found.left\n        Null -> is_found.right\n\n        \n        instance(x: 200, y: 150) final_not root.Std_k98ojb.Logic.Not {}\n        is_found.result -> final_not.input\n\n        \n        setter(x: 300, y: 100, name: \"setter_result\") setter_2 = output_bool {}\n        final_not.output -> setter_2.new_value\n        if_edge_case.else -> find_divisor.items ? No, need to trigger computation.\n\n        \n        instance(x: -350, y: 150) start_computation root.Std_k98ojb.Std.If {} \n        execute_trigger -> start_computation.execute\n        start_computation.then -> find_divisor.items ? Not sure.\n\n        \n        instance(x: -200, y: 150) compute_flow root.Std_k98ojb.Std.If {}\n        execute_trigger -> compute_flow.execute\n        compute_flow.then -> find_divisor.items ? \n\n        This part is getting too tangled. Maybe instead, after the else branch of if_edge_case triggers a path that allows computation:\n\n        \n        instance(x: -250, y: 150) start_compute root.Std_k98ojb.Std.If {}\n        execute_trigger -> start_compute.execute\n        less_than_two.result -> start_compute.predicate ? No.\n\n        Alternatively, just let dataflow handle it by ensuring dependencies are met.\n\n        Finally, the else path's computation ends with setting the result and continuing:\n\n        setter_2.continue -> continue_trigger\n\n        \n    }\n\n    instance(x: -174, y: -63) IsPrime_d6e930 root.main.IsPrime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSigns {\n        in(x: -300, y: -200, name: \"a\") property(Number) a_5d8b4e\n        in(x: -290, y: -100, name: \"b\") property(Number) b_d6c7f1\n\n        out(x: 300, y: -150, name: \"output\") property(Bool) output_4a7e8d\n\n        instance(x: 0, y: 0) ifexpression_2a9f3b root.Std_k98ojb.Std.IfExpression {\n            expression: \"( a == 0 || b == 0 ) ? false : ( a * b < 0 )\"\n        }\n        a_5d8b4e -> ifexpression_2a9f3b.gen_0\n        b_d6c7f1 -> ifexpression_2a9f3b.gen_1\n        ifexpression_2a9f3b.value -> output_4a7e8d\n    }\n\n    \n\n    instance(x: -150, y: 100) OppositeSigns_6a2c9f root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if number is divisible by 11\") divisible_by_11 {\n        in(x: -253, y: -40, name: \"number\") property(Number) num_f8b7a4\n\n        out(x: 492, y: -47, name: \"output\") property(Bool) output_6d6f6c\n\n        instance(x: -61, y: -35) modulo_e7a0e6 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 275, y: -41) equal_f8d535 root.Std_k98ojb.Logic.Equal {}\n\n        num_f8b7a4 -> modulo_e7a0e6.value\n        11 -> modulo_e7a0e6.divisor\n        modulo_e7a0e6.result -> equal_f8d535.left\n        0 -> equal_f8d535.right\n        equal_f8d535.result -> output_6d6f6c\n    }\n\n    \n\n    instance(x: -174, y: -92) divisible_by_11_7a1b2e root.main.divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace\") property(String) replace_with\n\n        out(x: 500, y: 60, name: \"result\") property(String) output_str\n\n        instance(x: 200, y: 60) replace_0 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_0.input\n        search_char -> replace_0.search\n        replace_with -> replace_0.replace\n        \n        replace_0.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) replacer_59bc6e root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Converts given string to lowercase\") ToLowerCaseFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        out(x: 530, y: 0, name: \"output\") property(String) output_str\n\n        instance(x: 100, y: 50) tolower_node root.Std_k98ojb.Strings.ToLower {}\n        input_str -> tolower_node.input\n        tolower_node.output -> output_str\n    }\n\n    \n\n    instance(x: 81, y: 52) LowercaseConverter root.main.ToLowerCaseFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_qwer)\n\nmodule() main { \n    func(doc: \"Calculates the product of unique numbers in a given list.\") calculate_unique_product {\n        in(x: 0, y: 0) property(List) input_list\n        out(...) property(Number) product_out\n\n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_uniq root.Iteration.Reduce {\n            items: input_list\n            initial_value: empty_list.list  \n            handler: func() { \n                in acc property(List)\n                in current property(Number)\n\n                out next_acc property(List) \n\n                instance contains_node root.Std_k98ojb.List.Contains {\n                    list: acc,\n                    item: current\n                }\n                \n                instance add_node root.Std_k98ojb.List.Add {\n                    list: acc,\n                    item: current\n                }\n\n                \n                instance choose root.Std_k98ojb.Std.IfExpression {\n                    expression: \"gen_0 ? gen_1 : gen_2\"\n                }\n                \n                contains_node.result \u2192 choose.gen_0  \n                acc \u2192 choose.gen_1                  \n                add_node.listWithItem \u2192 choose.gen_2 \n                \n                choose.result \u2192 next_acc \n            }  \n        }\n\n        \n        instance product_reduce root.Iteration.Reduce {\n            items: reduce_uniq.result\n            initial_value: 1.0                    \n            handler: func() { \n                in acc property(Number)\n                in current property(Number)\n\n                out next_acc property(Number) \n\n                instance multiply_node root.Std_k98ojb.Math.Mul {\n                    first: acc,\n                    second: current\n                }\n\n                multiply_node.result \u2192 next_acc  \n            }\n        }\n\n        \n        product_reduce.result \u2192 product_out\n    } \n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in exactly one of the two input lists.\") dissimilar_elements {\n        in(x: -215, y: -104, name: \"listA\") property(List) listA_8a3b7d\n        in(x: -195, y: 26, name: \"listB\") property(List) listB_f3e8f7\n\n        out(x: 474, y: -47, name: \"result\") property(List) result_9c8a6b\n\n        instance(x: 105, y: -104) differenceAB_e2e3d0 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 105, y: 42) differenceBA_7f6d4c root.Std_k98ojb.Sets.Difference {}\n        instance(x: 260, y: -47) concat_c0e3a4 root.Std_k98ojb.List.Concat {}\n\n        listA_8a3b7d -> differenceAB_e2e3d0.left\n        listB_f3e8f7 -> differenceAB_e2e3d0.right\n\n        listB_f3e8f7 -> differenceBA_7f6d4c.left\n        listA_8a3b7d -> differenceBA_7f6d4c.right\n\n        differenceAB_e2e3d0.difference -> concat_c0e3a4.first\n        differenceBA_7f6d4c.difference -> concat_c0e3a4.second\n        \n        concat_c0e3a4.concatenated -> result_9c8a6b\n    }\n\n    \n\n    instance(x: -205, y: -5) dissimilar_elements_1 root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import (\"std\" as Std)\n\nmodule main {\n    func rotate_right(list: List, k:Number) -> rotated_list :List {\n        \n        instance length_node = root.Std_k98ojb.List.Length { \n            list:list \n        };\n\n        \n        instance is_empty = root.Std_k98ojb.Logic.Equal { \n            left: length_node.length, \n            right: 0 \n        };\n        \n        \n        instance conditional = root.Std.If {\n            input: is_empty.result\n        };\n\n        \n        on trigger(conditional.then) => rotated_list = list;\n\n        \n        on trigger(conditional.else) {\n\n            \n            instance rot_modulo_node = root.Std_k98ojb.Math.Modulo {\n                value:k,\n                divisor: length_node.length\n            };\n\n            \n            instance subtractor_node = root.Std_k98ojb.Math.Sub {\n                left:length_node.length,\n                right: rot_modulo_node.result\n            };\n\n            \n            \n            instance slice_A = root.Std_k98ojb.List.Slice { \n                list:list, \n                start: subtractor_node.result, \n                end: length_node.length \n            };\n            \n            \n            instance slice_B = root.Std_k98ojb.List.Slice {\n                list:list,\n                start:0,\n                end: subtractor_node.result\n            };\n\n            \n            instance concat_node = root.Std_k98ojb.List.Concat {\n                left:slice_A.result,\n                right:slice_B.result\n            };\n            \n            rotated_list = concat_node.output;\n        }\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of elements in an array.\") sum_array {\n        in(x: -200, y: 100, name: \"list\") property(List) list_ai\n        out(x: 400, y: 50, name: \"total\") property(Number) total_oi\n\n        instance reduce_it root.Iteration.Reduce {}\n        \n        list_ai -> reduce_it.items\n        0 -> reduce_it.initialValue\n        \n        func() {\n            in(accum: Number, item: Any)\n            out(result: Number)\n\n            instance add_node root.Std_k98ojb.Math.Add {}\n            accum -> add_node.first\n            item -> add_node.second\n            add_node.result -> result\n        } -> reduce_it.reducer\n\n        reduce_it.output -> total_oi\n    }\n\n    \n\n    instance(x: 0, y: 150) sum_instance root.main.sum_array {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule main { \n    func(doc: \"Checks if an integer is a prime number.\", isPrime) {\n        in(x: -500, y: 0, name=\"number\") property(Number) n\n        in(name=\"execute\") trigger() execute_in\n        out(x: 800, y: -200, name=\"output\") property(Bool) output_out\n\n        \n        instance init_var root.Std_k98ojb.Setter {\n            name: \"stored_number\"\n            new_value: n\n        }\n        execute_in \u2192 init_var.execute\n        \n        \n        instance get_num root.Std_k98ojb.Getter {\n            name: \"stored_number\"\n        }\n\n        \n        instance cond_less_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"(get_num.output) < 2\" \n        }\n        init_var.continue \u2192 cond_less_2.execute\n\n        instance return_false1 root.Std_k98ojb.Out { port: output_out; value: false }\n        cond_less_2.then \u2192 return_false1.write\n        \n        \n        \n        instance cond_eq_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"(get_num.output) == 2\"\n        }\n        cond_less_2.else \u2192 cond_eq_2.execute\n\n        instance return_true1 root.Std_k98ojb.Out { port: output_out; value: true }\n        cond_eq_2.then \u2192 return_true1.write\n        \n        \n        \n        instance mod_2_node root.Std_k98ojb.Math.Modulo {\n            value: get_num.output\n            divisor: 2\n        }\n        \n        instance check_even root.Std_k98ojb.Logic.Equal {\n            left: mod_2_node.result\n            right: 0\n        }\n\n        instance cond_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"check_even.result\"\n        }\n        cond_eq_2.else \u2192 cond_even.execute\n\n        instance return_false2 root.Std_k98ojb.Out { port: output_out; value: false }\n        cond_even.then \u2192 return_false2.write\n        \n        \n        \n        instance pow_sqrt root.Std_k98ojb.Math.Pow {\n            first: get_num.output\n            second: 0.5 \n        }\n\n        instance floor_val root.Std_k98ojb.Math.Floor { input: pow_sqrt.result }\n        \n        \n        instance gen_divs root.Std_k98ojb.List.GenerateRange {\n            from: 3\n            to: floor_val.output\n        }\n\n        \n        func(divisor_handler) {\n            in(x:-100, y:200, name=\"current_d\") property(Number) d_val\n            out(name=\"result\") property(Bool) handler_out\n\n            instance get_parent_n root.Std_k98ojb.Getter { \n                name: \"stored_number\"\n            }\n\n            instance modulo_op root.Std_k98ojb.Math.Modulo {\n                value: get_parent_n.output\n                divisor: d_val \n            }\n            \n            instance is_divisible root.Std_k98ojb.Logic.Equal {\n                left: modulo_op.result\n                right: 0\n            }\n            \n            is_divisible.result \u2192 handler_out.value\n        }\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items: gen_divs.list \n            handler: divisor_handler()\n        }\n        \n        \n        instance null_check root.Std_k98ojb.Logic.IsNull { value: find_divisor.item }\n\n        instance final_cond root.Std_k98ojb.Std.IfExpression {\n            expression: \"null_check.result\"  \n        }\n        \n        find_divisor.finished \u2192 final_cond.execute\n\n        instance return_true2 root.Std_k98ojb.Out { port: output_out; value: true }\n        final_cond.then \u2192 return_true2.write\n        \n        instance return_false3 root.Std_k98ojb.Out { port: output_out; value: false }\n        final_cond.else \u2192 return_false3.write\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") opposite_sign {\n        in(x: -250, y: 0, name:\"a\") property(Number) a_3f4d\n        in(x: -180, y: 0, name:\"b\") property(Number) b_7a1e\n\n        out(x: 300, y: 0, name:\"output\") property(Bool) output_9c2a\n\n        instance(x: 50, y: 0) multiply_8d6f root.Std_k98ojb.Math.Mul {}\n        a_3f4d -> multiply_8d6f.first\n        b_7a1e -> multiply_8d6f.second\n\n        instance(x: 200, y: 0) greaterthan_5a3c root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greaterthan_5a3c.left\n        multiply_8d6f.result -> greaterthan_5a3c.right\n\n        greaterthan_5a3c.result -> output_9c2a\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_sign_eb0e root.main.opposite_sign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_node.value\n        modulo_node.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -100, y: 0) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace_with\") property(String) replace_val\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_val -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_chars_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) to_lower_flow_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Calculates product of unique numbers in a list.\") unique_product {\n        in(x: -200, y: 100, name: \"list\") property(List) list_ai\n        out(x: 500, y: 200, name: \"product\") property(Number) product_ai\n\n        instance empty_list List.Empty {}\n        \n        instance reduce_unique Iteration.Reduce {\n            initial_value: empty_list.list\n            items: list_ai\n            handler: [handler1]\n        }\n\n        instance const_one Math.Constant { value: 1 }\n        \n        instance reduce_product Iteration.Reduce {\n            initial_value: const_one.output\n            items: reduce_unique.output_list\n            handler: [handler2]\n        }\n\n        reduce_product.output -> product_ai\n    }\n\n    func() handler1 {\n        in acc: List, item: Number\n        out new_acc: List\n\n        instance contains_ List.Contains {\n            list: acc\n            item: item\n        }\n\n        instance if_node Std.If {\n            input: contains_.is_contained\n        }\n\n        instance add_ List.Add {\n            list: acc\n            item: item\n        }\n\n        \n        data_instance then_data = acc\n        if_node.then -> then_data.execute\n        then_data.value -> new_acc\n\n        \n        if_node.else -> add_.execute\n        add_.listWithItem -> new_acc\n    }\n\n    func() handler2 {\n        in acc: Number, item: Number\n        out new_acc: Number\n\n        instance mul Math.Mul {\n            first: acc\n            second: item\n        }\n        \n        mul.result -> new_acc\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -250, y: -143, name: \"list1\") property(List) list1_8e7a3d\n        in(x: -269, y: 13, name: \"list2\") property(List) list2_7b8c4f\n\n        out(x: 500, y: -130, name: \"result\") property(List) result_9e3d5a\n\n        instance(x: -60, y: -130) concat_3e3d5a root.Std_k98ojb.List.Concat {}\n        instance(x: -240, y: -70) diff1_8e7a3d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 60, y: -70) diff2_7b8c4f root.Std_k98ojb.Sets.Difference {}\n\n        list1_8e7a3d -> diff1_8e7a3d.left\n        list2_7b8c4f -> diff1_8e7a3d.right\n\n        list2_7b8c4f -> diff2_7b8c4f.left\n        list1_8e7a3d -> diff2_7b8c4f.right\n\n        diff1_8e7a3d.difference -> concat_3e3d5a.listA\n        diff2_7b8c4f.difference -> concat_3e3d5a.listB\n\n        concat_3e3d5a.concatenated -> result_9e3d5a\n    }\n\n    \n\n    instance(x: -10, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50) property(List) input_list\n        in(x: -180, y: 100) property(Number) rotation_count\n\n        out(x: 600, y: 75) property(List) output_list\n\n        instance(x: 20, y: 30) get_length root.Std_k98ojb.List.Length {}\n        input_list -> get_length.list\n\n        instance(x: 150, y: 40) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotation_count -> modulo_node.value\n        get_length.length -> modulo_node.divisor\n\n        instance(x: 280, y: 35) subtract_node root.Std_k98ojb.Math.Sub {}\n        get_length.length -> subtract_node.first\n        modulo_node.result -> subtract_node.second\n\n        instance(x: 410, y: 25) first_slice root.Std_k98ojb.List.Slice {}\n        input_list -> first_slice.list\n        0 -> first_slice.start\n        subtract_node.result -> first_slice.end\n\n        instance(x: 410, y: 120) second_slice root.Std_k98ojb.List.Slice {}\n        input_list -> second_slice.list\n        subtract_node.result -> second_slice.start\n        -1 -> second_slice.end\n\n        instance(x: 600, y: 75) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> output_list\n    }\n\n    \n\n    instance(x: -240, y: 130) rotate_right_6f7e5d root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_0e8d7a\n\n        out(x: 659, y: 143, name: \"sum\") property(Number) sum_4b7c3f\n\n        instance(x: 200, y: 143) reduce_7e3a1d root.Std_k98ojb.Iteration.Reduce {}\n        list_0e8d7a -> reduce_7e3a1d.items\n        0 -> reduce_7e3a1d.initialValue\n        func() {\n            in(x: -245, y: -65, name: \"accumulated\") property(Number) accumulated_9b5c3f\n            in(x: -245, y: 28, name: \"current\") property(Number) current_7a1d0e\n\n            out(x: 400, y: -20, name: \"sum\") property(Number) sum_6e9b2c\n\n            instance(x: 150, y: 0) add_8f3d2a root.Std_k98ojb.Math.Add {}\n            accumulated_9b5c3f -> add_8f3d2a.first\n            current_7a1d0e -> add_8f3d2a.second\n            add_8f3d2a.result -> sum_6e9b2c\n        } -> reduce_7e3a1d.reducer\n        reduce_7e3a1d.output -> sum_4b7c3f\n    }\n\n    \n\n    instance(x: -250, y: 143) array_sum_8e3a1d root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -450, y: 0, name: \"execute\") trigger() execute\n        in(x: -300, y: 0, name: \"n\") property(Number) n\n\n        out(x: 800, y: 0, name: \"output\") property(Bool) output\n\n        \n        instance(x: -250, y: 50) less_than_two root.Std_k98ojb.Math.LessThan {\n            first: n,\n            second: 2\n        }\n        instance(x: -150, y: 50) if_less root.Std_k98ojb.Std.If {\n            predicate: less_than_two.output,\n            then: [\n                \n                setter(x: 700, y: 300) set_false = output { new_value: false },\n                trigger() continue_trigger\n            ],\n            else: [ ... ]\n        }\n\n        instance(x: -250, y: 100) equal_two root.Std_k98ojb.Math.Equal {\n            first: n,\n            second: 2\n        }\n        instance(x: -150, y: 100) if_equal_two root.Std_k98ojb.Std.If {\n            predicate: equal_two.output,\n            then: [\n                setter(x: 700, y: 350) set_true = output { new_value: true },\n                trigger() continue_trigger\n            ],\n            else: [ ... ]\n        }\n\n        instance(x: -250, y: 150) mod_two root.Std_k98ojb.Math.Modulo {\n            value: n,\n            divisor: 2\n        }\n        instance(x: -150, y: 150) is_even root.Std_k98ojb.Math.Equal {\n            first: mod_two.result,\n            second: 0\n        }\n        instance(x: -50, y: 150) if_even root.Std_k98ojb.Std.If {\n            predicate: is_even.output,\n            then: [\n                setter(x: 700, y: 400) set_false_even = output { new_value: false },\n                trigger() continue_trigger\n            ],\n            else: [ ... ]\n        }\n\n        \n        instance(x: 100, y: 200) sqrt_n root.Std_k98ojb.Math.Pow {\n            base: n,\n            exponent: 0.5\n        }\n        instance(x: 150, y: 200) floor_sqrt root.Std_k98ojb.Math.Floor {\n            input: sqrt_n.output\n        }\n\n        \n        instance(x: 200, y: 250) generate_divisors root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: floor_sqrt.output\n        }\n\n        \n        func() find_handler {\n            in(x: -100, y: 0, name: \"current\") property(Number) current\n\n            out(x: 200, y: 0, name: \"found\") property(Bool) found\n\n            instance(x: 50, y: 50) mod_current root.Std_k98ojb.Math.Modulo {\n                value: n,\n                divisor: current\n            }\n            instance(x: 100, y: 50) is_divisible root.Std_k98ojb.Math.Equal {\n                first: mod_current.result,\n                second: 0\n            }\n            is_divisible.output -> found\n        } -> find_handler\n\n        instance(x: 300, y: 300) find_divisor root.Std_k98ojb.Iteration.Find {\n            items: generate_divisors.list,\n            handler: find_handler\n        }\n\n        \n        instance(x: 400, y: 350) not_found root.Std_k98ojb.Logic.Not {\n            input: find_divisor.is_found\n        }\n        not_found.output -> output\n\n        \n        execute -> if_less.execute\n        if_less.else -> if_equal_two.execute\n        if_equal_two.else -> if_even.execute\n        if_even.else -> sqrt_n.input\n        floor_sqrt.output -> generate_divisors.to\n        generate_divisors.list -> find_divisor.items\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") check_opposite_signs {\n        in(x: -200, y: 0, name: \"a\") property(Number) a_input\n        in(x: -180, y: 30, name: \"b\") property(Number) b_input\n\n        out(x: 400, y: 0, name: \"output\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"(a > 0 && b < 0) || (a < 0 && b > 0)\"\n        }\n        \n        a_input -> if_expression.gen_0\n        b_input -> if_expression.gen_1\n        if_expression.value -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 100) check_opposite_signs_inst root.main.check_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -245, y: -30, name: \"number\") property(Number) input_num\n        out(x: 397, y: 26, name: \"result\") property(Bool) output_bool\n\n        instance(x: -80, y: -15) modulo_2a4d1b root.Std_k98ojb.Math.Modulo {}\n        instance(x: 210, y: -10) equal_3f7e6c root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_2a4d1b.value\n        11 -> modulo_2a4d1b.divisor\n        modulo_2a4d1b.result -> equal_2a4d1b.left\n        0 -> equal_3f7e6c.right\n        equal_3f7e6c.result -> output_bool\n    }\n\n    \n\n    instance(x: -5, y: 8) is_divisible_by_11_node root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -250, y: 30, name: \"search\") property(String) search_char\n        in(x: -240, y: 60, name: \"replace\") property(String) replace_with\n\n        out(x: 530, y: 0, name: \"output\") property(String) output_str\n\n        instance(x: 180, y: 30) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_char -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) char_replacer root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerConverter {\n        in(x: -240, y: 50, name: \"input\") property(String) input_ai\n        out(x: 300, y: 60, name: \"output\") property(String) output_ai\n\n        instance(x: 100, y: 55) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 20) converterInstance root.main.ToLowerConverter {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") product_of_unique {\n        in(x: -300, y: 50, name: \"list\") property(List) input_list_ai\n        out(x: 800, y: 200, name: \"product\") property(Number) output_product_ai\n\n        \n        instance(empty_list_node root.Std_k98ojb.List.Empty {})\n        \n        instance(reduce_unique root.Iteration.Reduce {}) {\n            items: input_list_ai,\n            initial_value: empty_list_node.list\n        }\n\n        reduce_unique.handler = func() {\n            in(x: 0, y: 0, name=\"current\") property(List) acc_list_ai\n            in(x: 50, y: 0, name=\"item\") property(Number) current_item_ai\n\n            out(x: 100, y: 0, name=\"output\") property(List) new_list_ai\n\n            \n            instance(contains_node root.Std_k98ojb.List.Contains {}) {\n                list: acc_list_ai,\n                item: current_item_ai\n            }\n\n            instance(not_node root.Std_k98ojb.Logic.Not {}) {\n                input: contains_node.result\n            }\n\n            instance(if_node root.Std_k98ojb.Std.If {}) {\n                input: not_node.output\n            }\n\n            \n            instance(add_node root.Std_k98ojb.List.Add {}) {\n                list: acc_list_ai,\n                item: current_item_ai\n            }\n\n            \n            if_node.then -> add_node.execute\n            add_node.listWithItem -> new_list_ai when if_node.then\n\n            \n            acc_list_ai -> new_list_ai when if_node.else\n        }\n\n        \n        instance(initial_product root.Data.Number { value: 1 })\n\n        instance(reduce_product root.Iteration.Reduce {}) {\n            items: reduce_unique.output_value,\n            initial_value: initial_product.value\n        }\n\n        reduce_product.handler = func() {\n            in(x: 0, y: 0, name=\"current\") property(Number) acc_num_ai\n            in(x: 50, y: 0, name=\"item\") property(Number) current_item_ai\n\n            out(x: 100, y: 0, name=\"output\") property(Number) new_prod_ai\n\n            instance(multiply_node root.Std_k98ojb.Math.Mul {}) {\n                first: acc_num_ai,\n                second: current_item_ai\n            }\n\n            multiply_node.result -> new_prod_ai\n        }\n\n        reduce_product.output_value -> output_product_ai\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") dissimilar_elements {\n        in(x: -250, y: 10, name: \"listA\") property(List) listA_3d8a4b\n        in(x: -240, y: -90, name: \"listB\") property(List) listB_7e6f2c\n\n        out(x: 500, y: 0, name: \"result\") property(List) result_1a3d58\n\n        instance(x: 100, y: -20) diffAB_9f1b3c root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 60) diffBA_4e7c8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 350, y: 20) concat_f2a0e1 root.Std_k98ojb.List.Concat {}\n\n        listA_3d8a4b -> diffAB_9f1b3c.left\n        listB_7e6f2c -> diffAB_9f1b3c.right\n\n        listB_7e6f2c -> diffBA_4e7c8d.left\n        listA_3d8a4b -> diffBA_4e7c8d.right\n\n        diffAB_9f1b3c.difference -> concat_f2a0e1.left\n        diffBA_4e7c8d.difference -> concat_f2a0e1.right\n\n        concat_f2a0e1.concatenated -> result_1a3d58\n    }\n\n    \n\n    instance(x: 0, y: 0) dissimilar_elements_node root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -342, y: 15, name: \"list\") property(List) list_8d0a5e\n        in(x: -337, y: 69, name: \"rotateCount\") property(Number) rotateCount_e0b5f8\n\n        out(x: 742, y: 15, name: \"rotatedList\") property(List) rotatedList_0d40f1\n\n        instance(x: -342, y: 15) length_node root.Std_k98ojb.List.Length {}\n        instance(x: -337, y: 69) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 100, y: 15) sub_node root.Std_k98ojb.Math.Sub {}\n        \n        instance(x: 250, y: 15) slice_part1 root.Std_k98ojb.List.Slice {}\n        instance(x: 250, y: 69) slice_part2 root.Std_k98ojb.List.Slice {}\n        instance(x: 450, y: 42) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_8d0a5e -> length_node.list\n        rotateCount_e0b5f8 -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        \n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        list_8d0a5e -> slice_part1.list\n        0 -> slice_part1.start\n        sub_node.result -> slice_part1.end\n\n        list_8d0a5e -> slice_part2.list\n        sub_node.result -> slice_part2.start\n        length_node.length -> slice_part2.end\n        \n        slice_part2.slice -> concat_node.left\n        slice_part1.slice -> concat_node.right\n        concat_node.result -> rotatedList_0d40f1\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of all elements in an array.\") sum_array {\n        in(x: -253, y: 104, name: \"numbers\") property(List) numbers_8d7b5e\n\n        out(x: 649, y: 97, name: \"sum\") property(Number) output_sum\n\n        instance(x: 243, y: 96) reduce_c4c1a0 root.Std_k98ojb.Iteration.Reduce {}\n        numbers_8d7b5e -> reduce_c4c1a0.items\n        0 -> reduce_c4c1a0.initialValue\n\n        func() {\n            in(x: -236, y: -68, name: \"accumulated\") property(Number) acc_9d2f3a\n            in(x: -235, y: 37, name: \"current\") property(Number) current_4e10b8\n\n            out(x: 402, y: -67, name: \"result\") property(Number) result_b3c9d4\n\n            instance(x: 158, y: 1) add_ea5f2d root.Std_k98ojb.Math.Add {}\n            acc_9d2f3a -> add_ea5f2d.first\n            current_4e10b8 -> add_ea5f2d.second\n            add_ea5f2d.result -> result_b3c9d4\n        } -> reduce_c4c1a0.reducer\n\n        reduce_c4c1a0.output -> output_sum\n    }\n\n    \n\n    instance(x: -269, y: 107) sum_array_8e3b65 root.main.sum_array {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime.\") is_prime {\n        in(x: -400, y: 100) property(Number) input_n\n        out(x: 500, y: 200) property(Bool) output_result\n\n        instance lte_1: Std_k98ojb.Math.LessThanOrEqual(left=input_n, right=1)\n        \n        \n        instance initial_if: Std_k98ojb.Std.If(predicate=lte_1.result) {\n            then -> {\n                \n                setter_false: Std_k98ojb.Logic.SetBool(value=false, target=output_result)\n            }\n            else -> {\n                \n                instance pow_sqrt: Std_k98ojb.Math.Pow(x=input_n, y=0.5)\n                instance floor_sqrt: Std_k98ojb.Math.Floor(input=pow_sqrt.result)\n\n                instance generaterange_2_to_sqr: Std_k98ojb.List.GenerateRange(from=2, to=floor_sqrt.output)\n\n                \n                instance filter_divisors: Std_k98ojb.Iteration.Filter(items=generaterange_2_to_sqr.list) {\n                    handler: func() {\n                        in current: Number\n                        \n                        out result: Bool\n\n                        modulo: Std_k98ojb.Math.Modulo(value=input_n, divisor=current)\n                        eq_zero: Std_k98ojb.Logic.Equal(left=modulo.result, right=0)\n\n                        eq_zero.result -> result\n                    }\n                }\n\n                instance count_divisors: Std_k98ojb.List.Count(list=filter_divisors.output_list)\n\n                instance greater_than_zero: Std_k98ojb.Math.GreaterThan(left=count_divisors.count, right=0)\n                \n                \n                instance final_if: Std_k98ojb.Std.If(predicate=greater_than_zero.result) {\n                    then -> {\n                        \n                        setter_false_final: Std_k98ojb.Logic.SetBool(value=false, target=output_result)\n                    }\n                    else -> {\n                        \n                        setter_true_final: Std_k98ojb.Logic.SetBool(value=true, target=output_result)\n                    }\n                }\n            }\n        }\n\n        execute -> initial_if.execute\n    }\n\n    instance test_prime_15 root.main.is_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks whether two integers have opposite signs.\") has_opposite_signs {\n        in(x: -234, y: -105, name: \"a\") property(Number) a_8e3c2b\n        in(x: -226, y: 27, name: \"b\") property(Number) b_9d1a0c\n\n        out(x: 299, y: -78, name: \"output\") property(Bool) output_e5f3e4\n\n        instance(x: 65, y: -84) multiply_b2a1ec root.Std_k98ojb.Math.Mul {}\n        instance(x: 203, y: -84) lessthan_4e7d37 root.Std_k98ojb.Math.LessThan {}\n        a_8e3c2b -> multiply_b2a1ec.first\n        b_9d1a0c -> multiply_b2a1ec.second\n        multiply_b2a1ec.result -> lessthan_4e7d37.left\n        0 -> lessthan_4e7d37.right\n        lessthan_4e7d37.result -> output_e5f3e4\n    }\n\n    \n\n    instance(x: -168, y: -19) has_opposite_signs_4a62a6 root.main.has_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") IsDivisibleByEleven {\n        in(x: -250, y: -24, name: \"number\") property(Number) input_number\n        out(x: 387, y: 23, name: \"output\") property(Bool) output_bool\n\n        instance(x: -60, y: 50) modulo root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: 50) equal root.Std_k98ojb.Logic.Equal {}\n\n        input_number -> modulo.value\n        11 -> modulo.divisor\n        modulo.result -> equal.left\n        0 -> equal.right\n        equal.result -> output_bool\n    }\n\n    \n\n    instance(x: -34, y: 25) check_11 root.main.IsDivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -235, y: 40, name: \"search\") property(String) search_char\n        in(x: -218, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 720, y: 0, name: \"output\") property(String) output_str\n\n        instance(x: 345, y: 40) replace_9a1b3c root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_9a1b3c.input\n        search_char -> replace_9a1b3c.search\n        replace_char -> replace_9a1b3c.replace\n        \n        replace_9a1b3c.output -> output_str\n    }\n\n    \n\n    instance(x: 80, y: -20) replace_chars_funct root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts given string to lower case.\") ToLowerCaseFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) ToLowerInstance_e54b7f root.main.ToLowerCaseFlow {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_qwerty)\n\nmodule main {\n    func(doc: \"Calculates product of unique numbers in a given list\") product_unique {\n        in(x:-400,y:-300) property(List) input_list_ai;\n        out(x:600,y:100) property(Number) output_product_ai;\n\n        \n        instance empty_list_node root.Std_k98ojb.List.Empty {};\n        \n        instance reduce_unique root.Iteration.Reduce {\n            items: input_list_ai;\n            context_in: empty_list_node.list; \n        };\n\n        \n        func() {\n            in acc_list property(List),\n               current_num property(Number);\n            \n            out new_acc_list property(List);\n\n            instance contain root.Std_k98ojb.List.Contains {\n                list: acc_list,\n                item: current_num\n            };\n            \n            instance not_contain root.Logic.Not { \n                input: contain.is_contained;\n            };\n\n            instance if_add_node root.Std.If {\n                input: not_contain.output; \n            };\n            \n            instance add_to_list root.List.Add {\n                list: acc_list,\n                item: current_num\n            };\n\n            \n            if_add_node.then \u2192 trigger() { \n                add_to_list.listWithItem \u2192 new_acc_list;\n            }\n            if_add_node.else \u2192 trigger() { \n                acc_list \u2192 new_acc_list; \n            };\n        };\n\n        \n        data_instance(init_prod) = 1; \n        \n        instance reduce_product root.Iteration.Reduce {\n            items: reduce_unique.accumulated_result;\n            context_in: init_prod; \n        };\n\n        \n        func() {\n            in acc_num property(Number),\n               current_num property(Number);\n            \n            out new_acc_num property(Number);\n\n            instance multiply root.Math.Mul { \n                first: acc_num,\n                second: current_num;\n            };\n            \n            multiply.result \u2192 new_acc_num;\n        };\n\n        \n        reduce_product.accumulated_result \u2192 output_product_ai;\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -300, y: 50, name: \"list1\") property(List) list1_0a8d4b\n        in(x: -300, y: -50, name: \"list2\") property(List) list2_9f7c3e\n\n        out(x: 600, y: 0, name: \"result\") property(List) result_b1a28c\n\n        instance(x: 200, y: 50) diff_a_b root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: -50) diff_b_a root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 0) concat_67e1c3 root.Std_k98ojb.List.Concat {}\n\n        list1_0a8d4b -> diff_a_b.left\n        list2_9f7c3e -> diff_a_b.right\n        list2_9f7c3e -> diff_b_a.left\n        list1_0a8d4b -> diff_b_a.right\n\n        diff_a_b.difference -> concat_67e1c3.left\n        diff_b_a.difference -> concat_67e1c3.right\n        \n        concat_67e1c3.concatenated -> result_b1a28c\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilars_node root.main.find_dissimilars {}\n}"
            ],
            "34": [
                "import(\"std\", Std)\nimport(\"root.Std_k98ojb.List.Slice\", ListSlice)\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -200, y: 50) property(List) input_list;\n        in(y:100) property(Number) shift_k;\n\n        out(...) property(List) rotated_result;\n\n        instance(is_empty_node, root.Std_k98ojb.List.IsEmpty) {\n            list = input_list\n        }\n\n        instance(if_node, Std.If) {\n            cond = is_empty_node.isEmpty \n\n            thenBranch: {\n                rotated_result = input_list\n            }\n\n            elseBranch: {\n                \n                instance(list_length_node, root.Std_k98ojb.List.Length) {\n                    list = input_list\n                }\n                \n                instance(modulo_node, Std.Math.Modulo) {\n                    value = shift_k;\n                    divisor = list_length_node.length;\n                }\n\n                instance(compute_start_node, Std.Math.Sub) {\n                    first = list_length_node.length;\n                    second = modulo_node.result; \n                }\n\n                \n                instance(first_part_slice, ListSlice.Slice) {\n                    list = input_list;\n                    start = compute_start_node.result;\n                    end = -1;\n                }\n                \n                instance(second_part_slice, ListSlice.Slice) {\n                    list = input_list;\n                    start = 0;\n                    end = compute_start_node.result; \n                }\n\n                \n                instance(concat_node, root.Std_k98ojb.List.Concat) {\n                    left = first_part_slice.slice;\n                    right = second_part_slice.slice;\n                } \n\n                rotated_result = concat_node.output; \n            }\n        }\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculate the sum of an array.\") array_sum {\n        in(x: -253, y: 130, name: \"list\") property(List) list_4d9a8e\n\n        out(x: 725, y: 69, name: \"total\") property(Number) total_b9c795\n\n        instance(x: 184, y: 67) reduce_e830f6 root.Std_k98ojb.Iteration.Reduce {}\n        list_4d9a8e -> reduce_e830f6.items\n        0 -> reduce_e830f6.initialValue\n\n        func() {\n            in(x: -217, y: -85, name: \"accumulated\") property(Number) accumulated_d9e1c5\n            in(x: -204, y: 24, name: \"current\") property(Number) current_3d1f6a\n\n            out(x: 1070, y: -85, name: \"summed\") property(Number) summed_f9b8b5\n\n            instance(x: 829, y: -84) add_eef0c4 root.Std_k98ojb.Math.Add {}\n            accumulated_d9e1c5 -> add_eef0c4.first\n            current_3d1f6a -> add_eef0c4.second\n            add_eef0c4.result -> summed_f9b8b5\n        } -> reduce_e830f6.reducer\n\n        reduce_e830f6.output -> total_b9c795\n    }\n\n    \n\n    instance(x: 243, y: 11) array_sum_6d1e37 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if the given integer is a prime number.\") is_prime {\n        in(x: -450, y: -300, name: \"n\") property(Number) n_input\n        in(x: -472, y: 9, name: \"execute\") trigger() execute_start\n\n        out(x: 1605, y: -288, name: \"output\") property(Bool) output_result\n        out(x: 1636, y: -387, name: \"continue\") trigger() continue_end\n\n        instance(x: -450, y: -193, name: \"Initialize result to True\") set_true root.Std_k98ojb.setter(name: \"is_prime_flag\", initial_value: true)\n        instance(x: 227, y: -268, name: \"Check if n < 2\") ifexpr_less_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n_input < 2\",\n            then_branch: [\n                set_false_early,\n                then_out\n            ],\n            else_branch: [\n                compute_sqrt_start\n            ]\n        }\n\n        instance(x: -176, y: -430, name: \"Set false early if n<2\") set_false_early root.Std_k98ojb.setter(name: \"is_prime_flag\", new_value: false)\n        \n        instance(x: 534, y: -373, name: \"Compute sqrt(n)\") pow_half root.Std_k98ojb.Math.Pow {\n            base: n_input,\n            exponent: 0.5\n        }\n        instance(x: 671, y: -382) floor_sqrt root.Std_k98ojb.Math.Floor { input: pow_half.output }\n\n        instance(x: 854, y: -374, name: \"Generate divisors list from 2 to sqrt(n)\") generate_divisors_list root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: floor_sqrt.output\n        }\n        \n        instance(x: 1062, y: -415) for_loop root.Std_k98ojb.Std.For { \n            items: generate_divisors_list.list\n        }\n\n        instance(x: 371, y: -529, name=\"Check modulo zero\") mod_node root.Std_k98ojb.Math.Modulo {\n            value: n_input,\n            divisor: for_loop.item\n        }\n        \n        instance(x: 460, y: -560) equals_zero root.Std_k98ojb.Logic.Equal { \n            left: mod_node.result,\n            right: 0.0\n        }\n\n        instance(x: 623, y: -517, name=\"Handle modulo zero\") if_mod_zero root.Std_k98ojb.Std.If {\n            predicate: equals_zero.result,\n            then_branch: [\n                set_false_during_loop,\n                branch_to_next\n            ],\n            else_branch: [\n                branch_to_next\n            ]\n        }\n        \n        instance(x: 512, y: -607) set_false_during_loop root.Std_k98ojb.setter(name: \"is_prime_flag\", new_value: false)\n        \n        instance(x: 743, y: -527) branch_to_next root.Std_k98ojb.trigger() { /* No action, just pass to next */ }\n        \n\n        instance(x: 1600, y: -285) getter_final root.Std_k98ojb.getter(name: \"is_prime_flag\")\n\n        \n        \n        execute_start --> set_true\n        set_true.continue --> ifexpr_less_2.execute\n        \n        then_out.output --> continue_end \n        \n        compute_sqrt_start.input --> pow_half.base \n        \n        for_loop.reset <-- execute_start\n        floor_sqrt.output --> generate_divisors_list.to\n        \n        for_loop.onItem --> mod_node\n        mod_node.result --> equals_zero.left\n        equals_zero.result --> if_mod_zero.predicate\n\n        set_false_during_loop.continue --> branch_to_next.input \n        \n        \n        branch_to_next.output --> for_loop.next \n\n        for_loop.done --> continue_end\n\n        getter_final.value --> output_result\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks if two integers have opposite signs\") OppositeSigns {\n        in(x: -200, y: 0, name: \"a\") property(Number) a_3f5d\n        in(x: -180, y: 30, name: \"b\") property(Number) b_7a1e\n\n        out(x: 400, y: 0, name: \"output\") property(Bool) output_9c2a\n\n        instance(x: 50, y: 20) multiply root.Std_k98ojb.Math.Mul {}\n        instance(x: 150, y: 20) greaterThan root.Std_k98ojb.Math.GreaterThan {}\n\n        a_3f5d \u2192 multiply.first\n        b_7a1e \u2192 multiply.second\n\n        0 \u2192 greaterThan.left\n        multiply.result \u2192 greaterThan.right\n\n        greaterThan.result \u2192 output_9c2a\n    }\n\n    \n\n    instance(x: -50, y: 100) OppositeSigns_Example root.main.OppositeSigns {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") is_divisible_by_11 {\n        in(x: -240, y: -50, name: \"number\") property(Number) input_num\n        out(x: 300, y: 50, name: \"result\") property(Bool) output_bool\n\n        instance(x: 0, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_node.value\n        modulo_node.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_bool\n    }\n\n    \n\n    instance(x: -100, y: 0) check_11 root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -230, y: 40, name: \"search\") property(String) search_char\n        in(x: -230, y: 80, name: \"replace_with\") property(String) replace_val\n\n        out(x: 530, y: 60, name: \"output\") property(String) output_str\n\n        instance(x: 200, y: 40) replacer_1 root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_1.input\n        search_char -> replacer_1.search\n        replace_val -> replacer_1.replace\n        replacer_1.output -> output_str\n    }\n\n    \n\n    instance(x: 0, y: 0) replace_chars_instance root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: -2, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 1) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: 81, y: 52) to_lower_flow_instance root.main.ToLowerFlow {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -300, y: 50) property(List) input_list\n        out(x: 400, y: 50) property(Number) output\n\n        instance(x: 100, y: 200) reduce_7b3b7b root.Std_k98ojb.Iteration.Reduce {}\n        \n        data_instance(x: -200, y: 150) init_acc = [1.0, []]\n        init_acc -> reduce_7b3b7b.initial_value\n        input_list -> reduce_7b3b7b.items\n\n        func() {\n            in(x: -100, y: 0) property(List) acc_in\n            in(x: 50, y: 0) property(Number) item\n\n            out(x: 200, y: 0) property(List) acc_out\n\n            instance(x: 0, y: 50) get_product root.Std_k98ojb.List.GetAt { index: 0 }\n            instance(x: 0, y: 100) get_seen_list root.Std_k98ojb.List.GetAt { index: 1 }\n\n            acc_in -> get_product.list\n            acc_in -> get_seen_list.list\n\n            instance(x: 150, y: 75) contains_node root.Std_k98ojb.List.Contains {\n                item: item\n            }\n            get_seen_list.item -> contains_node.list\n\n            instance(x: 250, y: 50) if_node root.Std_k98ojb.Std.If {}\n            contains_node.is_contained -> if_node.input\n\n            \n            instance(x: 350, y: 50) then_mul root.Std_k98ojb.Math.Mul {}\n            get_product.item -> then_mul.first\n            item -> then_mul.second\n\n            instance(x: 400, y: 100) add_item root.Std_k98ojb.List.Add {\n                item: item\n            }\n            get_seen_list.item -> add_item.list\n\n            data_instance(x: 500, y: 75) then_acc = [then_mul.result, add_item.listWithItem]\n            then_acc -> acc_out\n\n            \n            data_instance(x: 350, y: 150) else_acc = [get_product.item, get_seen_list.item]\n            else_acc -> acc_out\n\n            if_node.then -> then_mul\n            if_node.else -> else_acc\n        } -> reduce_7b3b7b.handler\n\n        instance(x: 450, y: 250) final_get root.Std_k98ojb.List.GetAt { index: 0 }\n        reduce_7b3b7b.result -> final_get.list\n        final_get.item -> output\n    }\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") find_dissimilar {\n        in(x: -250, y: -143, name: \"list1\") property(List) list1_8e7a3d\n        in(x: -269, y: 13, name: \"list2\") property(List) list2_7b8c4f\n\n        out(x: 500, y: -130, name: \"result\") property(List) result_9e3d5a\n\n        instance(x: -60, y: -130) concat_3e3d5a root.Std_k98ojb.List.Concat {}\n        instance(x: -240, y: -70) diff1_8e7a3d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 60, y: -70) diff2_7b8c4f root.Std_k98ojb.Sets.Difference {}\n\n        list1_8e7a3d -> diff1_8e7a3d.left\n        list2_7b8c4f -> diff1_8e7a3d.right\n\n        list2_7b8c4f -> diff2_7b8c4f.left\n        list1_8e7a3d -> diff2_7b8c4f.right\n\n        diff1_8e7a3d.difference -> concat_3e3d5a.listA\n        diff2_7b8c4f.difference -> concat_3e3d5a.listB\n\n        concat_3e3d5a.concatenated -> result_9e3d5a\n    }\n\n    \n\n    instance(x: -10, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_right {\n        in(x: -200, y: 50) property(List) input_list\n        in(x: -180, y: 100) property(Number) rotation_count\n\n        out(x: 600, y: 75) property(List) output_list\n\n        instance(x: 20, y: 30) get_length root.Std_k98ojb.List.Length {}\n        input_list -> get_length.list\n\n        instance(x: 150, y: 40) modulo_node root.Std_k98ojb.Math.Modulo {}\n        rotation_count -> modulo_node.value\n        get_length.length -> modulo_node.divisor\n\n        instance(x: 280, y: 35) subtract_node root.Std_k98ojb.Math.Sub {}\n        get_length.length -> subtract_node.first\n        modulo_node.result -> subtract_node.second\n\n        instance(x: 410, y: 25) first_slice root.Std_k98ojb.List.Slice {}\n        input_list -> first_slice.list\n        0 -> first_slice.start\n        subtract_node.result -> first_slice.end\n\n        instance(x: 410, y: 120) second_slice root.Std_k98ojb.List.Slice {}\n        input_list -> second_slice.list\n        subtract_node.result -> second_slice.start\n        -1 -> second_slice.end\n\n        instance(x: 600, y: 75) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> output_list\n    }\n\n    \n\n    instance(x: -240, y: 130) rotate_right_6f7e5d root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of an array.\") array_sum {\n        in(x: -250, y: 143, name: \"list\") property(List) list_0e8d7a\n\n        out(x: 659, y: 143, name: \"sum\") property(Number) sum_4b7c3f\n\n        instance(x: 200, y: 143) reduce_7e3a1d root.Std_k98ojb.Iteration.Reduce {}\n        list_0e8d7a -> reduce_7e3a1d.items\n        0 -> reduce_7e3a1d.initialValue\n        func() {\n            in(x: -245, y: -65, name: \"accumulated\") property(Number) accumulated_9b5c3f\n            in(x: -245, y: 28, name: \"current\") property(Number) current_7a1d0e\n\n            out(x: 400, y: -20, name: \"sum\") property(Number) sum_6e9b2c\n\n            instance(x: 150, y: 0) add_8f3d2a root.Std_k98ojb.Math.Add {}\n            accumulated_9b5c3f -> add_8f3d2a.first\n            current_7a1d0e -> add_8f3d2a.second\n            add_8f3d2a.result -> sum_6e9b2c\n        } -> reduce_7e3a1d.reducer\n        reduce_7e3a1d.output -> sum_4b7c3f\n    }\n\n    \n\n    instance(x: -250, y: 143) array_sum_8e3a1d root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime\") IsPrime {\n        in(x: -450, y: 0, name: \"execute\") trigger() execute\n        in(x: -300, y: 0, name: \"n\") property(Number) n\n\n        out(x: 800, y: 0, name: \"output\") property(Bool) output\n\n        \n        instance(x: -250, y: 50) less_than_two root.Std_k98ojb.Math.LessThan {\n            first: n,\n            second: 2\n        }\n        instance(x: -150, y: 50) if_less root.Std_k98ojb.Std.If {\n            predicate: less_than_two.output,\n            then: [\n                \n                setter(x: 700, y: 300) set_false = output { new_value: false },\n                trigger() continue_trigger\n            ],\n            else: [ ... ]\n        }\n\n        instance(x: -250, y: 100) equal_two root.Std_k98ojb.Math.Equal {\n            first: n,\n            second: 2\n        }\n        instance(x: -150, y: 100) if_equal_two root.Std_k98ojb.Std.If {\n            predicate: equal_two.output,\n            then: [\n                setter(x: 700, y: 350) set_true = output { new_value: true },\n                trigger() continue_trigger\n            ],\n            else: [ ... ]\n        }\n\n        instance(x: -250, y: 150) mod_two root.Std_k98ojb.Math.Modulo {\n            value: n,\n            divisor: 2\n        }\n        instance(x: -150, y: 150) is_even root.Std_k98ojb.Math.Equal {\n            first: mod_two.result,\n            second: 0\n        }\n        instance(x: -50, y: 150) if_even root.Std_k98ojb.Std.If {\n            predicate: is_even.output,\n            then: [\n                setter(x: 700, y: 400) set_false_even = output { new_value: false },\n                trigger() continue_trigger\n            ],\n            else: [ ... ]\n        }\n\n        \n        instance(x: 100, y: 200) sqrt_n root.Std_k98ojb.Math.Pow {\n            base: n,\n            exponent: 0.5\n        }\n        instance(x: 150, y: 200) floor_sqrt root.Std_k98ojb.Math.Floor {\n            input: sqrt_n.output\n        }\n\n        \n        instance(x: 200, y: 250) generate_divisors root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: floor_sqrt.output\n        }\n\n        \n        func() find_handler {\n            in(x: -100, y: 0, name: \"current\") property(Number) current\n\n            out(x: 200, y: 0, name: \"found\") property(Bool) found\n\n            instance(x: 50, y: 50) mod_current root.Std_k98ojb.Math.Modulo {\n                value: n,\n                divisor: current\n            }\n            instance(x: 100, y: 50) is_divisible root.Std_k98ojb.Math.Equal {\n                first: mod_current.result,\n                second: 0\n            }\n            is_divisible.output -> found\n        } -> find_handler\n\n        instance(x: 300, y: 300) find_divisor root.Std_k98ojb.Iteration.Find {\n            items: generate_divisors.list,\n            handler: find_handler\n        }\n\n        \n        instance(x: 400, y: 350) not_found root.Std_k98ojb.Logic.Not {\n            input: find_divisor.is_found\n        }\n        not_found.output -> output\n\n        \n        execute -> if_less.execute\n        if_less.else -> if_equal_two.execute\n        if_equal_two.else -> if_even.execute\n        if_even.else -> sqrt_n.input\n        floor_sqrt.output -> generate_divisors.to\n        generate_divisors.list -> find_divisor.items\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if two integers have opposite signs.\") check_opposite_signs {\n        in(x: -200, y: 0, name: \"a\") property(Number) a_input\n        in(x: -180, y: 30, name: \"b\") property(Number) b_input\n\n        out(x: 400, y: 0, name: \"output\") property(Bool) output_bool\n\n        instance(x: 100, y: 50) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"(a > 0 && b < 0) || (a < 0 && b > 0)\"\n        }\n        \n        a_input -> if_expression.gen_0\n        b_input -> if_expression.gen_1\n        if_expression.value -> output_bool\n    }\n\n    \n\n    instance(x: -50, y: 100) check_opposite_signs_inst root.main.check_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -245, y: -30, name: \"number\") property(Number) input_num\n        out(x: 397, y: 26, name: \"result\") property(Bool) output_bool\n\n        instance(x: -80, y: -15) modulo_2a4d1b root.Std_k98ojb.Math.Modulo {}\n        instance(x: 210, y: -10) equal_3f7e6c root.Std_k98ojb.Logic.Equal {}\n\n        input_num -> modulo_2a4d1b.value\n        11 -> modulo_2a4d1b.divisor\n        modulo_2a4d1b.result -> equal_2a4d1b.left\n        0 -> equal_3f7e6c.right\n        equal_3f7e6c.result -> output_bool\n    }\n\n    \n\n    instance(x: -5, y: 8) is_divisible_by_11_node root.main.is_divisible_by_11 {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -250, y: 30, name: \"search\") property(String) search_char\n        in(x: -240, y: 60, name: \"replace\") property(String) replace_with\n\n        out(x: 530, y: 0, name: \"output\") property(String) output_str\n\n        instance(x: 180, y: 30) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replacer_7b3b7b.input\n        search_char -> replacer_7b3b7b.search\n        replace_with -> replacer_7b3b7b.replace\n        \n        replacer_7b3b7b.output -> output_str\n    }\n\n    \n\n    instance(x: -179, y: 30) char_replacer root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"Converts a given string to lowercase.\") ToLowerConverter {\n        in(x: -240, y: 50, name: \"input\") property(String) input_ai\n        out(x: 300, y: 60, name: \"output\") property(String) output_ai\n\n        instance(x: 100, y: 55) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -100, y: 20) converterInstance root.main.ToLowerConverter {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -300, y: 100, name: \"list\") property(List) input_list\n        out(x: 500, y: 200, name: \"product\") property(Number) output_prod\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n        \n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {}\n        input_list -> reduce_unique.items\n        empty_list.empty -> reduce_unique.initial_value\n        \n        \n        func() {\n            in(x: -100, y: 50, name: \"current\") property(List) acc_list\n            in(x: 20, y: 80, name: \"item\") property(Number) current_item\n\n            out(x: 300, y: 60, name: \"\") property(List) new_acc \n\n            instance contains_node root.Std_k98ojb.List.Contains {}\n            acc_list -> contains_node.list\n            current_item -> contains_node.item\n            \n            \n            instance if_node root.Std_k98ojb.Std.If {\n                condition: contains_node.is_contained\n            }\n            \n            acc_list -> if_node.then_value  \n            \n            instance add_node root.Std_k98ojb.List.Add {}\n            acc_list -> add_node.list\n            current_item -> add_node.item\n            add_node.listWithItem -> if_node.else_value\n            \n            if_node.output -> new_acc\n        } -> reduce_unique.handler\n\n        \n        data_instance(initial_1 = 1)  \n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        reduce_unique.result -> reduce_product.items\n        initial_1 -> reduce_product.initial_value\n\n        \n        func() {\n            in(x: -50, y: 20, name: \"current\") property(Number) acc_prod\n            in(x: 30, y: 40, name: \"item\") property(Number) current_num\n\n            out(x: 150, y: 30, name: \"\") property(Number) new_acc \n\n            instance multiply root.Std_k98ojb.Math.Mul {}\n            acc_prod -> multiply.first\n            current_num -> multiply.second\n            multiply.result -> new_acc\n        } -> reduce_product.handler\n\n        \n        reduce_product.result -> output_prod\n    }\n\n    \n    instance test_call root.main.unique_product {\n        input_list = [2, 3, 2, 5]\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds elements present in either of the two lists but not both.\") dissimilar_elements {\n        in(x: -250, y: 10, name: \"listA\") property(List) listA_3d8a4b\n        in(x: -240, y: -90, name: \"listB\") property(List) listB_7e6f2c\n\n        out(x: 500, y: 0, name: \"result\") property(List) result_1a3d58\n\n        instance(x: 100, y: -20) diffAB_9f1b3c root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 60) diffBA_4e7c8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 350, y: 20) concat_f2a0e1 root.Std_k98ojb.List.Concat {}\n\n        listA_3d8a4b -> diffAB_9f1b3c.left\n        listB_7e6f2c -> diffAB_9f1b3c.right\n\n        listB_7e6f2c -> diffBA_4e7c8d.left\n        listA_3d8a4b -> diffBA_4e7c8d.right\n\n        diffAB_9f1b3c.difference -> concat_f2a0e1.left\n        diffBA_4e7c8d.difference -> concat_f2a0e1.right\n\n        concat_f2a0e1.concatenated -> result_1a3d58\n    }\n\n    \n\n    instance(x: 0, y: 0) dissimilar_elements_node root.main.dissimilar_elements {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a list to the right by specified number of items.\") rotate_list {\n        in(x: -320, y: -140, name: \"list\") property(List) list_8b3d5a\n        in(x: -326, y: 79, name: \"rotateCount\") property(Number) count_8b3d5a\n\n        out(x: 845, y: -105, name: \"rotatedList\") property(List) output_8b3d5a\n\n        instance(x: 26, y: -149) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 275, y: -134) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 270, y: 28) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 526, y: -145) slice_part2 root.Std_k98ojb.List.Slice {}\n        instance(x: 532, y: 132) slice_part1 root.Std_k98ojb.List.Slice {}\n        instance(x: 770, y: -98) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_8b3d5a -> length_node.list\n        count_8b3d5a -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        0 -> slice_part1.start\n        sub_node.result -> slice_part1.end\n        list_8b3d5a -> slice_part1.list\n\n        sub_node.result -> slice_part2.start\n        length_node.length -> slice_part2.end\n        list_8b3d5a -> slice_part2.list\n\n        slice_part2.slice -> concat_node.left\n        slice_part1.slice -> concat_node.right\n        concat_node.result -> output_8b3d5a\n    }\n\n    \n\n    instance(x: -279, y: 0) rotate_list_instance root.main.rotate_list {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the sum of all elements in an array.\") sum_array {\n        in(x: -253, y: 104, name: \"numbers\") property(List) numbers_8d7b5e\n\n        out(x: 649, y: 97, name: \"sum\") property(Number) output_sum\n\n        instance(x: 243, y: 96) reduce_c4c1a0 root.Std_k98ojb.Iteration.Reduce {}\n        numbers_8d7b5e -> reduce_c4c1a0.items\n        0 -> reduce_c4c1a0.initialValue\n\n        func() {\n            in(x: -236, y: -68, name: \"accumulated\") property(Number) acc_9d2f3a\n            in(x: -235, y: 37, name: \"current\") property(Number) current_4e10b8\n\n            out(x: 402, y: -67, name: \"result\") property(Number) result_b3c9d4\n\n            instance(x: 158, y: 1) add_ea5f2d root.Std_k98ojb.Math.Add {}\n            acc_9d2f3a -> add_ea5f2d.first\n            current_4e10b8 -> add_ea5f2d.second\n            add_ea5f2d.result -> result_b3c9d4\n        } -> reduce_c4c1a0.reducer\n\n        reduce_c4c1a0.output -> output_sum\n    }\n\n    \n\n    instance(x: -269, y: 107) sum_array_8e3b65 root.main.sum_array {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks if a number is prime.\") is_prime {\n        in(x: -450, y: -213, name: \"n\") property(Number) n_input\n        in(x: -450, y: 0, name: \"execute\") trigger() execute_in\n\n        out(x: 600, y: -213, name: \"output\") property(Bool) output_out\n        out(x: 700, y: 0, name: \"continue\") trigger() continue_out\n\n        instance edge_case_LTE root.Std_k98ojb.Math.LessThanOrEqual {\n            left = n_input,\n            right = 1 \n        }\n\n        instance edge_if root.Std_k98ojb.Std.If {\n            predicate = edge_case_LTE.result\n        }\n\n        \n        getter_edge_false property(Bool) { value = false }\n        setter_output root.Std_k98ojb.Setter(property=output_out, new_value=getter_edge_false.value)\n\n        instance pow_sqrt root.Std_k98ojb.Math.Pow {\n            x = n_input,\n            y = 0.5 \n        }\n\n        instance floor_val root.Std_k98ojb.Math.Floor {\n            input = pow_sqrt.result \n        }\n\n        instance gen_range root.Std_k98ojb.List.GenerateRange {\n            from = 2,\n            to = floor_val.output \n        }\n\n        instance find_divisor root.Std_k98ojb.Iteration.Find {\n            items = gen_range.list,\n\n            handler: func() {\n                in current property(Number)\n\n                instance modulo root.Std_k98ojb.Math.Modulo {\n                    value = n_input,\n                    divisor = current\n                }\n\n                instance eq_zero root.Std_k98ojb.Logic.Equal {\n                    left = modulo.result,\n                    right = 0\n                }\n\n                out bool_result = eq_zero.result \n            }\n        }\n\n        instance has_item root.Std_k98ojb.Std.IfExpression {\n            expression = \"item !== null\",\n            gen_0 = find_divisor.item \n        }\n\n        instance final_if root.Std_k98ojb.Std.If {\n            predicate = has_item.result \n        }\n\n        getter_true property(Bool) { value = true }\n        getter_false property(Bool) { value = false }\n\n        \n        setter_false root.Std_k98ojb.Setter(property=output_out, new_value=getter_false.value)\n        setter_true root.Std_k98ojb.Setter(property=output_out, new_value=getter_true.value)\n\n        \n        execute_in --> edge_if.execute\n\n        \n        edge_if.then --> setter_output.set\n        setter_output.continue --> continue_out\n\n        \n        edge_if.else --> pow_sqrt.trigger\n\n        \n        find_divisor.done --> final_if.execute\n\n        final_if.then --> setter_false.set\n        final_if.else --> setter_true.set\n\n        \n        setter_false.continue --> continue_out\n        setter_true.continue --> continue_out\n    }\n}\n\n\ninstance(x: 0, y: 0) is_prime_instance root.main.is_prime {}"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 12067,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks whether two integers have opposite signs.\") has_opposite_signs {\n        in(x: -234, y: -105, name: \"a\") property(Number) a_8e3c2b\n        in(x: -226, y: 27, name: \"b\") property(Number) b_9d1a0c\n\n        out(x: 299, y: -78, name: \"output\") property(Bool) output_e5f3e4\n\n        instance(x: 65, y: -84) multiply_b2a1ec root.Std_k98ojb.Math.Mul {}\n        instance(x: 203, y: -84) lessthan_4e7d37 root.Std_k98ojb.Math.LessThan {}\n        a_8e3c2b -> multiply_b2a1ec.first\n        b_9d1a0c -> multiply_b2a1ec.second\n        multiply_b2a1ec.result -> lessthan_4e7d37.left\n        0 -> lessthan_4e7d37.right\n        lessthan_4e7d37.result -> output_e5f3e4\n    }\n\n    \n\n    instance(x: -168, y: -19) has_opposite_signs_4a6e12 root.main.has_opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Check if a number is divisible by 11\") IsDivisibleByEleven {\n        in(x: -250, y: -24, name: \"number\") property(Number) input_number\n        out(x: 387, y: 23, name: \"output\") property(Bool) output_bool\n\n        instance(x: -60, y: 50) modulo root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: 50) equal root.Std_k98ojb.Logic.Equal {}\n\n        input_number -> modulo.value\n        11 -> modulo.divisor\n        modulo.result -> equal.left\n        0 -> equal.right\n        equal.result -> output_bool\n    }\n\n    \n\n    instance(x: -34, y: 25) check_11 root.main.IsDivisibleByEleven {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace characters in a string with specified replacements.\") replace_characters {\n        in(x: -230, y: 0, name: \"input\") property(String) input_str\n        in(x: -235, y: 40, name: \"search\") property(String) search_char\n        in(x: -218, y: 80, name: \"replace\") property(String) replace_char\n\n        out(x: 720, y: 0, name: \"output\") property(String) output_str\n\n        instance(x: 345, y: 40) replace_9a1b3c root.Std_k98ojb.Strings.Replace {}\n        \n        input_str -> replace_9a1b3c.input\n        search_char -> replace_9a1b3c.search\n        replace_char -> replace_9a1b3c.replace\n        \n        replace_9a1b3c.output -> output_str\n    }\n\n    \n\n    instance(x: 80, y: -20) replace_chars_funct root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Converts a given string to lowercase.\") ToLowerCaseFlow {\n        in(x: -230, y: 0, name: \"input\") property(String) input_ai\n        out(x: 530, y: 0, name: \"output\") property(String) output_ai\n\n        instance(x: 140, y: 0) tolower_2e1444 root.Std_k98ojb.Strings.ToLower {}\n        input_ai -> tolower_2e1444.input\n        tolower_2e1444.output -> output_ai\n    }\n\n    \n\n    instance(x: -36, y: 52) convert_flow_e54b7f root.main.ToLowerCaseFlow {}\n}"
            ],
            "16": [
                "import(\"std\")\n\nmodule() main {\n\n    func(doc: \"Calculates the product of unique numbers in a given list.\") unique_product {\n        in(x: -200, y: 50, name: \"list\") property(List) input_list\n        out(x: 600, y: 100, name: \"product\") property(Number) output_number\n\n        \n        instance empty_list root.Std.List.Empty {}\n\n        \n        instance reduce_unique_elements root.Iteration.Reduce {\n            items -> input_list\n            initial_value -> empty_list.list\n            \n            handler: func() {  \n                in(x: -100, y: 0, name: \"acc\") property(List) acc_input\n                in(x: 0, y: 0, name: \"current\") property(Number) current_input\n                \n                out(new_acc) List\n                \n                instance contains_check root.Std.List.Contains {\n                    list -> acc_input,\n                    item -> current_input\n                }\n                \n                \n                instance invert root.Logic.Not { input = contains_check.result }\n                instance condition_node root.Std.If { input = invert.output }\n\n                instance add_to_list root.Std.List.Add {\n                    list -> acc_input,\n                    item -> current_input\n                }\n                \n                \n                data_instance(List) selected = acc_input  \n                \n                \n                condition_node.then -> add_to_list.execute\n                add_to_list.listWithItem -> selected.new_value\n\n                getter(x:0,y:0, name: \"getter\") selection = selected\n                selection.value -> new_acc  \n            }\n        }\n\n        \n        data_instance(Number) init_product_val = 1.0\n\n        \n        instance reduce_product root.Iteration.Reduce {\n            items -> reduce_unique_elements.output_list\n            initial_value -> init_product_val\n\n            handler: func() {  \n                in acc_prop: Number (property \"acc\")\n                in current_prop: Number (property \"current\")\n\n                out(new_acc) Number\n\n                instance multiply root.Std.Math.Mul {\n                    first = acc_prop,\n                    second = current_prop\n                }\n                \n                multiply.result -> new_acc\n            }\n        }\n\n        \n        reduce_product.output_value -> output_number\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Finds dissimilar elements between two lists.\") find_dissimilars {\n        in(x: -300, y: 50, name: \"list1\") property(List) list1_0a8d4b\n        in(x: -300, y: -50, name: \"list2\") property(List) list2_9f7c3e\n\n        out(x: 600, y: 0, name: \"result\") property(List) result_b1a28c\n\n        instance(x: 200, y: 50) diff_a_b root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: -50) diff_b_a root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 0) concat_67e1c3 root.Std_k98ojb.List.Concat {}\n\n        list1_0a8d4b -> diff_a_b.left\n        list2_9f7c3e -> diff_a_b.right\n        list2_9f7c3e -> diff_b_a.left\n        list1_0a8d4b -> diff_b_a.right\n\n        diff_a_b.difference -> concat_67e1c3.left\n        diff_b_a.difference -> concat_67e1c3.right\n        \n        concat_67e1c3.concatenated -> result_b1a28c\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilars_node root.main.find_dissimilars {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list to the right by specified number of items.\") rotate_right {\n        in(x: -100, y: 20, name: \"list\") property(List) input_list\n        in(x: -95, y: -30, name: \"k\") property(Number) steps\n\n        out(x: 400, y: 100, name: \"result\") property(List) output_result\n\n        instance(x: 20, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 20, y: 120) mod_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 20, y: 190) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 150, y: 50) slice_a root.Std_k98ojb.List.Slice {}\n        instance(x: 150, y: 150) slice_b root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n\n        \n        input_list \u2192 length_node.list\n\n        \n        steps \u2192 mod_node.value\n        length_node.length \u2192 mod_node.divisor\n\n        \n        sub_node.first \u2190 length_node.length \n        sub_node.second \u2190 mod_node.result \n\n        \n        input_list \u2192 slice_a.list\n        0 \u2192 slice_a.start \n        sub_node.result \u2192 slice_a.end \n\n        \n        input_list \u2192 slice_b.list\n        sub_node.result \u2192 slice_b.start \n        length_node.length \u2192 slice_b.end \n\n        \n        slice_b.slice \u2192 concat_node.left \n        slice_a.slice \u2192 concat_node.right \n        concat_node.result \u2192 output_result\n    }\n\n    \n    instance(x: 0, y: 0) rotator root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculate the sum of an array.\") array_sum {\n        in(x: -253, y: 130, name: \"list\") property(List) list_4d9a8e\n\n        out(x: 725, y: 69, name: \"total\") property(Number) total_ba3bde\n\n        instance(x: 332, y: 70) reduce_12e7f9 root.Std_k98ojb.Iteration.Reduce {}\n        list_4d9a8e -> reduce_12e7f9.items\n        0 -> reduce_12e7f9.initialValue\n\n        func() {\n            in(x: -56, y: -23, name: \"accumulated\") property(Number) acc_e8b3b4\n            in(x: 100, y: -25, name: \"current\") property(Any) current_9d7a1e\n\n            out(x: 184, y: 26, name: \"sum\") property(Number) sum_c5f93a\n\n            instance(x: 107, y: 13) add_a98e3c root.Std_k98ojb.Math.Add {}\n            acc_e8b3b4 -> add_a98e3c.first\n            current_9d7a1e -> add_a98e3c.second\n            add_a98e3c.result -> sum_c5f93a\n        } -> reduce_12e7f9.reducer\n\n        reduce_12e7f9.output -> total_ba3bde\n    }\n\n    \n\n    instance(x: -264, y: 20) array_sum_5d8c85 root.main.array_sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Checks whether given integer is a prime number\") IsPrime {\n        in(x: -500, y: 200, name=\"execute\") trigger() execute_1\n        in(x: -480, y: 300, name=\"number\") property(Number) num\n\n        out(x: 600, y: 200, name=\"output\") property(Bool) output_result\n        out(x: 590, y: 100, name=\"continue\") trigger() cont_1\n\n        instance(x: -300, y: 200) if_less_than_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"num < 2\"\n        }\n\n        \n        setter_false_lt2 = Setter.Bool(value: false)\n\n        \n        instance(x: -300, y: 150) equal_two root.Std_k98ojb.Logic.Equal {\n            left: num,\n            right: 2.0\n        }\n\n        instance if_two root.Std_k98ojb.Std.If {\n            condition: equal_two.result\n            then: output_result = true\n            else: continue\n        }\n\n        \n        instance mod_2 root.Math.Modulo {\n            dividend: num,\n            divisor: 2.0\n        }\n\n        instance is_even root.Logic.Equal(left: mod_2.result, right: 0)\n\n        instance if_even root.Std.IfExpression {\n            expression: \"is_even & !equal_two\"\n            then: output_result = false\n            else: continue\n        }\n\n        \n        instance pow_sqrt root.Math.Pow(x: num, y: 0.5)\n        instance floor_sqrt_node root.Math.Floor(input: pow_sqrt.output)\n\n        instance list_divisors root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: floor_sqrt_node.output\n        }\n\n        \n        func handler_check(root) {\n            in(\"current\", Number)\n            \n            mod = Math.Modulo(dividend: num, divisor: current)\n            is_divisible = Logic.Equal(left: mod.result, right: 0.0)\n\n            out(\"result\", Bool) = is_divisible.result\n        }\n\n        instance map_checks root.Std_k98ojb.Iteration.Map {\n            items: list_divisors.list,\n            handler: handler_check()\n        }\n\n        \n        instance has_divisor root.Std.List.Contains {\n            list: map_checks.output_list,\n            item: true\n        }\n\n        \n        output_result = !has_divisor.is_contained\n\n        \n        execute_1 \u2192 if_less_than_two.execute\n        if_less_than_two.then \u2192 setter_false_lt2\n        if_less_than_two.else \u2192 equal_two\n        equal_two.out \u2192 if_two.cond\n        if_two.else \u2192 mod_2\n        mod_2.out \u2192 is_even\n        is_even.out \u2192 if_even.cond\n        if_even.else \u2192 list_divisors.start\n        \n        \n    }\n}"
            ]
        }
    }
]