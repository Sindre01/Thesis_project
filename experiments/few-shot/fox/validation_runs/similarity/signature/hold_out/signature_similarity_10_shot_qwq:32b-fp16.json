[
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) mul_3e3d8c root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -172) lessthan_6f3d3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_3e3d8c.first\n        y_5390f5 -> mul_3e3d8c.second\n        0 -> lessthan_6f3d3d.right\n        mul_3e3d8c.result -> lessthan_6f3d3d.left\n        lessthan_6f3d3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -207, y: 145) opposite_signs_3e3d8c root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 50) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_8a4d7e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_instance root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_2a6d8c root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_2a6d8c.right\n        input_ai -> equal_2a6d8c.left\n        \n        equal_2a6d8c.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule main {\n\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance unique_reduce root.Std_k98ojb.Iteration.Reduce {}\n            list_5fda54 -> unique_reduce.items\n            empty_list.list -> unique_reduce.initial_value\n\n            \n            func() {\n                in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n                in(x: 100, y: 0, name: \"current\") property(Number) current_num\n\n                out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n                instance contains_1 root.Std_k98ojb.List.Contains {}\n                    acc_in -> contains_1.list\n                    current_num -> contains_1.item\n\n                instance if_node root.Std_k98ojb.Std.If {\n                    condition: contains_1.is_contained  \n                }\n\n                instance add_node root.Std_k98ojb.List.Add {}\n                    acc_in -> add_node.list\n                    current_num -> add_node.item\n\n                \n                if_node.then -> new_acc_out  \n                acc_in -> if_node.then_value \n\n                \n                add_node.listWithItem -> new_acc_out\n            } -> unique_reduce.handler\n\n        \n        data_instance(initial_1) = 1\n\n        \n        instance product_reduce root.Std_k98ojb.Iteration.Reduce {}\n            unique_reduce.result -> product_reduce.items\n            initial_1 -> product_reduce.initial_value \n\n            \n            func() {\n                in(x: 0, y: 0, name: \"acc\") property(Number) acc_num\n                in(x: 100, y: 0, name: \"current\") property(Number) current_num\n\n                out(x: 200, y: 0, name: \"\") property(Number) new_acc_out\n\n                instance mul root.Std_k98ojb.Math.Mul {}\n                    acc_num -> mul.first\n                    current_num -> mul.second\n                    mul.result -> new_acc_out\n            } -> product_reduce.handler\n\n        \n        execute_19300c -> unique_reduce.trigger\n        unique_reduce.done -> product_reduce.trigger\n        product_reduce.done -> continue_45190b\n\n        \n        product_reduce.result -> output_cffcc2\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 100) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: -50) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        sub_node.first <- length_node.length\n        sub_node.second <- modulo_node.result\n\n        slice_second_part.list <- list_48148f\n        slice_second_part.start <- sub_node.result\n        -1 -> slice_second_part.end\n\n        slice_first_part.list <- list_48148f\n        0 -> slice_first_part.start\n        slice_first_part.end <- sub_node.result\n\n        concat_node.left <- slice_second_part.slice\n        concat_node.right <- slice_first_part.slice\n        concat_node.result -> output_823209\n    }\n\n    instance(x: -50, y: 10) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 100, y: 50) reduce_9e7a3d root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e7a3d.items\n        0 -> reduce_9e7a3d.initialValue\n\n        func() {\n            in(x: -150, y: -50, name: \"accumulated\") property(Number) acc_1\n            in(x: -150, y: 50, name: \"current\") property(Number) current_1\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) result_out\n\n            instance(x: 100, y: 0) add_1 root.Std_k98ojb.Math.Add {}\n            acc_1 -> add_1.first\n            current_1 -> add_1.second\n            add_1.result -> result_out\n        } -> reduce_9e7a3d.reducer\n\n        reduce_9e7a3d.output -> sum_2a848f\n    }\n    \n\n    instance(x: 0, y: 0) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -100) if_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"num <= 1\"\n        }\n        \n        num_5c0677 -> if_edge.gen_0\n        execute_b7b391 -> if_edge.execute\n\n        \n        instance(x: -150, y: -200) setter_false root.Std_k98ojb.Setter {\n            value = false\n        }\n        \n        if_edge.then -> setter_false.set\n        setter_false.value -> output_c457b3\n        setter_false.done -> continue_9a54bb\n\n        \n        instance(x: -100, y: -75) subtract_one root.Std_k98ojb.Math.Add {\n            first = num_5c0677\n            second = -1\n        }\n\n        instance(x: 0, y: -50) generate_range root.Std_k98ojb.List.GenerateRange {\n            from = 2\n        }\n        \n        subtract_one.result -> generate_range.to\n\n        \n        instance(x: 200, y: 0) map_mod root.Std_k98ojb.Iteration.Map {\n            items = generate_range.output\n        }\n\n        func() {  \n            in(x: -50, y: 0, name: \"current\") property(Number) current_i;\n            in(x: 0, y: 50, name: \"_context\") property(Number) context_num;\n\n            instance modulo root.Std_k98ojb.Math.Modulo {\n                value = context_num\n                divisor = current_i\n            }\n\n            out(x: 100, y: 0, name: \"output\") property(Number) mod_result;\n            \n            modulo.result -> mod_result;\n        } -> map_mod.handler\n\n        num_5c0677 -> map_mod.context\n\n        \n        instance(x: 300, y: -100) contains_zero root.Std_k98ojb.List.Contains {\n            list = map_mod.output_list\n            item = 0\n        }\n\n        \n        instance(x: 400, y: -50) not_result root.Std_k98ojb.Logic.Not {\n            input = contains_zero.is_contained\n        }\n        \n        \n        instance(x: 450, y: -100) set_output root.Std_k98ojb.Setter {\n            value = not_result.result\n        }\n\n        not_result.result -> set_output.set\n        set_output.value -> output_c457b3\n        set_output.done -> continue_9a54bb\n\n        \n        if_edge.else -> generate_range.start\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) multiply_6d0b8e root.Std_k98ojb.Math.Mul {}\n        instance(x: 56, y: -172) lessthan_9c8e3f root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> multiply_6d0b8e.first\n        y_5390f5 -> multiply_6d0b8e.second\n        0 -> lessthan_9c8e3f.right\n        multiply_6d0b8e.result -> lessthan_9c8e3f.left\n        lessthan_9c8e3f.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -257, y: 14) opposite_signs_7a6d0b root.main.opposite_signs {}\n\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 10) expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"(gen_0 % 11) == 0\"\n        }\n        \n        n_27f29c -> expr_node.gen_0\n        expr_node.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -5, y: -5) is_diff_instance root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_7a9e3b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7a9e3b.input\n        search_ai -> replace_7a9e3b.search\n        replace_ai -> replace_7a9e3b.replace\n        replace_7a9e3b.output -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: -50) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 100) to_lower root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 300, y: 100) equal_7a5d4e root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> to_lower.input\n        input_ai -> equal_7a5d4e.left\n        to_lower.output -> equal_7a5d4e.right\n        equal_7a5d4e.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 20) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        instance(x: -432, y: -100) empty_list_7a4dad root.Std_k98ojb.List.Empty {}\n        instance(x: -50, y: -160) unique_reduce_1 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 200, y: -160) product_reduce_2 root.Std_k98ojb.Iteration.Reduce {}\n\n        \n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n            in(x: 50, y: 0, name: \"current\") property(Number) current_num\n\n            out(x: 150, y: 0, name: \"\") property(List) new_acc_out\n\n            instance contains_3 root.Std_k98ojb.List.Contains {}\n            acc_in -> contains_3.list\n            current_num -> contains_3.item\n\n            instance not_4 root.Std_k98ojb.Logic.Not {}\n            contains_3.is_contained -> not_4.input\n\n            instance if_5 root.Std_k98ojb.Std.If {}\n            not_4.result -> if_5.input\n\n            \n            instance add_6 root.Std_k98ojb.List.Add {}\n            acc_in -> add_6.list\n            current_num -> add_6.item\n            add_6.listWithItem -> if_5.then.new_acc_out\n\n            \n            acc_in -> if_5.else.new_acc_out\n\n            if_5.value -> new_acc_out\n        } -> unique_reduce_1.handler\n\n        \n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_num\n            in(x: 50, y: 0, name: \"current\") property(Number) current_num\n\n            out(x: 150, y: 0, name: \"\") property(Number) product_out\n\n            instance multiply_7 root.Std_k98ojb.Math.Mul {}\n            acc_num -> multiply_7.first\n            current_num -> multiply_7.second\n            multiply_7.result -> product_out\n        } -> product_reduce_2.handler\n\n        \n        execute_19300c -> unique_reduce_1.trigger\n        empty_list_7a4dad.list -> unique_reduce_1.initial_value\n        list_5fda54 -> unique_reduce_1.items\n        unique_reduce_1.result -> product_reduce_2.items\n\n        1.0 -> product_reduce_2.initial_value\n        product_reduce_2.result -> output_cffcc2\n        product_reduce_2.done -> continue_45190b\n    }\n\n    instance(x: -300, y: -200) unique_product_node root.main.unique_product {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) diff_a_b root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 50) diff_b_a root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff_a_b.left\n        list2_ai -> diff_a_b.right\n\n        list2_ai -> diff_b_a.left\n        list1_ai -> diff_b_a.right\n\n        diff_a_b.difference -> concat_node.listA\n        diff_b_a.difference -> concat_node.listB\n\n        concat_node.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) subtract_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 100) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 200) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 500, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        length_node.length -> subtract_node.first\n        modulo_node.result -> subtract_node.second\n\n        list_48148f -> first_slice.list\n        0 -> first_slice.start\n        subtract_node.result -> first_slice.end\n\n        list_48148f -> second_slice.list\n        subtract_node.result -> second_slice.start\n        length_node.length -> second_slice.end\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -50, y: 10) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: 30) reduce_3e8d2b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3e8d2b.items\n        0 -> reduce_3e8d2b.initialValue\n\n        func() {\n            in(x: -150, y: -75, name: \"accumulated\") property(Number) accumulated_4a9f0c\n            in(x: -150, y: 0, name: \"current\") property(Any) current_8e3b6d\n\n            out(x: 200, y: -75, name: \"sum\") property(Number) sum_4a9f0c\n\n            instance(x: 50, y: -75) add_1a3c8f root.Std_k98ojb.Math.Add {}\n            accumulated_4a9f0c -> add_1a3c8f.first\n            current_8e3b6d -> add_1a3c8f.second\n            add_1a3c8f.result -> sum_4a9f0c\n        } -> reduce_3e8d2b.reducer\n\n        reduce_3e8d2b.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -176, y: 55) _sum_3e8d2b root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance ifexpr_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 <= 1\"\n        }\n\n        \n        instance false_node root.Std_k98ojb.Logic.False {}\n        false_node.output -> output_c457b3\n        ifexpr_edge.then -> continue_9a54bb\n\n        \n        instance pow_sqrt root.Std_k98ojb.Math.Pow {\n            x: num_5c0677,\n            y: 0.5\n        }\n        \n        instance floor_sqrt root.Std_k98ojb.Math.Floor {\n            input: pow_sqrt.output\n        }\n\n        \n        instance generate_divisors root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: floor_sqrt.output\n        }\n\n        \n        instance find_divisor root.Std_k98ojb.Iteration.Find {}\n        \n        \n        func() {\n            in(x: -34, y: 12, name: \"current\") property(Number) current_7a5c3e\n\n            instance modulo_ad root.Std_k98ojb.Math.Modulo {\n                value: num_5c0677,\n                divisor: current_7a5c3e\n            }\n\n            instance equal_zero root.Std_k98ojb.Logic.Equal {\n                left: modulo_ad.result,\n                right: 0\n            }\n\n            out(x: 200, y: -14, name: \"predicate\") property(Bool) predicate_out;\n            equal_zero.result -> predicate_out\n        } -> find_divisor.handler\n\n        generate_divisors.output_list -> find_divisor.items\n\n        \n        instance is_found root.Std_k98ojb.Logic.NotEqual {\n            left: find_divisor.item,\n            right: null\n        }\n\n        \n        instance ifexpr_result root.Std_k98ojb.Std.IfExpression {\n            expression: \"is_found.result\"\n        }\n\n        \n        instance false_node2 root.Std_k98ojb.Logic.False {}\n        false_node2.output -> output_c457b3\n        ifexpr_result.then -> continue_9a54bb\n\n        \n        instance true_node root.Std_k98ojb.Logic.True {}\n        true_node.output -> output_c457b3\n        ifexpr_result.else -> continue_9a54bb\n\n        \n        execute_b7b391 -> ifexpr_edge.execute\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -186, y: -174) mul_7e3d5c root.Std_k98ojb.Math.Mul {}\n        instance(x: 103, y: -172) lessthan_3f3d3e root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_7e3d5c.first\n        y_5390f5 -> mul_7e3d5c.second\n        0 -> lessthan_3f3d3e.right\n        mul_7e3d5c.result -> lessthan_3f3d3e.left\n        lessthan_3f3d3e.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -286, y: 140) opposite_signs_7b6d5c root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 0) modulo_4e5d5a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 0) equal_b7c7d5 root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4e5d5a.value\n        11 -> modulo_4e5d5a.divisor\n\n        modulo_4e5d5a.result -> equal_b7c7d5.left\n        0 -> equal_b7c7d5.right\n\n        equal_b7c7d5.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -10, y: 5) is_diff_9e8a4b root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_7a9d3c root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7a9d3c.input\n        search_ai -> replace_7a9d3c.search\n        replace_ai -> replace_7a9d3c.replace\n        replace_7a9d3c.output -> output_ai\n    }\n\n    \n\n    instance(x: 200, y: -50) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 175, y: 210) tolower_4e3a5f root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 450, y: 210) equal_6d2c8a root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_4e3a5f.input\n        input_ai -> equal_6d2c8a.left\n        tolower_4e3a5f.output -> equal_6d2c8a.right\n        equal_6d2c8a.result -> output_ai\n    }\n\n    \n\n    instance(x: -190, y: 170) is_lower_def root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std.List.Empty {}\n\n        \n        instance reduce_unique root.Iteration.Reduce {\n            items: list_5fda54,\n            initial_value: empty_list.list\n        }\n\n        \n        func() unique_handler {\n            in(x:0,y:0, name=\"acc\") property(List) acc_list\n            in(x:1,y:0, name=\"current\") property(Number) current_num\n\n            out(x:2,y:0, name=\"new_acc\") property(List) new_acc_list\n\n            instance contains_node root.Std.List.Contains {\n                item: current_num,\n                list: acc_list\n            }\n\n            instance if_node root.Std.If {\n                condition: !contains_node.is_contained\n            }\n\n            \n            instance add_node root.Std.List.Add {\n                list: acc_list,\n                item: current_num\n            }\n\n            \n            if_node.then -> (add_node.listWithItem -> new_acc_list)\n            if_node.else -> (acc_list -> new_acc_list)\n        }\n        reduce_unique.handler = unique_handler\n\n        \n        instance reduce_product root.Iteration.Reduce {\n            items: reduce_unique.output_value,\n            initial_value: 1\n        }\n\n        \n        func() multiply_handler {\n            in(x:0,y:0, name=\"acc\") property(Number) acc_num\n            in(x:1,y:0, name=\"current\") property(Number) current_num\n\n            out(x:2,y:0, name=\"new_acc\") property(Number) new_acc_num\n\n            instance mul_node root.Std.Math.Mul {\n                first: acc_num,\n                second: current_num\n            }\n            new_acc_num = mul_node.result\n        }\n        reduce_product.handler = multiply_handler\n\n        \n        execute_19300c -> reduce_unique.execute\n        reduce_unique.done -> reduce_product.execute\n\n        \n        output_cffcc2 = reduce_product.output_value\n        reduce_product.done -> continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_01 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference_ab.left\n        list2_ai -> difference_ab.right\n\n        list2_ai -> difference_ba.left\n        list1_ai -> difference_ba.right\n\n        difference_ab.difference -> concat_01.left\n        difference_ba.difference -> concat_01.right\n\n        concat_01.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 50, y: 200) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 140, y: -100) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 260, y: -100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 380, y: -100) subtract_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 500, y: -140) slice_second_part root.Std_k98ojb.List.Slice {} \n        instance(x: 500, y: -60) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 720, y: -100) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        length_node.length -> subtract_node.first\n        modulo_node.result -> subtract_node.second\n\n        0 -> slice_first_part.start\n        subtract_node.result -> slice_first_part.end\n        list_48148f -> slice_first_part.list\n\n        subtract_node.result -> slice_second_part.start\n        -1 -> slice_second_part.end\n        list_48148f -> slice_second_part.list\n\n        slice_second_part.slice -> concat_node.left\n        slice_first_part.slice -> concat_node.right\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: 50, y: -170) rotate_right_6d4eaa root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: 30) reduce_6e8af5 root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_6e8af5.items\n        0 -> reduce_6e8af5.initialValue\n\n        func() {\n            in(x: -140, y: -70, name: \"accumulated\") property(Number) acc_3a3116\n            in(x: -120, y: 20, name: \"current\") property(Number) curr_3c9f8d\n\n            out(x: 150, y: 0, name: \"sum\") property(Number) result_ai\n\n            instance(x: 40, y: 0) add_node root.Std_k98ojb.Math.Add {}\n            acc_3a3116 -> add_node.first\n            curr_3c9f8d -> add_node.second\n            add_node.result -> result_ai\n        } -> reduce_6e8af5.reducer\n\n        reduce_6e8af5.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance lteq_1 root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677\n            right = 1.0\n        }\n\n        instance if_edge_case root.Std_k98ojb.Std.If {\n            predicate = lteq_1.result\n            execute = execute_b7b391\n\n            then: {\n                output_c457b3 = false\n                trigger continue_9a54bb\n            }\n\n            else: {\n                \n                instance sqrt_expr root.Std_k98ojb.Math.Expression {\n                    expression = \"floor(sqrt(x))\"\n                    inputs.x = num_5c0677\n                }\n\n                instance divisors_range root.Std_k98ojb.List.GenerateRange {\n                    from = 2.0\n                    to = sqrt_expr.result\n                }\n\n                \n                func() divisor_predicate {\n                    in(x: -10, y: 0, name: \"current\") property(Number) current_divisor\n                    in(x: 0, y: 30, name: \"_context\") property(Number) context_num\n\n                    instance modulo root.Std_k98ojb.Math.Modulo {\n                        value = context_num\n                        divisor = current_divisor\n                    }\n\n                    instance equal_zero root.Std_k98ojb.Logic.Equal {\n                        left = modulo.result\n                        right = 0.0\n                    }\n\n                    out(x: 150, y: 20, name: \"output\") property(Bool) output_result = equal_zero.result\n                } \n\n                instance filter_divisors root.Std_k98ojb.Iteration.Filter {\n                    items = divisors_range.list\n                    context = num_5c0677\n                    handler = divisor_predicate\n                }\n\n                instance not_empty_list root.Std_k98ojb.List.NotEmpty {\n                    list = filter_divisors.output_list\n                }\n\n                instance not_result root.Std_k98ojb.Logic.Not {\n                    input = not_empty_list.is_contained\n                }\n\n                \n                output_c457b3 = not_result.result\n                trigger continue_9a54bb\n            }\n        } \n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) mul_3e3d8c root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -172) lessthan_6f3a3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_3e3d8c.first\n        y_5390f5 -> mul_3e3d8c.second\n        0 -> lessthan_6f3a3d.right\n        mul_3e3d8c.result -> lessthan_6f3a3d.left\n        lessthan_6f3a3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -207, y: 145) opposite_signs_3e3d8c root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 50) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_8a4d7e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_instance root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_2a6d8c root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_2a6d8c.right\n        input_ai -> equal_2a6d8c.left\n        \n        equal_2a6d8c.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list  \n            \n            handler func() { \n                in acc List, current Number\n                out new_acc List\n                \n                instance contains root.Std_k98ojb.List.Contains {\n                    list: acc\n                    item: current\n                }\n                \n                instance not_contained root.Logic.Not {\n                    input: contains.is_contained\n                }\n                \n                \n                instance ifexpr root.Std_k98ojb.Std.IfExpression {\n                    expression: \"cond ? then_val : else_val\"\n                }\n                \n                instance add_to_list root.Std_k98ojb.List.Add {\n                    list: acc\n                    item: current\n                }\n                \n                not_contained.result \u2192 ifexpr.gen_0  \n                add_to_list.listWithItem \u2192 ifexpr.gen_1  \n                acc \u2192 ifexpr.gen_2  \n                \n                ifexpr.result \u2192 new_acc\n            }\n        }\n\n        \n        instance reduce_product root.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1.0  \n            \n            handler func() { \n                in acc Number, current Number\n                out new_acc Number\n                \n                instance multiply root.Std_k98ojb.Math.Mul {\n                    first: acc\n                    second: current\n                }\n                \n                multiply.result \u2192 new_acc\n            }\n        }\n\n        \n        reduce_product.result \u2192 output_cffcc2\n        \n        execute_19300c \u2192 reduce_unique.execute\n        reduce_unique.continue \u2192 reduce_product.execute\n        reduce_product.continue \u2192 continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 100) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 200) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 550, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        list_48148f -> slice_second_part.list\n        sub_node.result -> slice_second_part.start\n        -1 -> slice_second_part.end\n\n        list_48148f -> slice_first_part.list\n        0 -> slice_first_part.start\n        sub_node.result -> slice_first_part.end\n\n        slice_second_part.slice -> concat_node.left\n        slice_first_part.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -150, y: 0) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9e7a3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e7a3c.items\n        0 -> reduce_9e7a3c.initialValue\n\n        func() {\n            in(x: -150, y: -50, name: \"accumulated\") property(Number) acc_1\n            in(x: -150, y: 50, name: \"current\") property(Number) current_1\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) result_out\n\n            instance(x: 50, y: 0) add_7a3c9e root.Std_k98ojb.Math.Add {}\n            acc_1 -> add_7a3c9e.first\n            current_1 -> add_7a3c9e.second\n            add_7a3c9e.result -> result_out\n        } -> reduce_9e7a3c.reducer\n\n        reduce_9e7a3c.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        instance(x: -200, y: -100) if_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"num <= 1\"\n        }\n\n        \n        setter(x: -300, y: -50, name: \"setter_false\") set_output root.Std_k98ojb.Setter {\n            new_value = false\n        }\n        getter(x: -250, y: 0, name: \"getter_out\") get_output root.Std_k98ojb.Getter {}\n\n        \n        if_edge.then \u2192 set_output.execute\n        set_output.continue \u2192 continue_9a54bb\n        get_output.value \u2192 output_c457b3\n\n        \n        instance(x: -20, y: -150) sub_node root.Std_k98ojb.Math.Subtract {\n            first = num_5c0677,\n            second = 1\n        }\n\n        instance(x: 50, y: -150) gen_range root.Std_k98ojb.List.GenerateRange {\n            from = 2,\n            to = sub_node.result\n        }\n\n        instance(x: 200, y: -150) filter_divisors root.Std_k98ojb.Iteration.Filter {}\n\n        \n        func() handler_filter {\n            in(x: -30, y: -25, name: \"current\") property(Number) current_7a4d\n\n            instance modulo root.Std_k98ojb.Math.Modulo {\n                value = num_5c0677,\n                divisor = current_7a4d\n            }\n\n            instance eq_zero root.Std_k98ojb.Logic.Equal {\n                left = modulo.result,\n                right = 0\n            }\n\n            out(x: 200, y: -25, name: \"predicate\") property(Bool) predicate_out \u2192 eq_zero.result\n        } \u2192 filter_divisors.handler\n\n        \n        instance(x: 400, y: -150) length_node root.Std_k98ojb.List.Length {}\n        filter_divisors.output_list \u2192 length_node.list\n\n        instance(x: 600, y: -150) eq_length_zero root.Std_k98ojb.Logic.Equal {\n            left = length_node.length,\n            right = 0\n        }\n\n        \n        eq_length_zero.result \u2192 output_c457b3\n\n        \n        instance(x: 800, y: -150) dummy root.Std_k98ojb.Dummy {}\n        eq_length_zero.result \u2192 dummy.input\n        dummy.done \u2192 continue_9a54bb\n\n        \n        if_edge.else \u2192 gen_range.start\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) multiply_3b3d8e root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -172) lessthan_9c8b0f root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> multiply_3b3d8e.first\n        y_5390f5 -> multiply_3b3d8e.second\n        0 -> lessthan_9c8b0f.right\n        multiply_3b3d8e.result -> lessthan_9c8b0f.left\n        lessthan_9c8b0f.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -247, y: 15) opposite_signs_6a6a1d root.main.opposite_signs {}\n\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x:5,y:-25,name:\"n\") property(Number) n_27f29c\n        out(x:668,y:2,name:\"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: -50) modulo_4a3d root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: -50) equal_7e1c root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4a3d.value\n        11 -> modulo_4a3d.divisor\n        modulo_4a3d.result -> equal_7e1c.left\n        0 -> equal_7e1c.right\n        equal_7e1c.result -> output_f2630f\n    }\n\n    instance(x: -50, y: 50) is_diff_instance root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_9a7c root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_9a7c.input\n        search_ai -> replacer_9a7c.search\n        replace_ai -> replacer_9a7c.replace\n        replacer_9a7c.output -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: -50) replace_char_inst root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 150, y: 100) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 300, y: 100) equal_node root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_node.right\n        input_ai -> equal_node.left\n        equal_node.result -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_node root.List.Empty {}\n\n        \n        instance unique_reduce root.Iteration.Reduce {\n            items: list_5fda54,\n            initial_value: empty_node.list\n        }\n\n        \n        func() { \n            in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n            in(x: 100, y: 0, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n            instance contains_1 root.List.Contains {\n                list: acc_in,\n                item: item_in\n            }\n\n            instance if_node root.Std.If {\n                input: contains_1.is_contained\n            }\n\n            instance add_node root.List.Add {\n                list: acc_in,\n                item: item_in\n            }\n\n            \n            if_node.then -> (acc_in) -> new_acc_out\n\n            \n            add_node.listWithItem -> new_acc_out\n        }\n\n        \n        instance product_reduce root.Iteration.Reduce {\n            items: unique_reduce.result,\n            initial_value: 1.0\n        }\n\n        \n        func() { \n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: 100, y: 0, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 0, name: \"\") property(Number) new_acc_out\n\n            instance multiply_1 root.Math.Mul {\n                first: acc_in,\n                second: item_in\n            }\n\n            multiply_1.result -> new_acc_out\n        }\n\n        \n        product_reduce.result -> output_cffcc2\n\n        execute_19300c -> unique_reduce.trigger\n        unique_reduce.done -> product_reduce.trigger\n        product_reduce.done -> continue_45190b\n    }\n}\n\ninstance(x: 118, y: -26) unique_product_9dcc3d root.main.unique_product {}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: -290, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 50) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 230, y: 50) concat root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat.listA\n        diff2.difference -> concat.listB\n\n        concat.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 150) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 200) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 500, y: 250) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 300) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> list_length.list\n        n_68068c -> modulo_node.value\n        list_length.length -> modulo_node.divisor\n\n        list_length.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        list_48148f -> first_slice.list\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n\n        list_48148f -> second_slice.list\n        sub_node.result -> second_slice.start\n        list_length.length -> second_slice.end\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: 30) reduce_3e8d2b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3e8d2b.items\n        0 -> reduce_3e8d2b.initialValue\n\n        func() {\n            in(x: -150, y: -75, name: \"accumulated\") property(Number) acc_4a9f8c\n            in(x: -160, y: 30, name: \"current\") property(Number) curr_2f7d1e\n\n            out(x: 200, y: -50, name: \"sum\") property(Number) sum_7b3a9d\n\n            instance(x: 50, y: 0) add_8c4a6f root.Std_k98ojb.Math.Add {}\n            acc_4a9f8c -> add_8c4a6f.first\n            curr_2f7d1e -> add_8c4a6f.second\n            add_8c4a6f.result -> sum_7b3a9d\n        } -> reduce_3e8d2b.reducer\n\n        reduce_3e8d2b.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 100, y: 50) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -100) LTE_node root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677\n            right = 1\n        }\n\n        instance(x: -150, y: -100) if_num_less_than_two root.Std_k98ojb.Std.If {\n            condition = LTE_node.result\n            then do:\n                output_c457b3.set(false)\n                continue_9a54bb.trigger()\n            else proceed\n        }\n\n        instance(x: -200, y: 0) EQ_node_two root.Std_k98ojb.Math.Equal {\n            left = num_5c0677\n            right = 2\n        }\n\n        instance(x: -150, y: 0) if_num_is_two root.Std_k98ojb.Std.If {\n            condition = EQ_node_two.result\n            then do:\n                output_c457b3.set(true)\n                continue_9a54bb.trigger()\n            else proceed\n        }\n\n        instance(x: -200, y: 100) mod_by_two root.Std_k98ojb.Math.Modulo {\n            value = num_5c0677\n            divisor = 2\n        }\n\n        instance(x: -150, y: 100) if_even root.Std_k98ojb.Std.If {\n            condition = (mod_by_two.result == 0)\n            then do:\n                output_c457b3.set(false)\n                continue_9a54bb.trigger()\n            else proceed\n        }\n\n        \n        instance(x: -100, y: 200) generate_divisors root.Std_k98ojb.List.GenerateRange {\n            from = 3\n            to = (num_5c0677 - 1)\n        }\n\n        \n        func() find_handler {\n            in(x: 0, y: 0, name: \"current\") property(Number) current\n\n            out(x: 200, y: 0, name: \"predicate\") property(Bool)\n\n            instance modulo root.Std_k98ojb.Math.Modulo {\n                value = num_5c0677\n                divisor = current\n            }\n\n            instance equal_zero root.Std_k98ojb.Logic.Equal {\n                left = modulo.result\n                right = 0\n            }\n            equal_zero \u2192 predicate\n        }\n\n        \n        instance(x: 50, y: 200) find_divisor root.Std_k98ojb.Iteration.Find {\n            items = generate_divisors.output\n            handler = find_handler\n        }\n\n        \n        instance(x: 150, y: 200) is_found root.Std_k98ojb.Logic.NotEqual {\n            left = find_divisor.result\n            right = null\n        }\n\n        instance(x: 200, y: 200) final_if root.Std_k98ojb.Std.If {\n            condition = is_found.result\n            then do:\n                output_c457b3.set(false)\n            else do:\n                output_c457b3.set(true)\n        }\n\n        \n        final_if \u2192 continue_9a54bb.trigger()\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -186, y: -174) mul_7e3d2c root.Std_k98ojb.Math.Mul {}\n        instance(x: 105, y: -174) lessthan_3f3d3e root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_7e3d2c.first\n        y_5390f5 -> mul_7e3d2c.second\n        0 -> lessthan_3f3d3e.right\n        mul_7e3d2c.result -> lessthan_3f3d3e.left\n        lessthan_3f3d3e.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -186, y: 150) opposite_signs_7b4a2c root.main.opposite_signs {}\n\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 0) modulo_4e5d6a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 0) equal_e7c3d5 root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4e5d6a.value\n        11 -> modulo_4e5d6a.divisor\n\n        modulo_4e5d6a.result -> equal_e7c3d5.left\n        0 -> equal_e7c3d5.right\n\n        equal_e7c3d5.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -10, y: 5) is_diff_9e8a4b root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_7a9d3c root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7a9d3c.input\n        search_ai -> replace_7a9d3c.search\n        replace_ai -> replace_7a9d3c.replace\n        replace_7a9d3c.output -> output_ai\n    }\n\n    \n\n    instance(x: 200, y: -50) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 175, y: 210) tolower_4e3a5f root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 450, y: 210) equal_6d2c8a root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_4e3a5f.input\n        input_ai -> equal_6d2c8a.left\n        tolower_4e3a5f.output -> equal_6d2c8a.right\n        equal_6d2c8a.result -> output_ai\n    }\n\n    \n\n    instance(x: -190, y: 170) is_lower_def root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167) execute_19300c trigger()\n        in(x: -241, y: 24) list_5fda54 property(List)\n        out(x: 887, y: -144) continue_45190b trigger()\n        out(x: 683, y: 73) output_cffcc2 property(Number)\n\n        \n        instance(x: 100, y: 100) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 200, y: 50) unique_reducer root.Std_k98ojb.Iteration.Reduce {}\n        \n        \n        func() {\n            in(x: 10, y: 10, name: \"accumulated\") property(List) acc_list\n            in(x: 20, y: 20, name: \"current_element\") property(Number) current_num\n\n            out(x: 30, y: 30, name: \"\") property(List) new_list\n\n            instance expr_node root.Std_k98ojb.Std.IfExpression {\n                expression: \"!List.Contains(gen_0, gen_1) ? List.Add(gen_0, gen_1) : gen_0\"\n            }\n\n            expr_node.result \u2192 new_list\n        } \u2192 unique_reducer.handler\n\n        \n        list_5fda54 \u2192 unique_reducer.items\n        empty_list.list \u2192 unique_reducer.initial_value\n\n        \n        instance(x: 300, y: 150) product_reducer root.Std_k98ojb.Iteration.Reduce {}\n\n        \n        func() {\n            in(x: 40, y: 40, name: \"acc\") property(Number) acc_val\n            in(x: 50, y: 50, name: \"current_num\") property(Number) current\n\n            out(x: 60, y: 60, name: \"\") property(Number) new_acc\n\n            instance mul_node root.Std_k98ojb.Math.Mul {\n                first: acc_val,\n                second: current\n            }\n\n            mul_node.result \u2192 new_acc\n        } \u2192 product_reducer.handler\n\n        \n        data_instance(x: 350, y: 200) initial_1 = 1 \u2192 product_reducer.initial_value\n        \n        \n        unique_reducer.reduced \u2192 product_reducer.items\n\n        \n        product_reducer.reduced \u2192 output_cffcc2\n\n        \n        execute_19300c \u2192 empty_list.execute  \n        product_reducer.done \u2192 continue_45190b  \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat_node.left\n        diff2.difference -> concat_node.right\n\n        concat_node.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 145, y: -109) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 361, y: -107) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 572, y: -104) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 805, y: -136) part2_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 805, y: -42) part1_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 1073, y: -93) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n        list_48148f -> part2_slice.list\n        sub_node.result -> part2_slice.start\n        -1 -> part2_slice.end\n        list_48148f -> part1_slice.list\n        0 -> part1_slice.start\n        sub_node.result -> part1_slice.end\n        part2_slice.slice -> concat_node.left\n        part1_slice.slice -> concat_node.right\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -54, y: 67) rotate_right_3d7a5c root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: 30) reduce_6e8af5 root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_6e8af5.items\n        0 -> reduce_6e8af5.initialValue\n\n        func() {\n            in(x: -140, y: -70, name: \"accumulated\") property(Number) acc_3a3116\n            in(x: -120, y: 20, name: \"current\") property(Number) curr_3c9f8d\n\n            out(x: 150, y: 0, name: \"sum\") property(Number) result_ai\n\n            instance(x: 40, y: 0) add_node root.Std_k98ojb.Math.Add {}\n            acc_3a3116 -> add_node.first\n            curr_3c9f8d -> add_node.second\n            add_node.result -> result_ai\n        } -> reduce_6e8af5.reducer\n\n        reduce_6e8af5.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x=-200,y=50) less_than_or_equal root.Std_k98ojb.Math.LessThanOrEqual {}\n        num_5c0677 \u2192 less_than_or_equal.left\n        constant(1) \u2192 less_than_or_equal.right\n\n        instance(x=-100,y=50) if_edge_case root.Std_k98ojb.Std.If {}\n        less_than_or_equal.result \u2192 if_edge_case.predicate\n        execute_b7b391 \u2192 if_edge_case.execute\n\n        \n        instance(x=-50,y=60) false_node root.Std_k98ojb.Logic.False {}\n        false_node.output \u2192 output_c457b3\n        if_edge_case.then \u2192 false_node.trigger\n        false_node.done \u2192 continue_9a54bb\n\n        \n        instance(x=100,y=60) sqrt_expression root.Std_k98ojb.Math.Expression {}\n        sqrt_expression.expression = \"sqrt(x)\"\n        num_5c0677 \u2192 sqrt_expression.x\n\n        instance(x=200,y=60) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        sqrt_expression.output \u2192 floor_sqrt.input\n\n        instance(x=300,y=60) generate_range root.Std_k98ojb.List.GenerateRange {}\n        constant(2) \u2192 generate_range.from\n        floor_sqrt.output \u2192 generate_range.to\n\n        \n        instance(x=400,y=70) length_list root.Std_k98ojb.List.Length {}\n        generate_range.list \u2192 length_list.list\n\n        instance(x=500,y=70) eq_zero root.Std_k98ojb.Logic.Equal {}\n        length_list.length \u2192 eq_zero.left\n        constant(0) \u2192 eq_zero.right\n\n        instance(x=600,y=70) if_empty_list root.Std_k98ojb.Std.If {}\n        eq_zero.result \u2192 if_empty_list.predicate\n        if_edge_case.else \u2192 if_empty_list.execute\n\n        \n        instance(x=650,y=80) true_node root.Std_k98ojb.Logic.True {}\n        true_node.output \u2192 output_c457b3\n        if_empty_list.then \u2192 true_node.trigger\n        true_node.done \u2192 continue_9a54bb\n\n        \n        instance(x=700,y=80) filter_divisors root.Std_k98ojb.Iteration.Filter {}\n        generate_range.list \u2192 filter_divisors.items\n\n        \n        func() {\n            in(x=0,y=0,name=\"current\") property(Number) current_123456;\n\n            out(x=100,y=0,name=\"predicate\") property(Bool) predicate_out;\n\n            instance(x=20,y=0) modulo_node root.Std_k98ojb.Math.Modulo {};\n            num_5c0677 \u2192 modulo_node.value\n            current_123456 \u2192 modulo_node.divisor\n\n            instance(x=80,y=0) eq_zero_mod root.Std_k98ojb.Logic.Equal {};\n            modulo_node.result \u2192 eq_zero_mod.left\n            constant(0) \u2192 eq_zero_mod.right\n\n            eq_zero_mod.result \u2192 predicate_out\n        } -> filter_divisors.handler\n\n        \n        instance(x=750,y=90) len_filtered root.Std_k98ojb.List.Length {}\n        filter_divisors.output_list \u2192 len_filtered.list\n\n        \n        instance(x=800,y=100) gt_zero root.Std_k98ojb.Math.GreaterThan {};\n        len_filtered.length \u2192 gt_zero.left\n        constant(0) \u2192 gt_zero.right\n\n        instance(x=850,y=110) not_gt root.Std_k98ojb.Logic.Not {};\n        gt_zero.result \u2192 not_gt.input\n\n        \n        not_gt.output \u2192 output_c457b3\n        if_empty_list.else \u2192 filter_divisors.execute\n        filter_divisors.done \u2192 len_filtered.list_trigger\n        len_filtered.done \u2192 gt_zero.trigger\n        gt_zero.result \u2192 not_gt.input\n        not_gt.done \u2192 continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) mul_3e3d8c root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -172) lessthan_6f3a3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_3e3d8c.first\n        y_5390f5 -> mul_3e3d8c.second\n        0 -> lessthan_6f3a3d.right\n        mul_3e3d8c.result -> lessthan_6f3a3d.left\n        lessthan_6f3a3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -207, y: 145) opposite_signs_3e3d8c root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 50) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_8a4d7e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_instance root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_2a6d8c root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_2a6d8c.right\n        input_ai -> equal_2a6d8c.left\n        \n        equal_2a6d8c.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list  \n            \n            handler func() { \n                in acc List, current Number\n                out new_acc List\n                \n                instance contains root.Std_k98ojb.List.Contains {\n                    list: acc\n                    item: current\n                }\n                \n                instance not_contained root.Logic.Not {\n                    input: contains.is_contained\n                }\n                \n                \n                instance ifexpr root.Std_k98ojb.Std.IfExpression {\n                    expression: \"cond ? then_val : else_val\"\n                }\n                \n                instance add_to_list root.Std_k98ojb.List.Add {\n                    list: acc\n                    item: current\n                }\n                \n                not_contained.result \u2192 ifexpr.gen_0  \n                add_to_list.listWithItem \u2192 ifexpr.gen_1  \n                acc \u2192 ifexpr.gen_2  \n                \n                ifexpr.result \u2192 new_acc\n            }\n        }\n\n        \n        instance reduce_product root.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1.0  \n            \n            handler func() { \n                in acc Number, current Number\n                out new_acc Number\n                \n                instance multiply root.Std_k98ojb.Math.Mul {\n                    first: acc\n                    second: current\n                }\n                \n                multiply.result \u2192 new_acc\n            }\n        }\n\n        \n        reduce_product.result \u2192 output_cffcc2\n        \n        execute_19300c \u2192 reduce_unique.execute\n        reduce_unique.continue \u2192 reduce_product.execute\n        reduce_product.continue \u2192 continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 100) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 200) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 550, y: 150) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        list_48148f -> slice_second_part.list\n        sub_node.result -> slice_second_part.start\n        -1 -> slice_second_part.end\n\n        list_48148f -> slice_first_part.list\n        0 -> slice_first_part.start\n        sub_node.result -> slice_first_part.end\n\n        slice_second_part.slice -> concat_node.left\n        slice_first_part.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -150, y: 0) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9e7a3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e7a3c.items\n        0 -> reduce_9e7a3c.initialValue\n\n        func() {\n            in(x: -150, y: -50, name: \"accumulated\") property(Number) acc_1\n            in(x: -150, y: 50, name: \"current\") property(Number) current_1\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) result_out\n\n            instance(x: 50, y: 0) add_7a3c9e root.Std_k98ojb.Math.Add {}\n            acc_1 -> add_7a3c9e.first\n            current_1 -> add_7a3c9e.second\n            add_7a3c9e.result -> result_out\n        } -> reduce_9e7a3c.reducer\n\n        reduce_9e7a3c.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        instance lessThanEq root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677\n            right = 1\n        }\n\n        instance ifEdgeCase root.Std_k98ojb.Std.If {\n            predicate = lessThanEq.result\n        }\n\n        \n        instance setFalse root.Std_k98ojb.Logic.False {}\n        output_c457b3 = setFalse.output\n\n        \n        ifEdgeCase.then -> {\n            trigger continue_9a54bb\n        }\n\n        \n        instance subOne root.Std_k98ojb.Math.Sub {\n            first = num_5c0677\n            second = 1\n        }\n\n        instance generateRange root.Std_k98ojb.List.GenerateRange {\n            from = 2\n            to = subOne.result\n        }\n\n        instance filterDivisors root.Std_k98ojb.Iteration.Filter {\n            items = generateRange.list\n        }\n\n        \n        filterDivisors.handler = func() {\n            in(x: -10, y: 5, name: \"current\") property(Number) current_3f7a2b\n\n            instance modulo root.Std_k98ojb.Math.Modulo {\n                value = num_5c0677\n                divisor = current_3f7a2b\n            }\n\n            instance eqZero root.Std_k98ojb.Logic.Equal {\n                left = modulo.result\n                right = 0\n            }\n\n            out(x: 150, y: 40, name: \"result\") property(Bool) result_6d3e7a = eqZero.result\n        }\n\n        instance checkEmpty root.Std_k98ojb.List.IsEmpty {\n            list = filterDivisors.output_list\n        }\n\n        \n        output_c457b3 = checkEmpty.is_empty\n\n        \n        ifEdgeCase.else -> {\n            trigger continue_9a54bb\n        }\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) multiply_3b3d8e root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -172) lessthan_9c8c8f root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> multiply_3b3d8e.first\n        y_5390f5 -> multiply_3b3d8e.second\n        multiply_3b3d8e.result -> lessthan_9c8c8f.left\n        0 -> lessthan_9c8c8f.right\n        lessthan_9c8c8f.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -275, y: -146) opposite_signs_3e3d0b root.main.opposite_signs {}\n\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x:5,y:-25,name:\"n\") property(Number) n_27f29c\n        out(x:668,y:2,name:\"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: -50) modulo_4a3d root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: -50) equal_7e1c root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4a3d.value\n        11 -> modulo_4a3d.divisor\n        modulo_4a3d.result -> equal_7e1c.left\n        0 -> equal_7e1c.right\n        equal_7e1c.result -> output_f2630f\n    }\n\n    instance(x: -50, y: 50) is_diff_instance root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_9a7c root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_9a7c.input\n        search_ai -> replacer_9a7c.search\n        replace_ai -> replacer_9a7c.replace\n        replacer_9a7c.output -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: -50) replace_char_inst root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 200, y: 100) tolower_aj root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 100) equal_node root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_aj.input\n        input_ai -> equal_node.left\n        tolower_aj.output -> equal_node.right\n        equal_node.result -> output_ai\n    }\n\n    \n\n    instance(x: -200, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k4a2c)\n\nmodule main {\n\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance unique_reduce root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54,\n            initial_value: empty_list.list\n        }\n\n        \n        unique_reduce.handler = func() {\n            in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n            in(x: 100, y: 0, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n            instance contains root.Std_k98ojb.List.Contains {\n                list: acc_in,\n                item: item_in\n            }\n\n            instance if_node root.Std_k98ojb.Std.If {\n                input: contains.is_contained\n            }\n\n            instance add_node root.Std_k98ojb.List.Add {\n                list: acc_in,\n                item: item_in\n            }\n\n            \n            if_node.then -> (acc_in) -> new_acc_out\n            add_node.listWithItem -> new_acc_out\n        }\n\n        \n        instance product_reduce root.Std_k98ojb.Iteration.Reduce {\n            items: unique_reduce.result,\n            initial_value: 1.0\n        }\n\n        \n        product_reduce.handler = func() {\n            in(x: 0, y: 0, name: \"current\") property(Number) acc_in\n            in(x: 100, y: 0, name: \"item\") property(Number) item_in\n\n            out(x: 200, y: 0, name: \"\") property(Number) product_out\n\n            instance multiply root.Std_k98ojb.Math.Mul {\n                first: acc_in,\n                second: item_in\n            }\n\n            multiply.result -> product_out\n        }\n\n        \n        product_reduce.result -> output_cffcc2\n        execute_19300c -> unique_reduce.execute  \n        product_reduce.done -> continue_45190b   \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: -290, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 50) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 230, y: 50) concat root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat.listA\n        diff2.difference -> concat.listB\n\n        concat.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 150) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 200) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 500, y: 250) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 300) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> list_length.list\n        n_68068c -> modulo_node.value\n        list_length.length -> modulo_node.divisor\n\n        list_length.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        list_48148f -> first_slice.list\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n\n        list_48148f -> second_slice.list\n        sub_node.result -> second_slice.start\n        list_length.length -> second_slice.end\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: 30) reduce_3e8d2b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_3e8d2b.items\n        0 -> reduce_3e8d2b.initialValue\n\n        func() {\n            in(x: -150, y: -75, name: \"accumulated\") property(Number) acc_4a9f8c\n            in(x: -160, y: 30, name: \"current\") property(Number) curr_2f7d1e\n\n            out(x: 200, y: -50, name: \"sum\") property(Number) sum_7b3a9d\n\n            instance(x: 50, y: 0) add_8c4a6f root.Std_k98ojb.Math.Add {}\n            acc_4a9f8c -> add_8c4a6f.first\n            curr_2f7d1e -> add_8c4a6f.second\n            add_8c4a6f.result -> sum_7b3a9d\n        } -> reduce_3e8d2b.reducer\n\n        reduce_3e8d2b.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 100, y: 50) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance LTE_node root.Std_k98ojb.Math.LessThanOrEqual {\n            first = num_5c0677\n            second = 1\n        }\n\n        instance if_edge_case1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"LTE_node.result\"\n        }\n\n        \n        setter(setter_false) = output_c457b3 with new_value=false\n        trigger(if_edge_case1.then \u2192 setter_false.execute)\n        trigger(setter_false.continue \u2192 continue_9a54bb)\n\n        \n        instance proceed_after_edge1 root.Std_k98ojb.Std.If {\n            predicate: \"not LTE_node.result\"\n        }\n        trigger(execute_b7b391 \u2192 proceed_after_edge1.execute)\n        trigger(proceed_after_edge1.then \u2192 if_edge_case2.execute)\n\n        \n        instance EQ_node root.Std_k98ojb.Math.Equal {\n            first = num_5c0677\n            second = 2\n        }\n\n        instance if_edge_case2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"EQ_node.result\"\n        }\n\n        \n        setter(setter_true) = output_c457b3 with new_value=true\n        trigger(if_edge_case2.then \u2192 setter_true.execute)\n        trigger(setter_true.continue \u2192 continue_9a54bb)\n\n        \n        instance proceed_after_edge2 root.Std_k98ojb.Std.If {\n            predicate: \"not EQ_node.result\"\n        }\n        trigger(if_edge_case1.else \u2192 proceed_after_edge2.execute)\n        trigger(proceed_after_edge2.then \u2192 if_even.execute)\n\n        \n        instance mod2_node root.Std_k98ojb.Math.Modulo {\n            value = num_5c0677\n            divisor = 2\n        }\n\n        instance eq_zero_mod2 root.Std_k98ojb.Math.Equal {\n            first = mod2_node.result\n            second = 0\n        }\n\n        instance if_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"eq_zero_mod2.result\"\n        }\n\n        \n        trigger(if_even.then \u2192 setter_false.execute)\n\n        \n        instance proceed_after_edge3 root.Std_k98ojb.Std.If {\n            predicate: \"not eq_zero_mod2.result\"\n        }\n        trigger(proceed_after_edge2.else \u2192 proceed_after_edge3.execute)\n        trigger(proceed_after_edge3.then \u2192 generate_range.execute)\n\n        \n        instance generate_range root.Std_k98ojb.List.GenerateRange {\n            from = 3\n            to = (num_5c0677 - 1)\n        }\n\n        \n        instance filter_divisors root.Std_k98ojb.Iteration.Filter {}\n\n        func handler_filter {\n            in current: Number\n\n            instance mod_node root.Std_k98ojb.Math.Modulo {\n                value = num_5c0677\n                divisor = current\n            }\n\n            instance eq_zero_mod root.Std_k98ojb.Math.Equal {\n                first = mod_node.result\n                second = 0\n            }\n\n            out result: eq_zero_mod.result\n        } \u2192 filter_divisors.handler\n\n        \n        instance list_length root.Std_k98ojb.List.Length {}\n        inputs:\n            list_length.list = filter_divisors.output_list\n\n        instance gt_zero root.Std_k98ojb.Math.GreaterThan {\n            first = list_length.result\n            second = 0\n        }\n\n        \n        instance if_has_divisors root.Std_k98ojb.Std.IfExpression {\n            expression: \"gt_zero.result\"\n        }\n        trigger(if_has_divisors.then \u2192 setter_false.execute)\n\n        \n        trigger(if_has_divisors.else \u2192 setter_true.execute)\n\n        \n        trigger(generate_range.list \u2192 filter_divisors.items)\n        trigger(proceed_after_edge3.then \u2192 generate_range.execute)\n        trigger(filter_divisors.output_list \u2192 list_length.list)\n        trigger(list_length.result \u2192 gt_zero.first)\n        trigger(gt_zero.result \u2192 if_has_divisors.predicate)\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -186, y: -174) mul_7e3d2c root.Std_k98ojb.Math.Mul {}\n        instance(x: 105, y: -174) lessthan_3f3d3e root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_7e3d2c.first\n        y_5390f5 -> mul_7e3d2c.second\n        0 -> lessthan_3f3d3e.right\n        mul_7e3d2c.result -> lessthan_3f3d3e.left\n        lessthan_3f3d3e.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -186, y: 150) opposite_signs_7b4a2c root.main.opposite_signs {}\n\n\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 0) modulo_4e5d6a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 0) equal_e7c3d5 root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4e5d6a.value\n        11 -> modulo_4e5d6a.divisor\n\n        modulo_4e5d6a.result -> equal_e7c3d5.left\n        0 -> equal_e7c3d5.right\n\n        equal_e7c3d5.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -10, y: 5) is_diff_9e8a4b root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_7a9d3c root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7a9d3c.input\n        search_ai -> replace_7a9d3c.search\n        replace_ai -> replace_7a9d3c.replace\n        replace_7a9d3c.output -> output_ai\n    }\n\n    \n\n    instance(x: 200, y: -50) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 175, y: 210) tolower_4e3a5f root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 450, y: 210) equal_6d2c8a root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_4e3a5f.input\n        input_ai -> equal_6d2c8a.left\n        tolower_4e3a5f.output -> equal_6d2c8a.right\n        equal_6d2c8a.result -> output_ai\n    }\n\n    \n\n    instance(x: -190, y: 170) is_lower_def root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k986c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance unique_reduce root.Std_k98ojb.Iteration.Reduce {}\n        list_5fda54 -> unique_reduce.items\n        empty_list.list -> unique_reduce.initial_value\n\n        \n        func() {\n            in(x: 0, y: 0) name(\"accumulated\") property(List) acc_list\n            in(x: 10, y: 0) name(\"current_element\") property(Number) current_num\n\n            instance contains_node root.Std_k98ojb.List.Contains {}\n            acc_list -> contains_node.list\n            current_num -> contains_node.item\n\n            \n            instance ifexpr root.Std_k98ojb.Std.If {\n                input: !contains_node.result\n            }\n\n            \n            instance add_node root.Std_k98ojb.List.Add {}\n            acc_list -> add_node.list\n            current_num -> add_node.item\n\n            \n            add_node.listWithItem -> ifexpr.then_value\n            acc_list -> ifexpr.else_value\n\n            out(x: 0, y: 20) name(\"output\") property(List) new_acc\n            ifexpr.value -> new_acc\n        } -> unique_reduce.handler\n\n        \n        instance product_reduce root.Std_k98ojb.Iteration.Reduce {}\n        unique_reduce.result -> product_reduce.items\n        1.0 -> product_reduce.initial_value \n\n        \n        func() {\n            in(x: 0, y: 0) name(\"accumulated_product\") property(Number) acc_prod\n            in(x: 10, y: 0) name(\"current_num\") property(Number) current_val\n\n            instance multiply_node root.Std_k98ojb.Math.Mul {}\n            acc_prod -> multiply_node.first\n            current_val -> multiply_node.second\n\n            out(x: 0, y: 20) name(\"output\") property(Number) new_prod\n            multiply_node.result -> new_prod\n        } -> product_reduce.handler\n\n        \n        execute_19300c -> unique_reduce.execute \n        unique_reduce.done -> product_reduce.start \n        product_reduce.done -> continue_45190b\n        product_reduce.result -> output_cffcc2\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat_node.left\n        diff2.difference -> concat_node.right\n\n        concat_node.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 145, y: -109) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 361, y: -107) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 572, y: -104) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 805, y: -136) part2_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 805, y: -42) part1_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 1073, y: -93) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n        list_48148f -> part2_slice.list\n        sub_node.result -> part2_slice.start\n        -1 -> part2_slice.end\n        list_48148f -> part1_slice.list\n        0 -> part1_slice.start\n        sub_node.result -> part1_slice.end\n        part2_slice.slice -> concat_node.left\n        part1_slice.slice -> concat_node.right\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -54, y: 67) rotate_right_3d7a5c root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 190, y: 30) reduce_6e8af5 root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_6e8af5.items\n        0 -> reduce_6e8af5.initialValue\n\n        func() {\n            in(x: -140, y: -70, name: \"accumulated\") property(Number) acc_3a3116\n            in(x: -120, y: 20, name: \"current\") property(Number) curr_3c9f8d\n\n            out(x: 150, y: 0, name: \"sum\") property(Number) result_ai\n\n            instance(x: 40, y: 0) add_node root.Std_k98ojb.Math.Add {}\n            acc_3a3116 -> add_node.first\n            curr_3c9f8d -> add_node.second\n            add_node.result -> result_ai\n        } -> reduce_6e8af5.reducer\n\n        reduce_6e8af5.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x=-200,y=50) less_than_or_equal root.Std_k98ojb.Math.LessThanOrEqual {}\n        num_5c0677 \u2192 less_than_or_equal.left\n        constant(1) \u2192 less_than_or_equal.right\n\n        instance(x=-100,y=50) if_edge_case root.Std_k98ojb.Std.If {}\n        less_than_or_equal.result \u2192 if_edge_case.predicate\n        execute_b7b391 \u2192 if_edge_case.execute\n\n        \n        instance(x=-50,y=60) false_node root.Std_k98ojb.Logic.False {}\n        false_node.output \u2192 output_c457b3\n        if_edge_case.then \u2192 false_node.trigger\n        false_node.done \u2192 continue_9a54bb\n\n        \n        instance(x=100,y=60) sqrt_expression root.Std_k98ojb.Math.Expression {}\n        sqrt_expression.expression = \"sqrt(x)\"\n        num_5c0677 \u2192 sqrt_expression.x\n\n        instance(x=200,y=60) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        sqrt_expression.output \u2192 floor_sqrt.input\n\n        instance(x=300,y=60) generate_range root.Std_k98ojb.List.GenerateRange {}\n        constant(2) \u2192 generate_range.from\n        floor_sqrt.output \u2192 generate_range.to\n\n        \n        instance(x=400,y=70) length_list root.Std_k98ojb.List.Length {}\n        generate_range.list \u2192 length_list.list\n\n        instance(x=500,y=70) eq_zero root.Std_k98ojb.Logic.Equal {}\n        length_list.length \u2192 eq_zero.left\n        constant(0) \u2192 eq_zero.right\n\n        instance(x=600,y=70) if_empty_list root.Std_k98ojb.Std.If {}\n        eq_zero.result \u2192 if_empty_list.predicate\n        if_edge_case.else \u2192 if_empty_list.execute\n\n        \n        instance(x=650,y=80) true_node root.Std_k98ojb.Logic.True {}\n        true_node.output \u2192 output_c457b3\n        if_empty_list.then \u2192 true_node.trigger\n        true_node.done \u2192 continue_9a54bb\n\n        \n        instance(x=700,y=80) filter_divisors root.Std_k98ojb.Iteration.Filter {}\n        generate_range.list \u2192 filter_divisors.items\n\n        \n        func() {\n            in(x=0,y=0,name=\"current\") property(Number) current_123456;\n\n            out(x=100,y=0,name=\"predicate\") property(Bool) predicate_out;\n\n            instance(x=20,y=0) modulo_node root.Std_k98ojb.Math.Modulo {};\n            num_5c0677 \u2192 modulo_node.value\n            current_123456 \u2192 modulo_node.divisor\n\n            instance(x=80,y=0) eq_zero_mod root.Std_k98ojb.Logic.Equal {};\n            modulo_node.result \u2192 eq_zero_mod.left\n            constant(0) \u2192 eq_zero_mod.right\n\n            eq_zero_mod.result \u2192 predicate_out\n        } -> filter_divisors.handler\n\n        \n        instance(x=750,y=90) len_filtered root.Std_k98ojb.List.Length {}\n        filter_divisors.output_list \u2192 len_filtered.list\n\n        \n        instance(x=800,y=100) gt_zero root.Std_k98ojb.Math.GreaterThan {};\n        len_filtered.length \u2192 gt_zero.left\n        constant(0) \u2192 gt_zero.right\n\n        instance(x=850,y=110) not_gt root.Std_k98ojb.Logic.Not {};\n        gt_zero.result \u2192 not_gt.input\n\n        \n        not_gt.output \u2192 output_c457b3\n        if_empty_list.else \u2192 filter_divisors.execute\n        filter_divisors.done \u2192 len_filtered.list_trigger\n        len_filtered.done \u2192 gt_zero.trigger\n        gt_zero.result \u2192 not_gt.input\n        not_gt.output \u2192 output_c457b3\n        not_gt.done \u2192 continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) mul_6d3e8c root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -177) lessthan_2f5d3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_6d3e8c.first\n        y_5390f5 -> mul_6d3e8c.second\n        0 -> lessthan_2f5d3d.right\n        mul_6d3e8c.result -> lessthan_2f5d3d.left\n        lessthan_2f5d3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: 10) opposite_signs_3b6a3e root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 50) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_8a4d7e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_instance root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_2a6d8c root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_2a6d8c.right\n        input_ai -> equal_2a6d8c.left\n        \n        equal_2a6d8c.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std.List.Empty {}\n\n        \n        instance unique_reduce root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }\n\n        \n        unique_reduce.handler = func() {\n            in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n            in(x: 100, y: 0, name: \"current\") property(Number) current_num\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n            \n            instance contains_1 root.Std.List.Contains {}\n            acc_in -> contains_1.list\n            current_num -> contains_1.item\n\n            \n            instance add_node root.Std.List.Add {}\n            acc_in -> add_node.list\n            current_num -> add_node.item\n\n            instance switch_1 root.Std.Switch {\n                condition: contains_1.is_contained\n            }\n            acc_in -> switch_1.input0  \n            add_node.listWithItem -> switch_1.input1  \n            switch_1.output -> new_acc_out\n        }\n\n        \n        instance product_reduce root.Iteration.Reduce {\n            items: unique_reduce.result\n            initial_value: 1.0  \n        }\n\n        \n        product_reduce.handler = func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: 100, y: 0, name: \"current\") property(Number) current_num\n\n            out(x: 200, y: 0, name: \"\") property(Number) new_acc_out\n\n            instance mul_1 root.Std.Math.Mul {}\n            acc_in -> mul_1.first\n            current_num -> mul_1.second\n            mul_1.result -> new_acc_out\n        }\n\n        \n        execute_19300c -> unique_reduce.execute  \n        unique_reduce.continue -> product_reduce.execute  \n        product_reduce.continue -> continue_45190b\n\n        product_reduce.result -> output_cffcc2  \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 100) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: -50) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        sub_node.first <- length_node.length\n        sub_node.second <- modulo_node.result\n\n        slice_second_part.list <- list_48148f\n        slice_second_part.start <- sub_node.result\n        -1 -> slice_second_part.end\n\n        slice_first_part.list <- list_48148f\n        0 -> slice_first_part.start\n        slice_first_part.end <- sub_node.result\n\n        concat_node.left <- slice_second_part.slice\n        concat_node.right <- slice_first_part.slice\n        concat_node.result -> output_823209\n    }\n\n    instance(x: -50, y: 10) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 100, y: 50) reduce_9e7a3d root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e7a3d.items\n        0 -> reduce_9e7a3d.initialValue\n\n        func() {\n            in(x: -150, y: -50, name: \"accumulated\") property(Number) acc_1\n            in(x: -150, y: 50, name: \"current\") property(Number) current_1\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) result_out\n\n            instance(x: 100, y: 0) add_1 root.Std_k98ojb.Math.Add {}\n            acc_1 -> add_1.first\n            current_1 -> add_1.second\n            add_1.result -> result_out\n        } -> reduce_9e7a3d.reducer\n\n        reduce_9e7a3d.output -> sum_2a848f\n    }\n    \n\n    instance(x: 0, y: 0) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -100) if_edge Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 <= 1\"\n        }\n        \n        num_5c0677 -> if_edge.gen_0\n\n        \n        instance(x: -150, y: -200) setter_false Std_k98ojb.Setter {\n            value = false\n        }\n        \n        if_edge.then -> setter_false.set\n        setter_false.value -> output_c457b3\n        setter_false.done -> continue_9a54bb\n\n        \n        instance(x: 0, y: -50) generate_range Std_k98ojb.List.GenerateRange {\n            from = 2\n        }\n        \n        \n        instance(x: -100, y: -75) subtract_one Std_k98ojb.Math.Add {\n            first = num_5c0677\n            second = -1\n        }\n        \n        subtract_one.result -> generate_range.to\n\n        \n        instance(x: 200, y: 0) map_mod Std_k98ojb.Iteration.Map {\n            items = generate_range.output\n        }\n\n        \n        func() {\n            in(x: -50, y: 0, name: \"current\") property(Number) current_i;\n            in(x: 0, y: 50, name: \"_context\") property(Number) context_num;\n\n            instance modulo Std_k98ojb.Math.Modulo {\n                value = context_num\n                divisor = current_i\n            }\n\n            out(x: 100, y: 0, name: \"output\") property(Number) mod_result;\n            \n            modulo.result -> mod_result;\n        } -> map_mod.handler\n\n        num_5c0677 -> map_mod.context\n\n        \n        instance(x: 300, y: -100) contains_zero Std_k98ojb.List.Contains {\n            list = map_mod.output_list\n            item = 0\n        }\n\n        \n        instance(x: 400, y: -50) not_result Std_k98ojb.Logic.Not {\n            input = contains_zero.is_contained\n        }\n        \n        not_result.result -> output_c457b3\n\n        \n        contains_zero.done -> continue_9a54bb \n\n        \n        execute_b7b391 -> if_edge.execute\n    }\n\n    instance(x: -20, y: 0) num_prime_instance main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 0, y: 0) product root.Std_k98ojb.Math.Mul {}\n        x_853326 -> product.first\n        y_5390f5 -> product.second\n\n        instance(x: 100, y: 0) compare_zero root.Std_k98ojb.Math.GreaterThan {\n            left: 0\n        }\n        product.result -> compare_zero.right\n\n        compare_zero.result -> output_3339a3\n    }\n\n    instance(x: -200, y: 50) opposite_signs_1f2a4c root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 145, y: -25) modulo_4d3b8a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 370, y: -25) equal_7e3d5c root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> modulo_4d3b8a.value\n        11 -> modulo_4d3b8a.divisor\n        modulo_4d3b8a.result -> equal_7e3d5c.left\n        0 -> equal_7e3d5c.right\n        equal_7e3d5c.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -12, y: -4) is_diff_eb8a9d root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_7c9d0a root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7c9d0a.input\n        search_ai -> replace_7c9d0a.search\n        replace_ai -> replace_7c9d0a.replace\n        replace_7c9d0a.output -> output_ai\n    }\n\n    \n\n    instance(x: 15, y: -23) replace_char_6b8f4e root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 100) equal_e5f3c1 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_e5f3c1.left\n        tolower_7b3b7b.output -> equal_e5f3c1.right\n        equal_e5f3c1.result -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -500, y: 100) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: -300, y: 0) reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }\n        \n        func() { \n            in(x: -200, y: 10, name: \"acc\") property(List) acc\n            in(x: -200, y: 50, name: \"current\") property(Number) current\n\n            instance contains_ root.Std_k98ojb.List.Contains {}\n            instance not_ root.Std_k98ojb.Logic.Not {}\n            instance if_ root.Std_k98ojb.Std.If {}\n\n            acc -> contains_.list\n            current -> contains_.item\n            contains_.is_contained -> not_.input\n            not_.result -> if_.condition\n\n            \n            instance add_ root.Std_k98ojb.List.Add {}\n            acc -> add_.list\n            current -> add_.item\n            add_.listWithItem -> if_.then_value\n\n            \n            acc -> if_.else_value\n\n            if_.value -> output  \n        } -> reduce_unique.handler\n\n        \n        instance(x: 200, y: 0) reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1.0\n        }\n\n        func() { \n            in(x: -20, y: 30, name: \"acc\") property(Number) acc\n            in(x: -20, y: 70, name: \"current\") property(Number) current\n\n            instance multiply_ root.Std_k98ojb.Math.Mul {}\n            acc -> multiply_.first\n            current -> multiply_.second\n            multiply_.result -> output  \n        } -> reduce_product.handler\n\n        \n        execute_19300c -> reduce_unique.trigger   \n        reduce_unique.done -> reduce_product.trigger  \n        reduce_product.done -> continue_45190b    \n        \n        \n        reduce_product.result -> output_cffcc2\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: -300, y: 50) diff1_0 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 50, y: 50) diff2_0 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 50) concat_0 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1_0.left\n        list2_ai -> diff1_0.right\n\n        list2_ai -> diff2_0.left\n        list1_ai -> diff2_0.right\n\n        diff1_0.difference -> concat_0.a\n        diff2_0.difference -> concat_0.b\n\n        concat_0.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 50, y: -50) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 47, y: -13) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 164, y: -13) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 285, y: -13) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 407, y: -76) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 407, y: 50) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 583, y: -13) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n        list_48148f -> first_slice.list\n\n        second_slice.start <- sub_node.result\n        -1 -> second_slice.end\n        list_48148f -> second_slice.list\n\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> output_823209\n    }\n\n    instance(x: 5, y: 5) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9d3b3e root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9d3b3e.items\n        0 -> reduce_9d3b3e.initialValue\n\n        func() {\n            in(x: -100, y: 0, name: \"accumulated\") property(Number) acc_ai\n            in(x: 0, y: 0, name: \"current\") property(Number) current_ai\n\n            out(x: 100, y: 0, name: \"sum\") property(Number) sum_ai\n\n            instance(x: 50, y: 0) add_node root.Std_k98ojb.Math.Add {}\n            acc_ai -> add_node.first\n            current_ai -> add_node.second\n            add_node.result -> sum_ai\n        } -> reduce_9d3b3e.reducer\n\n        reduce_9d3b3e.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 100, y: 100) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance lessThan_node root.Std_k98ojb.Math.LessThan {}\n            left: num_5c0677\n            right: 2\n        \n        instance if_edge_case root.Std_k98ojb.Std.If {}\n            predicate: lessThan_node.result\n            execute: execute_b7b391\n\n        \n        getter(x: -40, y: 150, name: \"edge_false\") setter_6f2a3d = output_c457b3\n        instance edge_true root.Std_k98ojb.Logic.False {}\n            result \u2192 setter_6f2a3d.new_value\n        \n        \n        if_edge_case.then \u2192 edge_true.execute\n        edge_true.result \u2192 setter_6f2a3d.new_value\n        setter_6f2a3d.continue \u2192 continue_9a54bb\n\n        \n        instance sqrt_node root.Std_k98ojb.Math.Sqrt {}\n            input: num_5c0677\n        \n        instance floor_node root.Std_k98ojb.Math.Floor {}\n            input: sqrt_node.output\n        \n        instance generate_range root.Std_k98ojb.List.GenerateRange {}\n            from: 2\n            to: floor_node.output\n\n        \n        func() {\n            in(x: -30, y: -15, name: \"current\") property(Number) current_6d4a7f\n            \n            instance modulo root.Std_k98ojb.Math.Modulo {}\n                value: num_5c0677\n                divisor: current_6d4a7f\n\n            instance equal_zero root.Std_k98ojb.Logic.Equal {}\n                left: modulo.result\n                right: 0\n\n            out(x: 200, y: -10, name: \"predicate\") property(Bool) predicate_out \u2190 equal_zero.result\n        } \u2192 filter_divisors.handler\n\n        instance filter_divisors root.Std_k98ojb.Iteration.Filter {}\n            items: generate_range.list\n        \n        \n        instance length_node root.Std_k98ojb.List.Length {}\n            list: filter_divisors.output_list\n\n        instance greater_than_zero root.Std_k98ojb.Math.GreaterThan {}\n            left: length_node.length\n            right: 0\n        \n        \n        instance if_result root.Std_k98ojb.Std.If {}\n            predicate: greater_than_zero.result\n            execute: if_edge_case.else\n\n        \n        getter(x: -120, y: 300, name: \"false_output\") setter_7a4d5c = output_c457b3\n        instance false_val root.Std_k98ojb.Logic.False {}\n            result \u2192 setter_7a4d5c.new_value\n        \n        if_result.then \u2192 false_val.execute\n        false_val.result \u2192 setter_7a4d5c.new_value\n\n        \n        getter(x: -120, y: 380, name: \"true_output\") setter_9f3b6e = output_c457b3\n        instance true_val root.Std_k98ojb.Logic.True {}\n            result \u2192 setter_9f3b6e.new_value\n        \n        if_result.else \u2192 true_val.execute\n        true_val.result \u2192 setter_9f3b6e.new_value\n\n        \n        setter_7a4d5c.continue \u2192 continue_9a54bb\n        setter_9f3b6e.continue \u2192 continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -200, y: -174) mul_6b8d4e root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -174) lessthan_3c7d5f root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_6b8d4e.first\n        y_5390f5 -> mul_6b8d4e.second\n        0 -> lessthan_3c7d5f.right\n        mul_6b8d4e.result -> lessthan_3c7d5f.left\n        lessthan_3c7d5f.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -200, y: -100) opposite_signs_3c7d5f root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 14, y: -52) modulo_8a5d7b root.Std_k98ojb.Math.Modulo {}\n        instance(x: 167, y: -25) equal_8b0e4c root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_8a5d7b.value\n        11 -> modulo_8a5d7b.divisor\n        0 -> equal_8b0e4c.right\n        modulo_8a5d7b.result -> equal_8b0e4c.left\n        equal_8b0e4c.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -55, y: 529) is_diff_1a4e8d root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_7a9f5b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7a9f5b.input\n        search_ai -> replace_7a9f5b.search\n        replace_ai -> replace_7a9f5b.replace\n        replace_7a9f5b.output -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: -40) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 172, y: 172) tolower_5e2b4a root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 170) equal_3f6c3d root.Std_k98ojb.Logic.Equal {}\n        input_ai -> tolower_5e2b4a.input\n        input_ai -> equal_3f6c3d.left\n        tolower_5e2b4a.output -> equal_3f6c3d.right\n        equal_3f6c3d.result -> output_ai\n    }\n\n    \n\n    instance(x: -190, y: 87) is_lower_eb3e3b root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k7c5a)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items = list_5fda54,\n            initial_value = empty_list.list  \n        }\n\n        reduce_unique.handler = func() {\n            in(x: 0, y: 0) acc property(List)\n            in(x: 100, y: 0) current property(Number)\n\n            out(x: 200, y: 0) new_acc property(List)\n\n            \n            instance contains_node root.Std_k98ojb.List.Contains {\n                list = acc,\n                item = current\n            }\n\n            \n            instance invert_cond root.Std_k98ojb.Logic.Not {\n                input = contains_node.is_contained\n            }\n\n            \n            instance add_node root.Std_k98ojb.List.Add {\n                list = acc,\n                item = current\n            }\n\n            \n            instance selector root.Std_k98ojb.Std.IfExpression {\n                condition = invert_cond.result,\n                then_value = add_node.listWithItem,  \n                else_value = acc                     \n            }\n\n            \n            selector.output \u2192 new_acc\n        }\n\n        \n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items = reduce_unique.result,  \n            initial_value = 1.0           \n        }\n\n        reduce_product.handler = func() {\n            in(x: -50, y: 20) acc property(Number)\n            in(x: 50, y: 20) current property(Number)\n\n            out(x: 100, y: 20) new_acc property(Number)\n\n            \n            instance multiply_node root.Std_k98ojb.Math.Mul {\n                first = acc,\n                second = current\n            }\n\n            multiply_node.result \u2192 new_acc\n        }\n\n        \n        execute_19300c \u2192 reduce_unique.execute   \n        reduce_unique.continue \u2192 reduce_product.execute  \n        reduce_product.continue \u2192 continue_45190b       \n\n        \n        reduce_product.result \u2192 output_cffcc2\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 150, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 150) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat.left\n        diff2.difference -> concat.right\n\n        concat.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {}\n        list_48148f \u2192 len_node.list \n\n        \n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c \u2192 modulo_node.value \n        len_node.length \u2192 modulo_node.divisor \n\n        \n        instance(x: 300, y: 50) subtract_node root.Std_k98ojb.Math.Sub {}\n        len_node.length \u2192 subtract_node.first\n        modulo_node.result \u2192 subtract_node.second\n\n        \n        \n        instance(x:400, y:50) slice_first_part root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 slice_first_part.list \n        0 \u2192 slice_first_part.start \n        subtract_node.result \u2192 slice_first_part.end \n\n        \n        instance(x:500, y:50) slice_second_part root.Std_k98ojb.List.Slice {}\n        list_48148f \u2192 slice_second_part.list \n        subtract_node.result \u2192 slice_second_part.start \n        -1 \u2192 slice_second_part.end \n\n        \n        instance(x:600, y:50) concat_node root.Std_k98ojb.List.Concat {}\n        slice_second_part.slice \u2192 concat_node.left \n        slice_first_part.slice \u2192 concat_node.right \n\n        \n        concat_node.output_list \u2192 output_823209 \n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 200, y: 50) reduce_1e4d9b root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_1e4d9b.items\n        0 -> reduce_1e4d9b.initialValue\n\n        func() {\n            in(x: -150, y: -100) accumulated: current_c750f1 property(Number)\n            in(x: -150, y: 0) item: item_ba3c8e property(Any)\n\n            out(x: 200, y: 0) result: next_6d4b9e property(Number)\n\n            instance(x: 50, y: 0) add_7d1d1f root.Std_k98ojb.Math.Add {}\n            current_c750f1 -> add_7d1f.first\n            item_ba3c8e -> add_7d1f.second\n            add_7d1d1f.result -> next_6d4b9e\n        } -> reduce_1e4d9b.reducer\n\n        reduce_1e4d9b.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 0, y: 0) _sum_3c5d7a root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        \n        instance(x: -80, y: -210) if_leq_one root.Std_k98ojb.Std.IfExpression {\n            expression: \"num <= 1\"\n        }\n        \n        instance(x: 30, y: -215) set_false root.Std_k98ojb.Setter {\n            name: \"result\",\n            new_value: false\n        }\n\n        instance(x: 60, y: -210) trigger_continue_1 root.Std_k98ojb.Trigger {}\n        \n        \n        instance(x: -50, y: -150) eq_two root.Std_k98ojb.Logic.Equal {}\n        num_5c0677 \u2192 eq_two.left\n        2 \u2192 eq_two.right\n\n        instance(x: 30, y: -145) if_eq_two root.Std_k98ojb.Std.If {\n            predicate: eq_two.result\n        }\n\n        instance(x: 60, y: -140) set_true root.Std_k98ojb.Setter {\n            name: \"result\",\n            new_value: true\n        }\n        \n        \n        instance(x: -50, y: -70) mod_two root.Std_k98ojb.Math.Modulo {}\n        num_5c0677 \u2192 mod_two.value\n        2 \u2192 mod_two.divisor\n\n        instance(x: 30, y: -65) is_even root.Std_k98ojb.Logic.Equal {\n            right: 0\n        }\n        mod_two.result \u2192 is_even.left\n\n        instance(x: 60, y: -60) if_is_even root.Std_k98ojb.Std.If {\n            predicate: is_even.result\n        }\n\n        \n        instance(x: 150, y: -10) compute_sqrt_exp root.Std_k98ojb.Math.Expression {\n            expression: \"Math.sqrt(num)\"\n        }\n        num_5c0677 \u2192 compute_sqrt_exp.input\n\n        instance(x: 180, y: -10) floor_sqrt root.Std_k98ojb.Math.Floor {}\n        compute_sqrt_exp.output \u2192 floor_sqrt.input\n\n        instance(x: 210, y: -10) generate_range root.Std_k98ojb.List.GenerateRange {\n            from: 3,\n            to: floor_sqrt.output\n        }\n\n        \n        instance(x: 240, y: -5) find_divisor root.Std_k98ojb.Iteration.Find {}\n        \n        func() { \n            in(x: -30, y: 10, name: \"current\") property(Number) current_76c4d3\n\n            instance(x: 20, y: 5) mod_current root.Std_k98ojb.Math.Modulo {}\n            num_5c0677 \u2192 mod_current.value\n            current_76c4d3 \u2192 mod_current.divisor\n\n            instance(x: 50, y: 10) is_divisible root.Std_k98ojb.Logic.Equal {\n                right: 0\n            }\n            mod_current.result \u2192 is_divisible.left\n\n            out(x: 80, y: 20, name: \"predicate\") property(Bool) predicate_3f5a4d\n            is_divisible.result \u2192 predicate_3f5a4d\n        } \u2192 find_divisor.handler\n\n        generate_range.list \u2192 find_divisor.items\n        \n        instance(x: 300, y: -10) not_found root.Std_k98ojb.Logic.Not {}\n        find_divisor.found \u2192 not_found.input\n\n        \n        getter(x: 400, y: -5, name: \"result\") getter_result = result\n        \n        \n        execute_b7b391 \u2192 if_leq_one.execute\n\n        \n        if_leq_one.then \u2192 set_false.execute\n        set_false.continue \u2192 trigger_continue_1.trigger\n        trigger_continue_1.out \u2192 continue_9a54bb\n        set_false.value \u2192 getter_result.new_value\n        \n        \n        execute_b7b391 \u2192 eq_two.left\n        execute_b7b391 \u2192 eq_two.right\n        if_leq_one.else \u2192 eq_two.trigger\n        eq_two.result \u2192 if_eq_two.predicate\n        if_eq_two.then \u2192 set_true.execute\n        set_true.continue \u2192 continue_9a54bb\n        set_true.value \u2192 getter_result.new_value\n        \n        \n        execute_b7b391 \u2192 mod_two.value\n        execute_b7b391 \u2192 is_even.left\n        if_eq_two.else \u2192 mod_two.divisor_trigger\n        mod_two.result \u2192 is_even.left\n        is_even.result \u2192 if_is_even.predicate\n        if_is_even.then \u2192 set_false.execute \n        \n        \n        execute_b7b391 \u2192 compute_sqrt_exp.input\n        compute_sqrt_exp.output \u2192 floor_sqrt.input\n        floor_sqrt.output \u2192 generate_range.to\n        generate_range.list \u2192 find_divisor.items\n        execute_b7b391 \u2192 compute_sqrt_exp.execute\n        \n        \n        not_found.result \u2192 output_c457b3\n        not_found.output \u2192 getter_result.new_value\n    }\n}\n\ninstance(x: -20, y: 0) num_prime_1 root.main.num_prime {}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) mul_6d3e8c root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -177) lessthan_2a7f3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_6d3e8c.first\n        y_5390f5 -> mul_6d3e8c.second\n        0 -> lessthan_2a7f3d.right\n        mul_6d3e8c.result -> lessthan_2a7f3d.left\n        lessthan_2a7f3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -154, y: 10) opposite_signs_3b6a5e root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 50) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_8a4d7e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_instance root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_2a6d8c root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_2a6d8c.right\n        input_ai -> equal_2a6d8c.left\n        \n        equal_2a6d8c.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(empty_list root.Std_k98ojb.List.Empty {}) \n\n        \n        instance(reduce_unique root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }) \n        \n        func() { \n            in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n            in(x: 100, y: 0, name: \"current\") property(Number) current_in\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n            instance(contains root.Std_k98ojb.List.Contains {\n                list: acc_in\n                item: current_in\n            })\n\n            instance(not_contained root.Logic.Not { \n                input: contains.is_contained \n            })\n\n            instance(if_node root.Std_k98ojb.Std.If {\n                input: not_contained.result\n            })\n\n            \n            instance(add_to_list root.Std_k98ojb.List.Add {\n                list: acc_in\n                item: current_in\n            })\n            add_to_list.listWithItem \u2192 new_acc_out\n\n            \n            if_node.else \u2192 (acc_in \u2192 new_acc_out) \n\n        } -> reduce_unique.handler \n\n        \n        instance(reduce_product root.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1 \n        })\n        \n        func() { \n            in(x:0,y:0, name:\"acc\") property(Number) acc_num\n            in(x:50,y:0, name:\"current\") property(Number) current_num\n\n            out(x:100,y:0,name:\"\") property(Number) new_acc_out\n\n            instance(mul root.Std_k98ojb.Math.Mul {\n                first: acc_num\n                second: current_num\n            })\n            mul.result \u2192 new_acc_out\n        } -> reduce_product.handler \n\n        \n        execute_19300c \u2192 reduce_unique.execute \n        reduce_unique.continue \u2192 reduce_product.execute \n        reduce_product.continue \u2192 continue_45190b\n\n        reduce_product.result \u2192 output_cffcc2\n    }\n}\n\n\ninstance(x: 0, y: 0) unique_product_1 root.main.unique_product {}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 100) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: -50) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        sub_node.first <- length_node.length\n        sub_node.second <- modulo_node.result\n\n        slice_second_part.list <- list_48148f\n        sub_node.result -> slice_second_part.start\n        -1 -> slice_second_part.end\n\n        slice_first_part.list <- list_48148f\n        0 -> slice_first_part.start\n        sub_node.result -> slice_first_part.end\n\n        concat_node.left <- slice_second_part.slice\n        concat_node.right <- slice_first_part.slice\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9e7a3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e7a3c.items\n        0 -> reduce_9e7a3c.initialValue\n\n        func() {\n            in(x: -150, y: -50, name: \"accumulated\") property(Number) acc_1\n            in(x: -150, y: 50, name: \"current\") property(Number) current_1\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) result_out\n\n            instance(x: 50, y: 0) add_7a3c9e root.Std_k98ojb.Math.Add {}\n            acc_1 -> add_7a3c9e.first\n            current_1 -> add_7a3c9e.second\n            add_7a3c9e.result -> result_out\n        } -> reduce_9e7a3c.reducer\n\n        reduce_9e7a3c.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: 100, y: 100) initial_check root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 <= 1\"\n        }\n\n        \n        instance(x: 200, y: 200) generate_divisors root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: num_5c0677 - 1\n        }\n\n        \n        instance(x: 300, y: 300) for_loop root.Std_k98ojb.Std.For {}\n\n        \n        func() {\n            in(x: -50, y: -50, name:\"current\") property(Number) current_item\n\n            instance(x: 400, y: 400) modulo_node root.Std_k98ojb.Math.Modulo {\n                value: num_5c0677,\n                divisor: current_item\n            }\n\n            instance(x: 500, y: 500) mod_zero_check root.Std_k98ojb.Std.IfExpression {\n                expression: \"modulo_node.result == 0\"\n            }\n\n            \n            instance(x:600,y:600) setter_false root.Std_k98ojb.Setter(output_c457b3, value: false)\n\n        } -> for_loop.handler\n\n        \n        mod_zero_check.then \u2192 setter_false.execute\n        setter_false.continue \u2192 continue_9a54bb\n\n        mod_zero_check.else \u2192 for_loop.next\n\n        \n        instance(x: 700, y: 700) done_setter root.Std_k98ojb.Setter(output_c457b3, value: true)\n\n        \n        execute_b7b391 \u2192 initial_check.execute\n\n        \n        initial_check.then \u2192 setter_false.execute\n        setter_false.continue \u2192 continue_9a54bb\n\n        \n        initial_check.else \u2192 generate_divisors.input\n        generate_divisors.output \u2192 for_loop.items\n        execute_b7b391 \u2192 for_loop.reset \n\n        \n        for_loop.done \u2192 done_setter.execute\n        done_setter.continue \u2192 continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -200, y: -174) multiply_8c3d6b root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -174) greaterthan_bf2e3d root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greaterthan_bf2e3d.left\n        multiply_8c3d6b.result -> greaterthan_bf2e3d.right\n        greaterthan_bf2e3d.result -> output_3339a3\n        x_853326 -> multiply_8c3d6b.first\n        y_5390f5 -> multiply_8c3d6b.second\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_signs_3a6e9d root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 145, y: -25) modulo_6d1a5e root.Std_k98ojb.Math.Modulo {}\n        instance(x: 370, y: -25) equal_3c0d1d root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_6d1a5e.value\n        11 -> modulo_6d1a5e.divisor\n\n        modulo_6d1a5e.result -> equal_3c0d1d.left\n        0 -> equal_3c0d1d.right\n\n        equal_3c0d1d.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -48, y: -7) is_diff_9e5b1a root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_7c9d2a root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7c9d2a.input\n        search_ai -> replace_7c9d2a.search\n        replace_ai -> replace_7c9d2a.replace\n        replace_7c9d2a.output -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: -50) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 100) equal_e5f3c1 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_e5f3c1.left\n        tolower_7b3b7b.output -> equal_e5f3c1.right\n        equal_e5f3c1.result -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        instance empty_list root.Std.List.Empty {}\n\n        \n        instance reduce_unique root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }\n\n        \n        reduce_unique.handler = func() {\n            in(x: 0, y: 0, name: \"current\") property(List) acc_list\n            in(x: 1, y: 0, name: \"item\") property(Number) item_val\n\n            out(x: 2, y: 0, name: \"new_acc\") property(List) new_acc\n\n            instance contains_node root.Std.List.Contains {\n                list: acc_list\n                item: item_val\n            }\n\n            instance not_contains root.Logic.Not {\n                input: contains_node.is_contained\n            }\n\n            instance if_node root.Std.If {\n                input: not_contains.output\n            }\n\n            instance add_item root.List.Add {\n                list: acc_list\n                item: item_val\n            }\n\n            \n            if_node.then -> add_item.execute\n            add_item.listWithItem -> new_acc\n\n            \n            instance pass_through root.Std.Data {\n                value: acc_list\n            }\n            if_node.else -> pass_through.set_value\n            pass_through.value -> new_acc\n        }\n\n        \n        instance product_reduce root.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: data_instance(1.0)\n        }\n\n        \n        product_reduce.handler = func() {\n            in(x: 0, y: 0, name: \"current\") property(Number) acc_num\n            in(x: 1, y: 0, name: \"item\") property(Number) item_val\n\n            out(x: 2, y: 0, name: \"new_acc\") property(Number) new_acc\n\n            instance multiply root.Math.Mul {\n                first: acc_num\n                second: item_val\n            }\n            multiply.result -> new_acc\n        }\n\n        \n        execute_19300c -> reduce_unique.execute\n        reduce_unique.done -> product_reduce.execute\n        product_reduce.done -> continue_45190b\n        product_reduce.result -> output_cffcc2\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat.listA\n        diff2.difference -> concat.listB\n\n        concat.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 104, y: -100) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: -50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: -75) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: -150) part1_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 25) part2_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: -75) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        sub_node.first <- length_node.length\n        sub_node.second <- modulo_node.result \n\n        list_48148f -> part1_slice.list\n        sub_node.result -> part1_slice.start\n        -1 -> part1_slice.end\n\n        list_48148f -> part2_slice.list\n        0 -> part2_slice.start\n        sub_node.result -> part2_slice.end \n\n        part1_slice.slice -> concat_node.left \n        part2_slice.slice -> concat_node.right \n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -50, y: 45) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9d3b3e root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9d3b3e.items\n        0 -> reduce_9d3b3e.initialValue\n\n        func() {\n            in(x: -100, y: 0, name: \"accumulated\") property(Number) acc_ai\n            in(x: 0, y: 0, name: \"current\") property(Number) current_ai\n\n            out(x: 100, y: 0, name: \"sum\") property(Number) sum_ai\n\n            instance(x: 50, y: 0) add_node root.Std_k98ojb.Math.Add {}\n            acc_ai -> add_node.first\n            current_ai -> add_node.second\n            add_node.result -> sum_ai\n        } -> reduce_9d3b3e.reducer\n\n        reduce_9d3b3e.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 100, y: 100) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance lt_or_eq root.Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677\n            right = 1.0\n        }\n\n        instance edge_case_if root.Std_k98ojb.Std.If {\n            predicate = lt_or_eq.result\n            execute = execute_b7b391\n\n            then: \n                \n                instance set_false root.Setter { \n                    property = output_c457b3 \n                    value = false \n                }\n                trigger set_false.continue \u2192 continue_9a54bb\n\n            else:\n                sequence {\n                    \n                    instance sqrt_node root.Std_k98ojb.Math.Sqrt {\n                        input = num_5c0677\n                    }\n\n                    instance floor_sqrt root.Std_k98ojb.Math.Floor {\n                        input = sqrt_node.result\n                    }\n\n                    \n                    instance divisors_list root.Std_k98ojb.List.GenerateRange {\n                        from = 2.0\n                        to = floor_sqrt.output\n                    }\n\n                    \n                    func handler_mod_check() {\n                        in(x: -15, y: -30, name: \"current\") property(Number) current\n\n                        instance modulo root.Std_k98ojb.Math.Modulo {\n                            value = num_5c0677\n                            divisor = current\n                        }\n\n                        instance equal_zero root.Std_k98ojb.Logic.Equal {\n                            left = modulo.result\n                            right = 0.0\n                        }\n\n                        out(x: 200, y: -30, name: \"output\") property(Bool) \u2192 equal_zero.result\n                    }\n\n                    instance map_node root.Std_k98ojb.Iteration.Map {\n                        handler = handler_mod_check\n                        items = divisors_list.list\n                    }\n\n                    \n                    instance contains_true root.Std_k98ojb.List.Contains {\n                        list = map_node.output_list\n                        item = true\n                    }\n\n                    \n                    instance not_result root.Std_k98ojb.Logic.Not {\n                        input = contains_true.is_contained\n                    }\n\n                    \n                    instance set_output root.Setter {\n                        property = output_c457b3\n                        value = not_result.result\n                    }\n                    \n                    trigger set_output.continue \u2192 continue_9a54bb\n                }\n        }\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -200, y: -200) multiply_6e8c4d root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -150) greaterthan_b3f8ec root.Std_k98ojb.Math.GreaterThan {}\n        \n        x_853326 -> multiply_6e8c4d.first\n        y_5390f5 -> multiply_6e8c4d.second\n        \n        0 -> greaterthan_b3f8ec.left\n        multiply_6e8c4d.result -> greaterthan_b3f8ec.right\n        \n        greaterthan_b3f8ec.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -200, y: 100) opposite_signs_7b5a3c root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: -50) modulo_4e0a5b root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: -50) equal_b7d8c1 root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4e0a5b.value\n        11 -> modulo_4e0a5b.divisor\n\n        modulo_4e0a5b.result -> equal_b7d8c1.left\n        0 -> equal_b7d8c1.right\n        equal_b7d8c1.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -20, y: 5) is_diff_9f3a4e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 270) replace_9f8d2a root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_9f8d2a.input\n        search_ai -> replace_9f8d2a.search\n        replace_ai -> replace_9f8d2a.replace\n        replace_9f8d2a.output -> output_ai\n    }\n\n    \n\n    instance(x: 143, y: -67) replace_char_9e5b0c root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 100) tolower_ajd3 root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 250, y: 100) equal_cmp root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_ajd3.input\n        input_ai -> equal_cmp.left\n        tolower_ajd3.output -> equal_cmp.right\n        equal_cmp.result -> output_ai\n    }\n\n    \n\n    instance(x: 150, y: -20) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance reduce_unique root.Std_k98ojb.Iteration.Reduce {\n            items: list_5fda54,\n            execute: execute_19300c  \n        }\n\n        \n        func() {\n            in(x: -2, y: -3, name=\"_acc\") property(List) acc_in\n            in(x: 5, y: 6, name=\"current\") property(Number) current_in\n\n            out(x: 100, y: 200, name=\"new_acc\") property(List) new_acc_out\n\n            instance contains root.Std_k98ojb.List.Contains {\n                list: acc_in,\n                item: current_in\n            }\n            \n            instance not_node root.Std_k98ojb.Logic.Not {}\n            instance if_node root.Std_k98ojb.Std.If {}\n            instance add_node root.Std_k98ojb.List.Add {}\n\n            contains.is_contained -> not_node.input\n            not_node.result -> if_node.input\n\n            \n            acc_in -> add_node.list\n            current_in -> add_node.item\n            add_node.listWithItem -> if_node.then_out\n\n            \n            acc_in -> if_node.else_out\n\n            if_node.value -> new_acc_out\n        } -> reduce_unique.handler  \n\n        \n        instance initial_1 root.Std_k98ojb.Data.Instance {\n            value: 1  \n        }\n\n        instance reduce_product root.Std_k98ojb.Iteration.Reduce {\n            items: reduce_unique.result,\n            initial_value: initial_1.value\n        }\n\n        \n        func() {\n            in(x: -5, y: 7, name=\"_acc\") property(Number) acc_in\n            in(x: 8, y: 9, name=\"current\") property(Number) curr_in\n\n            out(x: 150, y: 300, name=\"product_out\") property(Number) prod_out\n\n            instance multiply root.Std_k98ojb.Math.Mul {\n                first: acc_in,\n                second: curr_in\n            }\n\n            multiply.result -> prod_out\n        } -> reduce_product.handler\n\n        \n        reduce_unique.continue -> reduce_product.execute  \n        reduce_product.continue -> continue_45190b       \n\n        \n        reduce_product.result -> output_cffcc2\n    }\n}\n\n\ninstance unique_product_inst root.main.unique_product {}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_0 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat_0.left\n        diff2.difference -> concat_0.right\n        concat_0.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 45, y: -38) find_dissimilar_6f7d9a root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 140, y: 200) length_node root.Std_k98ojb.List.Length {}\n        list_48148f -> length_node.list\n        \n        instance(x: 250, y: 250) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        instance(x: 370, y: 210) subtract_len_k root.Std_k98ojb.Math.Sub {}\n        length_node.length -> subtract_len_k.first\n        modulo_node.result -> subtract_len_k.second\n        \n        instance(x: 500, y: 160) slice_first_part root.Std_k98ojb.List.Slice {\n            start: 0 \n        }\n        list_48148f -> slice_first_part.list\n        subtract_len_k.result -> slice_first_part.end\n\n        instance(x: 620, y: 230) slice_last_part root.Std_k98ojb.List.Slice {}\n        list_48148f -> slice_last_part.list\n        subtract_len_k.result -> slice_last_part.start\n        -1 -> slice_last_part.end \n\n        instance(x: 750, y: 320) concat_node root.Std_k98ojb.List.Concat {}\n        slice_last_part.slice -> concat_node.left \n        slice_first_part.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n    instance(x: -50, y: 10) rotate_right_instance root.main.rotate_right {}  \n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 200, y: 100) reduce_node root.Iteration.Reduce {}\n        list_2c62ab -> reduce_node.items\n        0 -> reduce_node.initialValue\n        func() {\n            in(x: -50, y: -30, name: \"accumulated\") property(Number) accumulated_ai\n            in(x: 10, y: 20, name: \"current\") property(Number) current_ai\n\n            out(x: 80, y: 0, name: \"sum\") property(Number) sum_ai\n\n            instance(x: 30, y: -5) adder_6e7b4e root.Std_k98ojb.Math.Add {}\n            accumulated_ai -> adder_6e7b4e.first\n            current_ai -> adder_6e7b4e.second\n            adder_6e7b4e.result -> sum_ai\n        } -> reduce_node.reducer\n        \n        reduce_node.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 10, y: -5) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y:-150) if_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"num <= 1\"\n        }\n        instance(x: -180,y:-100) if_two root.Std_k98ojb.Std.IfExpression {\n            expression: \"num ==2\"\n        }\n        instance(x:-160,y:-50) if_even root.Std_k98ojb.Std.IfExpression {\n            expression: \"(num % 2) === 0\"\n        }\n\n        \n        setter(x: -300, y: 100, name: \"setter_false\") set_false = output_c457b3 {}\n        setter(x: -280, y: 150, name: \"setter_true\") set_true = output_c457b3 {}\n\n        \n        instance(x:-100,y:50) expr_sqrt root.Std_k98ojb.Math.Expression {\n            expression: \"Math.sqrt(gen_0)\"\n        }\n        instance(x:-50, y: 50) floor_sqrt root.Std_k98ojb.Math.Floor {}\n\n        \n        instance(x:100,y:50) generate_divisors root.Std_k98ojb.List.GenerateRange {}\n        \n        \n        instance(x:200,y:50) find_divisor root.Std_k98ojb.Iteration.Find {\n            handler: func() {\n                in(x:-10, y:0, name:\"current\") property(Number) current_val\n\n                out(x: 50, y:0, name:\"result\") property(Bool) result_out\n\n                instance modulo_check root.Std_k98ojb.Math.Modulo {}\n                instance eq_zero root.Std_k98ojb.Logic.Equal {}\n\n                num_5c0677 -> modulo_check.first\n                current_val -> modulo_check.second\n                0 -> eq_zero.right\n                modulo_check.result -> eq_zero.left\n                eq_zero.result -> result_out\n            }\n        }\n\n        \n        instance(x:300,y:50) if_found root.Std_k98ojb.Std.If {\n            condition: find_divisor.found.is_null\n        }\n\n        \n\n        execute_b7b391 -> if_edge.execute\n        num_5c0677 -> expr_sqrt.gen_0\n        \n        \n        if_edge.then -> set_false.execute\n        false -> set_false.new_value\n        set_false.continue -> continue_9a54bb\n\n        \n        if_edge.else -> if_two.execute\n\n        \n        if_two.then -> set_true.execute\n        true -> set_true.new_value\n        set_true.continue -> continue_9a54bb\n\n        \n        if_edge.else -> if_even.execute when if_two.else\n\n        if_even.then -> set_false.execute\n        set_false.new_value = false\n        set_false.continue -> continue_9a54bb\n\n        \n        if_even.else -> expr_sqrt.execute\n\n        expr_sqrt.output -> floor_sqrt.input\n        floor_sqrt.output -> generate_divisors.to\n        3 -> generate_divisors.from\n        \n        generate_divisors.list -> find_divisor.items\n        find_divisor.onFound -> if_found.condition_input\n        find_divisor.notFound -> if_found.else\n\n        \n        if_found.then -> set_false.execute\n        false -> set_false.new_value\n\n        \n        if_found.else -> set_true.execute\n        true -> set_true.new_value\n\n        \n        set_true.continue -> continue_9a54bb\n        set_false.continue -> continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) mul_6d3e8c root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -177) lessthan_2a7f3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_6d3e8c.first\n        y_5390f5 -> mul_6d3e8c.second\n        0 -> lessthan_2a7f3d.right\n        mul_6d3e8c.result -> lessthan_2a7f3d.left\n        lessthan_2a7f3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -154, y: 10) opposite_signs_3b6a5e root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 50) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_8a4d7e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_instance root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_2a6d8c root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_2a6d8c.right\n        input_ai -> equal_2a6d8c.left\n        \n        equal_2a6d8c.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(empty_list root.Std_k98ojb.List.Empty {}) \n\n        \n        instance(reduce_unique root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }) \n        \n        func() { \n            in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n            in(x: 100, y: 0, name: \"current\") property(Number) current_in\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n            instance(contains root.Std_k98ojb.List.Contains {\n                list: acc_in\n                item: current_in\n            })\n\n            instance(not_contained root.Logic.Not { \n                input: contains.is_contained \n            })\n\n            instance(if_node root.Std_k98ojb.Std.If {\n                input: not_contained.result\n            })\n\n            \n            instance(add_to_list root.Std_k98ojb.List.Add {\n                list: acc_in\n                item: current_in\n            })\n            add_to_list.listWithItem \u2192 new_acc_out\n\n            \n            if_node.else \u2192 (acc_in \u2192 new_acc_out) \n\n        } -> reduce_unique.handler \n\n        \n        instance(reduce_product root.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1 \n        })\n        \n        func() { \n            in(x:0,y:0, name:\"acc\") property(Number) acc_num\n            in(x:50,y:0, name:\"current\") property(Number) current_num\n\n            out(x:100,y:0,name:\"\") property(Number) new_acc_out\n\n            instance(mul root.Std_k98ojb.Math.Mul {\n                first: acc_num\n                second: current_num\n            })\n            mul.result \u2192 new_acc_out\n        } -> reduce_product.handler \n\n        \n        execute_19300c \u2192 reduce_unique.execute \n        reduce_unique.continue \u2192 reduce_product.execute \n        reduce_product.continue \u2192 continue_45190b\n\n        reduce_product.result \u2192 output_cffcc2\n    }\n}\n\n\ninstance(x: 0, y: 0) unique_product_1 root.main.unique_product {}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 100) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: -50) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        sub_node.first <- length_node.length\n        sub_node.second <- modulo_node.result\n\n        slice_second_part.list <- list_48148f\n        sub_node.result -> slice_second_part.start\n        -1 -> slice_second_part.end\n\n        slice_first_part.list <- list_48148f\n        0 -> slice_first_part.start\n        sub_node.result -> slice_first_part.end\n\n        concat_node.left <- slice_second_part.slice\n        concat_node.right <- slice_first_part.slice\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9e7a3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e7a3c.items\n        0 -> reduce_9e7a3c.initialValue\n\n        func() {\n            in(x: -150, y: -50, name: \"accumulated\") property(Number) acc_1\n            in(x: -150, y: 50, name: \"current\") property(Number) current_1\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) result_out\n\n            instance(x: 50, y: 0) add_7a3c9e root.Std_k98ojb.Math.Add {}\n            acc_1 -> add_7a3c9e.first\n            current_1 -> add_7a3c9e.second\n            add_7a3c9e.result -> result_out\n        } -> reduce_9e7a3c.reducer\n\n        reduce_9e7a3c.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -50) lessthanorequal_node root.Std_k98ojb.Math.LessThanOrEqual {}\n        num_5c0677 \u2192 lessthanorequal_node.left\n        1 \u2192 lessthanorequal_node.right\n\n        instance(x: 0, y: -30) if_edge_case root.Std_k98ojb.Std.If {}\n        lessthanorequal_node.result \u2192 if_edge_case.predicate\n        execute_b7b391 \u2192 if_edge_case.execute\n\n        \n        instance(x: 100, y: -20) false_node root.Std_k98ojb.Logic.False {}\n        false_node.output \u2192 output_c457b3\n        if_edge_case.then \u2192 false_node.execute\n        false_node.done \u2192 continue_9a54bb\n\n        \n        instance(x: 50, y: -20) sub_node root.Std_k98ojb.Math.Sub {}\n        num_5c0677 \u2192 sub_node.first\n        1 \u2192 sub_node.second\n\n        instance(x: 100, y: 0) generate_range root.Std_k98ojb.List.GenerateRange {}\n        2 \u2192 generate_range.from\n        sub_node.result \u2192 generate_range.to\n\n        instance(x: 150, y: 30) filter_divisors root.Std_k98ojb.Iteration.Filter {}\n        generate_range.list \u2192 filter_divisors.items\n\n        \n        func() {\n            in(x: -20, y: 0, name: \"current\") property(Number) current_123456\n\n            instance modulo_node root.Std_k98ojb.Math.Modulo {}\n            num_5c0677 \u2192 modulo_node.value\n            current_123456 \u2192 modulo_node.divisor\n\n            instance equal_zero root.Std_k98ojb.Logic.Equal {}\n            modulo_node.result \u2192 equal_zero.left\n            0 \u2192 equal_zero.right\n\n            out(x: 100, y: 0, name: \"output\") property(Bool) output_789012\n            equal_zero.result \u2192 output_789012\n        } \u2192 filter_divisors.handler\n\n        instance(x: 200, y: 30) is_empty root.Std_k98ojb.List.IsEmpty {}\n        filter_divisors.output_list \u2192 is_empty.list\n\n        \n        is_empty.is_contained \u2192 output_c457b3\n\n        \n        if_edge_case.else \u2192 sub_node.execute\n        sub_node.done \u2192 generate_range.execute\n        generate_range.done \u2192 filter_divisors.execute\n        filter_divisors.done \u2192 is_empty.execute\n        is_empty.done \u2192 continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -200, y: -174) multiply_8c3d6b root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -174) greaterthan_bf2e3d root.Std_k98ojb.Math.GreaterThan {}\n        0 -> greaterthan_bf2e3d.left\n        multiply_8c3d6b.result -> greaterthan_bf2e3d.right\n        greaterthan_bf2e3d.result -> output_3339a3\n        x_853326 -> multiply_8c3d6b.first\n        y_5390f5 -> multiply_8c3d6b.second\n    }\n\n    \n\n    instance(x: -174, y: -63) opposite_signs_3a6e9d root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 145, y: -25) modulo_6d3e8a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 370, y: -25) equal_7c5a4e root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_6d3e8a.value\n        11 -> modulo_6d3e8a.divisor\n\n        modulo_6d3e8a.result -> equal_7c5a4e.left\n        0 -> equal_7c5a4e.right\n\n        equal_7c5a4e.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -15, y: 5) is_diff_8d9b2e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_7c9d2a root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7c9d2a.input\n        search_ai -> replace_7c9d2a.search\n        replace_ai -> replace_7c9d2a.replace\n        replace_7c9d2a.output -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: -50) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 100) equal_e5f3c1 root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_7b3b7b.input\n        input_ai -> equal_e5f3c1.left\n        tolower_7b3b7b.output -> equal_e5f3c1.right\n        equal_e5f3c1.result -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) is_lower_instance root.main.is_lower {}\n\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -700, y: -100) empty_node Std.List.Empty {}\n\n        \n        instance(x: -500, y: 0) reduce_unique Iteration.Reduce {\n            items: list_5fda54,\n            initial_value: empty_node.list\n        }\n\n        \n        func() { \n            in(x: -100, y: 20) current property(List)\n            in(x: 30, y: 20) item property(Number)\n\n            out new_acc property(List)\n\n            instance contains_node Std.List.Contains {\n                list: current,\n                item: item\n            }\n\n            instance not_contained Logic.Not { input: contains_node.is_contained }\n\n            instance if_node Std.If { input: not_contained.result }\n\n            \n            instance add_node Std.List.Add {\n                list: current,\n                item: item\n            }\n            if_node.then -> add_node.execute\n\n            \n            instance pass_through Node {\n                \n            }\n            if_node.else -> pass_through.trigger\n\n            \n            merge_nodes {\n                then: add_node.listWithItem,\n                else: current\n            } -> new_acc\n        }\n\n        \n        data_instance(x: 200, y: -50) initial_val = 1.0\n\n        instance reduce_product Iteration.Reduce {\n            items: reduce_unique.result,\n            initial_value: initial_val\n        }\n\n        \n        func() { \n            in current property(Number)\n            in item property(Number)\n\n            out new_acc property(Number)\n\n            instance mul_node Std.Math.Mul {\n                first: current,\n                second: item\n            }\n            mul_node.result -> new_acc\n        }\n\n        \n        reduce_product.output -> output_cffcc2\n\n        \n        instance(x: 700, y: -100) always_true Std.If { input: true }\n        always_true.then -> continue_45190b\n\n        \n        execute_19300c -> reduce_unique.execute\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat.listA\n        diff2.difference -> concat.listB\n\n        concat.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 200, y: -40) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 350, y: -40) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 500, y: -40) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 650, y: 0) slice_part1 root.Std_k98ojb.List.Slice {}\n        instance(x: 650, y: -120) slice_part2 root.Std_k98ojb.List.Slice {}\n        instance(x: 800, y: -40) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        list_48148f -> slice_part1.list\n        sub_node.result -> slice_part1.start\n        -1 -> slice_part1.end\n\n        list_48148f -> slice_part2.list\n        0 -> slice_part2.start\n        sub_node.result -> slice_part2.end\n\n        slice_part1.slice -> concat_node.left\n        slice_part2.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -50, y: 0) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 140, y: 30) reduce_9d3b0e root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9d3b0e.items\n        0 -> reduce_9d3b0e.initialValue\n\n        func() {\n            in(x: -150, y: -74, name: \"accumulated\") property(Number) acc_8a5d1f\n            in(x: -162, y: 46, name: \"current\") property(Number) curr_3e9c3b\n\n            out(x: 100, y: -74, name: \"sum\") property(Number) result_b0d8a5\n\n            instance(x: 50, y: -2) add_e6f8d9 root.Std_k98ojb.Math.Add {}\n            acc_8a5d1f -> add_e6f8d9.first\n            curr_3e9c3b -> add_e6f8d9.second\n            add_e6f8d9.result -> result_b0d8a5\n        } -> reduce_9d3b0e.reducer\n\n        reduce_9d3b0e.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -179, y: 106) _sum_5c6d3c root.main._sum {}\n}"
            ],
            "48": [
                "module() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance Math.LessThanOrEqual less_than_or_equal_1:\n            left: num_5c0677\n            right: 1\n\n        instance Std.If if_initial:\n            predicate: less_than_or_equal_1.result\n            then \u2192 \n                \n                instance Logic.FalseNode false_node:\n                    result \u2192 output_c457b3\n                trigger(continue_9a54bb)\n            else \u2192 \n\n                \n                instance Math.Sqrt sqrt_node:\n                    input: num_5c0677\n\n                instance Math.Floor floor_sqrt:\n                    input: sqrt_node.output\n\n                \n                instance List.GenerateRange generate_range:\n                    from: 2\n                    to: floor_sqrt.output\n\n                \n                func() divisor_predicate:\n                    in current: Number\n                        (divisor candidate)\n\n                    out result: Bool\n\n                    instance Math.Modulo modulo:\n                        value: num_5c0677\n                        divisor: current\n\n                    instance Logic.Equal equal_zero:\n                        left: modulo.result\n                        right: 0\n\n                    equal_zero.result \u2192 result.output\n\n                \n                instance Iteration.Find find_divisor:\n                    items: generate_range.list\n                    handler: divisor_predicate\n\n                \n                instance Logic.NotEqual not_null:\n                    left: find_divisor.item\n                    right: Null\n\n                \n                instance Logic.Not prime_result:\n                    input: not_null.result \u2192 gives false if no divisors exist\n\n                \n                prime_result.output \u2192 output_c457b3\n                trigger(continue_9a54bb)\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -200, y: -200) multiply_6e8c4d root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -150) greaterthan_b3f8ec root.Std_k98ojb.Math.GreaterThan {}\n        \n        x_853326 -> multiply_6e8c4d.first\n        y_5390f5 -> multiply_6e8c4d.second\n        \n        0 -> greaterthan_b3f8ec.left\n        multiply_6e8c4d.result -> greaterthan_b3f8ec.right\n        \n        greaterthan_b3f8ec.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -200, y: 100) opposite_signs_7b5a3c root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 10) modulo_45a3d6 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: 10) equal_7e5c31 root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_45a3d6.value\n        11 -> modulo_45a3d6.divisor\n        modulo_45a3d6.result -> equal_7e5c31.left\n        0 -> equal_7e5c31.right\n        equal_7e5c31.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -29, y: 48) is_diff_2b3d5a root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 270) replace_9f8d2a root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_9f8d2a.input\n        search_ai -> replace_9f8d2a.search\n        replace_ai -> replace_9f8d2a.replace\n        replace_9f8d2a.output -> output_ai\n    }\n\n    \n\n    instance(x: 143, y: -67) replace_char_9e5b0c root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 100) tolower_ajd3 root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 250, y: 100) equal_cmp root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_ajd3.input\n        input_ai -> equal_cmp.left\n        tolower_ajd3.output -> equal_cmp.right\n        equal_cmp.result -> output_ai\n    }\n\n    \n\n    instance(x: 150, y: -20) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list Std.List.Empty {}\n\n        \n        instance reduce_unique Std.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list  \n\n            handler: function() {  \n                in acc List      \n                in current Number  \n\n                out new_acc List  \n\n                instance contains_node Std.List.Contains {\n                    list: acc\n                    item: current\n                }\n\n                instance ifAdd Std.If {  \n                    input: !contains_node.is_contained\n                }\n\n                instance addNode Std.List.Add {\n                    list: acc\n                    item: current\n                }\n\n                \n                ifAdd.then \u2192 (addNode) \u2192 new_acc  \n                ifAdd.else \u2192 (acc) \u2192 new_acc      \n            }\n        }\n\n        \n        instance reduce_product Std.Iteration.Reduce {\n            items: reduce_unique.output_list       \n            initial_value: data_instance(init_val = 1.0)  \n\n            handler: function() {  \n                in acc Number    \n                in current Number  \n\n                out new_num Number  \n                \n                instance mul_node Std.Math.Mul {\n                    first: acc\n                    second: current\n                }\n\n                mul_node.result \u2192 new_num\n            }\n        }\n\n        \n        execute_19300c \u2192 reduce_unique.trigger       \n        reduce_unique.done \u2192 reduce_product.trigger  \n\n        reduce_product.done \u2192 continue_45190b        \n\n        \n        reduce_product.output_value \u2192 output_cffcc2\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 200, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_0 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat_0.left\n        diff2.difference -> concat_0.right\n        concat_0.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 45, y: -38) find_dissimilar_6f7d9a root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 140, y: 200) length_node root.Std_k98ojb.List.Length {}\n        list_48148f -> length_node.list\n        \n        instance(x: 250, y: 250) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        instance(x: 370, y: 210) subtract_len_k root.Std_k98ojb.Math.Sub {}\n        length_node.length -> subtract_len_k.first\n        modulo_node.result -> subtract_len_k.second\n        \n        instance(x: 500, y: 160) slice_first_part root.Std_k98ojb.List.Slice {\n            start: 0 \n        }\n        list_48148f -> slice_first_part.list\n        subtract_len_k.result -> slice_first_part.end\n\n        instance(x: 620, y: 230) slice_last_part root.Std_k98ojb.List.Slice {}\n        list_48148f -> slice_last_part.list\n        subtract_len_k.result -> slice_last_part.start\n        -1 -> slice_last_part.end \n\n        instance(x: 750, y: 320) concat_node root.Std_k98ojb.List.Concat {}\n        slice_last_part.slice -> concat_node.left \n        slice_first_part.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n    instance(x: -50, y: 10) rotate_right_instance root.main.rotate_right {}  \n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 100, y: 50) reduce_abc root.Std_k98ojb.Iteration.Reduce {}\n        \n        list_2c62ab -> reduce_abc.items\n        0 -> reduce_abc.initialValue\n        \n        func() {\n            in(x: -10, y: 0, name: \"accumulated\") property(Number) accumulated_ai\n            in(x: 5, y: 20, name: \"current\") property(Number) current_ai\n\n            instance adder root.Std_k98ojb.Math.Add {}\n            \n            accumulated_ai -> adder.first\n            current_ai -> adder.second\n            \n            out(x: 100, y: 0, name: \"result\") property(Number) result_out\n            adder.result -> result_out\n        } -> reduce_abc.reducer\n        \n        reduce_abc.output -> sum_2a848f\n    }\n    \n\n    instance(x: -50, y: 100) _sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance edge_case1 root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 < 2\"\n        }\n        \n        \n        setter(x: -300, y: -100, name: \"setter_false\") false_setter = output_c457b3 {\n            new_value: false\n        }\n        edge_case1.then \u2192 trigger(false_setter.execute)\n        false_setter.continue \u2192 continue_9a54bb\n\n        \n        edge_case1.else \u2192 next_node\n\n        \n        instance edge_case2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"(num_5c0677 % 2 == 0) && (num_5c0677 != 2)\"\n        }\n        \n        \n        edge_case2.then \u2192 trigger(false_setter.execute)\n        false_setter.continue \u2192 continue_9a54bb\n\n        \n        edge_case2.else \u2192 proceed_to_check_divisors\n\n        \n        instance compute_sqrt root.Std_k98ojb.Math.Expression {\n            expression: \"math.sqrt(num_5c0677)\"\n        }\n        \n        instance floored_sqrt root.Std_k98ojb.Math.Floor {\n            input \u2192 compute_sqrt.output\n        }\n\n        \n        instance generate_divisors_list root.Std_k98ojb.List.GenerateRange {\n            from: 3, \n            to \u2192 floored_sqrt.output\n        }\n\n        \n        instance filter_divisor_candidates root.Std_k98ojb.Iteration.Filter {}\n        \n        \n        func() {\n            in(x: -200, y: 50, name:\"current\") property(Number) current_...\n            \n            instance modulo_check root.Std_k98ojb.Math.Modulo {\n                value \u2192 num_5c0677,\n                divisor \u2192 current_\n            }\n            \n            instance is_divisible root.Std_k98ojb.Logic.Equal {\n                left \u2192 modulo_check.result, \n                right: 0\n            }\n\n            out(x: 300, y: 100, name:\"keep\") property(Bool) keep \u2192 is_divisible.result\n        } \u2192 filter_divisor_candidates.handler\n\n        \n        instance count_divisors root.Std_k98ojb.List.Length {\n            list \u2192 filter_divisor_candidates.output_list\n        }\n        \n        \n        instance final_check root.Std_k98ojb.Std.IfExpression {\n            expression: \"count_divisors.length == 0\"\n        }\n\n        \n        setter(x: 500, y: -200, name:\"setter_output\") result_setter = output_c457b3 {}\n        \n        final_check.then \u2192 trigger(result_setter.new_value(true))\n        final_check.else \u2192 trigger(result_setter.new_value(false))\n        result_setter.continue \u2192 continue_9a54bb\n\n        \n        execute_b7b391 \u2192 edge_case1.execute\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) mul_6d3e8c root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -177) lessthan_2f5d3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_6d3e8c.first\n        y_5390f5 -> mul_6d3e8c.second\n        0 -> lessthan_2f5d3d.right\n        mul_6d3e8c.result -> lessthan_2f5d3d.left\n        lessthan_2f5d3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -174, y: 10) opposite_signs_3b6a3e root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 50) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_8a4d7e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_instance root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_2a6d8c root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_2a6d8c.right\n        input_ai -> equal_2a6d8c.left\n        \n        equal_2a6d8c.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance empty_list root.Std.List.Empty {}\n\n        \n        instance unique_reduce root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }\n\n        \n        unique_reduce.handler = func() {\n            in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n            in(x: 100, y: 0, name: \"current\") property(Number) current_num\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n            \n            instance contains_1 root.Std.List.Contains {}\n            acc_in -> contains_1.list\n            current_num -> contains_1.item\n\n            \n            instance add_node root.Std.List.Add {}\n            acc_in -> add_node.list\n            current_num -> add_node.item\n\n            instance switch_1 root.Std.Switch {\n                condition: contains_1.is_contained\n            }\n            acc_in -> switch_1.input0  \n            add_node.listWithItem -> switch_1.input1  \n            switch_1.output -> new_acc_out\n        }\n\n        \n        instance product_reduce root.Iteration.Reduce {\n            items: unique_reduce.result\n            initial_value: 1.0  \n        }\n\n        \n        product_reduce.handler = func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_in\n            in(x: 100, y: 0, name: \"current\") property(Number) current_num\n\n            out(x: 200, y: 0, name: \"\") property(Number) new_acc_out\n\n            instance mul_1 root.Std.Math.Mul {}\n            acc_in -> mul_1.first\n            current_num -> mul_1.second\n            mul_1.result -> new_acc_out\n        }\n\n        \n        execute_19300c -> unique_reduce.execute  \n        unique_reduce.continue -> product_reduce.execute  \n        product_reduce.continue -> continue_45190b\n\n        product_reduce.result -> output_cffcc2  \n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 45, y: -100) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: -100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 350, y: -100) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 500, y: -100) slice_second_part root.Std_k98ojb.List.Slice { end: -1 }\n        instance(x: 650, y: -100) slice_first_part root.Std_k98ojb.List.Slice { start: 0 }\n        instance(x: 800, y: -100) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        sub_node.result -> slice_second_part.start\n        list_48148f -> slice_second_part.list\n\n        sub_node.result -> slice_first_part.end\n        list_48148f -> slice_first_part.list\n\n        slice_second_part.slice -> concat_node.left\n        slice_first_part.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -50, y: 0) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9e7a3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e7a3c.items\n        0 -> reduce_9e7a3c.initialValue\n\n        func() {\n            in(x: -150, y: -50, name: \"accumulated\") property(Number) acc_1\n            in(x: -150, y: 50, name: \"current\") property(Number) current_1\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) result_out\n\n            instance(x: 50, y: 0) add_7a3c9e root.Std_k98ojb.Math.Add {}\n            acc_1 -> add_7a3c9e.first\n            current_1 -> add_7a3c9e.second\n            add_7a3c9e.result -> result_out\n        } -> reduce_9e7a3c.reducer\n\n        reduce_9e7a3c.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -100) if_edge Std_k98ojb.Std.IfExpression {\n            expression: \"gen_0 <= 1\"\n        }\n        \n        num_5c0677 -> if_edge.gen_0\n\n        \n        instance(x: -150, y: -200) setter_false Std_k98ojb.Setter {\n            value = false\n        }\n        \n        if_edge.then -> setter_false.set\n        setter_false.value -> output_c457b3\n        setter_false.done -> continue_9a54bb\n\n        \n        instance(x: 0, y: -50) generate_range Std_k98ojb.List.GenerateRange {\n            from = 2\n        }\n        \n        \n        instance(x: -100, y: -75) subtract_one Std_k98ojb.Math.Add {\n            first = num_5c0677\n            second = -1\n        }\n        \n        subtract_one.result -> generate_range.to\n\n        \n        instance(x: 200, y: 0) map_mod Std_k98ojb.Iteration.Map {\n            items = generate_range.output\n        }\n\n        \n        func() {\n            in(x: -50, y: 0, name: \"current\") property(Number) current_i;\n            in(x: 0, y: 50, name: \"_context\") property(Number) context_num;\n\n            instance modulo Std_k98ojb.Math.Modulo {\n                value = context_num\n                divisor = current_i\n            }\n\n            out(x: 100, y: 0, name: \"output\") property(Number) mod_result;\n            \n            modulo.result -> mod_result;\n        } -> map_mod.handler\n\n        num_5c0677 -> map_mod.context\n\n        \n        instance(x: 300, y: -100) contains_zero Std_k98ojb.List.Contains {\n            list = map_mod.output_list\n            item = 0\n        }\n\n        \n        instance(x: 400, y: -50) not_result Std_k98ojb.Logic.Not {\n            input = contains_zero.is_contained\n        }\n        \n        not_result.result -> output_c457b3\n\n        \n        contains_zero.done -> continue_9a54bb \n\n        \n        execute_b7b391 -> if_edge.execute\n    }\n\n    instance(x: -20, y: 0) num_prime_instance main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -100, y: -100) ifexpression_b8d7c2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0 ? true : false\"\n        }\n        \n        x_853326 -> ifexpression_b8d7c2.gen_0\n        y_5390f5 -> ifexpression_b8d7c2.gen_1\n        ifexpression_b8d7c2.value -> output_3339a3\n    }\n\n    \n\n    instance(x: -400, y: 0) opposite_signs_eb5e16 root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x:5, y:-25, name:\"n\") property(Number) n_27f29c\n        out(x:668, y:2, name:\"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: -50) modulo_4a1d5b root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 250, y: -50) equal_b7e3c6 root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4a1d5b.value\n        modulo_4a1d5b.result -> equal_b7e3c6.left\n        0 -> equal_b7e3c6.right\n        equal_b7e3c6.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -84, y: 59) is_diff_1a8d4b root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_9a7c2d root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_9a7c2d.input\n        search_ai -> replace_9a7c2d.search\n        replace_ai -> replace_9a7c2d.replace\n        replace_9a7c2d.output -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 5) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 200, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_5c4634 root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_5c4634.left\n        input_ai -> equal_5c4634.right\n        equal_5c4634.result -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: 100) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        instance(x: 100, y: 100) empty_list root.Std_k98ojb.List.Empty {}\n\n        \n        instance(x: 200, y: 150) reduce_unique root.Iteration.Reduce {}\n        \n        list_5fda54 -> reduce_unique.items\n        empty_list.list -> reduce_unique.initial_value\n\n        \n        func() {\n            in acc (List), elem (Number)\n            out new_acc (List)\n\n            instance contains_node root.Std_k98ojb.List.Contains {}\n            acc -> contains_node.list\n            elem -> contains_node.item\n\n            instance not_node root.Std_k98ojb.Logic.Not {}\n            contains_node.is_contained -> not_node.input\n\n            instance if_node root.Std_k98ojb.Std.If {}\n            not_node.result -> if_node.condition\n\n            \n            instance add_node root.Std_k98ojb.List.Add {}\n            acc -> add_node.list\n            elem -> add_node.item\n            add_node.listWithItem -> if_node.then_new_acc \n\n            \n            acc -> if_node.else_new_acc\n\n            if_node.result -> new_acc\n        } -> reduce_unique.handler\n\n        \n        instance(x: 400, y: 150) reduce_product root.Iteration.Reduce {}\n        \n        reduce_unique.output_list -> reduce_product.items\n        1 -> reduce_product.initial_value \n\n        func() {\n            in acc (Number), elem (Number)\n            out new_acc (Number)\n\n            instance mul_node root.Std_k98ojb.Math.Mul {}\n            acc -> mul_node.first\n            elem -> mul_node.second\n            mul_node.result -> new_acc\n        } -> reduce_product.handler\n\n        \n        execute_19300c -> reduce_unique.trigger \n        reduce_unique.done -> reduce_product.trigger  \n        reduce_product.done -> continue_45190b \n\n        \n        reduce_product.result -> output_cffcc2\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) differenceAB root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) differenceBA root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> differenceAB.left\n        list2_ai -> differenceAB.right\n\n        list2_ai -> differenceBA.left\n        list1_ai -> differenceBA.right\n\n        differenceAB.difference -> concat_node.left\n        differenceBA.difference -> concat_node.right\n\n        concat_node.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 42, y: -84) length_node root.Std_k98ojb.List.Length {}\n        list_48148f -> length_node.list\n        instance(x: 175, y: -64) modulo_node root.Std_k98ojb.Math.Modulo {}\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n        instance(x: 323, y: -68) sub_node root.Std_k98ojb.Math.Sub {}\n        length_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n        instance(x: 107, y: 45) first_slice root.Std_k98ojb.List.Slice {}\n        list_48148f -> first_slice.list\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n        instance(x: 263, y: 45) second_slice root.Std_k98ojb.List.Slice {}\n        list_48148f -> second_slice.list\n        sub_node.result -> second_slice.start\n        -1 -> second_slice.end\n        instance(x: 470, y: -25) concat_node root.Std_k98ojb.List.Concat {}\n        second_slice.slice -> concat_node.left\n        first_slice.slice -> concat_node.right\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: -163, y: 47) rotate_right_5e5d0a root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9e2d1a root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e2d1a.items\n        0 -> reduce_9e2d1a.initialValue\n\n        func() {\n            in(x: -100, y: -50, name: \"accumulated\") property(Number) acc_ai\n            in(x: 0, y: 0, name: \"current\") property(Number) curr_ai\n\n            out(x: 100, y: 0, name: \"sum\") property(Number) result_ai\n\n            instance(x: 20, y: 0) add_node root.Std_k98ojb.Math.Add {}\n            acc_ai -> add_node.first\n            curr_ai -> add_node.second\n            add_node.result -> result_ai\n        } -> reduce_9e2d1a.reducer\n\n        reduce_9e2d1a.output -> sum_2a848f\n    }\n    \n\n    instance(x: 300, y: 200) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: 100) ifexpr_edge root.Std_k98ojb.Std.IfExpression {\n            expression: \"gen0 <= 1\",\n        }\n        num_5c0677 \u2192 ifexpr_edge.gen0\n\n        \n        instance(x: -100, y: 200) setter_false root.Std_k98ojb.Setter {\n            new_value: false,\n        }\n        getter(x: -50, y: 300, name: \"getter_out\") getter_out = output_c457b3\n        setter_false \u2192 getter_out.setter\n\n        \n        ifexpr_edge.then \u2192 setter_false.execute\n        setter_false.continue \u2192 continue_9a54bb\n\n        \n        instance(x: -200, y: -100) sqrt_expr root.Std_k98ojb.Math.Expression {\n            expression: \"sqrt(gen0)\",\n        }\n        num_5c0677 \u2192 sqrt_expr.gen0\n        instance(x: -150, y: -100) floor_sqrt root.Std_k98ojb.Math.Floor {\n            input: sqrt_expr.result,\n        }\n\n        \n        instance(x: -100, y: -100) gen_range root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: floor_sqrt.output,\n        }\n\n        \n        instance(x: 50, y: -100) find_divisor root.Std_k98ojb.Iteration.Find {\n            items: gen_range.list,\n            context: num_5c0677,\n        }\n        func() {\n            in(x: -20, y: 30, name: \"current\") property(Number) current_div\n            in(x: 10, y: 60, name: \"_index\") property(Number) _index\n            in(x: 40, y: 90, name: \"_context\") property(Number) context_num\n\n            out(x: 250, y: 30, name: \"predicate\") property(Bool) pred_out\n\n            instance(x: 80, y: 30) modulo_node root.Std_k98ojb.Math.Modulo {\n                value: context_num,\n                divisor: current_div\n            }\n            instance(x: 150, y: 30) eq_zero root.Std_k98ojb.Logic.Equal {\n                left: modulo_node.result,\n                right: 0\n            }\n            eq_zero.result \u2192 pred_out\n        } \u2192 find_divisor.handler\n\n        \n        instance(x: 200, y: -100) is_found root.Std_k98ojb.Logic.IsNotNull {\n            input: find_divisor.item,\n        }\n\n        \n        instance(x: 300, y: -50) if_final root.Std_k98ojb.Std.If {\n            predicate: is_found.result,\n        }\n        getter_out.value \u2192 if_final.then_value \n        true \u2192 if_final.else_value             \n\n        \n        ifexpr_edge.else \u2192 sqrt_expr.execute\n        find_divisor.done \u2192 is_found.input     \n        is_found.output \u2192 if_final.predicate\n\n        instance(x: 400, y: -50) setter_result root.Std_k98ojb.Setter {\n            new_value: if_final.result,\n        }\n        getter_out.setter \u2190 setter_result.new_value\n        setter_result.continue \u2192 continue_9a54bb\n\n        \n        execute_b7b391 \u2192 ifexpr_edge.execute\n    }\n\n    instance(x: -20, y: 0) num_prime_inst root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 10,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 0, y: 0) check_sign root.Std.IfExpression {\n            expression: \"x * y < 0\"\n        }\n        x_853326 -> check_sign.x\n        y_5390f5 -> check_sign.y\n        check_sign.value -> output_3339a3\n    }\n\n    instance(x: -174, y: -63) opposite_signs_d6e930 root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 20) modulo_7a3d4b root.Std_k98ojb.Math.Modulo {}\n        instance(x: 50, y: 20) equal_0e3c8b root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_7a3d4b.value\n        11 -> modulo_7a3d4b.divisor\n        modulo_7a3d4b.result -> equal_0e3c8b.left\n        0 -> equal_0e3c8b.right\n        equal_0e3c8b.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -14, y: 5) is_diff_node root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_root Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_root.input\n        search_ai -> replacer_root.search\n        replace_ai -> replacer_root.replace\n        replacer_root.output -> output_ai\n    }\n\n    \n\n    instance(x: -231, y: 60) replace_char_9e87f4 root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 200, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_c6f5d0 root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_c6f5d0.right\n        input_ai -> equal_c6f5d0.left\n        equal_c6f5d0.result -> output_ai\n    }\n\n    \n\n    instance(x: 14, y: -52) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std)\nimport(\"http\", Http)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(execute_19300c trigger(), list_5fda54 property(List))\n        out(continue_45190b trigger(), output_cffcc2 property(Number))\n\n        \n        instance empty_list root.Std.List.Empty {}\n        \n        instance reduce_unique root.Iteration.Reduce {\n            items = list_5fda54,\n            initial_value = empty_list.empty_list,\n        }\n        reduce_unique.handler = \n            func() -> this {\n                in(acc List, current_item Number)\n                out(new_acc List)\n\n                \n                instance contains root.Std_k98ojb.List.Contains {}\n                acc \u2192 contains.list\n                current_item \u2192 contains.item\n\n                instance not_contained root.Std_k98ojb.Logic.Not {}\n                contains.is_contained \u2192 not_contained.input\n\n                instance add_if_needed root.Std.If {\n                    condition = not_contained.result\n                }\n                \n                \n                instance add_to_list root.Std.List.Add {}\n                acc \u2192 add_to_list.list\n                current_item \u2192 add_to_list.item\n                \n                \n                add_to_list.listWithItem \u2192 add_if_needed.then_value\n                acc \u2192 add_if_needed.else_value\n\n                add_if_needed.value \u2192 new_acc\n            }\n\n        \n        data_instance(initial_product) = 1.0\n\n        instance reduce_product root.Iteration.Reduce {\n            items = reduce_unique.output_list,\n            initial_value = initial_product,\n        }\n        reduce_product.handler = \n            func() -> this {\n                in(accum Number, item Number)\n                out(new_acc Number)\n\n                instance multiply root.Std_k98ojb.Math.Mul {}\n                accum \u2192 multiply.first\n                item \u2192 multiply.second\n\n                multiply.result \u2192 new_acc\n            }\n\n        \n        reduce_product.value \u2192 output_cffcc2 \n\n        \n        instance start root.Std.IfExpression {\n            expression = \"true\"\n        }\n        execute_19300c \u2192 start.execute\n        start.then \u2192 reduce_unique.start\n\n        instance finish root.Std.IfExpression {\n            expression = \"reduce_product.value != null\"\n        }\n        reduce_product.done \u2192 finish.input\n        finish.output \u2192 continue_45190b\n    } \n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 100) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: 75) concat_4f3a1e root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat_4f3a1e.listA\n        diff2.difference -> concat_4f3a1e.listB\n        \n        concat_4f3a1e.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 50, y: 50) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k7d3a)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance len_node Std_k98ojb.List.Length {\n            list = list_48148f\n        }\n\n        instance mod_node Std_k98ojb.Math.Modulo {\n            value = n_68068c\n            divisor = len_node.length\n        }\n\n        instance subtract_node Std_k98ojb.Math.Sub {\n            first = len_node.length\n            second = mod_node.result\n        }\n\n        instance second_slice Std_k98ojb.List.Slice {\n            list = list_48148f\n            start = subtract_node.result\n            end = -1\n        }\n\n        instance first_slice Std_k98ojb.List.Slice {\n            list = list_48148f\n            start = 0\n            end = subtract_node.result\n        }\n\n        instance concat_node Std_k98ojb.List.Concat {\n            left = second_slice.slice\n            right = first_slice.slice\n        }\n\n        output_823209 <- concat_node.result\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 0, y: 0) reduce_node root.Std_k98ojb.Iteration.Reduce {\n            initialValue = 0,\n            reducer = func() {\n                in(x: -170, y: 35, name: \"accumulated\") property(Number) accumulated_6e4d2f\n                in(x: -166, y: 89, name: \"current\") property(Number) current_1a5c3d\n\n                out(x: 170, y: 35, name: \"output\") property(Number) output_a0b04e\n\n                instance(x: 100, y: 62) add_node root.Std_k98ojb.Math.Add {}\n                accumulated_6e4d2f -> add_node.first\n                current_1a5c3d -> add_node.second\n                add_node.result -> output_a0b04e\n            }\n        }\n\n        list_2c62ab -> reduce_node.items\n        reduce_node.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: -172, y: 39) _sum_45a7d2 root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance if_less_than_two Std.IfExpression {\n            expression: \"num_5c0677.value <= 1\"\n        }\n\n        execute_b7b391 \u2192 if_less_than_two.execute\n        \n        \n        instance set_false setter { \n            name: \"result\", new_value: false \n        }\n        \n        instance not_prime_branch Logic.Constant { value: false } \u2192 output_c457b3\n        if_less_than_two.then \u2192 set_false.execute \u2192 [set_false.continue \u2192 continue_9a54bb]\n\n        \n        instance is_two Checker {\n            expression: \"num_5c0677.value == 2\"\n        }\n\n        instance if_num_is_two Std.IfExpression { \n            expression: \"num_5c0677.value == 2\" \n        }\n        \n        if_less_than_two.else \u2192 if_num_is_two.execute\n\n        \n        instance set_true setter {\n            name: \"result\", new_value: true\n        }\n\n        instance prime_branch Logic.Constant { value: true } \u2192 output_c457b3\n        if_num_is_two.then \u2192 set_true.execute \u2192 [set_true.continue \u2192 continue_9a54bb]\n\n        \n        instance mod_two Math.Modulo {\n            value: num_5c0677.value, divisor: 2\n        }\n\n        instance is_even Logic.Equal { left: mod_two.result, right: 0 }\n        \n        instance if_even Std.IfExpression { \n            expression: \"is_even.output\" \n        }\n\n        \n        instance set_false_even setter {\n            name: \"result\", new_value: false\n        } \u2192 output_c457b3\n\n        if_num_is_two.else \u2192 if_even.execute\n        \n        if_even.then \u2192 set_false_even.execute \u2192 [set_false_even.continue \u2192 continue_9a54bb]\n\n        \n        instance compute_sqrt Math.Expression {\n            expression: \"Math.sqrt(num_5c0677.value)\"\n        }\n\n        instance floor_sqrt Math.Floor { input: compute_sqrt.output }\n        \n        var max_divisor = floor_sqrt.output\n\n        instance generate_divisors List.GenerateRange {\n            from: 3,\n            to: max_divisor\n        }\n\n        \n        func() predicate_handler {\n            in(current, property Number) current_div;\n\n            instance mod Math.Modulo { \n                value: num_5c0677.value, divisor: current_div \n            }\n            \n            instance is_divisible Logic.Equal { \n                left: mod.result, right: 0\n            }\n\n            out(output, property Bool) is_divisible.output;\n        } \u2192 Iteration.Find.handler\n\n        \n        instance find_divisor Iteration.Find {\n            items: generate_divisors.list,\n        }\n\n        \n        instance invert_find Logic.Not { input: find_divisor.found }\n\n        invert_find.output \u2192 output_c457b3\n        \n        \n        find_divisor.done \u2192 continue_9a54bb\n\n        \n        if_even.else \u2192 generate_divisors.start\n    }\n    \n    instance num_prime_inst root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) mul_6d3e8c root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -177) lessthan_2a7f3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_6d3e8c.first\n        y_5390f5 -> mul_6d3e8c.second\n        0 -> lessthan_2a7f3d.right\n        mul_6d3e8c.result -> lessthan_2a7f3d.left\n        lessthan_2a7f3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -154, y: 10) opposite_signs_3b6a5e root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 50) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_8a4d7e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_instance root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_2a6d8c root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_2a6d8c.right\n        input_ai -> equal_2a6d8c.left\n        \n        equal_2a6d8c.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(empty_list root.Std_k98ojb.List.Empty {}) \n\n        \n        instance(reduce_unique root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }) \n        \n        func() { \n            in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n            in(x: 100, y: 0, name: \"current\") property(Number) current_in\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n            instance(contains root.Std_k98ojb.List.Contains {\n                list: acc_in\n                item: current_in\n            })\n\n            instance(not_contained root.Logic.Not { \n                input: contains.is_contained \n            })\n\n            instance(if_node root.Std_k98ojb.Std.If {\n                input: not_contained.result\n            })\n\n            \n            instance(add_to_list root.Std_k98ojb.List.Add {\n                list: acc_in\n                item: current_in\n            })\n            add_to_list.listWithItem \u2192 new_acc_out\n\n            \n            if_node.else \u2192 (acc_in \u2192 new_acc_out) \n\n        } -> reduce_unique.handler \n\n        \n        instance(reduce_product root.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1 \n        })\n        \n        func() { \n            in(x:0,y:0, name:\"acc\") property(Number) acc_num\n            in(x:50,y:0, name:\"current\") property(Number) current_num\n\n            out(x:100,y:0,name:\"\") property(Number) new_acc_out\n\n            instance(mul root.Std_k98ojb.Math.Mul {\n                first: acc_num\n                second: current_num\n            })\n            mul.result \u2192 new_acc_out\n        } -> reduce_product.handler \n\n        \n        execute_19300c \u2192 reduce_unique.execute \n        reduce_unique.continue \u2192 reduce_product.execute \n        reduce_product.continue \u2192 continue_45190b\n\n        reduce_product.result \u2192 output_cffcc2\n    }\n}\n\n\ninstance(x: 0, y: 0) unique_product_1 root.main.unique_product {}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 100) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: -50) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        sub_node.first <- length_node.length\n        sub_node.second <- modulo_node.result\n\n        slice_second_part.list <- list_48148f\n        sub_node.result -> slice_second_part.start\n        -1 -> slice_second_part.end\n\n        slice_first_part.list <- list_48148f\n        0 -> slice_first_part.start\n        sub_node.result -> slice_first_part.end\n\n        concat_node.left <- slice_second_part.slice\n        concat_node.right <- slice_first_part.slice\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9e7a3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e7a3c.items\n        0 -> reduce_9e7a3c.initialValue\n\n        func() {\n            in(x: -150, y: -50, name: \"accumulated\") property(Number) acc_1\n            in(x: -150, y: 50, name: \"current\") property(Number) current_1\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) result_out\n\n            instance(x: 50, y: 0) add_7a3c9e root.Std_k98ojb.Math.Add {}\n            acc_1 -> add_7a3c9e.first\n            current_1 -> add_7a3c9e.second\n            add_7a3c9e.result -> result_out\n        } -> reduce_9e7a3c.reducer\n\n        reduce_9e7a3c.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: 100, y: 100) initial_check root.Std_k98ojb.Std.IfExpression {\n            expression: \"num_5c0677 <= 1\"\n        }\n\n        \n        instance(x: 200, y: 200) generate_divisors root.Std_k98ojb.List.GenerateRange {\n            from: 2,\n            to: num_5c0677 - 1\n        }\n\n        \n        instance(x: 300, y: 300) for_loop root.Std_k98ojb.Std.For {}\n\n        \n        func() {\n            in(x: -50, y: -50, name:\"current\") property(Number) current_item\n\n            instance(x: 400, y: 400) modulo_node root.Std_k98ojb.Math.Modulo {\n                value: num_5c0677,\n                divisor: current_item\n            }\n\n            instance(x: 500, y: 500) mod_zero_check root.Std_k98ojb.Std.IfExpression {\n                expression: \"modulo_node.result == 0\"\n            }\n\n            \n            instance(x:600,y:600) setter_false root.Std_k98ojb.Setter(output_c457b3, value: false)\n\n        } -> for_loop.handler\n\n        \n        mod_zero_check.then \u2192 setter_false.execute\n        setter_false.continue \u2192 continue_9a54bb\n\n        mod_zero_check.else \u2192 for_loop.next\n\n        \n        instance(x: 700, y: 700) done_setter root.Std_k98ojb.Setter(output_c457b3, value: true)\n\n        \n        execute_b7b391 \u2192 initial_check.execute\n\n        \n        initial_check.then \u2192 setter_false.execute\n        setter_false.continue \u2192 continue_9a54bb\n\n        \n        initial_check.else \u2192 generate_divisors.input\n        generate_divisors.output \u2192 for_loop.items\n        execute_b7b391 \u2192 for_loop.reset \n\n        \n        for_loop.done \u2192 done_setter.execute\n        done_setter.continue \u2192 continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 50, y: -174) multiply_6d8c8e root.Std_k98ojb.Math.Mul {}\n        instance(x: 200, y: -174) greaterthan_bf1a3d root.Std_k98ojb.Math.GreaterThan {}\n\n        x_853326 -> multiply_6d8c8e.first\n        y_5390f5 -> multiply_6d8c8e.second\n        0 -> greaterthan_bf1a3d.left\n        multiply_6d8c8e.result -> greaterthan_bf1a3d.right\n        greaterthan_bf1a3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -245, y: 0) opposite_signs_7e3b1e root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 10) genrange_11 root.Std_k98ojb.List.GenerateRange {\n            from: 11\n            to: 11\n        }\n        \n        instance(x: 50, y: 10) first_item root.Std_k98ojb.List.FirstItem {}\n        genrange_11.list -> first_item.list\n        \n        instance(x: 20, y: 30) modulo_op root.Std_k98ojb.Math.Modulo {}\n        n_27f29c -> modulo_op.value\n        first_item.item -> modulo_op.divisor\n\n        instance(x: 40, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {\n            right: 0\n        }\n        modulo_op.result -> equal_zero.left\n        \n        equal_zero.equals -> output_f2630f\n    }\n\n    instance(x: -10, y: -10) is_diff_Inst root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_7d5a3c root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_7d5a3c.input\n        search_ai -> replace_7d5a3c.search\n        replace_ai -> replace_7d5a3c.replace\n        replace_7d5a3c.output -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: -20) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 200, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_5c4634 root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_5c4634.left\n        input_ai -> equal_5c4634.right\n        equal_5c4634.result -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: 100) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        instance(x: 100, y: 200) empty_list root.Std.List.Empty {}\n        \n        \n        instance(x: 200, y: 150) reduce_unique root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.items\n        }\n        \n        func() { \n            in(x: -10, y: -20, name: \"acc\") property(List) acc_in;\n            in(x: 30, y: -10, name: \"current\") property(Number) current_num;\n\n            out(x: 50, y: 0, name: \"\") property(List) output_list;\n\n            instance contains root.Std.List.Contains {\n                list: acc_in\n                item: current_num\n            }\n            \n            instance not_contains root.Std.IfExpression {\n                expression: \"!gen_0\"\n            }\n            contains.is_contained -> not_contains.gen_0\n\n            instance if_node root.Std.If {\n                input: not_contains.result\n            }\n\n            \n            instance add_item root.Std.List.Add {}\n            acc_in -> add_item.list;\n            current_num -> add_item.item;\n            \n            \n            setter(x: 0, y: 30) setter_1 = output_list;\n\n            if_node.then -> add_item.execute;\n            add_item.listWithItem -> output_list (when then is active)\n            \n            if_node.else -> setter_1.set_value(acc_in);\n        }\n\n        \n        instance(x: 400, y: 150) reduce_product root.Iteration.Reduce {\n            items: reduce_unique.output\n            initial_value: data_instance(1)\n        }\n        \n        func() { \n            in(x: -20, y: -30, name: \"acc\") property(Number) acc_in;\n            in(x: 40, y: -20, name: \"current\") property(Number) current_num;\n\n            out(x: 60, y: -10, name: \"\") property(Number) output_num;\n\n            instance multiply root.Std.Math.Mul {}\n            acc_in -> multiply.first;\n            current_num -> multiply.second;\n            \n            multiply.result -> output_num;\n        }\n\n        execute_19300c -> reduce_unique.start\n        reduce_unique.done -> reduce_product.start\n        reduce_product.done -> continue_45190b\n        \n        reduce_product.output -> output_cffcc2\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) diff_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diff_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff_ab.left\n        list2_ai -> diff_ab.right\n\n        list2_ai -> diff_ba.left\n        list1_ai -> diff_ba.right\n\n        diff_ab.difference -> concat_1.list_a\n        diff_ba.difference -> concat_1.list_b\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) list_length root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n\n        instance(x: 400, y: 100) left_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: -50) right_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        \n        list_48148f -> list_length.list\n\n        \n        n_68068c -> modulo_node.value\n        list_length.length -> modulo_node.divisor\n\n        \n        list_length.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        \n        list_48148f -> left_slice.list\n        0 -> left_slice.start\n        sub_node.result -> left_slice.end\n\n        list_48148f -> right_slice.list\n        sub_node.result -> right_slice.start\n        -1 -> right_slice.end\n\n        \n        right_slice.slice -> concat_node.left\n        left_slice.slice -> concat_node.right\n\n        \n        concat_node.result -> output_823209\n    }\n\n    instance(x: 0, y: 0) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9d8eaa root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9d8eaa.items\n        0 -> reduce_9d8eaa.initialValue\n\n        func() {\n            in(x: -100, y: -50, name: \"accumulated\") property(Number) acc_7a3f1b\n            in(x: -50, y: 0, name: \"current\") property(Any) current_9c8d2e\n\n            out(x: 100, y: 0, name: \"sum\") property(Number) result_b4a6ce\n\n            instance(x: 0, y: 0) add_3f7b8d root.Std_k98ojb.Math.Add {}\n            acc_7a3f1b -> add_3f7b8d.first\n            current_9c8d2e -> add_3f7b8d.second\n            add_3f7b8d.result -> result_b4a6ce\n        } -> reduce_9d8eaa.reducer\n\n        reduce_9d8eaa.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 100, y: 100) _sum_3a7c5b root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(lte_check) Std_k98ojb.Math.LessThanOrEqual {\n            left = num_5c0677\n            right = 1.0\n        }\n\n        instance(if_initial) Std_k98ojb.Std.If {\n            predicate = lte_check.result\n        }\n\n        \n        instance(set_false) Std_k98ojb.Setter { \n            value_type = Bool\n            new_value = false\n        }\n        set_false.value -> output_c457b3\n        set_false.continue -> continue_9a54bb\n\n        \n        instance(setter_is_prime) Std_k98ojb.Setter {\n            value_type = Bool\n        }\n\n        instance(getter_is_prime) Std_k98ojb.Getter {\n            linked_setter = setter_is_prime\n        }\n\n        \n        instance(set_initial_true) Std_k98ojb.Setter {\n            linked_setter = setter_is_prime\n            new_value = true\n        }\n        \n        \n        instance(div_upper) Std_k98ojb.Math.Div {\n            first = num_5c0677\n            second = 2.0\n        }\n\n        \n        instance(generate_range) Std_k98ojb.List.GenerateRange {\n            from = 2.0\n            to = div_upper.result\n        }\n\n        \n        instance(for_loop) Std_k98ojb.Std.For {\n            items = generate_range.list\n        }\n\n        \n        func(handler_for_loop) {\n            in(x: 0, y:0, name=\"current\") property(Number) current_2e7d5c\n\n            instance(modulo) Std_k98ojb.Math.Modulo {\n                value = num_5c0677\n                divisor = current_2e7d5c\n            }\n\n            instance(equal_zero) Std_k98ojb.Logic.Equal {\n                left = modulo.result\n                right = 0.0\n            }\n\n            instance(if_mod_zero) Std_k98ojb.Std.If {\n                predicate = equal_zero.result\n            }\n\n            \n            instance(set_false_flag) Std_k98ojb.Setter {\n                linked_setter = setter_is_prime\n                new_value = false\n            }\n            set_false_flag.execute <- if_mod_zero.then\n        } -> for_loop.handler\n\n        \n        getter_is_prime.value -> output_c457b3\n        for_loop.done -> continue_9a54bb\n\n        \n        execute_b7b391 -> if_initial.execute\n        if_initial.then -> set_false.execute\n        if_initial.else -> set_initial_true.execute\n        set_initial_true.continue -> for_loop.reset\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 50,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -200, y: -200) ifexpr_7e8d2a Std_k98ojb.Std.IfExpression {\n            expression: \"x * y < 0\"\n        }\n        setter(x: -150, y: 50, name: \"setter_true\") root = isOpposite\n        setter(x: -150, y: 150, name: \"setter_false\") root = isOpposite\n\n        getter(x: 0, y: 0, name: \"getter_7e8d2a\") = isOpposite\n\n        \n        x_853326 -> ifexpr_7e8d2a.gen_0\n        y_5390f5 -> ifexpr_7e8d2a.gen_1\n\n        \n        ifexpr_7e8d2a.then -> setter_true.execute\n        1 -> setter_true.new_value\n        ifexpr_7e8d2a.else -> setter_false.execute\n        0 -> setter_false.new_value\n\n        \n        setter_true.continue -> continue_output\n        setter_false.continue -> continue_output\n        trigger(continue_output) { \n            getter_7e8d2a.value -> output_3339a3 \n        }\n    }\n\n    \n\n    instance(x: -150, y: 100) opposite_signs_4a8f6e root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 100, y: 0) modulo_b4a5b8 root.Std_k98ojb.Math.Modulo {}\n        n_27f29c -> modulo_b4a5b8.value\n        11 -> modulo_b4a5b8.divisor\n\n        instance(x: 200, y: -10) equal_d6e3d8 root.Std_k98ojb.Logic.Equal {}\n        modulo_b4a5b8.result -> equal_d6e3d8.left\n        0 -> equal_d6e3d8.right\n\n        equal_d6e3d8.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -9, y: -1) is_diff_4a75b7 root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_root Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_root.input\n        search_ai -> replacer_root.search\n        replace_ai -> replacer_root.replace\n        replacer_root.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_inst root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: -172, y: 209) tolower_5b7a4f root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 350, y: 200) equal_6c2e0d root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> tolower_5b7a4f.input\n        input_ai -> equal_6c2e0d.left\n        tolower_5b7a4f.output -> equal_6c2e0d.right\n\n        equal_6c2e0d.result -> output_ai\n    }\n\n    \n\n    instance(x: -13, y: 189) is_lower_c0df35 root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        instance(empty_list_node) Std_k98ojb.List.Empty {}\n\n        \n        func() uniqueness_handler {\n            in accumulator property(List)\n            in element property(Number)\n\n            out new_acc property(List)\n\n            instance(contains) Std_k98ojb.List.Contains {}\n                accumulator -> contains.list\n                element -> contains.item\n\n            instance(not_present) Std_k98ojb.Logic.Not {}\n                contains.is_contained -> not_present.input\n\n            instance(add_conditional) Std.Std.If {}\n                not_present.result -> add_conditional.input\n\n            \n            instance(add_list) Std_k98ojb.List.Add {}\n                accumulator -> add_list.list\n                element -> add_list.item\n\n            \n            add_conditional.then -> add_list.execute\n            add_list.listWithItem -> new_acc\n            add_conditional.else -> accumulator -> new_acc\n        }\n\n        \n        instance(reduce_unique) Std_k98ojb.Iteration.Reduce {}\n            list_5fda54 -> reduce_unique.items\n            empty_list_node.list -> reduce_unique.initial_value\n            uniqueness_handler -> reduce_unique.handler\n\n        data_instance(initial_prod) = 1 \n\n        \n        func() multiply_handler {\n            in acc property(Number)\n            in element property(Number)\n\n            out result property(Number)\n\n            instance(multiply) Std_k98ojb.Math.Mul {}\n                acc -> multiply.first\n                element -> multiply.second\n                multiply.result -> result\n        }\n\n        \n        instance(reduce_product) Std_k98ojb.Iteration.Reduce {}\n            reduce_unique.result -> reduce_product.items\n            initial_prod -> reduce_product.initial_value\n            multiply_handler -> reduce_product.handler\n\n        \n        execute_19300c -> reduce_unique.trigger\n        instance(flow_sequence) Std.Std.Sequence {} \n            reduce_unique.complete -> flow_sequence.input\n            flow_sequence.output -> reduce_product.trigger\n\n        reduce_product.result -> output_cffcc2\n        reduce_product.complete -> continue_45190b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: -50, y: 50) difference_list1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: -50, y: 150) difference_list2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_7a4dab root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference_list1.left\n        list2_ai -> difference_list1.right\n\n        list2_ai -> difference_list2.left\n        list1_ai -> difference_list2.right\n\n        difference_list1.difference -> concat_7a4dab.left\n        difference_list2.difference -> concat_7a4dab.right\n        concat_7a4dab.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 50, y: -100) find_dissimilar_8f6e9b root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: -200, y: -200, name: \"length_node\") len_root Std_k98ojb.List.Length {}\n        \n        instance(x: -150, y: 50, name: \"modulo_node\") mod_root Std_k98ojb.Math.Modulo {}\n        \n        instance(x: -50, y: 50, name: \"sub_start\") sub_root Std_k98ojb.Math.Sub {}\n\n        instance(x: 100, y: -100, name: \"first_slice\") first_slice Root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        \n        instance(x: 200, y: -50, name: \"second_slice\") second_slice_root Std_k98ojb.List.Slice {}\n\n        instance(x: 400, y: 0, name: \"concat_node\") concat_root Std_k98ojb.List.Concat {}\n        \n        \n        list_48148f \u2192 len_root.list \n        n_68068c \u2192 mod_root.value\n        \n        len_root.length \u2192 mod_root.divisor \n        len_root.length \u2192 sub_root.first \n\n        mod_root.result \u2192 sub_root.second\n\n        sub_root.result \u2192 first_slice.end\n        list_48148f \u2192 first_slice.list\n\n        second_slice_root.start \u2190 sub_root.result  \n        second_slice_root.list \u2190 list_48148f  \n        second_slice_root.end \u2190 len_root.length \n\n        concat_root.left \u2190 second_slice_root.slice \n        concat_root.right \u2190 first_slice.slice  \n\n        concat_root.result \u2192 output_823209\n    }\n    \n    instance(x: -5, y: 0) rotate_node main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 120, y: 28) reduce_eb5d9e root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_eb5d9e.items\n        0 -> reduce_eb5d9e.initialValue\n        func() {\n            in(x: -134, y: -72, name: \"accumulated\") property(Number) accumulated_b8c1d7\n            in(x: -126, y: 35, name: \"current\") property(Number) current_9e8b4a\n\n            out(x: 1058, y: -73, name: \"sum\") property(Number) sum_3c4f5d\n\n            instance(x: 246, y: -5) add_6c50c1 root.Std_k98ojb.Math.Add {}\n            accumulated_b8c1d7 -> add_6c50c1.first\n            current_9e8b4a -> add_6c50c1.second\n            add_6c50c1.result -> sum_3c4f5d\n        } -> reduce_eb5d9e.reducer\n\n        reduce_eb5d9e.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 287, y: -3) _sum_f19f9c root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        instance(x: -187, y: -35) lt2_check root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: -65, y: 20) if_edge_case root.Std_k98ojb.Std.If {}\n        \n        \n        num_5c0677 \u2192 lt2_check.first\n        1 \u2192 lt2_check.second\n        lt2_check.result \u2192 if_edge_case.predicate\n\n        \n        getter(x: -93, y: 83, name: \"getter_false\") getter_3d5a76 = false_val {}\n        setter(x: 10, y: 45) setter_fls root.Std_k98ojb.ValueSetter { value_type:Bool } \n        if_edge_case.then \u2192 setter_fls.execute\n        false \u2192 setter_fls.new_value\n        setter_fls.continue \u2192 continue_9a54bb\n        getter_3d5a76.value \u2192 output_c457b3\n\n        \n        instance(x: -180, y: -110) expr_sqrt root.Std_k98ojb.Math.Expression { expression:\"sqrt(x)\" }\n        num_5c0677 \u2192 expr_sqrt.x\n        instance(x: -43, y: -100) floor_node root.Std_k98ojb.Math.Floor {}\n        expr_sqrt.result \u2192 floor_node.input\n        instance(x: 120, y: -105) gen_range root.Std_k98ojb.List.GenerateRange { start:2 }\n        floor_node.output \u2192 gen_range.end\n\n        \n        instance(x: 350, y: -100) find_divisor root.Std_k98ojb.Iteration.Find {}\n        gen_range.list \u2192 find_divisor.items\n        \n        \n        func() {\n            in(x:-43,y:0,name:\"current\") property(Number) _item_0\n\n            instance(x: 10, y:25) mod root.Std_k98ojb.Math.Modulo {}\n            num_5c0677 \u2192 mod.value\n            _item_0 \u2192 mod.divisor\n            instance(x: -25,y:-30) eq root.Std_k98ojb.Logic.Equal { right: 0 }\n            mod.result \u2192 eq.left\n\n            eq.result \u2192 output_predicate \n        } \u2192 find_divisor.handler\n\n        \n        instance(x: 500,y:-180) not_found root.Std_k98ojb.Logic.Not {}\n        find_divisor.found \u2192 not_found.input\n        not_found.result \u2192 output_c457b3\n\n        \n        find_divisor.done \u2192 continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -168, y: -174) mul_6d3e8c root.Std_k98ojb.Math.Mul {}\n        instance(x: 50, y: -177) lessthan_2a7f3d root.Std_k98ojb.Math.LessThan {}\n        x_853326 -> mul_6d3e8c.first\n        y_5390f5 -> mul_6d3e8c.second\n        0 -> lessthan_2a7f3d.right\n        mul_6d3e8c.result -> lessthan_2a7f3d.left\n        lessthan_2a7f3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -154, y: 10) opposite_signs_3b6a5e root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 50) mod_11 root.Std_k98ojb.Math.Modulo {\n            divisor: 11\n        }\n        instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n        n_27f29c -> mod_11.value\n        mod_11.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -50, y: 0) is_diff_8a4d7e root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_7b3b7b root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_7b3b7b.input\n        search_ai -> replacer_7b3b7b.search\n        replace_ai -> replacer_7b3b7b.replace\n        replacer_7b3b7b.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_instance root.main.replace_char {}\n\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 100, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_2a6d8c root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_2a6d8c.right\n        input_ai -> equal_2a6d8c.left\n        \n        equal_2a6d8c.result -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 50) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(empty_list root.Std_k98ojb.List.Empty {}) \n\n        \n        instance(reduce_unique root.Iteration.Reduce {\n            items: list_5fda54\n            initial_value: empty_list.list\n        }) \n        \n        func() { \n            in(x: 0, y: 0, name: \"acc\") property(List) acc_in\n            in(x: 100, y: 0, name: \"current\") property(Number) current_in\n\n            out(x: 200, y: 0, name: \"\") property(List) new_acc_out\n\n            instance(contains root.Std_k98ojb.List.Contains {\n                list: acc_in\n                item: current_in\n            })\n\n            instance(not_contained root.Logic.Not { \n                input: contains.is_contained \n            })\n\n            instance(if_node root.Std_k98ojb.Std.If {\n                input: not_contained.result\n            })\n\n            \n            instance(add_to_list root.Std_k98ojb.List.Add {\n                list: acc_in\n                item: current_in\n            })\n            add_to_list.listWithItem \u2192 new_acc_out\n\n            \n            if_node.else \u2192 (acc_in \u2192 new_acc_out) \n\n        } -> reduce_unique.handler \n\n        \n        instance(reduce_product root.Iteration.Reduce {\n            items: reduce_unique.result\n            initial_value: 1 \n        })\n        \n        func() { \n            in(x:0,y:0, name:\"acc\") property(Number) acc_num\n            in(x:50,y:0, name:\"current\") property(Number) current_num\n\n            out(x:100,y:0,name:\"\") property(Number) new_acc_out\n\n            instance(mul root.Std_k98ojb.Math.Mul {\n                first: acc_num\n                second: current_num\n            })\n            mul.result \u2192 new_acc_out\n        } -> reduce_product.handler \n\n        \n        execute_19300c \u2192 reduce_unique.execute \n        reduce_unique.continue \u2192 reduce_product.execute \n        reduce_product.continue \u2192 continue_45190b\n\n        reduce_product.result \u2192 output_cffcc2\n    }\n}\n\n\ninstance(x: 0, y: 0) unique_product_1 root.main.unique_product {}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) difference1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) difference2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> difference1.left\n        list2_ai -> difference1.right\n\n        list2_ai -> difference2.left\n        list1_ai -> difference2.right\n\n        difference1.difference -> concat_1.left\n        difference2.difference -> concat_1.right\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        instance(x: 100, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 400, y: 100) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: -50) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> length_node.list\n        n_68068c -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        sub_node.first <- length_node.length\n        sub_node.second <- modulo_node.result\n\n        slice_second_part.list <- list_48148f\n        sub_node.result -> slice_second_part.start\n        -1 -> slice_second_part.end\n\n        slice_first_part.list <- list_48148f\n        0 -> slice_first_part.start\n        sub_node.result -> slice_first_part.end\n\n        concat_node.left <- slice_second_part.slice\n        concat_node.right <- slice_first_part.slice\n        concat_node.result -> output_823209\n    }\n\n    \n\n    instance(x: 10, y: -5) rotate_right_node root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9e7a3c root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9e7a3c.items\n        0 -> reduce_9e7a3c.initialValue\n\n        func() {\n            in(x: -150, y: -50, name: \"accumulated\") property(Number) acc_1\n            in(x: -150, y: 50, name: \"current\") property(Number) current_1\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) result_out\n\n            instance(x: 50, y: 0) add_7a3c9e root.Std_k98ojb.Math.Add {}\n            acc_1 -> add_7a3c9e.first\n            current_1 -> add_7a3c9e.second\n            add_7a3c9e.result -> result_out\n        } -> reduce_9e7a3c.reducer\n\n        reduce_9e7a3c.output -> sum_2a848f\n    }\n    \n\n    instance(x: 100, y: 100) sum_instance root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_k98ojb)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -200, y: -50) lessthanorequal_node root.Std_k98ojb.Math.LessThanOrEqual {}\n        num_5c0677 \u2192 lessthanorequal_node.left\n        1 \u2192 lessthanorequal_node.right\n\n        instance(x: 0, y: -30) if_edge_case root.Std_k98ojb.Std.If {}\n        lessthanorequal_node.result \u2192 if_edge_case.predicate\n        execute_b7b391 \u2192 if_edge_case.execute\n\n        \n        instance(x: 100, y: -20) false_node root.Std_k98ojb.Logic.False {}\n        false_node.output \u2192 output_c457b3\n        if_edge_case.then \u2192 false_node.execute\n        false_node.done \u2192 continue_9a54bb\n\n        \n        instance(x: 50, y: -20) sub_node root.Std_k98ojb.Math.Sub {}\n        num_5c0677 \u2192 sub_node.first\n        1 \u2192 sub_node.second\n\n        instance(x: 100, y: 0) generate_range root.Std_k98ojb.List.GenerateRange {}\n        2 \u2192 generate_range.from\n        sub_node.result \u2192 generate_range.to\n\n        instance(x: 150, y: 30) filter_divisors root.Std_k98ojb.Iteration.Filter {}\n        generate_range.list \u2192 filter_divisors.items\n\n        \n        func() {\n            in(x: -20, y: 0, name: \"current\") property(Number) current_123456\n\n            instance modulo_node root.Std_k98ojb.Math.Modulo {}\n            num_5c0677 \u2192 modulo_node.value\n            current_123456 \u2192 modulo_node.divisor\n\n            instance equal_zero root.Std_k98ojb.Logic.Equal {}\n            modulo_node.result \u2192 equal_zero.left\n            0 \u2192 equal_zero.right\n\n            out(x: 100, y: 0, name: \"output\") property(Bool) output_789012\n            equal_zero.result \u2192 output_789012\n        } \u2192 filter_divisors.handler\n\n        instance(x: 200, y: 30) is_empty root.Std_k98ojb.List.IsEmpty {}\n        filter_divisors.output_list \u2192 is_empty.list\n\n        \n        is_empty.is_contained \u2192 output_c457b3\n\n        \n        if_edge_case.else \u2192 sub_node.execute\n        sub_node.done \u2192 generate_range.execute\n        generate_range.done \u2192 filter_divisors.execute\n        filter_divisors.done \u2192 is_empty.execute\n        is_empty.done \u2192 continue_9a54bb\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: 50, y: -174) multiply_6d8c8e root.Std_k98ojb.Math.Mul {}\n        instance(x: 200, y: -174) greaterthan_bf1a3d root.Std_k98ojb.Math.GreaterThan {}\n\n        x_853326 -> multiply_6d8c8e.first\n        y_5390f5 -> multiply_6d8c8e.second\n        0 -> greaterthan_bf1a3d.left\n        multiply_6d8c8e.result -> greaterthan_bf1a3d.right\n        greaterthan_bf1a3d.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -245, y: 0) opposite_signs_7e3b1e root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: 10, y: 0) modulo_4a3d5e root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: 0) equal_7c6a1c root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4a3d5e.value\n        11 -> modulo_4a3d5e.divisor\n\n        modulo_4a3d5e.result -> equal_7c6a1c.left\n        0 -> equal_7c6a1c.right\n\n        equal_7c6a1c.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -10, y: -5) is_diff_e8d94b root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replace_9a7c2d root.Std_k98ojb.Strings.Replace {}\n        input_ai -> replace_9a7c2d.input\n        search_ai -> replace_9a7c2d.search\n        replace_ai -> replace_9a7c2d.replace\n        replace_9a7c2d.output -> output_ai\n    }\n\n    \n\n    instance(x: 10, y: 5) replace_char_instance root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 200, y: 150) tolower_7b3b7b root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 150) equal_5c4634 root.Std_k98ojb.Logic.Equal {}\n        \n        input_ai -> tolower_7b3b7b.input\n        tolower_7b3b7b.output -> equal_5c4634.left\n        input_ai -> equal_5c4634.right\n        equal_5c4634.result -> output_ai\n    }\n\n    \n\n    instance(x: 100, y: 100) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_c3e15a)\n\nmodule() main {\n\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        instance(x: -200, y: -50) sort_list root.Std.List.Sort {\n            list: list_5fda54\n        }\n\n        \n        data_instance(initial_acc) = [1.0, null]\n\n        \n        data_instance(null_value) = null\n\n        instance(x: 300, y: -200) reduce_unique root.Iteration.Reduce {\n            items: sort_list.sorted_list,\n            initial_value: initial_acc,\n\n            handler: function() {\n                in(x: -100, y: -50, name: \"acc\") property(List) acc\n                in(x: 0, y: 0, name: \"item\") property(Number) current_element\n\n                \n                instance get_prod root.Std.List.GetAt {\n                    list: acc,\n                    index: 0.0\n                }\n                instance get_prev root.Std.List.GetAt {\n                    list: acc,\n                    index: 1.0\n                }\n\n                \n                instance eq_null root.Std.Logic.Equal {\n                    a: get_prev.result,\n                    b: null_value\n                }\n\n                \n                instance neq_prev root.Std.Logic.NotEqual {\n                    a: current_element,\n                    b: get_prev.result\n                }\n\n                \n                instance condition root.Std.Logic.Or {\n                    a: eq_null.result,\n                    b: neq_prev.result\n                }\n\n                \n                instance if_node root.Std.If {\n                    condition: condition.result,\n\n                    true_branch: function() {\n                        \n                        instance new_prod root.Std.Math.Mul {\n                            first: get_prod.result,\n                            second: current_element\n                        }\n                        output(new_prod.result, \"true_product\")\n                        output(current_element, \"true_prev\")\n                    },\n\n                    false_branch: function() {\n                        \n                        output(get_prod.result, \"false_product\")\n                        output(get_prev.result, \"false_prev\")\n                    }\n                }\n\n                \n                instance create_acc root.Std.List.Create {\n                    elements: [\n                        if_node.true_product || if_node.false_product,\n                        if_node.true_prev || if_node.false_prev\n                    ]\n                }\n\n                \n                output(create_acc.list, \"new_acc\")\n            }\n        }\n\n        \n        instance get_final_prod root.Std.List.GetAt {\n            list: reduce_unique.result,\n            index: 0.0\n        }\n\n        \n        execute_19300c -> sort_list.execute\n        sort_list.done -> reduce_unique.start\n        reduce_unique.done -> continue_45190b\n\n        get_final_prod.result -> output_cffcc2.value\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: 100, y: 50) diff_ab root.Std_k98ojb.Sets.Difference {}\n        instance(x: 100, y: 150) diff_ba root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff_ab.left\n        list2_ai -> diff_ab.right\n\n        list2_ai -> diff_ba.left\n        list1_ai -> diff_ba.right\n\n        diff_ab.difference -> concat_1.list_a\n        diff_ba.difference -> concat_1.list_b\n\n        concat_1.concatenated -> output_ai\n    }\n\n    \n\n    instance(x: 0, y: 0) find_dissimilar_node root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209\n\n        \n        instance(x: 100, y: 50) len_node root.Std_k98ojb.List.Length {}\n        \n        \n        instance(x: 200, y: 50) modulo_node root.Std_k98ojb.Math.Modulo {}\n        \n        \n        instance(x: 300, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n\n        \n        instance(x: 400, y: 100) right_slice root.Std_k98ojb.List.Slice {\n            end: -1\n        }\n\n        \n        instance(x: 500, y: 0) left_slice root.Std_k98ojb.List.Slice {\n            start: 0\n        }\n        \n        \n        instance(x: 600, y: 50) concat_node root.Std_k98ojb.List.Concat {}\n\n        \n        \n        list_48148f -> len_node.list\n        n_68068c -> modulo_node.value\n        len_node.length -> modulo_node.divisor\n\n        len_node.length -> sub_node.first\n        modulo_node.result -> sub_node.second\n\n        list_48148f -> right_slice.list\n        sub_node.result -> right_slice.start\n        \n        list_48148f -> left_slice.list\n        sub_node.result -> left_slice.end\n\n        right_slice.slice -> concat_node.left\n        left_slice.slice -> concat_node.right\n\n        concat_node.result -> output_823209\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 150, y: 50) reduce_9d8eaa root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_9d8eaa.items\n        0 -> reduce_9d8eaa.initialValue\n\n        func() {\n            in(x: -100, y: -50, name: \"accumulated\") property(Number) acc_7a3f1b\n            in(x: -50, y: 0, name: \"current\") property(Any) current_9c8d2e\n\n            out(x: 100, y: 0, name: \"sum\") property(Number) result_b4a6ce\n\n            instance(x: 0, y: 0) add_3f7b8d root.Std_k98ojb.Math.Add {}\n            acc_7a3f1b -> add_3f7b8d.first\n            current_9c8d2e -> add_3f7b8d.second\n            add_3f7b8d.result -> result_b4a6ce\n        } -> reduce_9d8eaa.reducer\n\n        reduce_9d8eaa.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 100, y: 100) _sum_3a7c5b root.main._sum {}\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance(x: -100, y: -200) LTE_node root.Std_k98ojb.Math.LessThanOrEqual {\n            first = num_5c0677\n            second = 1\n        }\n\n        instance(x: 0, y: -200) if_leq_1 root.Std_k98ojb.Std.If {\n            predicate = LTE_node.result\n        }\n\n        \n        setter(x: 50, y: -300, name: \"setter_false\") setter_7d4e2a = output_c457b3 {\n            new_value = false\n        }\n        setter_7d4e2a.continue -> continue_9a54bb\n\n        \n        instance(x: 200, y: -200) div_half root.Std_k98ojb.Math.Div {\n            first = num_5c0677\n            second = 2\n        }\n\n        instance(x: 300, y: -200) generate_range root.Std_k98ojb.List.GenerateRange {\n            from = 2\n            to = div_half.result\n        }\n\n        \n        func() {\n            in(x: -150, y: -300, name: \"current\") property(Number) current_7e4a9f\n\n            out(x: 200, y: -300, name: \"predicate\") property(Bool) predicate_6d3b8c\n\n            instance(x: 50, y: -300) modulo_node root.Std_k98ojb.Math.Modulo {\n                value = num_5c0677\n                divisor = current_7e4a9f\n            }\n\n            instance(x: 150, y: -300) equal_zero root.Std_k98ojb.Logic.Equal {\n                left = modulo_node.result\n                right = 0\n            }\n            predicate_6d3b8c <- equal_zero.result\n        } -> find_handler\n\n        instance(x: 400, y: -200) find_divisor root.Std_k98ojb.Iteration.Find {\n            items = generate_range.list\n            handler = find_handler\n        }\n\n        \n        setter(x: 500, y: -300, name: \"setter_true\") setter_1a2f5c = output_c457b3 {\n            new_value = true\n        }\n        setter(x: 600, y: -300, name: \"setter_false\") setter_8d9e7a = output_c457b3 {\n            new_value = false\n        }\n\n        \n        execute_b7b391 -> if_leq_1.execute\n\n        \n        if_leq_1.then -> setter_7d4e2a.execute\n\n        \n        if_leq_1.else -> generate_range.start\n        generate_range.list -> find_divisor.items\n        find_divisor.handler = find_handler\n\n        \n        find_divisor.onFound -> setter_8d9e7a.execute\n        \n        find_divisor.notFound -> setter_1a2f5c.execute\n\n        \n        setter_1a2f5c.continue -> continue_9a54bb\n        setter_8d9e7a.continue -> continue_9a54bb\n    }\n\n    instance(x: -200, y: 0) num_prime_3b6f4a root.main.num_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "signature_similarity_10_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": 100,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "qwq:32b-fp16",
        "largest_context": 13762,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: -426, y: -248, name: \"x\") property(Number) x_853326\n        in(x: -420, y: -107, name: \"y\") property(Number) y_5390f5\n\n        out(x: 159, y: -219, name: \"output\") property(Bool) output_3339a3\n\n        instance(x: -264, y: -278) multiply_eb4d1c root.Std_k98ojb.Math.Mul {}\n        instance(x: 80, y: -152) greaterthan_5bde3e root.Std_k98ojb.Math.GreaterThan {}\n        x_853326 -> multiply_eb4d1c.first\n        y_5390f5 -> multiply_eb4d1c.second\n        multiply_eb4d1c.result -> greaterthan_5bde3e.right\n        0 -> greaterthan_5bde3e.left\n        greaterthan_5bde3e.result -> output_3339a3\n    }\n\n    \n\n    instance(x: -267, y: -194) opposite_signs_c9c8f6 root.main.opposite_signs {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n        in(x: 5, y: -25, name: \"n\") property(Number) n_27f29c\n\n        out(x: 668, y: 2, name: \"output\") property(Bool) output_f2630f\n\n        instance(x: -10, y: 15) modulo_4d2aee root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 15) equal_ae7bfa root.Std_k98ojb.Logic.Equal {}\n\n        n_27f29c -> modulo_4d2aee.value\n        11 -> modulo_4d2aee.divisor\n        modulo_4d2aee.result -> equal_ae7bfa.left\n        0 -> equal_ae7bfa.right\n\n        equal_ae7bfa.result -> output_f2630f\n    }\n\n    \n\n    instance(x: -85, y: 5) is_diff_e9c14d root.main.is_diff {}\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"function to replace characters in a string.\") replace_char {\n        in(x: -426, y: 209, name: \"input\") property(String) input_ai\n        in(x: -426, y: 332, name: \"search\") property(String) search_ai\n        in(x: -426, y: 455, name: \"replace\") property(String) replace_ai\n\n        out(x: 866, y: 132, name: \"output\") property(String) output_ai\n\n        instance(x: 0, y: 0) replacer_root Std_k98ojb.Strings.Replace {}\n        input_ai -> replacer_root.input\n        search_ai -> replacer_root.search\n        replace_ai -> replacer_root.replace\n        replacer_root.output -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) replace_char_inst root.main.replace_char {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"convert the given string to lower case.\") is_lower {\n        in(x: -425, y: 209, name: \"input\") property(String) input_ai\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_ai\n\n        instance(x: 772, y: 76) to_lower_node root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 400, y: 100) equal_check root.Std_k98ojb.Logic.Equal {}\n\n        input_ai -> to_lower_node.input\n        input_ai -> equal_check.left\n        to_lower_node.output -> equal_check.right\n        equal_check.result -> output_ai\n    }\n\n    \n\n    instance(x: -179, y: 30) is_lower_instance root.main.is_lower {}\n}"
            ],
            "16": [
                "import(\"std\", Std)\n\nmodule() main {\n\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: -757, y: -167, name: \"execute\") trigger() execute_19300c\n        in(x: -241, y: 24, name: \"list\") property(List) list_5fda54\n\n        out(x: 887, y: -144, name: \"continue\") trigger() continue_45190b\n        out(x: 683, y: 73, name: \"output\") property(Number) output_cffcc2\n\n        \n        data_instance initAccum = [1.0, []]\n\n        instance reduceNode Iteration.Reduce {\n            items: list_5fda54\n            context: initAccum \n        }\n\n        \n        reduceNode.handler = func() {\n\n            in(x: ...) acc property(List)\n            in(y: ...) item property(Number)\n\n            instance getProd List.GetAt {\n                index: 0\n            }\n            acc \u2192 getProd.list\n\n            instance getSeenList List.GetAt {\n                index: 1\n            }\n            acc \u2192 getSeenList.list\n\n            \n            instance containsNode List.Contains {\n                list: getSeenList.output_list,\n                value: item\n            }\n\n            \n            instance ifCond Std.IfExpression {\n                expression: \"contains == false\"\n            }\n            containsNode.value \u2192 ifCond.gen_0\n\n            \n            data_instance thenBranch = [\n                Math.Mul(getProd.result, item), \n                List.Add(getSeenList.output_list, item)\n            ]\n\n            data_instance elseBranch = acc\n\n            instance resultSwitch std.If {\n                condition: ifCond.result,\n                then: thenBranch,\n                else: elseBranch\n            }\n\n            output(resultSwitch.selected)\n        }\n\n        \n        instance getFinalProd List.GetAt {\n            index: 0\n        }\n        reduceNode.result \u2192 getFinalProd.list\n\n        \n        execute_19300c \u2192 reduceNode.execute\n        reduceNode.continue \u2192 continue_45190b\n        getFinalProd.result \u2192 output_cffcc2\n    }\n\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the dissimilar elements in the given two lists.\") find_dissimilar {\n        in(x: -531, y: 2, name: \"list1\") property(List) list1_ai\n        in(x: -165, y: 68, name: \"list2\") property(List) list2_ai\n\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n\n        instance(x: -297, y: 69) diff1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 55, y: 71) diff2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 234, y: 70) concat_1f2a6d root.Std_k98ojb.List.Concat {}\n\n        list1_ai -> diff1.left\n        list2_ai -> diff1.right\n        list2_ai -> diff2.left\n        list1_ai -> diff2.right\n\n        diff1.difference -> concat_1f2a6d.left\n        diff2.difference -> concat_1f2a6d.right\n\n        concat_1f2a6d.list -> output_ai\n    }\n\n    \n\n    instance(x: 50, y: -49) find_dissimilar_7e38b2 root.main.find_dissimilar {}\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_right {\n        in(x: -186, y: -89, name: \"list\") property(List) list_48148f\n        in(x: -193, y: -3, name: \"n\") property(Number) n_68068c\n\n        out(x: 735, y: -112, name: \"output\") property(Any) output_823209 \n\n        instance(x: 50, y: -70) list_length root.Std_k98ojb.List.Length {}\n        instance(x: 150, y: -50) mod_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: -30) sub_node root.Std_k98ojb.Math.Sub {} \n        instance(x: 350, y: -10) first_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 450, y: 10) second_slice root.Std_k98ojb.List.Slice {}\n        instance(x: 600, y: -20) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_48148f -> list_length.list\n        list_length.length -> mod_node.divisor\n        n_68068c -> mod_node.value\n\n        list_length.length -> sub_node.first \n        mod_node.result -> sub_node.second \n\n        0 -> first_slice.start\n        sub_node.result -> first_slice.end\n        list_48148f -> first_slice.list\n\n        sub_node.result -> second_slice.start\n        list_length.length -> second_slice.end\n        list_48148f -> second_slice.list\n\n        second_slice.slice -> concat_node.left \n        first_slice.slice -> concat_node.right \n\n        concat_node.result -> output_823209 \n    }\n}\n\ninstance(x: -50, y: 20) rotate_right_instance root.main.rotate_right {}\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the sum of an array.\") _sum {\n        in(x: -213, y: 28, name: \"list\") property(List) list_2c62ab\n        out(x: 567, y: 3, name: \"sum\") property(Number) sum_2a848f\n\n        instance(x: 120, y: 28) reduce_eb5d9e root.Std_k98ojb.Iteration.Reduce {}\n        list_2c62ab -> reduce_eb5d9e.items\n        0 -> reduce_eb5d9e.initialValue\n        func() {\n            in(x: -134, y: -72, name: \"accumulated\") property(Number) accumulated_b8c1d7\n            in(x: -126, y: 35, name: \"current\") property(Number) current_9e8b4a\n\n            out(x: 1058, y: -73, name: \"sum\") property(Number) sum_3c4f5d\n\n            instance(x: 246, y: -5) add_6c55b7 root.Std_k98ojb.Math.Add {}\n            accumulated_b8c1d7 -> add_6c55b7.first\n            current_9e8b4a -> add_6c55b7.second\n            add_6c55b7.result -> sum_3c4f5d\n        } -> reduce_eb5d9e.reducer\n\n        reduce_eb5d9e.output -> sum_2a848f\n    }\n\n    \n\n    instance(x: 110, y: -4) _sum_f993be root.main._sum {}\n}"
            ],
            "48": [
                "<think>\nOkay, let's tackle this problem. I need to create a Midio function called num_prime that checks if a given integer is prime. The signature includes inputs for the number and an execute trigger, plus outputs for the result and a continue trigger.\n\nFirst, recalling what makes a number prime: it must be greater than 1 and only divisible by 1 and itself. So I need to check divisibility from 2 up to sqrt(num) or something like that. But how do I translate that into Midio nodes?\n\nLooking at the available functions, there's List.GenerateRange which can create a range of numbers. Maybe generate numbers starting from 2 up to sqrt(num), then for each number in this range check if it divides 'num' evenly.\n\nWait, but in Midio, functions like Iteration.Map or For loops are probably needed here. Let me think step by step:\n\n1. Check edge cases first: if the number is less than 2, return false immediately.\n   - So maybe a Math.LessThan node comparing num to 2. If true, output is false.\n\n2. Calculate square root of 'num', because checking divisors up to sqrt(num) is sufficient. The nodes might have a Math.Sqrt function? Wait the available functions list shows Math.Pow and others but not Sqrt directly. Hmm, perhaps using Math.Expression with expression like \"sqrt(x)\"?\n\nAlternatively, use List.GenerateRange from 2 to num divided by some factor. Maybe Math.Floor of sqrt(num) can be generated via an expression.\n\nWait, let me check provided functions again. The available nodes include Std.IfExpression which might handle expressions. Let's see:\n\nMaybe for a number N, generate the range up to Math.Floor(Math.Sqrt(N)), then iterate through each and check if N is divisible by any of them.\n\nSo steps in Midio nodes would be:\n\n- First check if num <= 1 \u2192 output false.\n- Else compute sqrt(num) \u2192 get integer part (floor).\n- Create a list from 2 to that sqrt value using List.GenerateRange.\n- Iterate over each element in this list:\n   - For divisor 'i', check if num mod i is zero. If yes, return false.\n- If none divide evenly, return true.\n\nNeed to handle the loop properly with triggers and conditions. Since Midio uses a flow-based approach, probably need to set up a loop that iterates through possible divisors and breaks early when a divisor is found.\n\nAlternatively, use Iteration.Filter or some other iterative function.\n\nWait, let's see: The For node from Std.For might be useful here. It loops over items in a list. So first generate the range of potential divisors (from 2 to sqrt(num)), then loop through each:\n\n- Generate the divisor list.\n- Use For to process each item:\n   - In each iteration, compute mod operation between num and current item (divisor).\n   - If remainder is zero \u2192 set a flag to true.\n   - After processing all items, check if any had zero remainder. If yes \u2192 not prime.\n\nAlternatively, use an Iteration.Any function? Wait, but the available nodes include Iteration.Filter which filters based on predicate, or Iteration.Find to find first element satisfying condition. Maybe:\n\nUse Iteration.Find where (num % i) == 0. If Find returns a value (non-null), then it's not prime.\n\nBut how to structure this in Midio code?\n\nAlternatively, set up a loop with For and break early when found.\n\nHmm. Let me think of the nodes step by step.\n\nFirst, import necessary modules:\n\nimport(\"std\", Std)\n\nThen within the function 'num_prime':\n\nThe inputs are num_5c0677 (Number) and execute trigger.\n\nThe output is output_c457b3 (Bool) and continue_9a54bb.\n\nStart with handling edge case where num < 2:\n\n- Use Math.LessThan node: left is num, right is 2. The result goes to a Std.If.\n   - If yes \u2192 set output to false and proceed to continue.\n\nElse proceed to compute sqrt(num). Using Math.Expression for sqrt? Let's see:\n\nMath.Expression can take an expression like \"sqrt(x)\" where x is the input.\n\nWait, the example says that expressions can reference variables. So maybe create a node with expression: 'x' \u2192 no, need square root. Wait Midio might have Math.Sqrt as a separate node?\n\nLooking at the given functions list again: The available nodes for math include:\n\nMath.Floor, Add, Sub, Mul, Div, GreaterThan, LessThanOrEqual, Expression, Pow, Modulo.\n\nNo sqrt node directly. Hmm. Then perhaps approximate sqrt via expression, like using x^(0.5)?\n\nWait Math.Pow can be used with exponent 0.5? For example, to compute sqrt( num ), use Math.Pow( num, 0.5 )\n\nThen take the floor of that result. So a combination:\n\n- Take input num, pass into Math.Pow node with second argument as 0.5 \u2192 gives square root.\n- Then feed that through Math.Floor to get integer part.\n\nSo nodes for sqrt_floor would be:\n\nMath_Pow: left is num_5c0677, right is 0.5 \u2192 result goes into Math_Floor \u2192 which gives the floor of the sqrt.\n\nOnce I have that value 'max_divisor', then generate a range from 2 to max_divisor (inclusive) using List.GenerateRange with 'from' as 2 and 'to' as that floored value.\n\nThen, loop over each number in this list. For each divisor candidate:\n\nCompute num mod divisor (using Modulo node). If remainder is zero \u2192 then it's divisible \u2192 not prime. So we can stop at the first occurrence.\n\nSo to do this efficiently, perhaps use Iteration.Find which returns the first element that meets a condition (i.e., where mod is zero). If such an element exists \u2192 output false.\n\nAlternatively, using For loop:\n\n- Initialize a flag (maybe via state variables) to track whether found any divisor.\n- For each item in the list:\n   - compute modulo with num and current item.\n   - if remainder is 0 \u2192 set flag to true, break out of loop?\n   - else continue.\n- After processing all items, output whether no divisors were found (flag remains false).\n\nBut how do loops work here? Since Midio uses triggers, the For node would emit onItem for each element. We need a way to short-circuit.\n\nPerhaps using an IfExpression in the loop: if mod is zero \u2192 trigger early exit?\n\nLet me outline the nodes:\n\n1. Edge check:\n   - Math.LessThan between num and 2? Then output false via Std.If.\n\n2. Else, compute max_divisor (floor of sqrt(num)):\n\n   Create a pow node with exponent 0.5 \u2192 then floor it.\n\n3. Generate range from 2 to max_divisor \u2192 List.GenerateRange.\n\n4. Use Iteration.Find on this list with handler function that checks if num mod current element is zero. If found, returns true (indicating not prime). But we need the opposite; if Find finds a divisor \u2192 then output is false, else true.\n\nWait, so:\n\nIf Find returns an item where condition (mod 0) is met \u2192 then it's not prime \u2192 output should be false. Else, all passed \u2192 output true.\n\nSo steps with nodes:\n\n- Use Iteration.Find on the list of divisors (2 to max_divisor).\n\nThe handler for Find would take current divisor 'd' and do mod operation between num_5c0677 and d. If remainder is zero \u2192 returns true (predicate holds), so Find returns it.\n\nThen, check if the result item from Find is non-null. So:\n\nif find_result.item exists \u2192 output false else output true.\n\nPutting this together with nodes:\n\nLet me try to outline:\n\nInside the function:\n\n- Edge case: num < 2 \u2192 Std.If node triggered by LessThan \u2192 then branch sets output to false and continues, else branch proceeds.\n\nThen for non-edge cases:\n\n- Create a list of possible divisors (from 2 to max_divisor):\n\nCompute max_divisor as floor(sqrt(num)):\n\ninstance pow_sqrt (Math.Pow) with first=num_5c0677, second=0.5 \u2192 result goes into Math.Floor to get floored value.\n\nThen generate range from 2 to that floor.\n\n- GenerateRange node: from = 2, to = floored sqrt(num).\n\nThe list is then passed to Iteration.Find's items input.\n\nThe handler for Find needs to take each element (d), compute mod:\n\nHandler function (closure):\n\nin(d) of type number,\n\nreturn (num % d ==0) ?\n\nSo the handler would be a small function that returns true if divisible, else false.\n\nBut in Midio terms, the Iteration.Find's 'handler' is a separate instance with inputs for element and index perhaps?\n\nWait, the documentation says: \"Iteration.Find finds an item in the list items that satisfies the predicate function.\"\n\nSo the handler must return a bool (predicate). The Find will stop at first true.\n\nThus, the handler needs to take 'current' element and check if num mod current is zero.\n\nIn Midio's node setup for Iteration.Find:\n\nThe 'handler' is an instance of some predicate. Since this requires accessing the 'num', which comes from outside, how do we pass it?\n\nHmm, maybe via context? The documentation says Iteration.Reduce can take a context input. But for Find, perhaps parameters can be passed.\n\nWait according to the Iteration.Find function's docs: \"The function is expected to return a boolean value.\"\n\nLooking at node definition:\n\nFunction node name: Iteration.Find\n\nDocumentation: Finds an item in the list `items` that satisfies the `predicate` function, and returns the item through the `item` output.\n\nParameters for Find: items and handler. The handler's inputs include the current element (and possibly index?).\n\nWait the handler is a user-provided function instance. To make it check if num mod d ==0, but 'num' is an external variable here.\n\nIn Midio code, how would I pass 'num_5c0677' into that handler?\n\nPerhaps by using context or closure variables.\n\nAlternatively, create the predicate handler as a separate node inside the function where the current element and num are both available.\n\nThis might require:\n\nWithin the main function, for the Find's handler:\n\nCreate a small sub-function that takes 'current_d' (the divisor candidate) as input, and has access to the original number (num_5c0677).\n\nThen in that sub-function, compute mod: num % current_d.\n\nCheck if result is zero \u2192 returns true (predicate holds), else false.\n\nThus, the handler function would be something like:\n\nfunc() {\n    inputs:\n        current_d property(Number)\n    \n    outputs:\n        predicate property(Bool)\n\n    instance modulo (Math.Modulo) with value = num_5c0677 and divisor = current_d\n    instance eq_zero (Logic.Equal) comparing modulo.result to 0 \u2192 predicate is that?\n}\n\nWait in Midio, nodes are connected through ports. So this handler needs to have the current_d as input and outputs a bool indicating whether mod zero.\n\nThus, structuring it in code would look like:\n\nWithin the Find's handler block:\n\nfunc() {\n    in(x: ?, name: \"current\") property(Number) \n    out(name: \"output\") property(Bool)\n\n    instance modulo root.Std.Math.Modulo { value = current, divisor = num_5c0677 }\n    instance eq_zero root.Std.Logic.Equal { left=modulo.result, right=0 }\n    eq_zero.result \u2192 output\n}\n\nWait but how does the handler get 'num'? Since in Midio's functions, parameters can be passed from outer scope?\n\nYes, because the handler is part of the main function's closure. So within that inner func, the num_5c0677 input would still be accessible.\n\nAssuming this works, the Find node will process each divisor candidate until one satisfies mod zero, then stops and outputs that item (if found).\n\nOnce we have the result from Find:\n\nCheck if it has an 'item' (the first found divisor). If so \u2192 not prime \u2192 output is false. Else \u2192 true.\n\nSo a Std.IfExpression: predicate is \"find_result.item != null\"\n\nBut in Midio terms, need to check if the item is present (or exists).\n\nWait, the Find node's 'item' output would be Null if nothing found, else the element. So we can do an existence check using Logic.Equal or something.\n\nAlternatively, use a Std.If where condition is whether item exists:\n\nIf (find_result.item != null \u2192 then false, else true).\n\nPutting all together:\n\nSo in code:\n\nThe main flow is execute trigger starts processing:\n\n1. Edge case check via LessThan (num < 2):\n\n   If yes: set output_c457b3 to false and go to continue.\n\nElse:\n\n2. Compute max divisor as floor(sqrt(num)).\n\n3. Generate range list from 2 to that value \u2192 pass to Find handler which checks each d in list for mod 0.\n\n   The handler uses current_d (element), num_5c0677, computes modulo and returns whether it is zero.\n\n4. If Find finds any element \u2192 item exists: output false. Else \u2192 true.\n\nNow structuring this into Midio code with the given signature and ports:\n\nThe function 'num_prime' has inputs num_5c0677 (number), execute_b7b391 trigger, outputs output_c457b3 (bool) and continue_9a54bb trigger.\n\nSo in the nodes setup:\n\nStart by handling the edge case:\n\n- Create Math_LessThan: left = num_5c0677, right is 2 \u2192 result goes to Std.If's predicate.\n\n   The execute trigger starts this process.\n\nWait, need to connect execute_b7b391 to initiate the flow.\n\nPerhaps:\n\nThe execute trigger first triggers a sequence starting with the LessThan node.\n\nThen based on that, decide between two branches: output false or proceed.\n\nAfter edge case is handled (either path leads eventually to continue_9a54bb):\n\nIn the 'else' branch after the initial If (when num >= 2):\n\nProceed to compute sqrt and max divisor:\n\n- Math_Pow with left= num_5c0677, right= 0.5 \u2192 exponent is 0.5.\n\n   The result is then passed through Math_Floor to get integer part.\n\n   Then that becomes the 'to' value for List.GenerateRange from 2 (from) to floored_sqrt.\n\nGenerate the range list: instance genRange (List.GenerateRange, from=2, to=floored).\n\nThen create Iteration.Find node:\n\nfind_divisor Find with items = genRange.output \u2192 handler is defined as above.\n\nThe handler needs to receive current element and check mod num_5c0677. The handler function's code would take the 'current' (d) and compute Modulo of num divided by d.\n\nWait, in terms of nodes inside handler:\n\nInside Find's handler function:\n\ncurrent_d is the input parameter (number)\n\nSo modulo's value is num_5c0677 divided by current_d. Wait no: to compute mod, it's (num % d), so Modulo node would have 'value' as num and 'divisor' as current.\n\nThus:\n\nmodulo.value = num_5c0677\n\nmodulo.divisor = current_d \u2192 the input parameter from handler.\n\nThen check if modulo.result == 0 \u2192 using Equal to zero?\n\nIf yes, then predicate returns true (indicating found a divisor).\n\nThe Find node's 'item' output will be set to that divisor if found; else null.\n\nAfter processing Find:\n\nCheck whether item is not null. This can be done via an IsNull node or Logic.Notequal with null.\n\nWait Midio has a Logic.Notequal, but how does it compare for existence?\n\nAlternatively, use another Std.IfExpression where the predicate is \"find_result.item != null\".\n\nThe result of that (true if found) \u2192 means not prime. So final output is the negation: (not Found \u2192 true). Wait:\n\nWait, If find_divisor's item is not null \u2192 then it has a divisor \u2192 not prime (output false).\n\nElse \u2192 no divisors \u2192 prime (output true).\n\nSo after finding, use Std.If where predicate is \"find_result.item != null\".\n\nIn that case:\n\n- the 'then' branch sets output_c457b3 to false,\n\n- 'else' sets it to true.\n\nThen both branches proceed to continue_9a54bb.\n\nPutting this all together in Midio code syntax (as per previous examples):\n\nSo here's a step-by-step outline of the nodes:\n\nFirst, edge check:\n\ninstance lessThanTwo root.Std.Math.LessThan { left = num_5c0677; right = 2 }\n\nThen Std.If for that condition.\n\nBut to start processing when execute is triggered, need to wire the execute_b7b391 into starting this flow. Perhaps using a trigger propagator?\n\nAlternatively:\n\nThe edge case check starts with lessThanTwo being computed when execute comes in.\n\nWait maybe the structure would be:\n\nexecute \u2192 triggers the first step (edge check):\n\nThe lessThanTwo's left is num_5c0677, right is 2.\n\nThen feed into Std.If node:\n\nif_edge root.Std.If { predicate = lessThanTwo.result; then \u2192 set output to false and continue;\n\nelse \u2192 proceed to next steps }\n\nFor the 'then' branch of if_edge:\n\n- Set output_c457b3 (output) to False via a constant or some assignment.\n\nThen trigger continue_9a54bb.\n\nElse, process continues with computing sqrt etc.\n\nIn the else branch:\n\nCompute max_divisor:\n\npow_sqrt root.Std.Math.Pow { first = num_5c0677; second = 0.5 }\n\nfloor_sqrt root.Std.Math.Floor { input = pow_sqrt.result }\n\nThen List.GenerateRange from=2 to=floor_sqrt.output \u2192 gen_range.\n\nfind_divisor root.Std.Iteration.Find {\n\n items = gen_range.list;\n\n handler = (current: Number) => {\n\n   instance mod_node root.Std.Math.Modulo {\n\n    value = num_5c0677,\n\n    divisor = current\n\n   }\n\n   instance eq_zero root.Std.Logic.Equal { left=mod_node.result, right=0 }\n\n   return eq_zero.result\n\n  }\n\n}\n\n\n\ninstance has_divisor root.Std.Logic.NotNull { input = find_divisor.item }\n\n\n\nWait 'has_divisor' would be true means found a divisor (so number is not prime).\n\nSo:\n\nfinal_predicate is has_divisor.result\n\nthen, set output to !has_divisor.\n\nUse another Std.If node for this:\n\nif_final root.Std.If {\n\n predicate = has_divisor.result \u2192 \n\n \n\n \n\n}\n\nWait in Midio's nodes, how do you set the value?\n\nAlternatively use a ternary via IfExpression:\n\noutput_c457b3's value = !has_divisor \u2192 so in code terms, using an expression node.\n\nBut perhaps better to have another Std.If with two branches setting the output accordingly.\n\nThus, if_final.predicate is has_divisor (true means found divisor):\n\nthen branch:\n\nsets output to false,\n\nelse branch sets it to true.\n\nBoth paths then trigger continue_9a54bb.\n\nPutting this all together in code syntax considering all the instances and wiring between them.\n\nNow, also need to consider that For loops might have different behaviors but I'm using Iteration.Find which should stop early when a divisor is found.\n\nWait another consideration: what if max_divisor is 0 or less? But sqrt of numbers >=2:\n\nfor num=4 \u2192 sqrt is 2, so from 2 to 2 \u2192 ok.\n\nnum=3 \u2192 sqrt ~1.73 \u2192 floor to 1, then the range would be 2\u21921 which is invalid? Because generateRange might not go there.\n\nWait that's a problem! For numbers where max_divisor (floor of sqrt(num)) is less than 2?\n\nLike when num = 4: sqrt(4)=2 \u2192 ok. But for example:\n\nnum=3, then sqrt is ~1.73\u2192 floor to 1 \u2192 so range from 2 to 1 would produce an empty list.\n\nThen Iteration.Find over empty list will return null (since nothing found), which means it's prime (correctly since 3 is a prime).\n\nBut when the divisor range is from 2 up to max_divisor, if max_divisor <2 \u2192 then the list is empty. So the Find would return null \u2192 correct.\n\nThus that case works.\n\nAnother test: num=4:\n\nmax_divisor = floor(2) = 2.\n\nrange from 2-2 \u2192 [2]. Check mod with 2 \u2192 yes \u2192 so divisor found, output false (since 4 isn't prime). Correct.\n\nnum=5: sqrt ~2.23 \u2192 floor is 2. range 2 to 2 \u2192 check 2 divides 5? No mod(5%2)=1 \u2192 not divisible. So Find returns null \u2192 output true \u2192 correct since 5 is prime.\n\nAnother test case num=9 (not prime):\n\nsqrt is 3 \u2192 max_divisor 3. list from 2\u21923 \u2192 elements 2,3.\n\nCheck d=2: mod(9%2)=1 \u2192 no.\n\nThen check d=3: 9 mod3=0 \u2192 found divisor \u2192 so output false. Correct.\n\nOkay seems to handle these cases.\n\nNow, in the Midio code:\n\nAlso need to wire all the outputs correctly to the function's output ports and continue trigger.\n\nThe final If (if_final) will have two branches leading to setting the output value and then continuing.\n\nIn Midio syntax, the 'setter' nodes might be used (like setter properties) similar to earlier examples.\n\nAlternatively, directly connect the computed result into the output port using an assignment via instance connection.\n\nWait perhaps:\n\nThe if_final node's 'then' branch connects to a Setter that sets output_c457b3 to false and triggers continue_9a54bb.\n\nSame for else.\n\nBut in Midio code syntax (from previous examples), they use setter instances with execute/continue:\n\nLooking back at the sum_digits example, they used getters and setters with functions that propagate values. So here perhaps need similar logic.\n\nAlternatively, a Std.If can directly have two branches leading to different assignments, then both branches go to continue_9a54bb.\n\nBut to do this in code:\n\nFor if_final (checking has_divisor):\n\nif_final's 'then' branch \u2192 set output_c457b3 to false via some assignment node \u2192 then trigger continue,\n\nelse \u2192 set output to true and proceed to continue.\n\nThus, the nodes for setting output would be needed.\n\nAlternatively use a combination of ports:\n\noutput_8d07dc (output port) can be driven by expressions based on conditionals. But since Midio is flow-based with instances, probably need a node that outputs the boolean.\n\nWait here's how I might structure it in code outline:\n\nMain function 'num_prime':\n\nFirst part: edge case handling:\n\ninstance lessThanTwo root.Std.Math.LessThan { left=num_5c0677; right=2 }\n\ninstance ifEdge root.Std.If {\n\n  predicate = lessThanTwo.result,\n\n  then \u2192 branch1,\n\n  else \u2192 branch2\n\n}\n\nbranch1: set output to false and continue.\n\nSo, in branch1:\n\noutput_c457b3 is set via a setter (setter_edgeFalse) with new_value= False,\n\nthen trigger continue_9a54bb.\n\nSimilarly, branch2 proceeds to the main computation steps.\n\nNow for the main path after ifEdge's else branch:\n\nCompute max_divisor steps:\n\npow_node root.Std.Math.Pow { first=num_5c0677; second= 0.5 }\n\nfloor_node root.Std.Math.Floor { input = pow_node.result }\n\ngenRange root.Std.List.GenerateRange { from=2; to=floor_node.output }\n\nfind_handler's function is handled in the Iteration.Find node:\n\nThe handler would be a nested function.\n\nOnce find_divisor (the Find instance) emits its 'item', we check if it's null or not.\n\nThen, create hasDivisor node which checks item's existence:\n\ninstance notNull root.Std.Logic.NotNull { input=find_divisor.item }\n\nifFinal root.Std.If {\n\n predicate=notNull.result,\n\n then \u2192 set output to false and continue,\n\n else \u2192 set output to true and continue\n\n}\n\nThus, in code the structure is:\n\nThe entire function connects these instances.\n\nNow putting all together into Midio syntax with proper connections and port assignments.\n\nAdditionally, need to ensure triggers flow correctly: when execute comes in, it starts processing.\n\nWait how does execute_b7b391 start the process?\n\nPerhaps the initial trigger is connected to compute 'lessThanTwo', but in flow-based systems often you use triggers.\n\nAlternatively:\n\nexecute_b7b391 \u2192 propagates through to initiate all steps. But need to ensure that on execution, everything flows.\n\nThe code structure would look something like this (without syntax errors):\n\nmodule() main { \n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        instance ltTwo root.Std.Math.LessThan {\n            left = num_5c0677,\n            right = 2\n        }\n\n        instance ifEdge root.Std.If {\n            predicate = ltTwo.result,\n\n            then: () => { \n                instance setFalse root.Std.Set<Bool> {\n                    new_value = false\n                }\n                output_c457b3 <- setFalse.output\n                continue_9a54bb <- setFalse.done\n            },\n\n            else: () => { \n                \n                instance pow_root root.Std.Math.Pow {\n                    first = num_5c0677,\n                    second = 0.5\n                }\n\n                instance floor_sqrt root.Std.Math.Floor {\n                    input = pow_root.result\n                }\n\n                instance genRange root.Std.List.GenerateRange {\n                    from = 2,\n                    to = floor_sqrt.output\n                }\n\n                \n                instance findDivisor root.Std.Iteration.Find {\n                    items = genRange.list,\n\n                    handler: (current: Number) => {\n                        instance modulo root.Std.Math.Modulo {\n                            value = num_5c0677,\n                            divisor = current\n                        }\n                        instance isZero root.Std.Logic.Equal {\n                            left = modulo.result,\n                            right = 0\n                        }\n                        return isZero.result \n                    }\n                }\n\n                \n                instance hasDivisor root.Std.Logic.NotNull {\n                    input = findDivisor.item\n                }\n\n                instance ifResult root.Std.If {\n                    predicate = hasDivisor.result,\n\n                    then: () => { \n                        instance setFalse root.Std.Set<Bool> {\n                            new_value = false\n                        }\n                        output_c457b3 <- setFalse.output\n                        continue_9a54bb <- setFalse.done\n                    },\n\n                    else: () => { \n                        instance setTrue root.Std.Set<Bool> {\n                            new_value = true\n                        }\n                        output_c457b3 <- setTrue.output\n                        continue_9a54bb <- setTrue.done\n                    }\n                }\n            }\n        }\n\n        execute_b7b391 \u2192 ifEdge.execute \n    }\n}\n\nWait, but I'm assuming that Set<Bool> nodes are available. In previous examples like sum_digits they used setters via named properties (getter/setter pairs). \n\nAlternatively, perhaps using a more direct assignment.\n\nWait in earlier examples, when setting outputs, they used 'setter_...' instances to set values and then proceed to continue triggers.\n\nFor instance, in the edge case, they might have:\n\ngetter/output_c457b3 \u2190 the value directly via some path, but need to consider that.\n\nAlternatively, perhaps use an assignment node or directly connect via ports.\n\nBut since I'm not exactly sure about Midio's exact syntax for these assignments (like how to set a property's output), perhaps following previous patterns is better.\n\nAnother approach: in the then/else branches of ifEdge and ifResult, we can have:\n\nFor setting output and triggering continue:\n\nTo set output_c457b3 to true or false, we use a setter variable with an assignment, then propagate the trigger.\n\nThus:\n\nIn edge case 'then' branch (num <2):\n\nsetter_false: Setter for output's property. \n\nBut in Midio code syntax from examples, they used something like:\n\ngetter_... and setter_... instances. But perhaps simpler to create variables with setters.\n\nAlternatively use an intermediate variable via a getter/setter pair for the output_c457b3 port.\n\nWait maybe define properties as:\n\nproperty(output_c457b3) as Bool,\n\nthen in code, when setting it, you write something like:\n\noutput_c457b3 = false\n\nBut not sure if that's allowed. Alternatively using an assignment via node instances.\n\nAlternatively here's a revised version:\n\nInside the 'then' branch of ifEdge (edge case):\n\nWe set output to False and trigger continue_9a54bb:\n\ninstance setterFalse root.Std.Setter<Bool> {\n    new_value = false\n}\noutput_c457b3 <- setterFalse.value\ncontinue_9a54bb \u2190 setterFalse.done\n\nSimilarly for the else branch in ifResult.\n\nSo putting that all together, the code would look something like this:\n\nmodule() main { \n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        instance lessThanTwo root.Std.Math.LessThan { left=num_5c0677; right=2 }\n        \n        instance ifEdge root.Std.If {\n            predicate = lessThanTwo.result,\n\n            thenBranch: () => {\n                \n                instance setOutputFalse root.Std.Setter<Bool> { new_value = false }\n                instance contTrigger root.Std.Trigger()\n\n                \n                setOutputFalse.done \u2192 contTrigger.trigger\n                output_c457b3 <- setOutputFalse.value\n                continue_9a54bb \u2190 contTrigger.out\n            },\n\n            elseBranch: () => {\n                \n\n                instance pow_node root.Std.Math.Pow { first=num_5c0677; second=0.5 }\n                instance floor_node root.Std.Math.Floor { input = pow_node.result }\n\n                instance genRange root.Std.List.GenerateRange { from=2, to=floor_node.output }\n\n                \n                instance findDivisor root.Std.Iteration.Find {\n                    items = genRange.list,\n\n                    handler: (current_d:Number) => {\n                        instance modNode root.Std.Math.Modulo {\n                            value=num_5c0677,\n                            divisor=current_d\n                        }\n                        return modNode.result == 0 \n                    },\n                }\n\n                \n                instance hasDiv root.Std.Logic.NotNull { input = findDivisor.item }\n\n                instance ifFinal root.Std.If {\n                    predicate = hasDiv.result,\n\n                    thenBranch: () => { \n                        instance setOutputFalse root.Std.Setter<Bool> { new_value = false }\n                        output_c457b3 <- setOutputFalse.value\n                        continue_9a54bb \u2190 setOutputFalse.done\n                    },\n\n                    elseBranch: () => { \n                        instance setOutputTrue root.Std.Setter<Bool> { new_value = true }\n                        output_c457b3 <- setOutputTrue.value\n                        continue_9a54bb \u2190 setOutputTrue.done\n                    },\n                }\n            }\n        }\n\n        execute_b7b391 \u2192 ifEdge.execute \n    }\n}\n\nWait but in Midio code, perhaps the branches are not written as thenBranch and elseBranch but using some other syntax. Looking back at previous examples:\n\nIn the 'min' example's code:\n\n        instance ifexpression_e38995 root.Std_k98ojb.Std.IfExpression {\n            expression: \"a < b\"\n        }\n        ...\n        a_9f7759 \u2192 ifexpression_e38995.gen_0\n        b_f9110a \u2192 ifexpression_e38995.gen_1\n        ...\n        ifexpression_e38995.then \u2192 setter_1cedb2.execute\n        a_9f7759 \u2192 setter_1cedb2.new_value\n        b_f9110a \u2192 setter_37db7f.new_value\n        ifexpression_e38995.else \u2192 setter_37db7f.execute\n\nSo the then and else triggers are connected to different setters' execute ports.\n\nTherefore, perhaps in this problem's code:\n\nInstead of using branches like 'thenBranch', I need to connect the predicate's outputs (then/else) to respective flows.\n\nFor instanceEdge (the edge case check):\n\n        instance ifEdge root.Std.If {\n            predicate = lessThanTwo.result\n        }\n\n        \n        instance setFalse root.Std.Setter<Bool> { new_value = false }\n        output_c457b3 <- setFalse.value\n\n        \n        ifEdge.then \u2192 setFalse.execute\n\n        instance contThen root.Std.Trigger() \n        setFalse.done \u2192 contThen.trigger\n        continue_9a54bb \u2190 contThen.out \n\n        \n        ifEdge.else \u2192 ... some trigger for the next steps...\n\nSimilarly, structuring the rest.\n\nThis requires a more involved wiring between instances' ports.\n\nPerhaps the code would be structured as follows:\n\nmodule() main { \n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        \n        instance lessThanTwo root.Std.Math.LessThan { left=num_5c0677; right=2 }\n        \n        instance ifEdge root.Std.If {\n            predicate = lessThanTwo.result\n        }\n\n        \n        instance setFalseEdge root.Std.Setter<Bool> { new_value = false }\n        output_c457b3 <- setFalseEdge.value\n\n        instance contEdgeThen root.Std.Trigger() \n        ifEdge.then \u2192 setFalseEdge.execute\n        setFalseEdge.done \u2192 contEdgeThen.trigger\n        continue_9a54bb \u2190 contEdgeThen.out \n\n        \n        instance contElseInit root.Std.Trigger()\n        ifEdge.else \u2192 contElseInit.trigger\n\n        instance pow_node root.Std.Math.Pow {\n            first=num_5c0677,\n            second=0.5\n        }\n        instance floor_node root.Std.Math.Floor { input = pow_node.result }\n\n        instance genRange root.Std.List.GenerateRange {\n            from=2,\n            to=floor_node.output\n        }\n\n        \n        instance findDivisor root.Std.Iteration.Find {\n            items = genRange.list,\n\n            handler: (current:Number) => {\n                instance moduloNode root.Std.Math.Modulo {\n                    value=num_5c0677,\n                    divisor=current\n                }\n                return moduloNode.result == 0 \n            }\n        }\n\n        \n        instance hasDiv root.Std.Logic.NotNull { input = findDivisor.item }\n\n        \n        instance ifFinal root.Std.If {\n            predicate=hasDiv.result\n        }\n\n        \n        instance setFalseFinal root.Std.Setter<Bool> { new_value=false }\n        output_c457b3 <- setFalseFinal.value\n\n        instance contThenFinal root.Std.Trigger()\n        ifFinal.then \u2192 setFalseFinal.execute\n        setFalseFinal.done \u2192 contThenFinal.trigger\n        continue_9a54bb \u2190 contThenFinal.out \n\n        \n        instance setTrueFinal root.Std.Setter<Bool> { new_value=true }\n        output_c457b3 <- setTrueFinal.value\n\n        instance contElseFinal root.Std.Trigger()\n        ifFinal.else \u2192 setTrueFinal.execute\n        setTrueFinal.done \u2192 contElseFinal.trigger\n        continue_9a54bb \u2190 contElseFinal.out \n\n        \n        execute_b7b391 \u2192 ifEdge.execute\n\n        \n\n        instance initMainCheck root.Std.Trigger() \n        contElseInit.out \u2192 initMainCheck.trigger\n\n        \n\n        \n\n        pow_node's execution should be started by the trigger flow from contElseInit.\n\n        But how to connect these nodes' inputs?\n\n        Perhaps via triggers on each node's execution:\n\n        For the pow_node and subsequent steps to execute in sequence after the else path:\n\n        contElseInit.out \u2192 (start pow_node)\n\n        pow_node requires no input except its parameters, but needs a trigger to compute.\n\n        Wait I'm getting confused here. Maybe each node that processes data should have their 'execute' triggered by a prior step.\n\n        This requires making sure that after the else branch is taken (proceeding), the main steps are executed in order.\n\n        Perhaps:\n\n        The 'contElseInit.out' trigger propagates through all necessary processing nodes to start their computations.\n\n        For instance, the flow would be:\n\n        contElseInit \u2192 pow_node (or its trigger) \u2192 floor_node \u2192 genRange \u2192 findDivisor ... etc. but this might need explicit triggers for each.\n\n        However in Midio's syntax, perhaps the nodes are connected so that once initiated by their dependencies, they run when inputs are available.\n\n        Alternatively, all the necessary computations after ifEdge's else are placed inside a 'then' block triggered by contElseInit?\n\nNot sure. This is getting quite involved due to flow-based logic constraints.\n\nAnother approach: The initial trigger execute_b7b391 starts the process:\n\n- It first triggers the edge check via lessThanTwo and ifEdge.\n\nOnce the edge case is handled (either then/else), eventually continuing via continue_9a54bb.\n\nAlternatively, in the main path after ifEdge.else, the processing steps are automatically triggered because their data dependencies are ready once the else is taken?\n\nThis might be possible by ensuring that the pow_node and other nodes have all necessary inputs (like num) available upfront.\n\nThus perhaps the code structure:\n\n        \n\n        instance contElseInit root.Std.Trigger() \n        ifEdge.else \u2192 contElseInit.trigger\n\n        \n        \n\n        instance finderStart root.Std.Trigger()\n        contElseInit.out \u2192 finderStart.trigger\n\n        \n\nNot sure. This is getting too tangled.\n\nMaybe I should refer back to an existing pattern from prior examples, like the sum_digits function:\n\nIn that example, they used recursive calls with state variables (sum) set via setters and then triggering execution again.\n\nBut for this problem, recursion might not be necessary; it's more about a flow where after the edge case is handled, computations proceed in sequence up to findDivisor and then decide based on its result.\n\nGiven time constraints, perhaps the most accurate approach given my earlier analysis is:\n\nThe code uses an Iteration.Find that returns whether any divisors exist. The rest of nodes handle setting the output accordingly.\n\nFinal code:\n\nmodule() main { \n    func(doc: \"check if the given integer is a prime number.\") num_prime {\n        in(x: -167, y: 27, name: \"num\") property(Number) num_5c0677\n        in(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n\n        out(x: 1016, y: -26, name: \"output\") property(Bool) output_c457b3\n        out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb\n\n        instance lessThanTwo root.Std.Math.LessThan { left=num_5c0677; right=2 }\n\n        \n        instance ifEdge root.Std.If {\n            predicate = lessThanTwo.result\n        }\n\n        \n        instance setFalseEdge root.Std.Setter<Bool> { new_value = false }\n        output_c457b3 <- setFalseEdge.value\n\n        instance contThenEdge root.Std.Trigger() \n        ifEdge.then \u2192 setFalseEdge.execute\n        setFalseEdge.done \u2192 contThenEdge.trigger\n        continue_9a54bb \u2190 contThenEdge.out \n\n        \n        instance contElseInit root.Std.Trigger()\n        ifEdge.else \u2192 contElseInit.trigger\n\n        \n        instance pow_node root.Std.Math.Pow { first=num_5c0677; second=0.5 }\n        instance floor_node root.Std.Math.Floor { input = pow_node.result }\n\n        instance genRange root.Std.List.GenerateRange {\n            from=2,\n            to=floor_node.output\n        }\n\n        \n        instance findDivisor root.Std.Iteration.Find {\n            items = genRange.list,\n\n            handler: (current:Number) => {\n                instance modNode root.Std.Math.Modulo {\n                    value=num_5c0677,\n                    divisor=current\n                }\n                return modNode.result == 0 \n            }\n        }\n\n        \n        instance hasDivisor root.Std.Logic.NotNull { input = findDivisor.item }\n\n        instance ifFinal root.Std.If {\n            predicate=hasDivisor.result\n        }\n\n        \n        instance setFalseFinal root.Std.Setter<Bool> { new_value = false }\n        output_c457b3 <- setFalseFinal.value\n\n        instance contThenFinal root.Std.Trigger() \n        ifFinal.then \u2192 setFalseFinal.execute\n        setFalseFinal.done \u2192 contThenFinal.trigger\n        continue_9a54bb \u2190 contThenFinal.out \n\n        \n        instance setTrueFinal root.Std.Setter<Bool> { new_value = true }\n        output_c457b3 <- setTrueFinal.value\n\n        instance contElseFinal root.Std.Trigger() \n        ifFinal.else \u2192 setTrueFinal.execute\n        setTrueFinal.done \u2192 contElseFinal.trigger\n        continue_9a54bb \u2190 contElseFinal.out \n\n        \n        execute_b7b391 \u2192 ifEdge.execute\n\n        \n        instance startProcessing root.Std.Trigger()\n        contElseInit.out \u2192 startProcessing.trigger\n    }\n}\n\nBut there are some missing links to make sure all steps in the main path are triggered properly. For example, when entering the 'else' branch of ifEdge (contElseInit is triggered), how do we initiate the computation chain for findDivisor?\n\nPerhaps adding triggers between nodes:\n\n        \n        instance trigGenRange root.Std.Trigger()\n        contElseInit.out \u2192 pow_node.compute \u2192 trigGenRange.trigger \n\nBut without knowing exact syntax.\n\nAlternatively, ensure that after ifEdge.else is taken (contElseInit), all subsequent steps (compute pow_node etc.) are automatically activated because their inputs have values, and the trigger starts them via findDivisor.\n\nThis might be implied by the flow-based nature once their dependencies are ready.\n\nOverall, this should handle the logic: edge case first, then checking divisors up to sqrt(num), then deciding based on findings.\n<|im_start|>\n\n```python\nmodule() main {\n    func(doc=\"check if the given integer is a prime number.\") num_prime {\n        in(x=-167, y=27, name=\"num\") property(Number) num_5c0677\n        in(x=-112, y=-216, name=\"execute\") trigger() execute_b7b391\n\n        out(x=1016, y=-26, name=\"output\") property(Bool) output_c457b3\n        out(x=1211, y=-110, name=\"continue\") trigger() continue_9a54bb\n\n        \n        instance lessThanTwo root.Std.Math.LessThan {\n            left=num_5c0677,\n            right=2\n        }\n\n        instance ifEdge root.Std.If {\n            predicate = lessThanTwo.result\n        }\n\n        \n        instance setFalseEdge root.Std.Setter<Bool> { new_value=False }\n        output_c457b3 <- setFalseEdge.value\n\n        instance contThenEdge root.Std.Trigger()\n        ifEdge.then \u2192 setFalseEdge.execute\n        setFalseEdge.done \u2192 contThenEdge.trigger\n        continue_9a54bb \u2190 contThenEdge.out \n\n        \n        instance contElseInit root.Std.Trigger()\n        ifEdge.else \u2192 contElseInit.trigger\n\n        \n        instance pow_node root.Std.Math.Pow {\n            first=num_5c0677,\n            second=0.5\n        }\n        instance floor_node root.Std.Math.Floor { input=pow_node.result }\n\n        instance genRange root.Std.List.GenerateRange {\n            from=2,\n            to=floor_node.output\n        }\n\n        \n        instance findDivisor root.Std.Iteration.Find {\n            items = genRange.list,\n\n            handler: (current:Number) => {\n                instance modNode root.Std.Math.Modulo {\n                    value=num_5c0677,\n                    divisor=current\n                }\n                return modNode.result == 0  \n            }\n        }\n\n        \n        instance hasDivisor root.Std.Logic.NotNull { input=findDivisor.item }\n\n        instance ifFinal root.Std.If {\n            predicate=hasDivisor.result\n        }\n\n        \n        instance setFalseFinal root.Std.Setter<Bool> { new_value=False }\n        output_c457b3 <- setFalseFinal.value\n\n        instance contThenFinal root.Std.Trigger()\n        ifFinal.then \u2192 setFalseFinal.execute\n        setFalseFinal.done \u2192 contThenFinal.trigger\n        continue_9a54bb \u2190 contThenFinal.out \n\n        \n        instance setTrueFinal root.Std.Setter<Bool> { new_value=True }\n        output_c457b3 <- setTrueFinal.value\n\n        instance contElseFinal root.Std.Trigger()\n        ifFinal.else \u2192 setTrueFinal.execute\n        setTrueFinal.done \u2192 contElseFinal.trigger\n        continue_9a54bb \u2190 contElseFinal.out \n\n        \n        execute_b7b391 \u2192 ifEdge.execute\n\n        \n        instance startProcessing root.Std.Trigger()\n        contElseInit.out \u2192 startProcessing.trigger\n    }\n}\n```"
            ]
        }
    }
]