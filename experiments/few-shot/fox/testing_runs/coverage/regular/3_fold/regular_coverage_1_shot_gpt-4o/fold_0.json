[
    {
        "experiment_name": "regular_coverage_1_shot",
        "best_params_optimization": "semantic",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": -1,
        "seed": 3,
        "n_generations_per_task": 10,
        "model": "gpt-4o",
        "largest_context": 5183,
        "task_candidates": {
            "8": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: 50, name: \"number\") property(Number) number_input\n        in(x: 100, y: 100, name: \"array\") property(List) array_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"result\") property(Bool) result_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) map_instance root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 100) and_instance root.Std_k98ojb.Logic.And {}\n        instance(x: 200, y: 150) reduce_instance root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 200, y: 200) greaterthan_instance root.Std_k98ojb.Math.GreaterThan {}\n\n        array_input -> map_instance.items\n        func() {\n            in(x: -100, y: 50, name: \"element\") property(Number) element_input\n\n            out(x: 100, y: 50, name: \"out\") property(Bool) out_output\n\n            number_input -> greaterthan_instance.left\n            element_input -> greaterthan_instance.right\n            greaterthan_instance.result -> out_output\n        } -> map_instance.handler\n\n        map_instance.output_list -> reduce_instance.items\n        func() {\n            in(x: -100, y: 50, name: \"acc\") property(Bool) acc_input\n            in(x: -100, y: 100, name: \"val\") property(Bool) val_input\n\n            out(x: 100, y: 75, name: \"out\") property(Bool) out_output\n\n            acc_input -> and_instance.left\n            val_input -> and_instance.right\n            and_instance.result -> out_output\n        } -> reduce_instance.reducer\n\n        true -> reduce_instance.initial\n        reduce_instance.result -> result_output\n        execute_trigger -> reduce_instance.reset\n        reduce_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: 50, name: \"number\") property(Number) number_1a2b3c\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_4d5e6f\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 300, y: 100, name: \"result\") property(Bool) result_j1k2l3\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 200, y: 50) filter_abc123 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 50) isempty_def456 root.Std_k98ojb.List.IsEmpty {}\n\n        array_4d5e6f -> filter_abc123.items\n        func() {\n            in(x: -50, y: 0, name: \"element\") property(Number) element_789xyz\n\n            out(x: 150, y: 0, name: \"out\") property(Bool) out_012uvw\n\n            instance(x: 50, y: 0) greaterthan_ghi789 root.Std_k98ojb.Math.GreaterThan {}\n            number_1a2b3c -> greaterthan_ghi789.left\n            element_789xyz -> greaterthan_ghi789.right\n            greaterthan_ghi789.result -> out_012uvw\n        } -> filter_abc123.handler\n\n        filter_abc123.output_list -> isempty_def456.list\n        isempty_def456.isEmpty -> result_j1k2l3\n        execute_7g8h9i -> filter_abc123.execute\n        isempty_def456.isEmpty -> continue_m4n5o6\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 150, y: -50, name: \"number\") property(Number) number_123456\n        in(x: 150, y: -150, name: \"array\") property(List<Number>) array_654321\n        in(x: 150, y: -250, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 600, y: -50, name: \"result\") property(Bool) result_789012\n        out(x: 600, y: -150, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 350, y: -150) map_987654 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 450, y: -50) not_456789 root.Std_k98ojb.Logic.Not {}\n        instance(x: 250, y: -50) lessthanorequal_321098 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 500, y: -150) filter_210987 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 550, y: -250) isempty_109876 root.Std_k98ojb.List.IsEmpty {}\n\n        array_654321 -> map_987654.items\n        func() {\n            in(x: -100, y: 0, name: \"element\") property(Number) element_654987\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) out_321654\n\n            instance(x: 50, y: 0) lessthanorequal_456123 root.Std_k98ojb.Math.LessThanOrEqual {}\n            element_654987 -> lessthanorequal_456123.left\n            number_123456 -> lessthanorequal_456123.right\n            lessthanorequal_456123.result -> out_321654\n        } -> map_987654.handler\n\n        map_987654.output_list -> filter_210987.items\n        func() {\n            in(x: -100, y: 0, name: \"element\") property(Bool) element_789654\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) out_987321\n\n            element_789654 -> out_987321\n        } -> filter_210987.handler\n\n        filter_210987.output_list -> isempty_109876.list\n        isempty_109876.isEmpty -> not_456789.input\n        not_456789.output -> result_789012\n        execute_abcdef -> map_987654.execute\n        map_987654.done -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 150, y: -50, name: \"number\") property(Number) number_input\n        in(x: 150, y: 50, name: \"array\") property(List<Number>) array_input\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_input\n\n        out(x: 650, y: 50, name: \"result\") property(Bool) result_output\n        out(x: 650, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 350, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 450, y: 50) greater_than_check root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 550, y: 50) if_check root.Std_k98ojb.Std.If {}\n\n        execute_input -> for_loop.trigger\n        array_input -> for_loop.items\n\n        for_loop.item -> greater_than_check.right\n        number_input -> greater_than_check.left\n\n        greater_than_check.result -> if_check.predicate\n        for_loop.onItem -> if_check.execute\n\n        if_check.then -> continue_output\n        if_check.value -> result_output\n\n        if_check.else -> for_loop.next\n        for_loop.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 170, y: -210, name: \"number\") property(Number) number_123456\n        in(x: 170, y: -150, name: \"array\") property(List<Number>) array_654321\n        in(x: 170, y: -90, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 600, y: -150, name: \"result\") property(Bool) result_789012\n        out(x: 600, y: -90, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 350, y: -150) filter_456789 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 470, y: -150) isempty_321098 root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 520, y: -150) not_654987 root.Std_k98ojb.Logic.Not {}\n\n        array_654321 -> filter_456789.items\n        func() {\n            in(x: -80, y: 20, name: \"element\") property(Number) element_123abc\n\n            out(x: 220, y: 20, name: \"out\") property(Bool) out_456def\n\n            instance(x: 80, y: 20) greaterthan_789ghi root.Std_k98ojb.Math.GreaterThan {}\n            number_123456 -> greaterthan_789ghi.left\n            element_123abc -> greaterthan_789ghi.right\n            greaterthan_789ghi.result -> out_456def\n        } -> filter_456789.handler\n\n        filter_456789.output_list -> isempty_321098.list\n        isempty_321098.isEmpty -> not_654987.input\n        not_654987.output -> result_789012\n        execute_abcdef -> isempty_321098.execute\n        isempty_321098.done -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 50, y: 50, name: \"number\") property(Number) number_input\n        in(x: 50, y: 100, name: \"array\") property(List<Number>) array_input\n        in(x: 50, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 250, y: 50, name: \"result\") property(Bool) result_output\n        out(x: 250, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 50) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 350, y: 50) is_empty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        array_input -> filter_instance.items\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_input\n\n            out(x: 150, y: 50, name: \"out\") property(Bool) out_output\n\n            instance(x: 50, y: 50) greater_than_instance root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greater_than_instance.left\n            element_input -> greater_than_instance.right\n            greater_than_instance.result -> out_output\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> is_empty_instance.list\n        is_empty_instance.isEmpty -> result_output\n        execute_trigger -> filter_instance.execute\n        is_empty_instance.isEmpty -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 200, y: 0, name: \"number\") property(Number) number_input\n        in(x: 200, y: 100, name: \"array\") property(List<Number>) array_input\n        in(x: 200, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"result\") property(Bool) result_output\n        out(x: 600, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 400, y: 0) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) is_empty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        execute_trigger -> filter_instance.trigger\n        array_input -> filter_instance.items\n        func() {\n            in(x: 0, y: 0, name: \"element\") property(Number) element_input\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) out_output\n\n            instance(x: 100, y: 0) greater_than_instance root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greater_than_instance.left\n            element_input -> greater_than_instance.right\n            greater_than_instance.result -> out_output\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> is_empty_instance.list\n        is_empty_instance.isEmpty -> result_output\n        execute_trigger -> is_empty_instance.trigger\n        is_empty_instance.isEmpty -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 120, y: 20, name: \"number\") property(Number) number_input\n        in(x: 120, y: 60, name: \"array\") property(List<Number>) array_input\n        in(x: 120, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 320, y: 20, name: \"result\") property(Bool) result_output\n        out(x: 320, y: 60, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 240, y: 40) forall_greater root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 40) isempty_check root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 480, y: 40) logic_not root.Std_k98ojb.Logic.Not {}\n\n        array_input -> forall_greater.items\n        func() {\n            in(x: -40, y: 40, name: \"element\") property(Number) element_input\n\n            out(x: 200, y: 40, name: \"out\") property(Bool) out_result\n\n            instance(x: 80, y: 40) greater_than_check root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greater_than_check.left\n            element_input -> greater_than_check.right\n            greater_than_check.result -> out_result\n        } -> forall_greater.handler\n\n        forall_greater.output_list -> isempty_check.list\n        isempty_check.isEmpty -> logic_not.input\n        logic_not.output -> result_output\n\n        execute_trigger -> forall_greater.execute\n        logic_not.output -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: 100, name: \"number\") property(Number) number_abc123\n        in(x: 100, y: 150, name: \"array\") property(List) array_def456\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_ghi789\n\n        out(x: 400, y: 100, name: \"result\") property(Bool) result_jkl012\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_mno345\n\n        instance(x: 250, y: 100) filter_pqr678 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 250, y: 150) isempty_stu901 root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 250, y: 200) not_vwx234 root.Std_k98ojb.Logic.Not {}\n\n        array_def456 -> filter_pqr678.items\n        func() {\n            in(x: -100, y: 50, name: \"element\") property(Number) element_xyz567\n\n            out(x: 100, y: 50, name: \"out\") property(Bool) out_abc890\n\n            instance(x: 0, y: 50) greaterthan_def123 root.Std_k98ojb.Math.GreaterThan {}\n            number_abc123 -> greaterthan_def123.left\n            element_xyz567 -> greaterthan_def123.right\n            greaterthan_def123.result -> out_abc890\n        } -> filter_pqr678.handler\n\n        filter_pqr678.output_list -> isempty_stu901.list\n        isempty_stu901.isEmpty -> not_vwx234.input\n        not_vwx234.output -> result_jkl012\n        execute_ghi789 -> filter_pqr678.execute\n        execute_ghi789 -> isempty_stu901.execute\n        isempty_stu901.isEmpty -> continue_mno345\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: 50, name: \"number\") property(Number) number_123abc\n        in(x: 100, y: 100, name: \"array\") property(List) array_456def\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 300, y: 50, name: \"result\") property(Bool) result_321cba\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_654fed\n\n        instance(x: 200, y: 100) filter_abc123 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 200, y: 200) isempty_def456 root.Std_k98ojb.List.IsEmpty {}\n\n        array_456def -> filter_abc123.items\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_987zyx\n\n            out(x: 50, y: 50, name: \"out\") property(Bool) out_654wvu\n\n            instance(x: 0, y: 50) greaterthan_321tsr root.Std_k98ojb.Math.GreaterThan {}\n            number_123abc -> greaterthan_321tsr.left\n            element_987zyx -> greaterthan_321tsr.right\n            greaterthan_321tsr.result -> out_654wvu\n        } -> filter_abc123.handler\n\n        filter_abc123.output_list -> isempty_def456.list\n        isempty_def456.isEmpty -> result_321cba\n        execute_789ghi -> filter_abc123.execute\n        isempty_def456.isEmpty -> continue_654fed\n    }\n}"
            ],
            "10": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 161, y: -211, name: \"input\") property(String) input_4f7c1a\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_9f7c1b\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_5d8b2f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8bc06b\n\n        instance(x: 352, y: -493) contains_6f8d2c root.Std_k98ojb.Strings.Contains {}\n        instance(x: 1121, y: -54) if_08b7c8 root.Std_k98ojb.Std.If {}\n\n        input_4f7c1a -> contains_6f8d2c.input\n        \"z\" -> contains_6f8d2c.contains\n        contains_6f8d2c.result -> if_08b7c8.predicate\n        if_08b7c8.value -> out_5d8b2f\n        if_08b7c8.then -> continue_8bc06b\n        if_08b7c8.else -> continue_8bc06b\n        execute_9f7c1b -> if_08b7c8.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 70, y: 50, name: \"input\") property(String) input_word\n        in(x: 70, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 50, name: \"output\") property(Bool) output_match\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 160, y: 50) contains_z root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n        \n        input_word -> contains_z.input\n        contains_z.result -> output_match\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_1a2b3c\n        in(x: 200, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 400, y: 100, name: \"matches\") property(Bool) matches_7g8h9i\n        out(x: 500, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 300, y: 100) contains_3m4n5o root.Std_k98ojb.Strings.Contains {}\n\n        input_1a2b3c -> contains_3m4n5o.input\n        \"z\" -> contains_3m4n5o.contains\n        contains_3m4n5o.result -> matches_7g8h9i\n        execute_4d5e6f -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 180, y: -50, name: \"input\") property(String) input_123abc\n        in(x: 150, y: -150, name: \"execute\") trigger() execute_456def\n\n        out(x: 350, y: -50, name: \"out\") property(Bool) out_789ghi\n        out(x: 400, y: 50, name: \"continue\") trigger() continue_101jkl\n\n        instance(x: 200, y: -200) contains_z root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n        execute_456def -> contains_z.execute\n        input_123abc -> contains_z.input\n        contains_z.result -> out_789ghi\n        contains_z.done -> continue_101jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 130, y: -60, name: \"input\") property(String) input_9b1a2f\n        in(x: 120, y: -180, name: \"execute\") trigger() execute_2f8c4d\n\n        out(x: 370, y: -60, name: \"out\") property(Bool) out_3a9d7f\n        out(x: 500, y: 40, name: \"continue\") trigger() continue_5c7b9e\n\n        instance(x: 320, y: -200) contains_4d9f7a root.Std_k98ojb.Strings.Contains {}\n        instance(x: 460, y: -120) if_1f3a6e root.Std_k98ojb.Std.If {}\n\n        input_9b1a2f -> contains_4d9f7a.input\n        \"z\" -> contains_4d9f7a.contains\n        contains_4d9f7a.result -> if_1f3a6e.predicate\n        if_1f3a6e.value -> out_3a9d7f\n        if_1f3a6e.then -> continue_5c7b9e\n        if_1f3a6e.else -> continue_5c7b9e\n        execute_2f8c4d -> if_1f3a6e.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 150, y: 100, name: \"input\") property(String) input_123abc\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 100, name: \"match\") property(Bool) match_789ghi\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: 100) contains_z root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n\n        input_123abc -> contains_z.input\n        contains_z.result -> match_789ghi\n        execute_456def -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_123abc\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 100, name: \"out\") property(Bool) out_789ghi\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 250, y: 100) contains_mno123 root.Std_k98ojb.Strings.Contains {}\n        \n        input_123abc -> contains_mno123.input\n        \"z\" -> contains_mno123.contains\n        contains_mno123.result -> out_789ghi\n        execute_456def -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 354, y: -53, name: \"input\") property(String) input_5f3a2d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_3dbf9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) contains_8cb3f6 root.Std_k98ojb.Strings.Contains {}\n\n        input_5f3a2d -> contains_8cb3f6.input\n        \"z\" -> contains_8cb3f6.contains\n        contains_8cb3f6.result -> out_3dbf9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) contains_6030c9 root.Std_k98ojb.Strings.Contains {}\n        instance(x: 591, y: 74) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> contains_6030c9.input\n        \"z\" -> contains_6030c9.contains\n        contains_6030c9.result -> if_07b8c7.predicate\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n        execute_27b8c3 -> if_07b8c7.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if a word contains the letter 'z'.\") contains_z {\n        in(x: 0, y: 0, name: \"word\") property(String) word_input\n\n        out(x: 200, y: 0, name: \"result\") property(Bool) result_output\n\n        instance(x: 100, y: 0) contains_z_check root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n\n        word_input -> contains_z_check.input\n        contains_z_check.result -> result_output\n    }\n}"
            ],
            "14": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 154, y: -37, name: \"input\") property(Number) input_0d9c7f\n        in(x: 150, y: -178, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 540, y: -22, name: \"out\") property(Number) out_f3db9f\n        out(x: 679, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 345, y: -278) characters_60f2b7 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 487, y: -92) map_5f4b6a root.Std_k98ojb.Iteration.Map {}\n        instance(x: 808, y: -12) reduce_ae7f9c root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1202, y: -148) add_3f7c6d root.Std_k98ojb.Math.Add {}\n\n        input_0d9c7f -> characters_60f2b7.input\n        characters_60f2b7.characters -> map_5f4b6a.items\n        func() {\n            in(x: -56, y: 46, name: \"element\") property(String) element_5f51f7\n\n            out(x: 210, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 98, y: 17) to_number_4b9f7c root.Std_k98ojb.Strings.ToNumber {}\n            element_5f51f7 -> to_number_4b9f7c.input\n            to_number_4b9f7c.number -> out_d0fd24\n        } -> map_5f4b6a.handler\n        map_5f4b6a.output_list -> reduce_ae7f9c.items\n        func() {\n            in(x: -56, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -56, y: 86, name: \"current\") property(Number) current_5f51f7\n\n            out(x: 210, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 98, y: 17) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            accumulated_5f51f7 -> add_2f9d09.first\n            current_5f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> out_d0fd24\n        } -> reduce_ae7f9c.reducer\n        0 -> reduce_ae7f9c.initial\n        reduce_ae7f9c.result -> out_f3db9f\n        execute_27b8c3 -> reduce_ae7f9c.reset\n        reduce_ae7f9c.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) sum_of_digits_f0be66 root.main.sum_of_digits {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_1f2c3d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_9a7c3b\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_2b3f9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_3ba06b\n\n        instance(x: 352, y: -493) characters_1234ab root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) map_5678cd root.Std_k98ojb.Iteration.Map {}\n        instance(x: 933, y: 25) reduce_9f0a1b root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 714, y: -155) to_number_3c4d5e root.Std_k98ojb.Math.Expression {\n            expression: \"parseInt(a)\"\n        }\n        instance(x: 1121, y: -54) add_6e7f8g root.Std_k98ojb.Math.Add {}\n\n        input_1f2c3d -> characters_1234ab.input\n        characters_1234ab.characters -> map_5678cd.items\n        func() {\n            in(x: -76, y: 46, name: \"character\") property(String) character_4e5f6g\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_7h8i9j\n\n            character_4e5f6g -> to_number_3c4d5e.a\n            to_number_3c4d5e.result -> out_7h8i9j\n        } -> map_5678cd.handler\n        map_5678cd.output_list -> reduce_9f0a1b.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_1a2b3c\n            in(x: -76, y: 92, name: \"value\") property(Number) value_4d5e6f\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_7g8h9i\n\n            accumulated_1a2b3c -> add_6e7f8g.first\n            value_4d5e6f -> add_6e7f8g.second\n            add_6e7f8g.result -> out_7g8h9i\n        } -> reduce_9f0a1b.reducer\n        0 -> reduce_9f0a1b.initial\n        reduce_9f0a1b.result -> out_2b3f9f\n        execute_9a7c3b -> reduce_9f0a1b.reset\n        reduce_9f0a1b.done -> continue_3ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) map_038fce root.Std_k98ojb.Iteration.Map {}\n        instance(x: 933, y: 25) reduce_f11fda root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 714, y: -155) to_number_8cb3f6 root.Std_k98ojb.Math.Expression {\n            expression: \"parseInt(digit)\"\n        }\n        instance(x: 1121, y: -54) add_07b8c7 root.Std_k98ojb.Math.Add {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> map_038fce.items\n\n        func() {\n            in(x: -76, y: 46, name: \"digit\") property(String) digit_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            digit_5f51f7 -> to_number_8cb3f6.gen_0\n            to_number_8cb3f6.result -> out_d0fd24\n        } -> map_038fce.handler\n\n        map_038fce.output_list -> reduce_f11fda.items\n\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 96, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            acc_5f51f7 -> add_07b8c7.first\n            value_5f51f7 -> add_07b8c7.second\n            add_07b8c7.result -> out_d0fd24\n        } -> reduce_f11fda.reducer\n\n        0 -> reduce_f11fda.initial\n        reduce_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_123abc\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 100, name: \"sum\") property(Number) sum_789ghi\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_101jkl\n\n        instance(x: 200, y: 100) to_string_abc123 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 100) map_def456 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 500, y: 100) reduce_ghi789 root.Std_k98ojb.Iteration.Reduce {}\n\n        input_123abc -> to_string_abc123.input\n        to_string_abc123.characters -> map_def456.items\n\n        func() {\n            in(x: -50, y: 0, name: \"char\") property(String) char_123abc\n\n            out(x: 150, y: 0, name: \"digit\") property(Number) digit_456def\n\n            instance(x: 50, y: 0) to_number_abc123 root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(char)\"\n            }\n\n            char_123abc -> to_number_abc123.gen_0\n            to_number_abc123.result -> digit_456def\n        } -> map_def456.handler\n\n        map_def456.output_list -> reduce_ghi789.items\n\n        func() {\n            in(x: -50, y: 0, name: \"accumulated\") property(Number) accumulated_123abc\n            in(x: -50, y: 50, name: \"digit\") property(Number) digit_456def\n\n            out(x: 150, y: 25, name: \"sum\") property(Number) sum_789ghi\n\n            instance(x: 50, y: 25) add_abc123 root.Std_k98ojb.Math.Add {}\n\n            accumulated_123abc -> add_abc123.first\n            digit_456def -> add_abc123.second\n            add_abc123.result -> sum_789ghi\n        } -> reduce_ghi789.reducer\n\n        0 -> reduce_ghi789.initial\n        reduce_ghi789.result -> sum_789ghi\n        execute_456def -> reduce_ghi789.execute\n        reduce_ghi789.done -> continue_101jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"get the sum of the digits of a non-negative integer\") sum_of_digits {\n        in(x: 100, y: 50, name: \"input\") property(Number) input_number\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 50, name: \"sum\") property(Number) sum_output\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 0) to_string root.Std_k98ojb.Strings.ToLower {}\n        instance(x: 200, y: 0) characters root.Std_k98ojb.Strings.Characters {}\n        instance(x: 250, y: 0) map root.Std_k98ojb.Iteration.Map {}\n        instance(x: 350, y: 0) reduce root.Std_k98ojb.Iteration.Reduce {}\n\n        input_number -> to_string.input\n        to_string.output -> characters.input\n        characters.characters -> map.items\n\n        func() {\n            in(x: 0, y: 0, name: \"char\") property(String) char_input\n            out(x: 200, y: 0, name: \"digit\") property(Number) digit_output\n\n            instance(x: 100, y: 0) to_number root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(char)\"\n            }\n\n            char_input -> to_number.gen_0\n            to_number.result -> digit_output\n        } -> map.handler\n\n        map.output_list -> reduce.items\n\n        func() {\n            in(x: 0, y: 0, name: \"accumulated\") property(Number) accumulated_input\n            in(x: 0, y: 50, name: \"current\") property(Number) current_input\n            out(x: 200, y: 0, name: \"sum\") property(Number) sum_output\n\n            instance(x: 100, y: 0) add root.Std_k98ojb.Math.Add {}\n\n            accumulated_input -> add.first\n            current_input -> add.second\n            add.result -> sum_output\n        } -> reduce.reducer\n\n        0 -> reduce.initial\n        reduce.result -> sum_output\n        execute_trigger -> reduce.execute\n        reduce.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 150, y: -100, name: \"input\") property(Number) input_6f7d2b\n        in(x: 150, y: -50, name: \"execute\") trigger() execute_9c3d2a\n\n        out(x: 400, y: 0, name: \"sum\") property(Number) sum_8a1b4c\n        out(x: 400, y: 50, name: \"continue\") trigger() continue_3f2b1d\n\n        instance(x: 300, y: -100) characters_5d8f2c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 600, y: -100) map_2a4d5e root.Std_k98ojb.Iteration.Map {}\n        instance(x: 900, y: -100) reduce_7b3c9f root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1200, y: -100) add_4c5d6e root.Std_k98ojb.Math.Add {}\n\n        input_6f7d2b -> characters_5d8f2c.input\n        characters_5d8f2c.characters -> map_2a4d5e.items\n\n        func() {\n            in(x: -50, y: 0, name: \"char\") property(String) char_1a2b3c\n\n            out(x: 200, y: 0, name: \"digit\") property(Number) digit_4d5e6f\n\n            instance(x: 100, y: 0) to_number_7f8g9h root.Std_k98ojb.Strings.ToNumber {}\n            char_1a2b3c -> to_number_7f8g9h.input\n            to_number_7f8g9h.number -> digit_4d5e6f\n        } -> map_2a4d5e.handler\n\n        map_2a4d5e.output_list -> reduce_7b3c9f.items\n\n        func() {\n            in(x: -50, y: 0, name: \"accumulated\") property(Number) accumulated_1a2b3c\n            in(x: -50, y: 50, name: \"digit\") property(Number) digit_4d5e6f\n\n            out(x: 200, y: 25, name: \"sum\") property(Number) sum_7f8g9h\n\n            accumulated_1a2b3c -> add_4c5d6e.first\n            digit_4d5e6f -> add_4c5d6e.second\n            add_4c5d6e.result -> sum_7f8g9h\n        } -> reduce_7b3c9f.reducer\n\n        0 -> reduce_7b3c9f.initial\n        reduce_7b3c9f.result -> sum_8a1b4c\n        execute_9c3d2a -> reduce_7b3c9f.reset\n        reduce_7b3c9f.done -> continue_3f2b1d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 100, y: 50, name: \"input\") property(Number) input_123456\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_654321\n\n        out(x: 400, y: 50, name: \"sum\") property(Number) sum_abcdef\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 200, y: 50) characters_abcdef root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 50) map_ghijkl root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 150) reduce_mnopqr root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 500, y: 50) add_stuvwx root.Std_k98ojb.Math.Add {}\n\n        input_123456 -> characters_abcdef.input\n        characters_abcdef.characters -> map_ghijkl.items\n\n        func() {\n            in(x: -100, y: 50, name: \"char\") property(String) char_zyxwvu\n\n            out(x: 100, y: 50, name: \"digit\") property(Number) digit_uvwxyz\n\n            instance(x: 0, y: 50) tonumber_qwerty root.Std_k98ojb.Strings.ToNumber {}\n            char_zyxwvu -> tonumber_qwerty.input\n            tonumber_qwerty.output -> digit_uvwxyz\n        } -> map_ghijkl.handler\n\n        map_ghijkl.output_list -> reduce_mnopqr.items\n\n        func() {\n            in(x: -100, y: 50, name: \"acc\") property(Number) acc_abcdef\n            in(x: -100, y: 100, name: \"digit\") property(Number) digit_ghijkl\n\n            out(x: 100, y: 50, name: \"sum\") property(Number) sum_mnopqr\n\n            acc_abcdef -> add_stuvwx.first\n            digit_ghijkl -> add_stuvwx.second\n            add_stuvwx.result -> sum_mnopqr\n        } -> reduce_mnopqr.reducer\n\n        reduce_mnopqr.result -> sum_abcdef\n        execute_654321 -> reduce_mnopqr.execute\n        reduce_mnopqr.done -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 150, y: 50, name: \"input\") property(Number) input_2a6f3b\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_3b9c2d\n\n        out(x: 400, y: 50, name: \"sum\") property(Number) sum_4d2e1c\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_6f3b8d\n\n        instance(x: 250, y: 50) characters_5f6a7b root.Std_k98ojb.Strings.Characters {}\n        instance(x: 250, y: 150) map_8d7c9f root.Std_k98ojb.Iteration.Map {}\n        instance(x: 550, y: 50) reduce_9e5b7c root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 250, y: 250) add_3f4a2b root.Std_k98ojb.Math.Add {}\n\n        input_2a6f3b -> characters_5f6a7b.input\n        characters_5f6a7b.characters -> map_8d7c9f.items\n\n        func() {\n            in(x: -50, y: 50, name: \"character\") property(String) character_1f2d3b\n\n            out(x: 200, y: 50, name: \"digit\") property(Number) digit_4e3b5d\n\n            instance(x: 50, y: 50) to_number_6f7b8c root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(character)\"\n            }\n            character_1f2d3b -> to_number_6f7b8c.gen_0\n            to_number_6f7b8c.result -> digit_4e3b5d\n        } -> map_8d7c9f.handler\n\n        map_8d7c9f.output_list -> reduce_9e5b7c.items\n\n        func() {\n            in(x: -50, y: 50, name: \"accumulated\") property(Number) accumulated_7f4b6c\n            in(x: -50, y: 100, name: \"current\") property(Number) current_9d8c7f\n\n            out(x: 200, y: 75, name: \"sum\") property(Number) sum_2e3b4d\n\n            accumulated_7f4b6c -> add_3f4a2b.first\n            current_9d8c7f -> add_3f4a2b.second\n            add_3f4a2b.result -> sum_2e3b4d\n        } -> reduce_9e5b7c.reducer\n\n        reduce_9e5b7c.result -> sum_4d2e1c\n        execute_3b9c2d -> reduce_9e5b7c.execute\n        reduce_9e5b7c.done -> continue_6f3b8d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 110, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) map_8cb3f6 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1121, y: -54) reduce_07b8c7 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1812, y: -319) add_80a119 root.Std_k98ojb.Math.Add {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> map_8cb3f6.items\n        func() {\n            in(x: -76, y: 46, name: \"character\") property(String) character_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) tonumber_2f9d09 root.Std_k98ojb.Strings.ToNumber {}\n            character_5f51f7 -> tonumber_2f9d09.input\n            tonumber_2f9d09.output -> out_d0fd24\n        } -> map_8cb3f6.handler\n        map_8cb3f6.output_list -> reduce_07b8c7.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulator\") property(Number) accumulator_5f51f7\n            in(x: -76, y: 96, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            accumulator_5f51f7 -> add_80a119.first\n            value_5f51f7 -> add_80a119.second\n            add_80a119.result -> out_d0fd24\n        } -> reduce_07b8c7.reducer\n        0 -> reduce_07b8c7.initial\n        reduce_07b8c7.result -> out_f3db9f\n        execute_27b8c3 -> reduce_07b8c7.execute\n        reduce_07b8c7.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) sum_of_digits_f0be66 root.main.sum_of_digits {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) map_8cb3f6 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1121, y: -54) reduce_07b8c7 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 933, y: 25) add_f11fda root.Std_k98ojb.Math.Add {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> map_8cb3f6.items\n        func() {\n            in(x: -76, y: 46, name: \"char\") property(String) char_5f51f7\n\n            out(x: 382, y: 19, name: \"digit\") property(Number) digit_d0fd24\n\n            instance(x: 106, y: 17) to_number_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(char)\"\n            }\n            char_5f51f7 -> to_number_2f9d09.gen_0\n            to_number_2f9d09.result -> digit_d0fd24\n        } -> map_8cb3f6.handler\n        map_8cb3f6.output_list -> reduce_07b8c7.items\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 86, name: \"digit\") property(Number) digit_5f51f7\n\n            out(x: 382, y: 19, name: \"sum\") property(Number) sum_d0fd24\n\n            acc_5f51f7 -> add_f11fda.first\n            digit_5f51f7 -> add_f11fda.second\n            add_f11fda.result -> sum_d0fd24\n        } -> reduce_07b8c7.reducer\n        0 -> reduce_07b8c7.initial\n        reduce_07b8c7.result -> out_f3db9f\n        execute_27b8c3 -> reduce_07b8c7.execute\n        reduce_07b8c7.done -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) sum_of_digits_f0be66 root.main.sum_of_digits {}\n}"
            ],
            "15": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 180, y: -100, name: \"list\") property(List) list_input\n        in(x: 180, y: -50, name: \"execute\") trigger() execute\n\n        out(x: 180, y: 200, name: \"isSorted\") property(Bool) is_sorted_output\n        out(x: 180, y: 250, name: \"continue\") trigger() continue\n\n        instance(x: 400, y: -100) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 700, y: -100) lessthanorequal root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1000, y: -100) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 1300, y: -100) not_node root.Std_k98ojb.Logic.Not {}\n\n        list_input -> for_loop.items\n        for_loop.item -> lessthanorequal.left\n        for_loop.index -> lessthanorequal.right\n        lessthanorequal.result -> if_node.predicate\n        if_node.then -> for_loop.next\n        if_node.else -> not_node.input\n        not_node.output -> is_sorted_output\n        for_loop.done -> continue\n        execute -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"list\") property(List<Number>) list_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 591, y: 74) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 714, y: -155) ifexpression_8cb3f6 root.Std_k98ojb.Std.IfExpression {\n            expression: \"list[index] <= list[index + 1]\"\n        }\n\n        list_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.index -> ifexpression_8cb3f6.index\n        list_f5c03d -> ifexpression_8cb3f6.list\n        ifexpression_8cb3f6.value -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        if_07b8c7.then -> for_8cb3f6.next\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) is_sorted_output\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 714, y: -155) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) greater_than root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 1121, y: -54) not_equal root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1504, y: -400) list_length root.Std_k98ojb.List.Length {}\n        instance(x: 1496, y: -187) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 1812, y: -319) get_at_node root.Std_k98ojb.List.GetAt {}\n        instance(x: 2136, y: -356) get_next_node root.Std_k98ojb.List.GetAt {}\n\n        input_list -> list_length.list\n        list_length.length -> sub_node.first\n        1 -> sub_node.second\n        sub_node.result -> for_loop.items\n\n        for_loop.item -> get_at_node.index\n        input_list -> get_at_node.list\n        get_at_node.item -> greater_than.left\n\n        for_loop.index -> get_next_node.index\n        input_list -> get_next_node.list\n        get_next_node.item -> greater_than.right\n\n        greater_than.result -> if_node.predicate\n        for_loop.onItem -> if_node.execute\n\n        if_node.then -> not_equal.left\n        true -> not_equal.right\n        not_equal.result -> is_sorted_output\n\n        if_node.then -> continue_trigger\n        if_node.else -> for_loop.next\n\n        execute_trigger -> for_loop.reset\n        for_loop.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"list\") property(List<Number>) list_input\n\n        out(x: 1748, y: -10, name: \"isSorted\") property(Bool) is_sorted_output\n\n        instance(x: 591, y: 74) length_038fce root.Std_k98ojb.List.Length {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) getat_b720d7 root.Std_k98ojb.List.GetAt {}\n        instance(x: 1496, y: -187) getat_9fba8c root.Std_k98ojb.List.GetAt {}\n        instance(x: 2136, y: -356) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1088, y: -256) lessthan_f4554f root.Std_k98ojb.Math.LessThanOrEqual {}\n\n        list_input -> length_038fce.list\n        list_input -> for_8cb3f6.items\n        for_8cb3f6.index -> lessthanorequal_f11fda.left\n        length_038fce.length -> lessthanorequal_f11fda.right\n        lessthanorequal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> is_sorted_output\n        for_8cb3f6.index -> getat_b720d7.index\n        list_input -> getat_b720d7.list\n        for_8cb3f6.index -> getat_9fba8c.index\n        list_input -> getat_9fba8c.list\n        getat_b720d7.item -> lessthan_f4554f.left\n        getat_9fba8c.item -> lessthan_f4554f.right\n        lessthan_f4554f.result -> not_80a119.input\n        not_80a119.output -> if_07b8c7.then\n        if_07b8c7.then -> is_sorted_output\n        for_8cb3f6.done -> is_sorted_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 130, y: -53, name: \"input_list\") property(List<Number>) input_list_f5c03d\n        in(x: 130, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1480, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1480, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) for_6030c9 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 714, y: -155) if_8cb3f6 root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) not_07b8c7 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1812, y: -319) and_80a119 root.Std_k98ojb.Logic.And {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 1504, y: -400) getat_b720d7 root.Std_k98ojb.List.GetAt {}\n        instance(x: 1496, y: -187) getat_9fba8c root.Std_k98ojb.List.GetAt {}\n        instance(x: 1894, y: -120) lessthan_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n\n        input_list_f5c03d -> for_6030c9.items\n        for_6030c9.index -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> getat_b720d7.index\n        for_6030c9.index -> getat_9fba8c.index\n        input_list_f5c03d -> getat_b720d7.list\n        input_list_f5c03d -> getat_9fba8c.list\n        getat_9fba8c.item -> lessthan_f11fda.left\n        getat_b720d7.item -> lessthan_f11fda.right\n        lessthan_f11fda.result -> not_07b8c7.input\n        not_07b8c7.result -> if_8cb3f6.predicate\n        for_6030c9.onItem -> if_8cb3f6.execute\n        if_8cb3f6.then -> if_e19a62.execute\n        if_8cb3f6.else -> for_6030c9.next\n        if_e19a62.predicate -> and_80a119.left\n        if_e19a62.then -> continue_8ba06b\n        for_6030c9.done -> continue_8ba06b\n        execute_27b8c3 -> for_6030c9.reset\n        if_8cb3f6.value -> out_f3db9f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"list\") property(List<Number>) list_0f8a3d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_9f8c3e\n\n        out(x: 1748, y: -10, name: \"isSorted\") property(Bool) isSorted_2c7f9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_1ba06b\n\n        instance(x: 352, y: -493) for_3cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 591, y: 74) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 933, y: 25) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"a <= b\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 714, y: -155) getat_1f8b7c root.Std_k98ojb.List.GetAt {}\n        instance(x: 714, y: -355) getat_2f8b7c root.Std_k98ojb.List.GetAt {}\n        list_0f8a3d -> for_3cb3f6.items\n        for_3cb3f6.index -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> getat_1f8b7c.index\n        for_3cb3f6.index -> getat_2f8b7c.index\n        list_0f8a3d -> getat_1f8b7c.list\n        list_0f8a3d -> getat_2f8b7c.list\n        getat_2f8b7c.item -> expression_b720d7.gen_0\n        getat_1f8b7c.item -> expression_b720d7.gen_1\n        expression_b720d7.result -> not_80a119.input\n        not_80a119.output -> if_07b8c7.predicate\n        for_3cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> if_e19a62.execute\n        if_07b8c7.else -> for_3cb3f6.next\n        if_e19a62.then -> continue_1ba06b\n        if_e19a62.else -> for_3cb3f6.next\n        for_3cb3f6.done -> continue_1ba06b\n        if_07b8c7.value -> isSorted_2c7f9f\n        execute_9f8c3e -> for_3cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 100, y: 100, name: \"input_list\") property(List) input_list_123456\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_654321\n\n        out(x: 300, y: 100, name: \"is_sorted\") property(Bool) is_sorted_abcdef\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 200, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 100) for_node root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 50) get_at_current root.Std_k98ojb.List.GetAt {}\n        instance(x: 400, y: 100) get_at_next root.Std_k98ojb.List.GetAt {}\n        instance(x: 600, y: 75) less_than_or_equal_node root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 800, y: 75) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 1000, y: 75) continue_node root.Std_k98ojb.Std.If {}\n\n        input_list_123456 -> length_node.list\n        length_node.length -> for_node.items\n        for_node.index -> get_at_current.index\n        input_list_123456 -> get_at_current.list\n        for_node.index -> get_at_next.index\n        input_list_123456 -> get_at_next.list\n        get_at_current.item -> less_than_or_equal_node.left\n        get_at_next.item -> less_than_or_equal_node.right\n        less_than_or_equal_node.result -> if_node.predicate\n        if_node.then -> for_node.next\n        if_node.else -> continue_node.execute\n        for_node.onItem -> if_node.execute\n        for_node.done -> continue_node.execute\n        true -> continue_node.predicate\n        continue_node.then -> is_sorted_abcdef\n        false -> continue_node.else\n        continue_node.else -> is_sorted_abcdef\n        execute_654321 -> for_node.reset\n        continue_node.then -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 162, y: -212, name: \"input\") property(List) input_list\n\n        out(x: 562, y: -10, name: \"out\") property(Bool) is_sorted\n\n        instance(x: 371, y: -155) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 793, y: -89) lessthanorequal root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1043, y: -119) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 583, y: 72) not_node root.Std_k98ojb.Logic.Not {}\n\n        input_list -> for_loop.items\n        for_loop.index -> lessthanorequal.left\n        for_loop.index -> for_loop.next\n        for_loop.onItem -> lessthanorequal.right\n        lessthanorequal.result -> if_node.predicate\n        if_node.then -> is_sorted\n        if_node.else -> not_node.input\n        not_node.result -> is_sorted\n        for_loop.done -> is_sorted\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"list\") property(List) list_input\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) is_sorted_output\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 591, y: 74) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 933, y: 25) lessthanorequal_node root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 714, y: -155) for_node root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) greaterthan_node root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 2136, y: -356) if_sorted_node root.Std_k98ojb.Std.If {}\n\n        list_input -> length_node.list\n        1 -> lessthanorequal_node.right\n        length_node.length -> lessthanorequal_node.left\n        lessthanorequal_node.result -> if_node.predicate\n        execute_trigger -> if_node.execute\n        if_node.then -> continue_trigger\n        if_node.else -> for_node.trigger\n        list_input -> for_node.items\n        for_node.item -> greaterthan_node.left\n        for_node.index -> greaterthan_node.right\n        greaterthan_node.result -> if_sorted_node.predicate\n        for_node.onItem -> if_sorted_node.execute\n        if_sorted_node.then -> continue_trigger\n        if_sorted_node.else -> for_node.next\n        for_node.done -> continue_trigger\n        if_sorted_node.value -> is_sorted_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 200, y: 100, name: \"input_list\") property(List<Number>) input_list_1a2b3c\n        in(x: 200, y: 200, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 800, y: 100, name: \"is_sorted\") property(Bool) is_sorted_7g8h9i\n        out(x: 800, y: 200, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 400, y: 100) for_loop_3m4n5o root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: 100) lessthan_6p7q8r root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 600, y: 200) if_9s0t1u root.Std_k98ojb.Std.If {}\n\n        input_list_1a2b3c -> for_loop_3m4n5o.items\n        for_loop_3m4n5o.index -> lessthan_6p7q8r.left\n        for_loop_3m4n5o.item -> lessthan_6p7q8r.right\n        lessthan_6p7q8r.result -> if_9s0t1u.predicate\n        for_loop_3m4n5o.onItem -> if_9s0t1u.execute\n        if_9s0t1u.then -> for_loop_3m4n5o.next\n        if_9s0t1u.else -> continue_0j1k2l\n        if_9s0t1u.value -> is_sorted_7g8h9i\n        for_loop_3m4n5o.done -> continue_0j1k2l\n        execute_4d5e6f -> for_loop_3m4n5o.reset\n    }\n}"
            ],
            "25": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 50, y: 0, name: \"list1\") property(List<Number>) list1\n        in(x: 50, y: 50, name: \"list2\") property(List<Number>) list2\n        in(x: 50, y: 100, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 50, name: \"result\") property(List<Number>) result\n        out(x: 400, y: 100, name: \"done\") trigger() done\n\n        instance(x: 200, y: 50) zip_1 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 300, y: 50) map_1 root.Std_k98ojb.Iteration.Map {}\n\n        list1 -> zip_1.left\n        list2 -> zip_1.right\n\n        zip_1.zipped -> map_1.items\n\n        func() {\n            in(x: -50, y: 0, name: \"pair\") property(Tuple<Number, Number>) pair\n\n            out(x: 200, y: 0, name: \"modulo_result\") property(Number) modulo_result\n\n            instance(x: 100, y: 0) get_first root.Std_k98ojb.List.GetAt {\n                index: 0\n            }\n            instance(x: 100, y: 50) get_second root.Std_k98ojb.List.GetAt {\n                index: 1\n            }\n            instance(x: 150, y: 25) modulo root.Std_k98ojb.Math.Modulo {}\n\n            pair -> get_first.list\n            pair -> get_second.list\n\n            get_first.item -> modulo.value\n            get_second.item -> modulo.divisor\n\n            modulo.result -> modulo_result\n        } -> map_1.handler\n\n        map_1.output_list -> result\n        execute -> zip_1.handler\n        map_1.done -> done\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 10, y: 10, name: \"list1\") property(List<Number>) list1\n        in(x: 10, y: 40, name: \"list2\") property(List<Number>) list2\n        in(x: 10, y: 70, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 40, name: \"result\") property(List<Number>) result\n        out(x: 300, y: 70, name: \"continue\") trigger() continue\n\n        instance(x: 150, y: 40) zip_7b5c4e root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 230, y: 40) modulo_1c3d5f root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_7b5c4e.left\n        list2 -> zip_7b5c4e.right\n\n        func() {\n            in(x: 10, y: 10, name: \"left\") property(Number) left\n            in(x: 10, y: 40, name: \"right\") property(Number) right\n\n            out(x: 150, y: 25, name: \"result\") property(Number) result\n\n            left -> modulo_1c3d5f.value\n            right -> modulo_1c3d5f.divisor\n            modulo_1c3d5f.result -> result\n        } -> zip_7b5c4e.handler\n\n        zip_7b5c4e.zipped -> result\n        execute -> zip_7b5c4e.execute\n        zip_7b5c4e.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element wise modulo on two lists\") element_wise_modulo {\n        in(x: 101, y: 40, name: \"list1\") property(List<Number>) list1\n        in(x: 101, y: 140, name: \"list2\") property(List<Number>) list2\n        in(x: 101, y: 240, name: \"execute\") trigger() execute\n\n        out(x: 701, y: 140, name: \"result\") property(List<Number>) result\n        out(x: 701, y: 240, name: \"continue\") trigger() continue\n\n        instance(x: 301, y: 140) zip_9f2d12 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 501, y: 140) map_2f8c3b root.Std_k98ojb.Iteration.Map {}\n\n        list1 -> zip_9f2d12.left\n        list2 -> zip_9f2d12.right\n\n        func() {\n            in(x: 40, y: 40, name: \"left\") property(Number) left\n            in(x: 40, y: 140, name: \"right\") property(Number) right\n\n            out(x: 240, y: 90, name: \"out\") property(Number) out\n\n            instance(x: 140, y: 90) modulo_3f8d4a root.Std_k98ojb.Math.Modulo {}\n            left -> modulo_3f8d4a.value\n            right -> modulo_3f8d4a.divisor\n            modulo_3f8d4a.result -> out\n        } -> zip_9f2d12.handler\n\n        zip_9f2d12.zipped -> map_2f8c3b.items\n        map_2f8c3b.output_list -> result\n\n        execute -> zip_9f2d12.execute\n        zip_9f2d12.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 48, y: 0, name: \"list1\") property(List<Number>) list1_0f12e3\n        in(x: 48, y: 96, name: \"list2\") property(List<Number>) list2_1f12e3\n        in(x: 48, y: 192, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 672, y: 48, name: \"result\") property(List<Number>) result_f3db9f\n        out(x: 672, y: 144, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 288, y: 48) zip_6030c9 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 528, y: 48) map_8cb3f6 root.Std_k98ojb.Iteration.Map {}\n\n        list1_0f12e3 -> zip_6030c9.left\n        list2_1f12e3 -> zip_6030c9.right\n\n        func() {\n            in(x: -76, y: 46, name: \"left\") property(Number) left_5f51f7\n            in(x: -76, y: 96, name: \"right\") property(Number) right_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            left_5f51f7 -> modulo_2f9d09.value\n            right_5f51f7 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> out_d0fd24\n        } -> zip_6030c9.handler\n\n        zip_6030c9.zipped -> map_8cb3f6.items\n        map_8cb3f6.output_list -> result_f3db9f\n\n        execute_27b8c3 -> map_8cb3f6.execute\n        map_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 150, y: -30, name: \"list1\") property(List<Number>) list1\n        in(x: 150, y: 30, name: \"list2\") property(List<Number>) list2\n        in(x: 150, y: 90, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 30, name: \"result\") property(List<Number>) result\n        out(x: 500, y: 90, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: 30) zip_1 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 400, y: 30) modulo_1 root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_1.left\n        list2 -> zip_1.right\n        zip_1.zipped -> result\n        execute -> zip_1.execute\n\n        func() {\n            in(x: -50, y: 30, name: \"left\") property(Number) left\n            in(x: -50, y: 90, name: \"right\") property(Number) right\n\n            out(x: 200, y: 60, name: \"out\") property(Number) out\n\n            left -> modulo_1.value\n            right -> modulo_1.divisor\n            modulo_1.result -> out\n        } -> zip_1.handler\n\n        zip_1.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element-wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 100, y: 100, name: \"list1\") property(List<Number>) list1\n        in(x: 100, y: 150, name: \"list2\") property(List<Number>) list2\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 150, name: \"result\") property(List<Number>) result\n        out(x: 400, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 150) zip_f3a1c3 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 600, y: 150) map_7b3c1a root.Std_k98ojb.Iteration.Map {}\n\n        list1 -> zip_f3a1c3.left\n        list2 -> zip_f3a1c3.right\n        zip_f3a1c3.zipped -> map_7b3c1a.items\n\n        func() {\n            in(x: -50, y: 50, name: \"pair\") property(Tuple<Number, Number>) pair\n\n            out(x: 250, y: 50, name: \"modulo_result\") property(Number) modulo_result\n\n            instance(x: 100, y: 50) getat_5f3a1b root.Std_k98ojb.List.GetAt {}\n            instance(x: 100, y: 100) getat_7f3b1c root.Std_k98ojb.List.GetAt {}\n            instance(x: 200, y: 75) modulo_8b1c3d root.Std_k98ojb.Math.Modulo {}\n\n            pair -> getat_5f3a1b.list\n            pair -> getat_7f3b1c.list\n            0 -> getat_5f3a1b.index\n            1 -> getat_7f3b1c.index\n            getat_5f3a1b.item -> modulo_8b1c3d.value\n            getat_7f3b1c.item -> modulo_8b1c3d.divisor\n            modulo_8b1c3d.result -> modulo_result\n        } -> map_7b3c1a.handler\n\n        map_7b3c1a.output_list -> result\n        execute -> zip_f3a1c3.handler\n        zip_f3a1c3.handler -> map_7b3c1a.handler\n        map_7b3c1a.output_list -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 50, y: -50, name: \"list1\") property(List) list1_3f7d2b\n        in(x: 50, y: 0, name: \"list2\") property(List) list2_4a8e3c\n        in(x: 50, y: 50, name: \"execute\") trigger() execute_9f3d4e\n\n        out(x: 300, y: 0, name: \"result\") property(List) result_6c8f5d\n        out(x: 300, y: 50, name: \"continue\") trigger() continue_7d9e6f\n\n        instance(x: 150, y: 0) zip_5e4f7a root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 250, y: 0) modulo_2b3c4d root.Std_k98ojb.Math.Modulo {}\n\n        list1_3f7d2b -> zip_5e4f7a.left\n        list2_4a8e3c -> zip_5e4f7a.right\n        func() {\n            in(x: -50, y: 0, name: \"left\") property(Number) left_8d7f9a\n            in(x: -50, y: 50, name: \"right\") property(Number) right_9e8fab\n\n            out(x: 150, y: 25, name: \"result\") property(Number) result_5f6d7e\n\n            left_8d7f9a -> modulo_2b3c4d.value\n            right_9e8fab -> modulo_2b3c4d.divisor\n            modulo_2b3c4d.result -> result_5f6d7e\n        } -> zip_5e4f7a.handler\n\n        zip_5e4f7a.zipped -> result_6c8f5d\n        execute_9f3d4e -> zip_5e4f7a.trigger\n        zip_5e4f7a.done -> continue_7d9e6f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 82, y: 25, name: \"list1\") property(List<Number>) list1_3f2b7a\n        in(x: 82, y: 100, name: \"list2\") property(List<Number>) list2_3f2b7b\n        in(x: 82, y: 175, name: \"execute\") trigger() execute_3f2b7c\n\n        out(x: 550, y: 25, name: \"result\") property(List<Number>) result_3f2b7d\n        out(x: 550, y: 100, name: \"continue\") trigger() continue_3f2b7e\n\n        instance(x: 350, y: 25) zip_3f2b7f root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 350, y: 150) map_3f2b80 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 550, y: 200) modulo_3f2b81 root.Std_k98ojb.Math.Modulo {}\n\n        list1_3f2b7a -> zip_3f2b7f.left\n        list2_3f2b7b -> zip_3f2b7f.right\n        zip_3f2b7f.zipped -> map_3f2b80.items\n\n        func() {\n            in(x: -76, y: 46, name: \"pair\") property(Tuple<Number, Number>) pair_3f2b82\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_3f2b83\n\n            instance(x: 106, y: 17) getat_3f2b84 root.Std_k98ojb.List.GetAt {}\n            instance(x: 106, y: 100) getat_3f2b85 root.Std_k98ojb.List.GetAt {}\n\n            pair_3f2b82 -> getat_3f2b84.list\n            0 -> getat_3f2b84.index\n            pair_3f2b82 -> getat_3f2b85.list\n            1 -> getat_3f2b85.index\n\n            getat_3f2b84.item -> modulo_3f2b81.value\n            getat_3f2b85.item -> modulo_3f2b81.divisor\n\n            modulo_3f2b81.result -> out_3f2b83\n        } -> map_3f2b80.handler\n\n        map_3f2b80.output_list -> result_3f2b7d\n        execute_3f2b7c -> zip_3f2b7f.trigger\n        zip_3f2b7f.done -> continue_3f2b7e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1_abc123\n        in(x: 100, y: 200, name: \"list2\") property(List) list2_def456\n        in(x: 100, y: 300, name: \"execute\") trigger() execute_ghi789\n\n        out(x: 500, y: 200, name: \"result\") property(List) result_jkl012\n        out(x: 500, y: 300, name: \"continue\") trigger() continue_mno345\n\n        instance(x: 300, y: 150) zip_pqr678 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 700, y: 200) map_stu901 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 900, y: 200) modulo_vwx234 root.Std_k98ojb.Math.Modulo {}\n\n        list1_abc123 -> zip_pqr678.left\n        list2_def456 -> zip_pqr678.right\n        zip_pqr678.zipped -> map_stu901.items\n\n        func() {\n            in(x: -100, y: 50, name: \"pair\") property(Tuple) pair_yza567\n\n            out(x: 200, y: 50, name: \"out\") property(Number) out_bcd890\n\n            instance(x: 0, y: 50) get_at_efg123 root.Std_k98ojb.List.GetAt {}\n            instance(x: 100, y: 50) get_at_hij456 root.Std_k98ojb.List.GetAt {}\n\n            pair_yza567 -> get_at_efg123.list\n            0 -> get_at_efg123.index\n            pair_yza567 -> get_at_hij456.list\n            1 -> get_at_hij456.index\n\n            get_at_efg123.item -> modulo_vwx234.value\n            get_at_hij456.item -> modulo_vwx234.divisor\n            modulo_vwx234.result -> out_bcd890\n        } -> map_stu901.handler\n\n        map_stu901.output_list -> result_jkl012\n        execute_ghi789 -> zip_pqr678.trigger\n        zip_pqr678.done -> continue_mno345\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 100, y: 50, name: \"list1\") property(List<Number>) list1\n        in(x: 100, y: 100, name: \"list2\") property(List<Number>) list2\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 100, name: \"result\") property(List<Number>) result\n        out(x: 300, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 100) zip_abc123 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 400, y: 100) map_123abc root.Std_k98ojb.Iteration.Map {}\n        instance(x: 600, y: 100) modulo_321cba root.Std_k98ojb.Math.Modulo {}\n\n        execute -> zip_abc123.trigger\n        list1 -> zip_abc123.left\n        list2 -> zip_abc123.right\n\n        zip_abc123.zipped -> map_123abc.items\n\n        func() {\n            in(x: 50, y: 50, name: \"pair\") property(Tuple<Number, Number>) pair\n\n            out(x: 250, y: 50, name: \"mod_result\") property(Number) mod_result\n\n            instance(x: 150, y: 50) get_first_456def root.Std_k98ojb.List.GetAt {\n                index: 0\n            }\n            instance(x: 150, y: 100) get_second_654fed root.Std_k98ojb.List.GetAt {\n                index: 1\n            }\n\n            pair -> get_first_456def.list\n            pair -> get_second_654fed.list\n\n            get_first_456def.item -> modulo_321cba.value\n            get_second_654fed.item -> modulo_321cba.divisor\n\n            modulo_321cba.result -> mod_result\n        } -> map_123abc.handler\n\n        map_123abc.output_list -> result\n        map_123abc.done -> continue\n    }\n}"
            ],
            "26": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_string\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> to_upper_instance.execute\n        to_upper_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_string\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n\n        execute_trigger -> to_uppercase_instance.execute\n        to_uppercase_instance.continue -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_string\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n        \n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n\n        execute_trigger -> to_uppercase_instance.trigger\n        to_uppercase_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n        execute_trigger -> to_uppercase_instance.trigger\n        to_uppercase_instance.trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_string\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n\n        execute_trigger -> to_uppercase_instance.execute\n        to_uppercase_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_string\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        execute_trigger -> to_uppercase_instance.execute\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n        to_uppercase_instance.continue -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 354, y: -53, name: \"input\") property(String) input_string\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(String) output_string\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n        \n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "30": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_up_to_position {\n        in(x: 30, y: 30, name: \"array\") property(List) array_1\n        in(x: 30, y: 90, name: \"position\") property(Number) position_1\n        in(x: 30, y: 150, name: \"execute\") trigger() execute_1\n\n        out(x: 330, y: 60, name: \"reversed_array\") property(List) reversed_array_1\n        out(x: 330, y: 120, name: \"continue\") trigger() continue_1\n\n        instance(x: 150, y: 30) slice_1 root.Std_k98ojb.List.Slice {}\n        instance(x: 150, y: 90) reverse_1 root.Std_k98ojb.List.Reversed {}\n        instance(x: 150, y: 150) slice_2 root.Std_k98ojb.List.Slice {}\n        instance(x: 240, y: 60) concat_1 root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_1.start\n        position_1 -> slice_1.end\n        array_1 -> slice_1.list\n\n        slice_1.listSlice -> reverse_1.list\n\n        position_1 -> slice_2.start\n        -1 -> slice_2.end\n        array_1 -> slice_2.list\n\n        reverse_1.reversed -> concat_1.left\n        slice_2.listSlice -> concat_1.right\n\n        concat_1.result -> reversed_array_1\n        execute_1 -> slice_1.execute\n        slice_1.done -> reverse_1.execute\n        reverse_1.done -> slice_2.execute\n        slice_2.done -> concat_1.execute\n        concat_1.done -> continue_1\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_upto_position {\n        in(x: 150, y: -30, name: \"array\") property(List) array_0f8b3d\n        in(x: 150, y: 20, name: \"position\") property(Number) position_1c2d4e\n        in(x: 150, y: 70, name: \"execute\") trigger() execute_2a4b5c\n\n        out(x: 500, y: 20, name: \"reversedArray\") property(List) reversedArray_3e4f5g\n        out(x: 500, y: 70, name: \"continue\") trigger() continue_4b5c6d\n\n        instance(x: 300, y: -30) slice_6a7b8c root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 20) reversed_9d0e1f root.Std_k98ojb.List.Reversed {}\n        instance(x: 300, y: 70) slice_rest_2b3c4d root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 20) concat_5e6f7g root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_6a7b8c.start\n        position_1c2d4e -> slice_6a7b8c.end\n        array_0f8b3d -> slice_6a7b8c.list\n        slice_6a7b8c.list -> reversed_9d0e1f.list\n        reversed_9d0e1f.list -> concat_5e6f7g.left\n\n        position_1c2d4e -> slice_rest_2b3c4d.start\n        -1 -> slice_rest_2b3c4d.end\n        array_0f8b3d -> slice_rest_2b3c4d.list\n        slice_rest_2b3c4d.list -> concat_5e6f7g.right\n\n        concat_5e6f7g.list -> reversedArray_3e4f5g\n        execute_2a4b5c -> continue_4b5c6d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_upto_position {\n        in(x: 96, y: 15, name: \"array\") property(List) array_0c5f1b\n        in(x: 96, y: 105, name: \"position\") property(Number) position_3a7b1c\n        in(x: 96, y: 195, name: \"execute\") trigger() execute_1a2b3c\n\n        out(x: 480, y: 60, name: \"reversed_array\") property(List) reversed_array_4d5e6f\n        out(x: 480, y: 150, name: \"continue\") trigger() continue_7e8f9g\n\n        instance(x: 240, y: 30) slice_2b3c4d root.Std_k98ojb.List.Slice {}\n        instance(x: 240, y: 120) reversed_5e6f7g root.Std_k98ojb.List.Reversed {}\n        instance(x: 360, y: 75) concat_8f9g0h root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_2b3c4d.start\n        position_3a7b1c -> slice_2b3c4d.end\n        array_0c5f1b -> slice_2b3c4d.list\n        slice_2b3c4d.list -> reversed_5e6f7g.list\n        reversed_5e6f7g.list -> concat_8f9g0h.left\n        position_3a7b1c -> slice_2b3c4d.start\n        -1 -> slice_2b3c4d.end\n        array_0c5f1b -> slice_2b3c4d.list\n        slice_2b3c4d.list -> concat_8f9g0h.right\n        concat_8f9g0h.list -> reversed_array_4d5e6f\n        execute_1a2b3c -> continue_7e8f9g\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_upto_position {\n        in(x: 100, y: 100, name: \"array\") property(List) array_input\n        in(x: 100, y: 150, name: \"position\") property(Number) position_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_input\n\n        out(x: 500, y: 100, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 300, y: 100) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 150) reverse_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 300, y: 200) concat_instance root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.slice -> reverse_instance.list\n\n        reverse_instance.reversed -> concat_instance.left\n        array_input -> concat_instance.right\n        position_input -> concat_instance.right_start\n\n        concat_instance.concatenated -> reversed_array_output\n\n        execute_input -> slice_instance.trigger\n        slice_instance.done -> reverse_instance.trigger\n        reverse_instance.done -> concat_instance.trigger\n        concat_instance.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 100, y: 50, name: \"array\") property(List<Any>) array_input\n        in(x: 100, y: 100, name: \"position\") property(Number) position_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_input\n\n        out(x: 400, y: 100, name: \"reversed_array\") property(List<Any>) reversed_array_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 250, y: 50) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 250, y: 100) reverse_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 250, y: 150) concat_instance root.Std_k98ojb.List.Concat {}\n\n        array_input -> slice_instance.list\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n\n        slice_instance.list -> reverse_instance.list\n\n        reverse_instance.list -> concat_instance.left\n        array_input -> concat_instance.right\n        position_input -> concat_instance.rightStart\n\n        concat_instance.list -> reversed_array_output\n        execute_input -> slice_instance.trigger\n        execute_input -> reverse_instance.trigger\n        execute_input -> concat_instance.trigger\n        concat_instance.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 354, y: -53, name: \"array\") property(List) array_input\n        in(x: 354, y: -153, name: \"position\") property(Number) position_input\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 591, y: 74) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 933, y: 25) reverse_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 714, y: -155) concat_instance root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.list -> reverse_instance.list\n        reverse_instance.list -> concat_instance.left\n        array_input -> concat_instance.right\n        position_input -> concat_instance.right\n\n        concat_instance.list -> reversed_array_output\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_up_to_position {\n        in(x: 160, y: -200, name: \"array\") property(List) array_input\n        in(x: 160, y: -150, name: \"position\") property(Number) position_input\n        in(x: 160, y: -100, name: \"execute\") trigger() execute_input\n\n        out(x: 160, y: 200, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 160, y: 250, name: \"continue\") trigger() continue_output\n\n        instance(x: 400, y: -50) slice_1 root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 50) slice_2 root.Std_k98ojb.List.Slice {}\n        instance(x: 650, y: -50) reverse_1 root.Std_k98ojb.List.Reversed {}\n        instance(x: 900, y: 0) concat_1 root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_1.start\n        position_input -> slice_1.end\n        array_input -> slice_1.list\n\n        position_input -> slice_2.start\n        -1 -> slice_2.end\n        array_input -> slice_2.list\n\n        slice_1.output -> reverse_1.list\n        reverse_1.output -> concat_1.left\n        slice_2.output -> concat_1.right\n\n        concat_1.result -> reversed_array_output\n        execute_input -> slice_1.trigger\n        execute_input -> slice_2.trigger\n        execute_input -> reverse_1.trigger\n        execute_input -> concat_1.trigger\n        concat_1.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_upto_position {\n        in(x: 100, y: 100, name: \"array\") property(List) array_input\n        in(x: 100, y: 150, name: \"position\") property(Number) position_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_input\n\n        out(x: 500, y: 100, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 250, y: 100) slice_1 root.Std_k98ojb.List.Slice {}\n        instance(x: 250, y: 150) slice_2 root.Std_k98ojb.List.Slice {}\n        instance(x: 350, y: 100) reverse root.Std_k98ojb.List.Reversed {}\n        instance(x: 400, y: 125) concat root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_1.start\n        position_input -> slice_1.end\n        array_input -> slice_1.list\n\n        position_input -> slice_2.start\n        -1 -> slice_2.end\n        array_input -> slice_2.list\n\n        slice_1.slice -> reverse.list\n        reverse.reversed -> concat.left\n        slice_2.slice -> concat.right\n\n        concat.list -> reversed_array_output\n        execute_input -> concat.execute\n        concat.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_upto_position {\n        in(x: 100, y: 100, name: \"array\") property(List) array_1\n        in(x: 100, y: 150, name: \"position\") property(Number) position_2\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_3\n\n        out(x: 400, y: 150, name: \"reversed_array\") property(List) reversed_array_4\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_5\n\n        instance(x: 250, y: 100) slice_6 root.Std_k98ojb.List.Slice {}\n        instance(x: 250, y: 150) reversed_7 root.Std_k98ojb.List.Reversed {}\n        instance(x: 250, y: 200) concat_8 root.Std_k98ojb.List.Concat {}\n\n        array_1 -> slice_6.list\n        0 -> slice_6.start\n        position_2 -> slice_6.end\n\n        slice_6.slice -> reversed_7.list\n        reversed_7.reversed -> concat_8.left\n\n        array_1 -> concat_8.right\n        position_2 -> slice_6.start\n        -1 -> slice_6.end\n\n        concat_8.concatenated -> reversed_array_4\n        execute_3 -> concat_8.trigger\n        concat_8.done -> continue_5\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_up_to_position {\n        in(x: 0, y: 0, name: \"array\") property(List) array_input\n        in(x: 0, y: 50, name: \"position\") property(Number) position_input\n        in(x: 0, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 200, y: 0, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 200, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 50, y: 150) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 100, y: 200) reverse_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 150, y: 250) concat_instance root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.slice -> reverse_instance.list\n\n        reverse_instance.reversed -> concat_instance.left\n        slice_instance.end -> concat_instance.right\n\n        concat_instance.list -> reversed_array_output\n\n        execute_trigger -> slice_instance.execute\n        slice_instance.done -> reverse_instance.execute\n        reverse_instance.done -> concat_instance.execute\n        concat_instance.done -> continue_trigger\n    }\n}"
            ],
            "32": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 354, y: -53, name: \"array\") property(List<Number>) array_123abc\n        in(x: 354, y: -153, name: \"number\") property(Number) number_456def\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 1748, y: -10, name: \"index\") property(Number) index_abc123\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_def456\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) equal_11fda root.Std_k98ojb.Logic.Equal {}\n\n        array_123abc -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_11fda.left\n        number_456def -> equal_11fda.right\n        equal_11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_def456\n        if_07b8c7.value -> index_abc123\n        for_8cb3f6.index -> index_abc123\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_def456\n        execute_789ghi -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 152, y: -50, name: \"array\") property(List<Number>) array_5c7b9d\n        in(x: 152, y: 0, name: \"number\") property(Number) number_2a4f6b\n        in(x: 152, y: 50, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 448, y: 0, name: \"index\") property(Number) index_8d2f3a\n        out(x: 448, y: 50, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 400, y: -150) find_6c9d4e root.Std_k98ojb.Iteration.Find {}\n        instance(x: 700, y: -150) equal_3b7a9c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 700, y: -50) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        array_5c7b9d -> find_6c9d4e.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"result\") property(Bool) result_d0fd24\n\n            element_5f51f7 -> equal_3b7a9c.left\n            number_2a4f6b -> equal_3b7a9c.right\n            equal_3b7a9c.result -> result_d0fd24\n        } -> find_6c9d4e.predicate\n\n        find_6c9d4e.item -> if_07b8c7.value\n        find_6c9d4e.index -> index_8d2f3a\n        find_6c9d4e.found -> if_07b8c7.predicate\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> continue_8ba06b\n        execute_27b8c3 -> find_6c9d4e.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 192, y: -40, name: \"array\") property(List<Number>) array_9c3d8f\n        in(x: 188, y: 60, name: \"target\") property(Number) target_4d9a1e\n        in(x: 192, y: 160, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 800, y: 40, name: \"index\") property(Number) index_5f6d3b\n        out(x: 800, y: 160, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 400, y: 40) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: 40) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 600, y: 140) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        execute_27b8c3 -> for_8cb3f6.reset\n        array_9c3d8f -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_2f9d09.left\n        target_4d9a1e -> equal_2f9d09.right\n        equal_2f9d09.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> index_5f6d3b\n        for_8cb3f6.index -> index_5f6d3b\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 154, y: -37, name: \"array\") property(List<Number>) array_12b3c4\n        in(x: 164, y: -137, name: \"target\") property(Number) target_45f6d7\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 674, y: -10, name: \"index\") property(Number) index_5d6f7a\n        out(x: 794, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 591, y: 74) equal_038fce root.Std_k98ojb.Logic.Equal {}\n        instance(x: 933, y: 25) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        array_12b3c4 -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_038fce.left\n        target_45f6d7 -> equal_038fce.right\n        equal_038fce.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        for_8cb3f6.index -> index_5d6f7a\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 150, name: \"number\") property(Number) number_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_input\n\n        out(x: 500, y: 150, name: \"index\") property(Number) index_output\n        out(x: 500, y: 200, name: \"continue\") trigger() continue_output\n\n        instance(x: 300, y: 100) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 200) if_condition root.Std_k98ojb.Std.If {}\n        instance(x: 300, y: 300) equal_check root.Std_k98ojb.Logic.Equal {}\n\n        array_input -> for_loop.items\n        for_loop.index -> index_output\n        for_loop.item -> equal_check.left\n        number_input -> equal_check.right\n        equal_check.result -> if_condition.predicate\n        execute_input -> for_loop.reset\n        for_loop.onItem -> if_condition.execute\n        if_condition.then -> continue_output\n        if_condition.else -> for_loop.next\n        for_loop.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 160, y: -50, name: \"array\") property(List<Number>) array_input\n        in(x: 160, y: 0, name: \"number\") property(Number) number_input\n        in(x: 160, y: 50, name: \"execute\") trigger() execute_trigger\n\n        out(x: 580, y: 0, name: \"index\") property(Number) index_output\n        out(x: 580, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 320, y: 0) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 480, y: 0) if_equal root.Std_k98ojb.Std.If {}\n        instance(x: 480, y: 50) stop_loop root.Std_k98ojb.Std.If {}\n\n        array_input -> for_loop.items\n        for_loop.item -> if_equal.value\n        number_input -> if_equal.input\n        for_loop.index -> index_output\n        for_loop.onItem -> if_equal.execute\n        if_equal.then -> stop_loop.execute\n        stop_loop.then -> continue_trigger\n        stop_loop.else -> for_loop.next\n        execute_trigger -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 148, y: -110, name: \"array\") property(List<Number>) array_7f5b2d\n        in(x: 150, y: -30, name: \"number\") property(Number) number_3e2a9c\n        in(x: 155, y: 50, name: \"execute\") trigger() execute_3f4c8b\n\n        out(x: 1288, y: -40, name: \"index\") property(Number) index_2b9f4e\n        out(x: 1400, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 358, y: -50) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 670, y: -20) equal_9fba8c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 960, y: -30) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        array_7f5b2d -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_9fba8c.left\n        number_3e2a9c -> equal_9fba8c.right\n        equal_9fba8c.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        for_8cb3f6.index -> index_2b9f4e\n        if_07b8c7.then -> for_8cb3f6.reset\n        if_07b8c7.else -> for_8cb3f6.next\n        execute_3f4c8b -> for_8cb3f6.reset\n        for_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 354, y: -53, name: \"array\") property(List<Number>) array_input\n        in(x: 354, y: -153, name: \"number\") property(Number) number_input\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"index\") property(Number) index_output\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 714, y: -155) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_check root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) equal_check root.Std_k98ojb.Logic.Equal {}\n\n        array_input -> for_loop.items\n        for_loop.index -> index_output\n        number_input -> equal_check.left\n        for_loop.item -> equal_check.right\n        equal_check.result -> if_check.predicate\n        execute_trigger -> for_loop.reset\n        for_loop.onItem -> if_check.execute\n        if_check.then -> continue_trigger\n        if_check.else -> for_loop.next\n        for_loop.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 100, y: 50, name: \"array\") property(List) array_input\n        in(x: 100, y: 100, name: \"number\") property(Number) number_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 100, name: \"index\") property(Number) index_output\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 350, y: 50) if_condition root.Std_k98ojb.Std.If {}\n        instance(x: 450, y: 50) equal_condition root.Std_k98ojb.Logic.Equal {}\n\n        array_input -> for_loop.items\n        for_loop.index -> index_output\n        for_loop.item -> equal_condition.left\n        number_input -> equal_condition.right\n        equal_condition.result -> if_condition.predicate\n        for_loop.onItem -> if_condition.execute\n        if_condition.then -> continue_trigger\n        if_condition.else -> for_loop.next\n        execute_trigger -> for_loop.reset\n        for_loop.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 162, y: -52, name: \"array\") property(List<Number>) array_1f2d4c\n        in(x: 163, y: -172, name: \"target\") property(Number) target_3b8f6d\n        in(x: 164, y: -292, name: \"execute\") trigger() execute_5a3d2e\n\n        out(x: 180, y: 70, name: \"index\") property(Number) index_7c4e8f\n        out(x: 180, y: 130, name: \"continue\") trigger() continue_8a9b0c\n\n        instance(x: 400, y: -120) for_9c8d3f root.Std_k98ojb.Std.For {}\n        instance(x: 650, y: -70) equal_4f5d2e root.Std_k98ojb.Logic.Equal {}\n        instance(x: 900, y: -20) if_3d4f2e root.Std_k98ojb.Std.If {}\n\n        execute_5a3d2e -> for_9c8d3f.trigger\n        array_1f2d4c -> for_9c8d3f.items\n        for_9c8d3f.item -> equal_4f5d2e.left\n        target_3b8f6d -> equal_4f5d2e.right\n        equal_4f5d2e.result -> if_3d4f2e.predicate\n        for_9c8d3f.onItem -> if_3d4f2e.execute\n        if_3d4f2e.then -> continue_8a9b0c\n        for_9c8d3f.index -> index_7c4e8f\n        if_3d4f2e.then -> for_9c8d3f.reset\n        if_3d4f2e.else -> for_9c8d3f.next\n        for_9c8d3f.done -> continue_8a9b0c\n    }\n}"
            ],
            "39": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 0, y: 0, name: \"input_list\") property(List) input_list\n        in(x: 0, y: 50, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 0, name: \"result\") property(Bool) result\n        out(x: 400, y: 50, name: \"continue\") trigger() continue\n\n        instance(x: 100, y: 0) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 200, y: 0) is_odd_index root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 0) is_odd_number root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 50) if_odd_index root.Std_k98ojb.Std.If {}\n        instance(x: 300, y: 50) if_odd_number root.Std_k98ojb.Std.If {}\n        instance(x: 400, y: 100) not_odd_number root.Std_k98ojb.Logic.Not {}\n\n        input_list -> for_loop.items\n        for_loop.index -> is_odd_index.value\n        2 -> is_odd_index.divisor\n        is_odd_index.result -> if_odd_index.input\n        for_loop.onItem -> if_odd_index.then\n\n        for_loop.item -> is_odd_number.value\n        2 -> is_odd_number.divisor\n        is_odd_number.result -> if_odd_number.input\n        if_odd_index.then -> if_odd_number.execute\n\n        if_odd_number.else -> not_odd_number.input\n        not_odd_number.output -> result\n        not_odd_number.output -> continue\n\n        if_odd_number.then -> for_loop.next\n        if_odd_index.else -> for_loop.next\n        for_loop.done -> continue\n\n        execute -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 120, y: 20, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 480, y: 20, name: \"result\") property(Bool) result\n\n        instance(x: 240, y: 20) for_1a2b3c root.Std_k98ojb.Std.For {}\n        instance(x: 360, y: 20) if_4d5e6f root.Std_k98ojb.Std.If {}\n        instance(x: 600, y: 20) equal_7g8h9i root.Std_k98ojb.Logic.Equal {}\n        instance(x: 720, y: 20) modulo_j1k2l3 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 840, y: 20) modulo_m4n5o6 root.Std_k98ojb.Math.Modulo {}\n\n        input_list -> for_1a2b3c.items\n        for_1a2b3c.index -> modulo_j1k2l3.value\n        2 -> modulo_j1k2l3.divisor\n        modulo_j1k2l3.result -> equal_7g8h9i.left\n        1 -> equal_7g8h9i.right\n        equal_7g8h9i.result -> if_4d5e6f.input\n        for_1a2b3c.item -> modulo_m4n5o6.value\n        2 -> modulo_m4n5o6.divisor\n        modulo_m4n5o6.result -> if_4d5e6f.value\n        if_4d5e6f.then -> result\n        for_1a2b3c.done -> result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 150, y: 150, name: \"input_list\") property(List) input_list_123456\n        in(x: 150, y: 200, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 400, y: 150, name: \"result\") property(Bool) result_654321\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 300, y: 100) for_loop_1 root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: 100) mod_check root.Std_k98ojb.Math.Modulo {}\n        instance(x: 600, y: 200) is_odd root.Std_k98ojb.Math.Modulo {}\n        instance(x: 800, y: 150) if_check root.Std_k98ojb.Std.If {}\n        instance(x: 1000, y: 150) logic_and root.Std_k98ojb.Logic.And {}\n\n        input_list_123456 -> for_loop_1.items\n        for_loop_1.index -> mod_check.value\n        2 -> mod_check.divisor\n        mod_check.result -> logic_and.left\n\n        for_loop_1.item -> is_odd.value\n        2 -> is_odd.divisor\n        is_odd.result -> logic_and.right\n\n        logic_and.result -> if_check.predicate\n        for_loop_1.onItem -> if_check.execute\n\n        if_check.then -> continue_fedcba\n        if_check.else -> result_654321\n        false -> result_654321\n\n        for_loop_1.done -> result_654321\n        true -> result_654321\n\n        execute_abcdef -> for_loop_1.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 110, y: -64, name: \"input_list\") property(List<Number>) input_list_5f0b12\n        in(x: 111, y: 88, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1764, y: -10, name: \"result\") property(Bool) result_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 347, y: -175) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 592, y: -175) mod_0c9a2f root.Std_k98ojb.Math.Modulo {}\n        instance(x: 840, y: -175) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1088, y: -175) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1336, y: -175) mod_b720d7 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1584, y: -175) equal_9fba8c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1824, y: -175) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_list_5f0b12 -> for_8cb3f6.items\n        for_8cb3f6.index -> mod_0c9a2f.value\n        2 -> mod_0c9a2f.divisor\n        mod_0c9a2f.result -> equal_2f9d09.left\n        1 -> equal_2f9d09.right\n        equal_2f9d09.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> mod_b720d7.value\n        for_8cb3f6.item -> mod_b720d7.value\n        2 -> mod_b720d7.divisor\n        mod_b720d7.result -> equal_9fba8c.left\n        1 -> equal_9fba8c.right\n        equal_9fba8c.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n        if_e19a62.else -> continue_8ba06b\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_e19a62.else -> for_8cb3f6.next\n        if_07b8c7.else -> for_8cb3f6.next\n        if_e19a62.value -> result_f3db9f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in the given list.\") check_odd_indices {\n        in(x: 153, y: -106, name: \"list\") property(List<Number>) list_7f8c2d\n        in(x: 162, y: -269, name: \"execute\") trigger() execute_8d2f3b\n\n        out(x: 1734, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 392, y: -142) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 733, y: -93) modulo_0b9f7d root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1054, y: -152) equal_1f8d7b root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1324, y: -74) modulo_5c9f3a root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1643, y: -146) equal_2b9f7a root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1942, y: -208) if_4b8f3c root.Std_k98ojb.Std.If {}\n\n        list_7f8c2d -> for_8cb3f6.items\n        execute_8d2f3b -> for_8cb3f6.reset\n        for_8cb3f6.index -> modulo_0b9f7d.value\n        2 -> modulo_0b9f7d.divisor\n        modulo_0b9f7d.result -> equal_1f8d7b.left\n        1 -> equal_1f8d7b.right\n        equal_1f8d7b.result -> if_4b8f3c.predicate\n        for_8cb3f6.onItem -> if_4b8f3c.execute\n        for_8cb3f6.item -> modulo_5c9f3a.value\n        2 -> modulo_5c9f3a.divisor\n        modulo_5c9f3a.result -> equal_2b9f7a.left\n        1 -> equal_2b9f7a.right\n        equal_2b9f7a.result -> out_f3db9f\n        if_4b8f3c.then -> continue_8ba06b\n        if_4b8f3c.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 75, y: -46, name: \"input_list\") property(List) input_list_12a3b4\n        in(x: 74, y: -163, name: \"execute\") trigger() execute_45c6d7\n\n        out(x: 510, y: -35, name: \"result\") property(Bool) result_89d5f2\n        out(x: 672, y: 85, name: \"continue\") trigger() continue_4b5c7e\n\n        instance(x: 263, y: -90) filter_6d7f8e root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 373, y: 74) not_9c8f7d root.Std_k98ojb.Logic.Not {}\n        instance(x: 486, y: 156) is_empty_3b2f9d root.Std_k98ojb.List.IsEmpty {}\n\n        input_list_12a3b4 -> filter_6d7f8e.items\n        func() {\n            in(x: -75, y: 45, name: \"item\") property(Number) item_4f3e2d\n            in(x: -75, y: 135, name: \"index\") property(Number) index_5a6b7c\n\n            out(x: 370, y: 46, name: \"out\") property(Bool) out_7e8f9a\n\n            instance(x: 140, y: 45) modulo_2b3c4d root.Std_k98ojb.Math.Modulo {}\n            instance(x: 220, y: 135) equal_5d6e7f root.Std_k98ojb.Logic.Equal {}\n\n            index_5a6b7c -> modulo_2b3c4d.value\n            2 -> modulo_2b3c4d.divisor\n            modulo_2b3c4d.result -> equal_5d6e7f.left\n            1 -> equal_5d6e7f.right\n            equal_5d6e7f.result -> out_7e8f9a\n        } -> filter_6d7f8e.handler\n\n        filter_6d7f8e.output_list -> is_empty_3b2f9d.list\n        is_empty_3b2f9d.isEmpty -> not_9c8f7d.input\n        not_9c8f7d.output -> result_89d5f2\n        execute_45c6d7 -> filter_6d7f8e.handler.execute\n        filter_6d7f8e.handler.continue -> continue_4b5c7e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in a given list.\") check_odd_indices {\n        in(x: 90, y: 90, name: \"input\") property(List<Number>) input_list\n\n        out(x: 700, y: 90, name: \"out\") property(Bool) result\n\n        instance(x: 250, y: 90) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 50) mod_2 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 130) mod_2_check root.Std_k98ojb.Math.Modulo {}\n        instance(x: 550, y: 90) logic_and root.Std_k98ojb.Logic.And {}\n        instance(x: 650, y: 90) if_check root.Std_k98ojb.Std.If {}\n        instance(x: 550, y: 160) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 550, y: 20) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n        input_list -> for_loop.items\n        for_loop.index -> mod_2.value\n        2 -> mod_2.divisor\n        mod_2.result -> equal_zero.left\n        0 -> equal_zero.right\n        equal_zero.result -> logic_and.left\n\n        for_loop.item -> mod_2_check.value\n        2 -> mod_2_check.divisor\n        mod_2_check.result -> not_equal_zero.left\n        0 -> not_equal_zero.right\n        not_equal_zero.result -> logic_and.right\n\n        logic_and.result -> if_check.predicate\n        if_check.then -> for_loop.next\n        if_check.else -> for_loop.done\n\n        for_loop.done -> result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in a given list.\") check_odd_indices {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n\n        out(x: 300, y: 100, name: \"result\") property(Bool) result\n\n        instance(x: 200, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 50) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"index % 2 != 0 && item % 2 != 0\"\n        }\n        instance(x: 600, y: 50) logic_and root.Std_k98ojb.Logic.And {}\n        instance(x: 800, y: 50) not_equal root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1000, y: 50) final_if root.Std_k98ojb.Std.If {}\n\n        input_list -> for_loop.items\n        for_loop.index -> if_expression.index\n        for_loop.item -> if_expression.item\n        if_expression.value -> logic_and.left\n        true -> logic_and.right\n        logic_and.result -> not_equal.left\n        false -> not_equal.right\n        not_equal.result -> final_if.predicate\n        final_if.then -> result\n        false -> result\n        for_loop.onItem -> final_if.execute\n        for_loop.done -> result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) filter_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) modulo_f11fda root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(index % 2 != 0) && (item % 2 != 0)\"\n        }\n        instance(x: 2136, y: -356) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1088, y: -256) notempty_b4554f root.Std_k98ojb.List.NotEmpty {}\n\n        input_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.item -> expression_b720d7.gen_0\n        for_8cb3f6.index -> expression_b720d7.gen_1\n        expression_b720d7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> filter_6030c9.handler\n        if_07b8c7.else -> continue_8ba06b\n        filter_6030c9.output_list -> notempty_b4554f.list\n        notempty_b4554f.isEmpty -> not_80a119.input\n        not_80a119.result -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -189, y: 222) check_odd_indices_f0be66 root.main.check_odd_indices {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in a given list.\") check_odd_indices {\n        in(x: 160, y: -160, name: \"input_list\") property(List<Number>) input_list_6a4b1f\n        in(x: 160, y: -120, name: \"execute\") trigger() execute_1f3c4d\n\n        out(x: 580, y: -160, name: \"result\") property(Bool) result_3f4b2d\n        out(x: 580, y: -120, name: \"continue\") trigger() continue_4f3b2c\n\n        instance(x: 360, y: -320) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: -320) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1080, y: -320) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 600, y: -240) modulo_4b3f2d root.Std_k98ojb.Math.Modulo {}\n        instance(x: 900, y: -240) modulo_3f2b4d root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1200, y: -240) not_equal_5f3b2d root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1000, y: -160) equal_2f3b4d root.Std_k98ojb.Logic.Equal {}\n\n        input_list_6a4b1f -> for_8cb3f6.items\n        for_8cb3f6.index -> modulo_4b3f2d.value\n        2 -> modulo_4b3f2d.divisor\n        modulo_4b3f2d.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n\n        for_8cb3f6.item -> modulo_3f2b4d.value\n        2 -> modulo_3f2b4d.divisor\n        modulo_3f2b4d.result -> not_equal_5f3b2d.left\n        0 -> not_equal_5f3b2d.right\n        not_equal_5f3b2d.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n\n        if_e19a62.then -> equal_2f3b4d.left\n        false -> equal_2f3b4d.right\n        equal_2f3b4d.result -> result_3f4b2d\n\n        if_e19a62.else -> for_8cb3f6.next\n        if_07b8c7.else -> for_8cb3f6.next\n\n        for_8cb3f6.done -> continue_4f3b2c\n        execute_1f3c4d -> for_8cb3f6.reset\n    }\n}"
            ],
            "43": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 100, y: 100, name: \"numbers\") property(List) numbers\n\n        out(x: 400, y: 100, name: \"first_odd\") property(Number) first_odd\n\n        instance(x: 200, y: 100) find_odd root.Std_k98ojb.Iteration.Find {\n            handler: func() {\n                in(x: 100, y: 100, name: \"number\") property(Number) number\n\n                out(x: 300, y: 100, name: \"is_odd\") property(Bool) is_odd\n\n                instance(x: 200, y: 100) modulo root.Std_k98ojb.Math.Modulo {}\n                instance(x: 300, y: 100) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n                number -> modulo.value\n                2 -> modulo.divisor\n                modulo.result -> not_equal.left\n                0 -> not_equal.right\n                not_equal.result -> is_odd\n            }\n        }\n\n        numbers -> find_odd.items\n        find_odd.item -> first_odd\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 100, y: 100, name: \"numbers\") property(List<Number>) numbers_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 100, name: \"odd_number\") property(Number) odd_number_output\n        out(x: 500, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 100) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 300, y: 200) modulo_check root.Std_k98ojb.Math.Modulo {}\n\n        numbers_input -> find_odd.items\n        find_odd.item -> odd_number_output\n        find_odd.found -> continue_trigger\n\n        func() {\n            in(x: 100, y: 100, name: \"number\") property(Number) number_input\n            out(x: 300, y: 100, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 200, y: 100) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n\n            number_input -> modulo_check.value\n            2 -> modulo_check.divisor\n            modulo_check.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> is_odd_output\n        } -> find_odd.predicate\n\n        execute_trigger -> find_odd.trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 30, y: -23, name: \"numbers\") property(List<Number>) numbers_1f4c5d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"odd_number\") property(Number) odd_number_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 250, y: -150) find_6030c9 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 600, y: -150) modulo_038fce root.Std_k98ojb.Math.Modulo {}\n        instance(x: 850, y: -150) not_equal_8cb3f6 root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_1f4c5d -> find_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"number\") property(Number) number_5f51f7\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_d0fd24\n\n            instance(x: 106, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n            number_5f51f7 -> modulo_038fce.value\n            2 -> modulo_038fce.divisor\n            modulo_038fce.result -> equal_2f9d09.left\n            1 -> equal_2f9d09.right\n            equal_2f9d09.result -> is_odd_d0fd24\n        } -> find_6030c9.predicate\n\n        find_6030c9.item -> odd_number_f3db9f\n        execute_27b8c3 -> find_6030c9.execute\n        find_6030c9.item -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) find_6030c9 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 933, y: 25) modulo_f11fda root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1121, y: -54) not_equal_07b8c7 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1504, y: -400) constant_1_b720d7 root.Std_k98ojb.Std.Constant {\n            value: 1\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_list -> find_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            element_5f51f7 -> modulo_f11fda.value\n            constant_1_b720d7.value -> modulo_f11fda.divisor\n            modulo_f11fda.result -> not_equal_07b8c7.left\n            0 -> not_equal_07b8c7.right\n            not_equal_07b8c7.result -> out_d0fd24\n        } -> find_6030c9.predicate\n\n        find_6030c9.item -> out_f3db9f\n        execute_27b8c3 -> find_6030c9.execute\n        find_6030c9.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 354, y: -53, name: \"numbers\") property(List) numbers_input\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"first_odd\") property(Number) first_odd_output\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) find_instance root.Std_k98ojb.Iteration.Find {}\n        instance(x: 714, y: -155) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 933, y: 25) not_equal_instance root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_input -> find_instance.items\n        find_instance.item -> first_odd_output\n        find_instance.found -> continue_trigger\n\n        func() {\n            in(x: -76, y: 46, name: \"number\") property(Number) number_input\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_output\n\n            number_input -> modulo_instance.value\n            2 -> modulo_instance.divisor\n            modulo_instance.result -> not_equal_instance.left\n            0 -> not_equal_instance.right\n            not_equal_instance.result -> is_odd_output\n        } -> find_instance.predicate\n\n        execute_trigger -> find_instance.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 130, y: -180, name: \"numbers\") property(List<Number>) numbers_1a2b3c\n        in(x: 150, y: -200, name: \"execute\") trigger() execute_2b3c4d\n\n        out(x: 400, y: -180, name: \"oddNumber\") property(Number) oddNumber_3c4d5e\n        out(x: 420, y: -200, name: \"continue\") trigger() continue_4d5e6f\n\n        instance(x: 300, y: -100) find_5e6f7g root.Std_k98ojb.Iteration.Find {}\n        instance(x: 200, y: -100) modulo_6f7g8h root.Std_k98ojb.Math.Modulo {}\n\n        numbers_1a2b3c -> find_5e6f7g.items\n        func() {\n            in(x: -50, y: 0, name: \"number\") property(Number) number_7g8h9i\n\n            out(x: 250, y: 0, name: \"isOdd\") property(Bool) isOdd_8h9i0j\n\n            instance(x: 100, y: 0) equal_9i0j1k root.Std_k98ojb.Logic.Equal {}\n\n            number_7g8h9i -> modulo_6f7g8h.value\n            2 -> modulo_6f7g8h.divisor\n            modulo_6f7g8h.result -> equal_9i0j1k.left\n            1 -> equal_9i0j1k.right\n            equal_9i0j1k.result -> isOdd_8h9i0j\n        } -> find_5e6f7g.predicate\n\n        find_5e6f7g.item -> oddNumber_3c4d5e\n        execute_2b3c4d -> find_5e6f7g.execute\n        find_5e6f7g.done -> continue_4d5e6f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 354, y: -53, name: \"numbers\") property(List) numbers_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"first_odd\") property(Number) first_odd_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) find_6030c9 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 933, y: 25) modulo_f11fda root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1121, y: -54) not_equal_07b8c7 root.Std_k98ojb.Logic.NotEqual {}\n        \n        numbers_f5c03d -> find_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"number\") property(Number) number_5f51f7\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_d0fd24\n\n            instance(x: 106, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n            number_5f51f7 -> modulo_f11fda.value\n            2 -> modulo_f11fda.divisor\n            modulo_f11fda.result -> equal_2f9d09.left\n            0 -> equal_2f9d09.right\n            equal_2f9d09.result -> not_equal_07b8c7.left\n            false -> not_equal_07b8c7.right\n            not_equal_07b8c7.result -> is_odd_d0fd24\n        } -> find_6030c9.predicate\n\n        find_6030c9.item -> first_odd_f3db9f\n        execute_27b8c3 -> find_6030c9.trigger\n        find_6030c9.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 162, y: -44, name: \"numbers\") property(List<Number>) numbers_45b8c3\n        in(x: 168, y: -174, name: \"execute\") trigger() execute_6f3a2b\n\n        out(x: 1098, y: -60, name: \"first_odd\") property(Number) first_odd_1f2d9a\n        out(x: 1138, y: 120, name: \"continue\") trigger() continue_9f8b6c\n\n        instance(x: 408, y: -188) find_3c9f7b root.Std_k98ojb.Iteration.Find {}\n        instance(x: 711, y: -34) if_7a8c9b root.Std_k98ojb.Std.If {}\n        instance(x: 480, y: 72) modulo_5d3b8a root.Std_k98ojb.Math.Modulo {}\n\n        numbers_45b8c3 -> find_3c9f7b.items\n        func() {\n            in(x: -78, y: 22, name: \"item\") property(Number) item_2d7f3b\n\n            out(x: 382, y: 29, name: \"is_odd\") property(Bool) is_odd_5e8c7a\n\n            instance(x: 106, y: 17) equal_8c9d7f root.Std_k98ojb.Logic.Equal {}\n            instance(x: 210, y: 20) modulo_7b3d8c root.Std_k98ojb.Math.Modulo {}\n            item_2d7f3b -> modulo_7b3d8c.value\n            2 -> modulo_7b3d8c.divisor\n            modulo_7b3d8c.result -> equal_8c9d7f.left\n            1 -> equal_8c9d7f.right\n            equal_8c9d7f.result -> is_odd_5e8c7a\n        } -> find_3c9f7b.predicate\n        find_3c9f7b.item -> if_7a8c9b.predicate\n        execute_6f3a2b -> find_3c9f7b.execute\n        if_7a8c9b.then -> continue_9f8b6c\n        if_7a8c9b.value -> first_odd_1f2d9a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 174, y: -39, name: \"numbers\") property(List<Number>) numbers_23f4a5\n        in(x: 168, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 474, y: -12, name: \"oddNumber\") property(Number) oddNumber_f3db9f\n        out(x: 614, y: 108, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 432, y: -160) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 284, y: -260) modulo_odd root.Std_k98ojb.Math.Modulo {}\n        instance(x: 558, y: -268) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_23f4a5 -> find_odd.items\n        func() {\n            in(x: -75, y: 0, name: \"number\") property(Number) number_5f51f7\n\n            out(x: 375, y: 2, name: \"isOdd\") property(Bool) isOdd_d0fd24\n\n            number_5f51f7 -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> isOdd_d0fd24\n        } -> find_odd.predicate\n\n        find_odd.item -> oddNumber_f3db9f\n        execute_27b8c3 -> find_odd.execute\n        find_odd.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 108, y: -49, name: \"numbers\") property(List<Number>) numbers_2a3b6f\n        in(x: 156, y: -191, name: \"execute\") trigger() execute_8c7a2d\n\n        out(x: 820, y: -33, name: \"oddNumber\") property(Number) oddNumber_3b4c1e\n        out(x: 866, y: 86, name: \"continue\") trigger() continue_5d9f2b\n\n        instance(x: 418, y: -106) find_1a2b3c root.Std_k98ojb.Iteration.Find {}\n        instance(x: 556, y: -226) modulo_4b5c6d root.Std_k98ojb.Math.Modulo {}\n        instance(x: 702, y: -115) notEqual_7e8f9g root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_2a3b6f -> find_1a2b3c.items\n        func() {\n            in(x: -52, y: 40, name: \"number\") property(Number) number_9f8e7d\n\n            out(x: 368, y: 46, name: \"out\") property(Bool) out_6e5d4c\n\n            number_9f8e7d -> modulo_4b5c6d.value\n            2 -> modulo_4b5c6d.divisor\n            modulo_4b5c6d.result -> notEqual_7e8f9g.left\n            0 -> notEqual_7e8f9g.right\n            notEqual_7e8f9g.result -> out_6e5d4c\n        } -> find_1a2b3c.predicate\n\n        find_1a2b3c.item -> oddNumber_3b4c1e\n        execute_8c7a2d -> find_1a2b3c.execute\n        find_1a2b3c.done -> continue_5d9f2b\n    }\n}"
            ],
            "44": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 150, y: -30, name: \"n\") property(Number) n_input\n\n        out(x: 550, y: -30, name: \"sum\") property(Number) sum_output\n\n        instance(x: 250, y: -100) generaterange_odd_numbers root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 450, y: -100) filter_odd_numbers root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 650, y: -100) map_square_numbers root.Std_k98ojb.Iteration.Map {}\n        instance(x: 850, y: -100) reduce_sum_squares root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd_numbers.from\n        n_input -> generaterange_odd_numbers.to\n        generaterange_odd_numbers.list -> filter_odd_numbers.items\n\n        func() {\n            in(x: -50, y: 50, name: \"number\") property(Number) number_input\n\n            out(x: 150, y: 50, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 50, y: 50) modulo_check root.Std_k98ojb.Math.Modulo {}\n\n            number_input -> modulo_check.value\n            2 -> modulo_check.divisor\n            modulo_check.result -> is_odd_output\n        } -> filter_odd_numbers.handler\n\n        filter_odd_numbers.output_list -> map_square_numbers.items\n\n        func() {\n            in(x: -50, y: 50, name: \"number\") property(Number) number_input\n\n            out(x: 150, y: 50, name: \"square\") property(Number) square_output\n\n            instance(x: 50, y: 50) square_calc root.Std_k98ojb.Math.Mul {}\n\n            number_input -> square_calc.first\n            number_input -> square_calc.second\n            square_calc.result -> square_output\n        } -> map_square_numbers.handler\n\n        map_square_numbers.output_list -> reduce_sum_squares.items\n\n        func() {\n            in(x: -50, y: 50, name: \"acc\") property(Number) acc_input\n            in(x: -50, y: 100, name: \"number\") property(Number) number_input\n\n            out(x: 150, y: 75, name: \"sum\") property(Number) sum_output\n\n            instance(x: 50, y: 75) add_numbers root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_numbers.first\n            number_input -> add_numbers.second\n            add_numbers.result -> sum_output\n        } -> reduce_sum_squares.reducer\n\n        0 -> reduce_sum_squares.initial_value\n        reduce_sum_squares.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 90, y: 50, name: \"n\") property(Number) n_1a2b3c\n        in(x: 90, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 90, y: 300, name: \"sum\") property(Number) sum_7g8h9i\n        out(x: 90, y: 350, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 250, y: 50) generaterange_3m4n5o root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 450, y: 50) map_6p7q8r root.Std_k98ojb.Iteration.Map {}\n        instance(x: 650, y: 50) reduce_9s0t1u root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_3m4n5o.from\n        n_1a2b3c -> generaterange_3m4n5o.to\n        generaterange_3m4n5o.list -> map_6p7q8r.items\n\n        func() {\n            in(x: -50, y: 50, name: \"item\") property(Number) item_2v3w4x\n\n            out(x: 150, y: 50, name: \"square\") property(Number) square_5y6z7a\n\n            instance(x: 50, y: 50) mul_8b9c0d root.Std_k98ojb.Math.Mul {}\n            instance(x: 50, y: 100) expression_1e2f3g root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * i - 1)\"\n            }\n\n            item_2v3w4x -> expression_1e2f3g.gen_0\n            expression_1e2f3g.result -> mul_8b9c0d.first\n            expression_1e2f3g.result -> mul_8b9c0d.second\n            mul_8b9c0d.result -> square_5y6z7a\n        } -> map_6p7q8r.handler\n\n        map_6p7q8r.output_list -> reduce_9s0t1u.items\n\n        func() {\n            in(x: -50, y: 50, name: \"acc\") property(Number) acc_4h5i6j\n            in(x: -50, y: 100, name: \"value\") property(Number) value_7k8l9m\n\n            out(x: 150, y: 50, name: \"result\") property(Number) result_0n1o2p\n\n            instance(x: 50, y: 50) add_3q4r5s root.Std_k98ojb.Math.Add {}\n\n            acc_4h5i6j -> add_3q4r5s.first\n            value_7k8l9m -> add_3q4r5s.second\n            add_3q4r5s.result -> result_0n1o2p\n        } -> reduce_9s0t1u.reducer\n\n        0 -> reduce_9s0t1u.initialValue\n        reduce_9s0t1u.result -> sum_7g8h9i\n        execute_4d5e6f -> reduce_9s0t1u.reset\n        reduce_9s0t1u.done -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 150, y: 50, name: \"n\") property(Number) n_input\n\n        out(x: 750, y: 50, name: \"sum\") property(Number) sum_output\n\n        instance(x: 300, y: 50) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 450, y: 50) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 50) map_square root.Std_k98ojb.Iteration.Map {}\n        instance(x: 900, y: 50) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        generaterange_odd.list -> filter_odd.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 0, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 0) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 0, y: 100) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> equal_zero.left\n            1 -> equal_zero.right\n            equal_zero.result -> is_odd_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_square.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 0, name: \"square\") property(Number) square_output\n\n            instance(x: 0, y: 0) mul_square root.Std_k98ojb.Math.Mul {}\n\n            item_input -> mul_square.first\n            item_input -> mul_square.second\n            mul_square.result -> square_output\n        } -> map_square.handler\n\n        map_square.output_list -> reduce_sum.items\n\n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(Number) acc_input\n            in(x: -100, y: 100, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 50, name: \"sum\") property(Number) sum_output\n\n            instance(x: 0, y: 50) add_sum root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_sum.first\n            item_input -> add_sum.second\n            add_sum.result -> sum_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 160, y: -80, name: \"n\") property(Number) n_input\n\n        out(x: 720, y: 80, name: \"sum\") property(Number) sum_output\n\n        instance(x: 320, y: 0) generaterange_odd_numbers root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 480, y: 0) filter_odd_numbers root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 640, y: 0) map_square_numbers root.Std_k98ojb.Iteration.Map {}\n        instance(x: 800, y: 0) reduce_sum_squares root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd_numbers.from\n        n_input -> generaterange_odd_numbers.to\n        generaterange_odd_numbers.list -> filter_odd_numbers.items\n\n        func() {\n            in(x: -80, y: 0, name: \"item\") property(Number) item_input\n\n            out(x: 80, y: 0, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 0) modulo_check root.Std_k98ojb.Math.Modulo {}\n            instance(x: 160, y: 0) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n\n            item_input -> modulo_check.value\n            2 -> modulo_check.divisor\n            modulo_check.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> is_odd_output\n        } -> filter_odd_numbers.handler\n\n        filter_odd_numbers.output_list -> map_square_numbers.items\n\n        func() {\n            in(x: -80, y: 0, name: \"item\") property(Number) item_input\n\n            out(x: 80, y: 0, name: \"square\") property(Number) square_output\n\n            instance(x: 0, y: 0) square_calculation root.Std_k98ojb.Math.Mul {}\n\n            item_input -> square_calculation.first\n            item_input -> square_calculation.second\n            square_calculation.result -> square_output\n        } -> map_square_numbers.handler\n\n        map_square_numbers.output_list -> reduce_sum_squares.items\n\n        func() {\n            in(x: -80, y: 0, name: \"accumulated\") property(Number) accumulated_input\n            in(x: -80, y: 80, name: \"current\") property(Number) current_input\n\n            out(x: 80, y: 40, name: \"sum\") property(Number) sum_output\n\n            instance(x: 0, y: 40) add_squares root.Std_k98ojb.Math.Add {}\n\n            accumulated_input -> add_squares.first\n            current_input -> add_squares.second\n            add_squares.result -> sum_output\n        } -> reduce_sum_squares.reducer\n\n        0 -> reduce_sum_squares.initial\n        reduce_sum_squares.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers\") sum_of_squares_of_odds {\n        in(x: 100, y: 100, name: \"n\") property(Number) n_input\n\n        out(x: 800, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 100) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 100) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 100) map_square root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1000, y: 100) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        generaterange_odd.list -> filter_odd.items\n\n        func() {\n            in(x: -100, y: 100, name: \"item\") property(Number) item_input\n            out(x: 100, y: 100, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 100) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 0, y: 200) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> equal_zero.left\n            1 -> equal_zero.right\n            equal_zero.result -> is_odd_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_square.items\n\n        func() {\n            in(x: -100, y: 100, name: \"item\") property(Number) item_input\n            out(x: 100, y: 100, name: \"square\") property(Number) square_output\n\n            instance(x: 0, y: 100) mul_square root.Std_k98ojb.Math.Mul {}\n\n            item_input -> mul_square.first\n            item_input -> mul_square.second\n            mul_square.result -> square_output\n        } -> map_square.handler\n\n        map_square.output_list -> reduce_sum.items\n\n        func() {\n            in(x: -100, y: 100, name: \"accumulated\") property(Number) accumulated_input\n            in(x: -100, y: 200, name: \"current\") property(Number) current_input\n            out(x: 100, y: 100, name: \"sum\") property(Number) sum_output\n\n            instance(x: 0, y: 100) add_sum root.Std_k98ojb.Math.Add {}\n\n            accumulated_input -> add_sum.first\n            current_input -> add_sum.second\n            add_sum.result -> sum_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 354, y: -53, name: \"n\") property(Number) n_input\n\n        out(x: 1748, y: -10, name: \"sum\") property(Number) sum_output\n\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 714, y: -155) filter_odd_numbers root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 933, y: 25) map_square_numbers root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1121, y: -54) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_038fce.from\n        n_input -> generaterange_038fce.to\n        generaterange_038fce.list -> filter_odd_numbers.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 250, y: 17) equal_to_one root.Std_k98ojb.Logic.Equal {}\n\n            element -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_to_one.left\n            1 -> equal_to_one.right\n            equal_to_one.result -> is_odd\n        } -> filter_odd_numbers.handler\n\n        filter_odd_numbers.output_list -> map_square_numbers.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element\n\n            out(x: 382, y: 19, name: \"square\") property(Number) square\n\n            instance(x: 106, y: 17) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n\n            element -> mul_2f9d09.first\n            element -> mul_2f9d09.second\n            mul_2f9d09.result -> square\n        } -> map_square_numbers.handler\n\n        map_square_numbers.output_list -> reduce_sum.items\n\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc\n            in(x: -76, y: 76, name: \"element\") property(Number) element\n\n            out(x: 382, y: 19, name: \"sum\") property(Number) sum\n\n            instance(x: 106, y: 17) add_2f9d09 root.Std_k98ojb.Math.Add {}\n\n            acc -> add_2f9d09.first\n            element -> add_2f9d09.second\n            add_2f9d09.result -> sum\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 714, y: -155) reduce_8cb3f6 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(2 * i - 1)\"\n        }\n        instance(x: 1496, y: -187) expression_9fba8c root.Std_k98ojb.Math.Expression {\n            expression: \"(i * i)\"\n        }\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        1 -> generaterange_038fce.from\n        input_f5c03d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1)\"\n            }\n            element_5f51f7 -> expression_2f9d09.gen_0\n            expression_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> reduce_8cb3f6.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 146, name: \"current\") property(Number) current_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n            current_5f51f7 -> mul_2f9d09.first\n            current_5f51f7 -> mul_2f9d09.second\n            mul_2f9d09.result -> add_b4554f.first\n            accumulated_5f51f7 -> add_b4554f.second\n            add_b4554f.result -> out_d0fd24\n        } -> reduce_8cb3f6.reducer\n        0 -> reduce_8cb3f6.initial\n        reduce_8cb3f6.result -> out_f3db9f\n        execute_27b8c3 -> reduce_8cb3f6.execute\n        reduce_8cb3f6.done -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) sum_of_squares_of_odd_numbers_f0be66 root.main.sum_of_squares_of_odd_numbers {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 140, y: -45, name: \"n\") property(Number) n_7a8c1b\n        in(x: 140, y: 40, name: \"execute\") trigger() execute_8d4b9c\n\n        out(x: 900, y: 0, name: \"sum\") property(Number) sum_6e9f8d\n        out(x: 900, y: 100, name: \"continue\") trigger() continue_1b2c3d\n\n        instance(x: 360, y: -50) generaterange_1a2b3c root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 580, y: -50) map_4d5e6f root.Std_k98ojb.Iteration.Map {}\n        instance(x: 800, y: -50) reduce_7g8h9i root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1120, y: -50) add_9j0k1l root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_1a2b3c.from\n        n_7a8c1b -> generaterange_1a2b3c.to\n        generaterange_1a2b3c.list -> map_4d5e6f.items\n\n        func() {\n            in(x: -80, y: 0, name: \"element\") property(Number) element_0a1b2c\n\n            out(x: 200, y: 0, name: \"out\") property(Number) out_3d4e5f\n\n            instance(x: 40, y: 0) expression_6g7h8i root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1) ^ 2\"\n            }\n            element_0a1b2c -> expression_6g7h8i.gen_0\n            expression_6g7h8i.result -> out_3d4e5f\n        } -> map_4d5e6f.handler\n\n        map_4d5e6f.output_list -> reduce_7g8h9i.items\n\n        func() {\n            in(x: -80, y: 0, name: \"acc\") property(Number) acc_9a0b1c\n            in(x: -80, y: 40, name: \"value\") property(Number) value_2d3e4f\n\n            out(x: 200, y: 20, name: \"out\") property(Number) out_5g6h7i\n\n            instance(x: 40, y: 20) add_8j9k0l root.Std_k98ojb.Math.Add {}\n            acc_9a0b1c -> add_8j9k0l.first\n            value_2d3e4f -> add_8j9k0l.second\n            add_8j9k0l.result -> out_5g6h7i\n        } -> reduce_7g8h9i.reducer\n\n        0 -> reduce_7g8h9i.initial\n        reduce_7g8h9i.result -> sum_6e9f8d\n        execute_8d4b9c -> reduce_7g8h9i.execute\n        reduce_7g8h9i.done -> continue_1b2c3d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(2 * i - 1) ^ 2\"\n        }\n        instance(x: 2136, y: -356) reduce_f3a7b6 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        \n        1 -> generaterange_038fce.from\n        input_f5c03d -> generaterange_038fce.to\n        generaterange_038fce.list -> for_8cb3f6.items\n        for_8cb3f6.item -> expression_b720d7.gen_0\n        expression_b720d7.result -> reduce_f3a7b6.items\n        \n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 146, name: \"val\") property(Number) val_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            acc_5f51f7 -> add_2f9d09.first\n            val_5f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> out_d0fd24\n        } -> reduce_f3a7b6.reducer\n        \n        0 -> reduce_f3a7b6.initial\n        reduce_f3a7b6.result -> out_f3db9f\n        execute_27b8c3 -> for_8cb3f6.reset\n        for_8cb3f6.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) sum_of_squares_of_odds_f0be66 root.main.sum_of_squares_of_odds {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 154, y: -40, name: \"n\") property(Number) n_4c4f1d\n        in(x: 154, y: -70, name: \"execute\") trigger() execute_9c4f1d\n\n        out(x: 1140, y: 40, name: \"sum\") property(Number) sum_8c4f1d\n        out(x: 1140, y: 70, name: \"continue\") trigger() continue_7c4f1d\n\n        instance(x: 360, y: -20) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 560, y: -20) filter_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 760, y: -20) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 960, y: -20) reduce_6030c9 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 560, y: 160) modulo_80a119 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 960, y: 160) add_80a119 root.Std_k98ojb.Math.Add {}\n        instance(x: 760, y: 160) mul_80a119 root.Std_k98ojb.Math.Mul {}\n\n        1 -> generaterange_038fce.from\n        n_4c4f1d -> generaterange_038fce.to\n        generaterange_038fce.list -> filter_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            2 -> modulo_80a119.divisor\n            element_5f51f7 -> modulo_80a119.value\n            modulo_80a119.result -> out_d0fd24\n        } -> filter_6030c9.handler\n\n        filter_6030c9.output_list -> map_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            element_5f51f7 -> mul_80a119.first\n            element_5f51f7 -> mul_80a119.second\n            mul_80a119.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 76, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            accumulated_5f51f7 -> add_80a119.first\n            element_5f51f7 -> add_80a119.second\n            add_80a119.result -> out_d0fd24\n        } -> reduce_6030c9.reducer\n\n        reduce_6030c9.result -> sum_8c4f1d\n        execute_9c4f1d -> generaterange_038fce.reset\n        reduce_6030c9.done -> continue_7c4f1d\n    }\n}"
            ],
            "47": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list\") find_cubes {\n        in(x: 30, y: 30, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 400, y: 30, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 200, y: 30) map_0f3b9c root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_0f3b9c.items\n\n        func() {\n            in(x: -100, y: 30, name: \"element\") property(Number) element\n\n            out(x: 200, y: 30, name: \"cube\") property(Number) cube\n\n            instance(x: 50, y: 30) mul_1 root.Std_k98ojb.Math.Mul {}\n            instance(x: 100, y: 30) mul_2 root.Std_k98ojb.Math.Mul {}\n\n            element -> mul_1.first\n            element -> mul_1.second\n\n            mul_1.result -> mul_2.first\n            element -> mul_2.second\n\n            mul_2.result -> cube\n        } -> map_0f3b9c.handler\n\n        map_0f3b9c.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 150, y: 50, name: \"input_list\") property(List<Number>) input_list_123456\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 450, y: 50, name: \"output_list\") property(List<Number>) output_list_789012\n        out(x: 450, y: 100, name: \"continue\") trigger() continue_ghijkl\n\n        instance(x: 300, y: 75) map_instance root.Std_k98ojb.Iteration.Map {}\n\n        input_list_123456 -> map_instance.items\n\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_345678\n\n            out(x: 200, y: 50, name: \"out\") property(Number) out_901234\n\n            instance(x: 50, y: 50) expression_instance root.Std_k98ojb.Math.Expression {\n                expression: \"element * element * element\"\n            }\n\n            element_345678 -> expression_instance.element\n            expression_instance.result -> out_901234\n        } -> map_instance.handler\n\n        map_instance.output_list -> output_list_789012\n        execute_abcdef -> map_instance.trigger\n        map_instance.done -> continue_ghijkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list.\") find_cubes {\n        in(x: 120, y: -30, name: \"input\") property(List<Number>) input_list\n\n        out(x: 600, y: -30, name: \"output\") property(List<Number>) output_list\n\n        instance(x: 320, y: -30) map_instance root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_instance.items\n\n        func() {\n            in(x: -60, y: 0, name: \"element\") property(Number) element\n\n            out(x: 300, y: 0, name: \"out\") property(Number) out\n\n            instance(x: 120, y: 0) pow_instance root.Std_k98ojb.Math.Pow {\n                y: 3\n            }\n\n            element -> pow_instance.x\n            pow_instance.result -> out\n        } -> map_instance.handler\n\n        map_instance.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list\") find_cubes {\n        in(x: 100, y: 50, name: \"input_list\") property(List<Number>) input_list_123\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_456\n\n        out(x: 400, y: 50, name: \"output_list\") property(List<Number>) output_list_789\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_101\n\n        instance(x: 200, y: 50) map_abc root.Std_k98ojb.Iteration.Map {}\n\n        input_list_123 -> map_abc.items\n\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_def\n\n            out(x: 150, y: 50, name: \"out\") property(Number) out_ghi\n\n            instance(x: 50, y: 50) pow_jkl root.Std_k98ojb.Math.Pow {}\n\n            element_def -> pow_jkl.x\n            3 -> pow_jkl.y\n            pow_jkl.result -> out_ghi\n        } -> map_abc.handler\n\n        map_abc.output_list -> output_list_789\n        execute_456 -> map_abc.trigger\n        map_abc.done -> continue_101\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(List<Number>) output_list\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) map_instance root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_instance.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_input\n\n            out(x: 382, y: 19, name: \"out\") property(Number) element_output\n\n            instance(x: 106, y: 17) pow_instance root.Std_k98ojb.Math.Pow {}\n            element_input -> pow_instance.x\n            3 -> pow_instance.y\n            pow_instance.result -> element_output\n        } -> map_instance.handler\n\n        map_instance.output_list -> output_list\n        execute_trigger -> map_instance.trigger\n        map_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 300, y: -200, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 900, y: -200, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 600, y: -200) map_instance root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_instance.items\n\n        func() {\n            in(x: -100, y: 0, name: \"element\") property(Number) element\n\n            out(x: 300, y: 0, name: \"cube\") property(Number) cube\n\n            instance(x: 100, y: 0) mul_instance1 root.Std_k98ojb.Math.Mul {}\n            instance(x: 200, y: 0) mul_instance2 root.Std_k98ojb.Math.Mul {}\n\n            element -> mul_instance1.first\n            element -> mul_instance1.second\n            mul_instance1.result -> mul_instance2.first\n            element -> mul_instance2.second\n            mul_instance2.result -> cube\n        } -> map_instance.handler\n\n        map_instance.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 160, y: -30, name: \"input_list\") property(List<Number>) input_list_1c3d4e\n        in(x: 160, y: 50, name: \"execute\") trigger() execute_2a3b5c\n\n        out(x: 600, y: 0, name: \"output_list\") property(List<Number>) output_list_4e5f6a\n        out(x: 600, y: 80, name: \"continue\") trigger() continue_7b8c9d\n\n        instance(x: 360, y: 0) map_3d4e5f root.Std_k98ojb.Iteration.Map {}\n        instance(x: 480, y: 0) pow_5f6a7b root.Std_k98ojb.Math.Pow {}\n\n        input_list_1c3d4e -> map_3d4e5f.items\n        func() {\n            in(x: -80, y: 0, name: \"element\") property(Number) element_6a7b8c\n\n            out(x: 240, y: 0, name: \"out\") property(Number) out_8c9d0e\n\n            3 -> pow_5f6a7b.y\n            element_6a7b8c -> pow_5f6a7b.x\n            pow_5f6a7b.result -> out_8c9d0e\n        } -> map_3d4e5f.handler\n\n        map_3d4e5f.output_list -> output_list_4e5f6a\n        execute_2a3b5c -> map_3d4e5f.trigger\n        map_3d4e5f.done -> continue_7b8c9d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list\") find_cubes {\n        in(x: 100, y: 100, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 300, y: 100, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 200, y: 100) map_cubes root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_cubes.items\n\n        func() {\n            in(x: 0, y: 0, name: \"element\") property(Number) element\n\n            out(x: 200, y: 0, name: \"cube\") property(Number) cube\n\n            instance(x: 100, y: 0) cube_calculation root.Std_k98ojb.Math.Pow {\n                x: element,\n                y: 3\n            }\n\n            cube_calculation.result -> cube\n        } -> map_cubes.handler\n\n        map_cubes.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 126, y: -24, name: \"input_list\") property(List) input_list_1b9d1a\n        in(x: 164, y: -153, name: \"execute\") trigger() execute_9a3f4b\n\n        out(x: 1042, y: 11, name: \"output_list\") property(List) output_list_3f2b5e\n        out(x: 1070, y: 137, name: \"continue\") trigger() continue_4b3f7d\n\n        instance(x: 432, y: -88) map_6a4b1c root.Std_k98ojb.Iteration.Map {}\n        instance(x: 796, y: -56) add_8c7d4a root.Std_k98ojb.Math.Add {}\n        instance(x: 641, y: -191) mul_3d7f2e root.Std_k98ojb.Math.Mul {}\n        instance(x: 888, y: -194) mul_4f9d1b root.Std_k98ojb.Math.Mul {}\n\n        input_list_1b9d1a -> map_6a4b1c.items\n        func() {\n            in(x: -46, y: 33, name: \"element\") property(Number) element_4f1a2b\n\n            out(x: 414, y: 16, name: \"out\") property(Number) out_7b3d5c\n\n            element_4f1a2b -> mul_3d7f2e.first\n            element_4f1a2b -> mul_3d7f2e.second\n            mul_3d7f2e.result -> mul_4f9d1b.first\n            element_4f1a2b -> mul_4f9d1b.second\n            mul_4f9d1b.result -> out_7b3d5c\n        } -> map_6a4b1c.handler\n        map_6a4b1c.output_list -> output_list_3f2b5e\n        execute_9a3f4b -> map_6a4b1c.trigger\n        map_6a4b1c.done -> continue_4b3f7d\n    }\n\n    \n\n    instance(x: -222, y: 176) find_cubes_4d8b3e root.main.find_cubes {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list\") find_cubes {\n        in(x: 0, y: 0, name: \"input_list\") property(List<Number>) input_list_1a2b3c\n        in(x: 0, y: 50, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 300, y: 0, name: \"output_list\") property(List<Number>) output_list_7g8h9i\n        out(x: 300, y: 50, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 150, y: 0) map_3m4n5o root.Std_k98ojb.Iteration.Map {}\n        instance(x: 150, y: 100) pow_6p7q8r root.Std_k98ojb.Math.Pow {}\n\n        input_list_1a2b3c -> map_3m4n5o.items\n        func() {\n            in(x: -50, y: 0, name: \"element\") property(Number) element_9s0t1u\n\n            out(x: 50, y: 0, name: \"cube\") property(Number) cube_2v3w4x\n\n            element_9s0t1u -> pow_6p7q8r.x\n            3 -> pow_6p7q8r.y\n            pow_6p7q8r.result -> cube_2v3w4x\n        } -> map_3m4n5o.handler\n\n        map_3m4n5o.output_list -> output_list_7g8h9i\n        execute_4d5e6f -> map_3m4n5o.trigger\n        map_3m4n5o.done -> continue_0j1k2l\n    }\n}"
            ],
            "40": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 156, y: -123, name: \"input_list\") property(List) input_list_123abc\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_456def\n\n        out(x: 1748, y: -10, name: \"product\") property(Number) product_789ghi\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: -50) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 100) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: -50) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 600, y: 100) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 900, y: 25) mul_result root.Std_k98ojb.Math.Mul {}\n\n        input_list_123abc -> filter_even.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_111aaa\n\n            out(x: 382, y: 19, name: \"is_even\") property(Bool) is_even_222bbb\n\n            instance(x: 106, y: 17) modulo_even root.Std_k98ojb.Math.Modulo {}\n            instance(x: 300, y: 17) equal_even root.Std_k98ojb.Logic.Equal {}\n\n            item_111aaa -> modulo_even.value\n            2 -> modulo_even.divisor\n            modulo_even.result -> equal_even.left\n            0 -> equal_even.right\n            equal_even.result -> is_even_222bbb\n        } -> filter_even.handler\n\n        input_list_123abc -> filter_odd.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_333ccc\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_444ddd\n\n            instance(x: 106, y: 17) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 300, y: 17) not_equal_odd root.Std_k98ojb.Logic.NotEqual {}\n\n            item_333ccc -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> not_equal_odd.left\n            0 -> not_equal_odd.right\n            not_equal_odd.result -> is_odd_444ddd\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> mul_result.first\n        first_odd.item -> mul_result.second\n\n        mul_result.result -> product_789ghi\n\n        execute_456def -> filter_even.handler\n        filter_even.handler -> filter_odd.handler\n        filter_odd.handler -> first_even.list\n        first_even.list -> first_odd.list\n        first_odd.list -> mul_result.result\n        mul_result.result -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 134, y: -31, name: \"list\") property(List) list_9f8b7c\n        in(x: 160, y: -210, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1646, y: -10, name: \"product\") property(Number) product_4f3d9f\n        out(x: 1792, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 376, y: -154) find_even_8cb3f6 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 376, y: 54) find_odd_8cb3f6 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 784, y: -54) mul_07b8c7 root.Std_k98ojb.Math.Mul {}\n        instance(x: 1000, y: -300) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        list_9f8b7c -> find_even_8cb3f6.items\n        list_9f8b7c -> find_odd_8cb3f6.items\n\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 382, y: 19, name: \"is_even\") property(Bool) is_even_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 256, y: 17) equal_3f9d09 root.Std_k98ojb.Logic.Equal {}\n\n            item_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_3f9d09.left\n            0 -> equal_3f9d09.right\n            equal_3f9d09.result -> is_even_d0fd24\n        } -> find_even_8cb3f6.predicate\n\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 256, y: 17) not_equal_3f9d09 root.Std_k98ojb.Logic.NotEqual {}\n\n            item_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> not_equal_3f9d09.left\n            0 -> not_equal_3f9d09.right\n            not_equal_3f9d09.result -> is_odd_d0fd24\n        } -> find_odd_8cb3f6.predicate\n\n        find_even_8cb3f6.item -> mul_07b8c7.first\n        find_odd_8cb3f6.item -> mul_07b8c7.second\n\n        mul_07b8c7.result -> if_e19a62.value\n        if_e19a62.value -> product_4f3d9f\n\n        execute_27b8c3 -> find_even_8cb3f6.execute\n        find_even_8cb3f6.itemFound -> find_odd_8cb3f6.execute\n        find_odd_8cb3f6.itemFound -> if_e19a62.execute\n        if_e19a62.then -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the product of the first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 100, y: 50, name: \"list\") property(List<Number>) list_input\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"product\") property(Number) product_output\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 50) find_even root.Std_k98ojb.Iteration.Find {}\n        instance(x: 300, y: 150) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 700, y: 100) mul_result root.Std_k98ojb.Math.Mul {}\n\n        list_input -> find_even.items\n        func() {\n            in(x: -100, y: 50, name: \"number\") property(Number) number_input\n            out(x: 100, y: 50, name: \"is_even\") property(Bool) is_even_output\n\n            instance(x: 0, y: 50) modulo_even root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            number_input -> modulo_even.value\n            2 -> modulo_even.divisor\n            modulo_even.result -> equal_zero.left\n            0 -> equal_zero.right\n            equal_zero.result -> is_even_output\n        } -> find_even.predicate\n\n        list_input -> find_odd.items\n        func() {\n            in(x: -100, y: 150, name: \"number\") property(Number) number_input\n            out(x: 100, y: 150, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 150) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 150) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n\n            number_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> is_odd_output\n        } -> find_odd.predicate\n\n        find_even.item -> mul_result.first\n        find_odd.item -> mul_result.second\n        mul_result.result -> product_output\n\n        execute_trigger -> find_even.execute\n        execute_trigger -> find_odd.execute\n        find_even.item -> find_odd.execute\n        mul_result.result -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the product of the first even and odd number in a list.\") product_of_first_even_odd {\n        in(x: 150, y: -80, name: \"list\") property(List<Number>) list_0cbbf4\n        in(x: 150, y: -180, name: \"execute\") trigger() execute_0a4b7d\n\n        out(x: 700, y: -100, name: \"product\") property(Number) product_4a5f2d\n        out(x: 700, y: 0, name: \"continue\") trigger() continue_5b6e3c\n\n        instance(x: 300, y: -100) find_even_1a2b3c root.Std_k98ojb.Iteration.Find {}\n        instance(x: 300, y: 0) find_odd_4d5e6f root.Std_k98ojb.Iteration.Find {}\n        instance(x: 500, y: -50) mul_7a8b9c root.Std_k98ojb.Math.Mul {}\n\n        list_0cbbf4 -> find_even_1a2b3c.items\n        list_0cbbf4 -> find_odd_4d5e6f.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_1f2g3h\n\n            out(x: 100, y: 0, name: \"is_even\") property(Bool) is_even_4i5j6k\n\n            instance(x: 0, y: 0) modulo_7l8m9n root.Std_k98ojb.Math.Modulo {}\n            instance(x: 50, y: 0) equal_0a1b2c root.Std_k98ojb.Logic.Equal {}\n\n            item_1f2g3h -> modulo_7l8m9n.value\n            2 -> modulo_7l8m9n.divisor\n            modulo_7l8m9n.result -> equal_0a1b2c.left\n            0 -> equal_0a1b2c.right\n            equal_0a1b2c.result -> is_even_4i5j6k\n        } -> find_even_1a2b3c.predicate\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_1n2o3p\n\n            out(x: 100, y: 0, name: \"is_odd\") property(Bool) is_odd_4q5r6s\n\n            instance(x: 0, y: 0) modulo_7t8u9v root.Std_k98ojb.Math.Modulo {}\n            instance(x: 50, y: 0) not_equal_0w1x2y root.Std_k98ojb.Logic.NotEqual {}\n\n            item_1n2o3p -> modulo_7t8u9v.value\n            2 -> modulo_7t8u9v.divisor\n            modulo_7t8u9v.result -> not_equal_0w1x2y.left\n            0 -> not_equal_0w1x2y.right\n            not_equal_0w1x2y.result -> is_odd_4q5r6s\n        } -> find_odd_4d5e6f.predicate\n\n        find_even_1a2b3c.item -> mul_7a8b9c.first\n        find_odd_4d5e6f.item -> mul_7a8b9c.second\n        mul_7a8b9c.result -> product_4a5f2d\n\n        execute_0a4b7d -> find_even_1a2b3c.execute\n        find_even_1a2b3c.done -> find_odd_4d5e6f.execute\n        find_odd_4d5e6f.done -> continue_5b6e3c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the product of the first even and odd number in a given list.\") product_of_first_even_odd {\n        in(x: 100, y: 100, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 800, y: 100, name: \"product\") property(Number) product\n\n        instance(x: 200, y: 200) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 200, y: 400) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 200) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 400, y: 400) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 600, y: 300) mul root.Std_k98ojb.Math.Mul {}\n\n        input_list -> filter_even.items\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n\n            out(x: 200, y: 0, name: \"is_even\") property(Bool) is_even\n\n            instance(x: 100, y: 0) mod root.Std_k98ojb.Math.Modulo {}\n            instance(x: 150, y: 0) equal root.Std_k98ojb.Logic.Equal {}\n\n            item -> mod.value\n            2 -> mod.divisor\n            mod.result -> equal.left\n            0 -> equal.right\n            equal.result -> is_even\n        } -> filter_even.handler\n\n        input_list -> filter_odd.items\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n\n            out(x: 200, y: 0, name: \"is_odd\") property(Bool) is_odd\n\n            instance(x: 100, y: 0) mod root.Std_k98ojb.Math.Modulo {}\n            instance(x: 150, y: 0) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n            item -> mod.value\n            2 -> mod.divisor\n            mod.result -> not_equal.left\n            0 -> not_equal.right\n            not_equal.result -> is_odd\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> mul.first\n        first_odd.item -> mul.second\n\n        mul.result -> product\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 180, y: -75, name: \"input_list\") property(List<Number>) input_list_8fbc3a\n        in(x: 200, y: -230, name: \"execute\") trigger() execute_7b3c4a\n\n        out(x: 940, y: -75, name: \"product\") property(Number) product_4f8b3d\n        out(x: 960, y: 80, name: \"continue\") trigger() continue_3b2a1c\n\n        instance(x: 380, y: -200) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 380, y: 0) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 620, y: -200) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 620, y: 0) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 820, y: -100) mul_even_odd root.Std_k98ojb.Math.Mul {}\n\n        input_list_8fbc3a -> filter_even.items\n        func() {\n            in(x: -80, y: -50, name: \"item\") property(Number) item_2f3b4c\n\n            out(x: 80, y: -50, name: \"out\") property(Bool) out_5f6a7b\n\n            instance(x: 0, y: -50) mod_4f8c3d root.Std_k98ojb.Math.Modulo {}\n            instance(x: 160, y: -50) equal_7f3a1c root.Std_k98ojb.Logic.Equal {}\n\n            item_2f3b4c -> mod_4f8c3d.value\n            2 -> mod_4f8c3d.divisor\n            mod_4f8c3d.result -> equal_7f3a1c.left\n            0 -> equal_7f3a1c.right\n            equal_7f3a1c.result -> out_5f6a7b\n        } -> filter_even.handler\n\n        input_list_8fbc3a -> filter_odd.items\n        func() {\n            in(x: -80, y: 50, name: \"item\") property(Number) item_9f3b2a\n\n            out(x: 80, y: 50, name: \"out\") property(Bool) out_3f6a9b\n\n            instance(x: 0, y: 50) mod_9f8c3d root.Std_k98ojb.Math.Modulo {}\n            instance(x: 160, y: 50) not_equal_1f3a2c root.Std_k98ojb.Logic.NotEqual {}\n\n            item_9f3b2a -> mod_9f8c3d.value\n            2 -> mod_9f8c3d.divisor\n            mod_9f8c3d.result -> not_equal_1f3a2c.left\n            0 -> not_equal_1f3a2c.right\n            not_equal_1f3a2c.result -> out_3f6a9b\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> mul_even_odd.first\n        first_odd.item -> mul_even_odd.second\n\n        mul_even_odd.result -> product_4f8b3d\n\n        execute_7b3c4a -> filter_even.execute\n        filter_even.output_list -> filter_odd.execute\n        filter_odd.output_list -> first_even.execute\n        first_even.item -> first_odd.execute\n        first_odd.item -> mul_even_odd.execute\n        mul_even_odd.result -> continue_3b2a1c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 124, y: -96, name: \"input\") property(List) input_3f7d2b\n        in(x: 106, y: 40, name: \"execute\") trigger() execute_2b7d3f\n\n        out(x: 890, y: 19, name: \"out\") property(Number) out_5b3d2f\n        out(x: 1088, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 332, y: -32) filter_even_5d3f2b root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 332, y: 88) filter_odd_7d3f2c root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 566, y: -54) first_even_7f3d2d root.Std_k98ojb.List.FirstItem {}\n        instance(x: 566, y: 74) first_odd_8f3d2e root.Std_k98ojb.List.FirstItem {}\n        instance(x: 740, y: 10) mul_9f3d2f root.Std_k98ojb.Math.Mul {}\n\n        input_3f7d2b -> filter_even_5d3f2b.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 182, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 282, y: 17) equal_3f9d2a root.Std_k98ojb.Logic.Equal {}\n\n            item_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_3f9d2a.left\n            0 -> equal_3f9d2a.right\n            equal_3f9d2a.result -> out_d0fd24\n        } -> filter_even_5d3f2b.handler\n\n        input_3f7d2b -> filter_odd_7d3f2c.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 182, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 282, y: 17) not_equal_4f9d2b root.Std_k98ojb.Logic.NotEqual {}\n\n            item_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> not_equal_4f9d2b.left\n            0 -> not_equal_4f9d2b.right\n            not_equal_4f9d2b.result -> out_d0fd24\n        } -> filter_odd_7d3f2c.handler\n\n        filter_even_5d3f2b.output_list -> first_even_7f3d2d.list\n        filter_odd_7d3f2c.output_list -> first_odd_8f3d2e.list\n\n        first_even_7f3d2d.item -> mul_9f3d2f.first\n        first_odd_8f3d2e.item -> mul_9f3d2f.second\n\n        mul_9f3d2f.result -> out_5b3d2f\n        execute_2b7d3f -> filter_even_5d3f2b.execute\n        filter_even_5d3f2b.output_list -> filter_odd_7d3f2c.execute\n        filter_odd_7d3f2c.output_list -> first_even_7f3d2d.list\n        first_even_7f3d2d.item -> first_odd_8f3d2e.list\n        first_odd_8f3d2e.item -> mul_9f3d2f.execute\n        mul_9f3d2f.result -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the product of the first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) product_output\n\n        instance(x: 591, y: 74) find_even root.Std_k98ojb.Iteration.Find {}\n        instance(x: 933, y: 25) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 1121, y: -54) mul_result root.Std_k98ojb.Math.Mul {}\n\n        input_list -> find_even.items\n        input_list -> find_odd.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element\n\n            out(x: 382, y: 19, name: \"is_even\") property(Bool) is_even\n\n            instance(x: 106, y: 17) modulo root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 17) equal root.Std_k98ojb.Logic.Equal {}\n\n            element -> modulo.value\n            2 -> modulo.divisor\n            modulo.result -> equal.left\n            0 -> equal.right\n            equal.result -> is_even\n        } -> find_even.predicate\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd\n\n            instance(x: 106, y: 17) modulo root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 17) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n            element -> modulo.value\n            2 -> modulo.divisor\n            modulo.result -> not_equal.left\n            0 -> not_equal.right\n            not_equal.result -> is_odd\n        } -> find_odd.predicate\n\n        find_even.item -> mul_result.first\n        find_odd.item -> mul_result.second\n        mul_result.result -> product_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the product of the first even and odd number of a given list.\") find_product {\n        in(x: 100, y: 100, name: \"list\") property(List<Number>) list_abc123\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_def456\n\n        out(x: 500, y: 100, name: \"product\") property(Number) product_ghi789\n        out(x: 500, y: 200, name: \"continue\") trigger() continue_jkl012\n\n        instance(x: 300, y: 50) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 150) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 50) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 400, y: 150) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 600, y: 100) mul_product root.Std_k98ojb.Math.Mul {}\n\n        list_abc123 -> filter_even.items\n        list_abc123 -> filter_odd.items\n\n        func() {\n            in(x: -50, y: 50, name: \"item\") property(Number) item_even\n\n            out(x: 200, y: 50, name: \"is_even\") property(Bool) is_even\n\n            instance(x: 50, y: 50) mod_even root.Std_k98ojb.Math.Modulo {}\n            instance(x: 100, y: 50) equal_even root.Std_k98ojb.Logic.Equal {}\n\n            item_even -> mod_even.value\n            2 -> mod_even.divisor\n            mod_even.result -> equal_even.left\n            0 -> equal_even.right\n            equal_even.result -> is_even\n        } -> filter_even.handler\n\n        func() {\n            in(x: -50, y: 150, name: \"item\") property(Number) item_odd\n\n            out(x: 200, y: 150, name: \"is_odd\") property(Bool) is_odd\n\n            instance(x: 50, y: 150) mod_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 100, y: 150) not_equal_odd root.Std_k98ojb.Logic.NotEqual {}\n\n            item_odd -> mod_odd.value\n            2 -> mod_odd.divisor\n            mod_odd.result -> not_equal_odd.left\n            0 -> not_equal_odd.right\n            not_equal_odd.result -> is_odd\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> mul_product.first\n        first_odd.item -> mul_product.second\n\n        mul_product.result -> product_ghi789\n        execute_def456 -> filter_even.execute\n        filter_even.output_list -> filter_odd.execute\n        filter_odd.output_list -> first_even.execute\n        first_even.item -> first_odd.execute\n        first_odd.item -> mul_product.execute\n        mul_product.result -> continue_jkl012\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the product of the first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 162, y: -85, name: \"list\") property(List<Number>) list_1f2d4c\n        in(x: 163, y: -250, name: \"execute\") trigger() execute_4c5b9a\n\n        out(x: 785, y: -50, name: \"product\") property(Number) product_5e3a2b\n        out(x: 919, y: 70, name: \"continue\") trigger() continue_9f8d7c\n\n        instance(x: 353, y: -167) find_even_odd_6c3b1a root.Std_k98ojb.Iteration.Find {}\n        instance(x: 359, y: 56) find_odd_9b2c1a root.Std_k98ojb.Iteration.Find {}\n        instance(x: 578, y: -35) mul_4d7c2a root.Std_k98ojb.Math.Mul {}\n        instance(x: 132, y: -45) modulo_even_7d8e2a root.Std_k98ojb.Math.Modulo {\n            divisor: 2\n        }\n        instance(x: 131, y: 90) modulo_odd_8d9f2b root.Std_k98ojb.Math.Modulo {\n            divisor: 2\n        }\n        instance(x: 257, y: -80) equal_even_2e4f1a root.Std_k98ojb.Logic.Equal {\n            right: 0\n        }\n        instance(x: 256, y: 90) not_equal_odd_3f5g2b root.Std_k98ojb.Logic.NotEqual {\n            right: 0\n        }\n        list_1f2d4c -> find_even_odd_6c3b1a.items\n        list_1f2d4c -> find_odd_9b2c1a.items\n        find_even_odd_6c3b1a.item -> mul_4d7c2a.first\n        find_odd_9b2c1a.item -> mul_4d7c2a.second\n        mul_4d7c2a.result -> product_5e3a2b\n        find_even_odd_6c3b1a.item -> modulo_even_7d8e2a.value\n        modulo_even_7d8e2a.result -> equal_even_2e4f1a.left\n        equal_even_2e4f1a.result -> find_even_odd_6c3b1a.predicate\n        find_odd_9b2c1a.item -> modulo_odd_8d9f2b.value\n        modulo_odd_8d9f2b.result -> not_equal_odd_3f5g2b.left\n        not_equal_odd_3f5g2b.result -> find_odd_9b2c1a.predicate\n        execute_4c5b9a -> find_even_odd_6c3b1a.execute\n        find_even_odd_6c3b1a.done -> find_odd_9b2c1a.execute\n        find_odd_9b2c1a.done -> continue_9f8d7c\n    }\n}"
            ],
            "41": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 154, y: -53, name: \"array\") property(List<Number>) array_1d2f3c\n        in(x: 161, y: -211, name: \"element\") property(Number) element_3b8a4d\n        in(x: 168, y: -369, name: \"execute\") trigger() execute_9c2d7e\n\n        out(x: 1748, y: -10, name: \"position\") property(Number) position_f7b9d3\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) length_7a1c9e root.Std_k98ojb.List.Length {}\n        instance(x: 591, y: 74) sub_038fce root.Std_k98ojb.Math.Sub {}\n        instance(x: 933, y: 25) equal_f11fda root.Std_k98ojb.Logic.Equal {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 2136, y: -356) not_equal_80a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 1288, y: -356) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"index == -1 ? -1 : index\"\n        }\n        instance(x: 1288, y: -156) expression_9fba8c root.Std_k98ojb.Math.Expression {\n            expression: \"i\"\n        }\n        instance(x: 1496, y: -187) expression_1fba8c root.Std_k98ojb.Math.Expression {\n            expression: \"i\"\n        }\n        instance(x: 1496, y: -287) expression_2fba8c root.Std_k98ojb.Math.Expression {\n            expression: \"i\"\n        }\n        instance(x: 2136, y: -456) not_equal_90a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -556) not_equal_70a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -656) not_equal_60a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -756) not_equal_50a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -856) not_equal_40a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -956) not_equal_30a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1056) not_equal_20a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1156) not_equal_10a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1256) not_equal_00a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1356) not_equal_91a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1456) not_equal_81a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1556) not_equal_71a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1656) not_equal_61a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1756) not_equal_51a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1856) not_equal_41a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -1956) not_equal_31a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2056) not_equal_21a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2156) not_equal_11a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2256) not_equal_01a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2356) not_equal_92a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2456) not_equal_82a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2556) not_equal_72a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2656) not_equal_62a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2756) not_equal_52a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2856) not_equal_42a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -2956) not_equal_32a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3056) not_equal_22a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3156) not_equal_12a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3256) not_equal_02a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3356) not_equal_93a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3456) not_equal_83a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3556) not_equal_73a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3656) not_equal_63a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3756) not_equal_53a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3856) not_equal_43a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -3956) not_equal_33a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4056) not_equal_23a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4156) not_equal_13a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4256) not_equal_03a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4356) not_equal_94a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4456) not_equal_84a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4556) not_equal_74a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4656) not_equal_64a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4756) not_equal_54a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4856) not_equal_44a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -4956) not_equal_34a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -5056) not_equal_24a119 root.Std_k98ojb.Logic.NotEqual",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 80, y: 40, name: \"array\") property(List<Number>) array_8b3c9d\n        in(x: 80, y: 80, name: \"element\") property(Number) element_2c5f4b\n        in(x: 80, y: 120, name: \"execute\") trigger() execute_7f8b1a\n\n        out(x: 400, y: 80, name: \"position\") property(Number) position_3d7f9c\n        out(x: 400, y: 120, name: \"continue\") trigger() continue_5b8c7d\n\n        instance(x: 200, y: 40) reversed_1a2b3c root.Std_k98ojb.List.Reversed {}\n        instance(x: 320, y: 40) find_4d5e6f root.Std_k98ojb.Iteration.Find {}\n        instance(x: 240, y: 80) length_7e8f9a root.Std_k98ojb.List.Length {}\n        instance(x: 320, y: 120) sub_0a1b2c root.Std_k98ojb.Math.Sub {}\n\n        array_8b3c9d -> reversed_1a2b3c.list\n        reversed_1a2b3c.list -> find_4d5e6f.items\n        element_2c5f4b -> find_4d5e6f.predicate\n        find_4d5e6f.item -> sub_0a1b2c.first\n        length_7e8f9a.length -> sub_0a1b2c.second\n        sub_0a1b2c.result -> position_3d7f9c\n        execute_7f8b1a -> length_7e8f9a.list\n        execute_7f8b1a -> find_4d5e6f.execute\n        find_4d5e6f.done -> continue_5b8c7d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the last position of an element in a sorted array.\") find_last_position {\n        in(x: 70, y: 10, name: \"array\") property(List) array_input\n        in(x: 70, y: 60, name: \"element\") property(Number) element_input\n        in(x: 70, y: 110, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 60, name: \"position\") property(Number) position_output\n        out(x: 300, y: 110, name: \"done\") trigger() done_trigger\n\n        instance(x: 200, y: 10) reversed_list root.Std_k98ojb.List.Reversed {}\n        instance(x: 200, y: 60) find_instance root.Std_k98ojb.Iteration.Find {}\n        instance(x: 400, y: 60) length_instance root.Std_k98ojb.List.Length {}\n        instance(x: 600, y: 60) sub_instance root.Std_k98ojb.Math.Sub {}\n\n        execute_trigger -> reversed_list.trigger\n        array_input -> reversed_list.list\n        reversed_list.reversed -> find_instance.items\n\n        func() {\n            in(x: -80, y: 10, name: \"item\") property(Number) item_input\n\n            out(x: 80, y: 10, name: \"out\") property(Bool) out_output\n\n            instance(x: 0, y: 10) equal_instance root.Std_k98ojb.Logic.Equal {}\n            item_input -> equal_instance.left\n            element_input -> equal_instance.right\n            equal_instance.result -> out_output\n        } -> find_instance.predicate\n\n        find_instance.item -> length_instance.list\n        length_instance.length -> sub_instance.first\n        1 -> sub_instance.second\n        sub_instance.result -> position_output\n\n        find_instance.item -> done_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the last position of an element in a sorted array.\") last_position {\n        in(x: 354, y: -53, name: \"array\") property(List<Number>) array_2f5b1d\n        in(x: 354, y: -93, name: \"element\") property(Number) element_1a2b3c\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"position\") property(Number) position_8f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) equal_4f11da root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1504, y: -400) add_b720d7 root.Std_k98ojb.Math.Add {}\n        instance(x: 1812, y: -319) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        array_2f5b1d -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_4f11da.left\n        element_1a2b3c -> equal_4f11da.right\n        equal_4f11da.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> add_b720d7.first\n        for_8cb3f6.index -> add_b720d7.second\n        add_b720d7.result -> position_8f3db9f\n        if_07b8c7.else -> continue_8ba06b\n        for_8cb3f6.done -> not_80a119.input\n        not_80a119.result -> if_e19a62.predicate\n        if_e19a62.then -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 54, y: 12, name: \"array\") property(List<Number>) array_3d7f8c\n        in(x: 54, y: 72, name: \"element\") property(Number) element_4b8f7d\n        in(x: 54, y: 132, name: \"execute\") trigger() execute_2c9f3b\n\n        out(x: 354, y: 72, name: \"position\") property(Number) position_5e8f9d\n        out(x: 354, y: 132, name: \"continue\") trigger() continue_7d9f2c\n\n        instance(x: 154, y: -128) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 254, y: -28) equal_6b7f8e root.Std_k98ojb.Logic.Equal {}\n        instance(x: 454, y: -28) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 654, y: 72) store_position_9f8b7d root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n\n        array_3d7f8c -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_6b7f8e.left\n        element_4b8f7d -> equal_6b7f8e.right\n        equal_6b7f8e.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> store_position_9f8b7d.execute\n        for_8cb3f6.index -> store_position_9f8b7d.gen_0\n        store_position_9f8b7d.result -> position_5e8f9d\n        for_8cb3f6.done -> continue_7d9f2c\n        execute_2c9f3b -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 148, y: -50, name: \"array\") property(List<Number>) array_5a6b9c\n        in(x: 148, y: 0, name: \"element\") property(Number) element_9f2c3d\n        in(x: 148, y: 50, name: \"execute\") trigger() execute_2f3a4b\n\n        out(x: 900, y: 0, name: \"position\") property(Number) position_3e9d4f\n        out(x: 900, y: 50, name: \"continue\") trigger() continue_8a7b1c\n\n        instance(x: 320, y: -100) reversed_4a7c8d root.Std_k98ojb.List.Reversed {}\n        instance(x: 500, y: -50) for_9b3d2f root.Std_k98ojb.Std.For {}\n        instance(x: 700, y: 0) equal_1a2b3c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 900, y: -50) if_5d4e6f root.Std_k98ojb.Std.If {}\n\n        array_5a6b9c -> reversed_4a7c8d.list\n        reversed_4a7c8d.list -> for_9b3d2f.items\n        for_9b3d2f.item -> equal_1a2b3c.left\n        element_9f2c3d -> equal_1a2b3c.right\n        equal_1a2b3c.result -> if_5d4e6f.predicate\n        for_9b3d2f.onItem -> if_5d4e6f.execute\n        if_5d4e6f.then -> continue_8a7b1c\n        if_5d4e6f.value -> position_3e9d4f\n        for_9b3d2f.done -> continue_8a7b1c\n        execute_2f3a4b -> for_9b3d2f.reset\n        if_5d4e6f.else -> for_9b3d2f.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 154, y: -72, name: \"array\") property(List) array_1f3d9c\n        in(x: 154, y: -22, name: \"element\") property(Any) element_2b3d8e\n        in(x: 154, y: 28, name: \"execute\") trigger() execute_9f3d8c\n\n        out(x: 654, y: 28, name: \"position\") property(Number) position_3f2d8c\n        out(x: 654, y: 78, name: \"continue\") trigger() continue_8f3d8e\n\n        instance(x: 354, y: -22) reversed_4f3d8e root.Std_k98ojb.List.Reversed {}\n        instance(x: 454, y: 28) find_5f3d8e root.Std_k98ojb.Iteration.Find {}\n        instance(x: 554, y: 78) sub_6f3d8e root.Std_k98ojb.Math.Sub {}\n        instance(x: 754, y: 28) length_7f3d8e root.Std_k98ojb.List.Length {}\n\n        array_1f3d9c -> reversed_4f3d8e.list\n        reversed_4f3d8e.list -> find_5f3d8e.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Any) item_8f3d8e\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_9f3d8e\n\n            instance(x: 106, y: 17) equal_0f3d8e root.Std_k98ojb.Logic.Equal {}\n            item_8f3d8e -> equal_0f3d8e.left\n            element_2b3d8e -> equal_0f3d8e.right\n            equal_0f3d8e.result -> out_9f3d8e\n        } -> find_5f3d8e.predicate\n        find_5f3d8e.index -> sub_6f3d8e.first\n        length_7f3d8e.length -> sub_6f3d8e.second\n        array_1f3d9c -> length_7f3d8e.list\n        sub_6f3d8e.result -> position_3f2d8c\n        execute_9f3d8c -> find_5f3d8e.execute\n        find_5f3d8e.done -> continue_8f3d8e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 200, y: 0, name: \"array\") property(List<Number>) array_abc123\n        in(x: 200, y: 100, name: \"element\") property(Number) element_def456\n        in(x: 200, y: 200, name: \"execute\") trigger() execute_ghi789\n\n        out(x: 600, y: 0, name: \"position\") property(Number) position_jkl012\n        out(x: 600, y: 100, name: \"done\") trigger() done_mno345\n\n        instance(x: 400, y: 0) length_pqr678 root.Std_k98ojb.List.Length {}\n        instance(x: 400, y: 100) reversed_stu901 root.Std_k98ojb.List.Reversed {}\n        instance(x: 400, y: 200) for_vwx234 root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: 0) equal_yza567 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1000, y: 0) if_bcd890 root.Std_k98ojb.Std.If {}\n        instance(x: 1200, y: 0) sub_efg123 root.Std_k98ojb.Math.Sub {}\n\n        array_abc123 -> length_pqr678.list\n        array_abc123 -> reversed_stu901.list\n        reversed_stu901.list -> for_vwx234.items\n        for_vwx234.item -> equal_yza567.left\n        element_def456 -> equal_yza567.right\n        equal_yza567.result -> if_bcd890.predicate\n        for_vwx234.onItem -> if_bcd890.execute\n        if_bcd890.then -> done_mno345\n        length_pqr678.length -> sub_efg123.first\n        for_vwx234.index -> sub_efg123.second\n        sub_efg123.result -> position_jkl012\n        if_bcd890.then -> done_mno345\n        if_bcd890.else -> for_vwx234.next\n        execute_ghi789 -> for_vwx234.reset\n        for_vwx234.done -> done_mno345\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 30, y: 0, name: \"array\") property(List<Number>) array_1f2d3c\n        in(x: 30, y: 60, name: \"element\") property(Number) element_2b3e4f\n        in(x: 30, y: 120, name: \"execute\") trigger() execute_3c4f5a\n\n        out(x: 300, y: 0, name: \"position\") property(Number) position_4d5e6f\n        out(x: 300, y: 60, name: \"continue\") trigger() continue_5e6f7a\n\n        instance(x: 150, y: 0) for_loop_6f7g8h root.Std_k98ojb.Std.For {}\n        instance(x: 150, y: 180) equal_check_7g8h9i root.Std_k98ojb.Logic.Equal {}\n        instance(x: 220, y: 60) if_condition_8h9i0j root.Std_k98ojb.Std.If {}\n        instance(x: 220, y: 120) store_index_9i0j1k root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n\n        array_1f2d3c -> for_loop_6f7g8h.items\n        element_2b3e4f -> equal_check_7g8h9i.left\n        for_loop_6f7g8h.item -> equal_check_7g8h9i.right\n        equal_check_7g8h9i.result -> if_condition_8h9i0j.predicate\n        for_loop_6f7g8h.onItem -> if_condition_8h9i0j.execute\n        if_condition_8h9i0j.then -> store_index_9i0j1k.execute\n        for_loop_6f7g8h.index -> store_index_9i0j1k.gen_0\n        store_index_9i0j1k.result -> position_4d5e6f\n        for_loop_6f7g8h.done -> continue_5e6f7a\n        execute_3c4f5a -> for_loop_6f7g8h.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 200, y: 0, name: \"array\") property(List<Number>) array_1a2b3c\n        in(x: 200, y: 100, name: \"element\") property(Number) element_4d5e6f\n        in(x: 200, y: 200, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 800, y: 100, name: \"position\") property(Number) position_j1k2l3\n        out(x: 800, y: 200, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 400, y: 0) reversed_7p8q9r root.Std_k98ojb.List.Reversed {}\n        instance(x: 600, y: 0) find_1s2t3u root.Std_k98ojb.Iteration.Find {}\n        instance(x: 600, y: 100) sub_4v5w6x root.Std_k98ojb.Math.Sub {}\n        instance(x: 600, y: 200) length_7y8z9a root.Std_k98ojb.List.Length {}\n\n        array_1a2b3c -> reversed_7p8q9r.list\n        reversed_7p8q9r.list -> find_1s2t3u.items\n        element_4d5e6f -> find_1s2t3u.predicate\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_1b2c3d\n            in(x: -100, y: 100, name: \"index\") property(Number) index_4e5f6g\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) out_7h8i9j\n\n            instance(x: 0, y: 0) equal_0k1l2m root.Std_k98ojb.Logic.Equal {}\n            item_1b2c3d -> equal_0k1l2m.left\n            element_4d5e6f -> equal_0k1l2m.right\n            equal_0k1l2m.result -> out_7h8i9j\n        } -> find_1s2t3u.handler\n\n        find_1s2t3u.index -> sub_4v5w6x.first\n        length_7y8z9a.length -> sub_4v5w6x.second\n        sub_4v5w6x.result -> position_j1k2l3\n\n        array_1a2b3c -> length_7y8z9a.list\n\n        execute_7g8h9i -> find_1s2t3u.execute\n        find_1s2t3u.item -> continue_m4n5o6\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "best_params_optimization": "semantic",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": -1,
        "seed": 75,
        "n_generations_per_task": 10,
        "model": "gpt-4o",
        "largest_context": 5183,
        "task_candidates": {
            "8": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_all {\n        in(x: 100, y: 50, name: \"number\") property(Number) number_input\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"result\") property(Bool) result_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) map_instance root.Std_k98ojb.Iteration.Map {}\n        instance(x: 550, y: 100) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 800, y: 100) is_empty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        execute_trigger -> map_instance.trigger\n        array_input -> map_instance.items\n\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_input\n\n            out(x: 200, y: 50, name: \"is_greater\") property(Bool) is_greater_output\n\n            instance(x: 100, y: 50) greater_than_instance root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greater_than_instance.left\n            element_input -> greater_than_instance.right\n            greater_than_instance.result -> is_greater_output\n        } -> map_instance.handler\n\n        map_instance.output_list -> filter_instance.items\n\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Bool) element_input\n\n            out(x: 200, y: 50, name: \"is_true\") property(Bool) is_true_output\n\n            instance(x: 100, y: 50) logic_not_instance root.Std_k98ojb.Logic.Not {}\n            element_input -> logic_not_instance.input\n            logic_not_instance.output -> is_true_output\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> is_empty_instance.list\n        is_empty_instance.isEmpty -> result_output\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 120, y: -30, name: \"number\") property(Number) number_input\n        in(x: 120, y: 30, name: \"array\") property(List) array_input\n        in(x: 120, y: 90, name: \"execute\") trigger() execute_input\n\n        out(x: 480, y: 0, name: \"result\") property(Bool) result_output\n        out(x: 480, y: 60, name: \"continue\") trigger() continue_output\n\n        instance(x: 300, y: 0) filter_6a7c8b root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 0) is_empty_8b7c9d root.Std_k98ojb.List.IsEmpty {}\n\n        array_input -> filter_6a7c8b.items\n        func() {\n            in(x: -60, y: 0, name: \"element\") property(Number) element_input\n\n            out(x: 180, y: 0, name: \"out\") property(Bool) out_output\n\n            instance(x: 60, y: 0) greater_than_5c7d8f root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greater_than_5c7d8f.left\n            element_input -> greater_than_5c7d8f.right\n            greater_than_5c7d8f.result -> out_output\n        } -> filter_6a7c8b.handler\n\n        filter_6a7c8b.output_list -> is_empty_8b7c9d.list\n        is_empty_8b7c9d.isEmpty -> result_output\n        execute_input -> filter_6a7c8b.execute\n        is_empty_8b7c9d.isEmpty -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: 50, name: \"number\") property(Number) number_input\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_input\n\n        out(x: 500, y: 50, name: \"result\") property(Bool) result_output\n        out(x: 500, y: 100, name: \"continue\") trigger() continue_output\n\n        instance(x: 300, y: 50) filter_criteria root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 150) is_empty_check root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 300, y: 100) greater_than_check root.Std_k98ojb.Math.GreaterThan {}\n\n        array_input -> filter_criteria.items\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_input\n\n            out(x: 150, y: 50, name: \"out\") property(Bool) out_output\n\n            element_input -> greater_than_check.right\n            number_input -> greater_than_check.left\n            greater_than_check.result -> out_output\n        } -> filter_criteria.handler\n\n        filter_criteria.output_list -> is_empty_check.list\n        is_empty_check.isEmpty -> result_output\n\n        execute_input -> filter_criteria.execute\n        filter_criteria.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: 100, name: \"number\") property(Number) number_input\n        in(x: 100, y: 150, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_input\n\n        out(x: 300, y: 100, name: \"result\") property(Bool) result_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 200, y: 100) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) is_empty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        array_input -> filter_instance.items\n        func() {\n            in(x: 50, y: 50, name: \"element\") property(Number) element_input\n\n            out(x: 150, y: 50, name: \"out\") property(Bool) out_output\n\n            instance(x: 100, y: 50) greater_than_instance root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greater_than_instance.left\n            element_input -> greater_than_instance.right\n            greater_than_instance.result -> out_output\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> is_empty_instance.list\n        is_empty_instance.isEmpty -> result_output\n        execute_input -> filter_instance.execute\n        filter_instance.output_list -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: -50, name: \"number\") property(Number) number_input\n        in(x: 100, y: 0, name: \"array\") property(List) array_input\n        in(x: 100, y: 50, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 0, name: \"result\") property(Bool) result_output\n        out(x: 400, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 0) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 0) greater_than root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 350, y: 0) if_condition root.Std_k98ojb.Std.If {}\n\n        execute_trigger -> for_loop.trigger\n        array_input -> for_loop.items\n        for_loop.item -> greater_than.right\n        number_input -> greater_than.left\n        greater_than.result -> if_condition.predicate\n        for_loop.onItem -> if_condition.execute\n        if_condition.then -> continue_trigger\n        if_condition.else -> for_loop.next\n        for_loop.done -> result_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 154, y: -45, name: \"number\") property(Number) number_1a2b3c\n        in(x: 154, y: -145, name: \"array\") property(List<Number>) array_4d5e6f\n        in(x: 154, y: -245, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 654, y: -45, name: \"result\") property(Bool) result_0j1k2l\n        out(x: 654, y: -145, name: \"continue\") trigger() continue_3m4n5o\n\n        instance(x: 354, y: -345) map_6p7q8r root.Std_k98ojb.Iteration.Map {}\n        instance(x: 654, y: -345) filter_9s0t1u root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 954, y: -345) isempty_2v3w4x root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 1254, y: -345) not_5y6z7a root.Std_k98ojb.Logic.Not {}\n\n        array_4d5e6f -> map_6p7q8r.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) greaterthan_8b9c0d root.Std_k98ojb.Math.GreaterThan {}\n            number_1a2b3c -> greaterthan_8b9c0d.left\n            element_5f51f7 -> greaterthan_8b9c0d.right\n            greaterthan_8b9c0d.result -> out_d0fd24\n        } -> map_6p7q8r.handler\n\n        map_6p7q8r.output_list -> filter_9s0t1u.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Bool) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) not_8b9c0d root.Std_k98ojb.Logic.Not {}\n            element_5f51f7 -> not_8b9c0d.input\n            not_8b9c0d.output -> out_d0fd24\n        } -> filter_9s0t1u.handler\n\n        filter_9s0t1u.output_list -> isempty_2v3w4x.list\n        isempty_2v3w4x.isEmpty -> not_5y6z7a.input\n        not_5y6z7a.output -> result_0j1k2l\n        execute_7g8h9i -> continue_3m4n5o\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 354, y: -53, name: \"number\") property(Number) number_input\n        in(x: 354, y: 50, name: \"array\") property(List<Number>) array_input\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"result\") property(Bool) result_output\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 591, y: 74) forall_8cb3f6 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 933, y: 25) greaterthan_f11fda root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 1121, y: -54) filter_07b8c7 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1812, y: -319) is_empty_80a119 root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 2136, y: -356) not_07b8c7 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1088, y: -256) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        array_input -> forall_8cb3f6.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_input\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_bool\n\n            element_input -> greaterthan_f11fda.right\n            number_input -> greaterthan_f11fda.left\n            greaterthan_f11fda.result -> out_bool\n        } -> forall_8cb3f6.handler\n\n        forall_8cb3f6.output_list -> filter_07b8c7.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Bool) element_bool\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_bool\n\n            element_bool -> out_bool\n        } -> filter_07b8c7.handler\n\n        filter_07b8c7.output_list -> is_empty_80a119.list\n        is_empty_80a119.isEmpty -> not_07b8c7.input\n        not_07b8c7.output -> if_e19a62.predicate\n        if_e19a62.value -> result_output\n        execute_trigger -> forall_8cb3f6.execute\n        if_e19a62.then -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 154, y: -51, name: \"number\") property(Number) number_1a2b3c\n        in(x: 154, y: 51, name: \"array\") property(List<Number>) array_4d5e6f\n        in(x: 154, y: 153, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 154, y: 255, name: \"out\") property(Bool) out_j1k2l3\n        out(x: 154, y: 357, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 450, y: 0) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 700, y: 0) greaterthan_1a2b3c root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 950, y: 0) if_2d3e4f root.Std_k98ojb.Std.If {}\n        instance(x: 1200, y: 0) and_5f6g7h root.Std_k98ojb.Logic.And {}\n        instance(x: 1450, y: 0) not_8i9j0k root.Std_k98ojb.Logic.Not {}\n        instance(x: 1700, y: 0) if_3g4h5i root.Std_k98ojb.Std.If {}\n\n        array_4d5e6f -> for_8cb3f6.items\n        for_8cb3f6.item -> greaterthan_1a2b3c.right\n        number_1a2b3c -> greaterthan_1a2b3c.left\n        greaterthan_1a2b3c.result -> if_2d3e4f.predicate\n        for_8cb3f6.onItem -> if_2d3e4f.execute\n        if_2d3e4f.then -> continue_m4n5o6\n        if_2d3e4f.else -> for_8cb3f6.next\n        for_8cb3f6.done -> not_8i9j0k.input\n        not_8i9j0k.result -> if_3g4h5i.predicate\n        if_3g4h5i.then -> out_j1k2l3\n        if_3g4h5i.else -> continue_m4n5o6\n        execute_7g8h9i -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 50, y: 0, name: \"number\") property(Number) number_input\n        in(x: 50, y: 50, name: \"array\") property(List<Number>) array_input\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 0, name: \"result\") property(Bool) result_output\n        out(x: 300, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 0) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 150, y: 100) is_empty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        number_input -> filter_instance.handler\n        array_input -> filter_instance.items\n        filter_instance.output_list -> is_empty_instance.list\n        is_empty_instance.isEmpty -> result_output\n        execute_trigger -> filter_instance.execute\n        is_empty_instance.isEmpty -> continue_trigger\n    }\n\n    instance(x: -200, y: 200) is_greater_than_array_instance root.main.is_greater_than_array {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n        in(x: 354, y: -53, name: \"number\") property(Number) number_f5c03d\n        in(x: 354, y: 50, name: \"array\") property(List<Number>) array_5a9f3b\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) greaterthan_1a3fda root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1812, y: -319) and_80a119 root.Std_k98ojb.Logic.And {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        array_5a9f3b -> for_8cb3f6.items\n        for_8cb3f6.item -> greaterthan_1a3fda.right\n        number_f5c03d -> greaterthan_1a3fda.left\n        greaterthan_1a3fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> if_e19a62.execute\n        if_07b8c7.else -> continue_8ba06b\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> for_8cb3f6.next\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}"
            ],
            "10": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 161, y: -211, name: \"input\") property(String) input_4f7c1a\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_9f7c1b\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_5d8b2f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8bc06b\n\n        instance(x: 352, y: -493) contains_6f8d2c root.Std_k98ojb.Strings.Contains {}\n        instance(x: 1121, y: -54) if_08b7c8 root.Std_k98ojb.Std.If {}\n\n        input_4f7c1a -> contains_6f8d2c.input\n        \"z\" -> contains_6f8d2c.contains\n        contains_6f8d2c.result -> if_08b7c8.predicate\n        if_08b7c8.value -> out_5d8b2f\n        if_08b7c8.then -> continue_8bc06b\n        if_08b7c8.else -> continue_8bc06b\n        execute_9f7c1b -> if_08b7c8.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 120, y: -40, name: \"input\") property(String) input_1a2b3c\n        in(x: 120, y: 20, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 300, y: -40, name: \"matches\") property(Bool) matches_7g8h9i\n        out(x: 300, y: 20, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 200, y: -100) contains_3m4n5o root.Std_k98ojb.Strings.Contains {}\n        \"z\" -> contains_3m4n5o.contains\n        input_1a2b3c -> contains_3m4n5o.input\n        contains_3m4n5o.result -> matches_7g8h9i\n        execute_4d5e6f -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_word\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_match\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) contains_z root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n        \n        input_word -> contains_z.input\n        contains_z.result -> output_match\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 134, y: -59, name: \"input\") property(String) input_3fbc9d\n        in(x: 160, y: -211, name: \"execute\") trigger() execute_4a8c7b\n\n        out(x: 312, y: -13, name: \"out\") property(Bool) out_9d3f8b\n        out(x: 418, y: 100, name: \"continue\") trigger() continue_7b3a2c\n\n        instance(x: 294, y: -122) contains_9f0a6c root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n        input_3fbc9d -> contains_9f0a6c.input\n        contains_9f0a6c.result -> out_9d3f8b\n        execute_4a8c7b -> continue_7b3a2c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 200, y: 100, name: \"input\") property(String) input_123abc\n        in(x: 200, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 600, y: 100, name: \"contains_z\") property(Bool) contains_z_789ghi\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 400, y: 100) contains_z_check root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n\n        input_123abc -> contains_z_check.input\n        contains_z_check.result -> contains_z_789ghi\n        execute_456def -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"match\") property(Bool) match_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) contains_check root.Std_k98ojb.Strings.Contains {}\n\n        input_string -> contains_check.input\n        \"z\" -> contains_check.contains\n        contains_check.result -> match_output\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_word\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"match\") property(Bool) match_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) contains_z root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n        \n        input_word -> contains_z.input\n        contains_z.result -> match_output\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the input word contains the letter 'z'.\") contains_z {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) contains_6030c9 root.Std_k98ojb.Strings.Contains {}\n        \n        \"z\" -> contains_6030c9.contains\n        input_f5c03d -> contains_6030c9.input\n        contains_6030c9.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 50, y: 50, name: \"input\") property(String) input_word\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 250, y: 50, name: \"output\") property(Bool) output_match\n        out(x: 250, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 75) contains_z root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n\n        input_word -> contains_z.input\n        contains_z.result -> output_match\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if a word contains the letter 'z'.\") contains_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_word\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_contains_z\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) contains_z_instance root.Std_k98ojb.Strings.Contains {}\n        \n        input_word -> contains_z_instance.input\n        \"z\" -> contains_z_instance.contains\n        contains_z_instance.result -> output_contains_z\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "14": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 154, y: -37, name: \"input\") property(Number) input_0d9c7f\n        in(x: 150, y: -178, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 540, y: -22, name: \"out\") property(Number) out_f3db9f\n        out(x: 679, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 345, y: -278) characters_60f2b7 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 487, y: -92) map_5f4b6a root.Std_k98ojb.Iteration.Map {}\n        instance(x: 808, y: -12) reduce_ae7f9c root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1202, y: -148) add_3d7f6c root.Std_k98ojb.Math.Add {}\n\n        input_0d9c7f -> characters_60f2b7.input\n        characters_60f2b7.characters -> map_5f4b6a.items\n        func() {\n            in(x: -56, y: 46, name: \"element\") property(Char) element_5f51f7\n\n            out(x: 210, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 98, y: 17) tonumber_4f3a7b root.Std_k98ojb.Strings.ToNumber {}\n            element_5f51f7 -> tonumber_4f3a7b.input\n            tonumber_4f3a7b.number -> out_d0fd24\n        } -> map_5f4b6a.handler\n        map_5f4b6a.output_list -> reduce_ae7f9c.items\n        func() {\n            in(x: -54, y: 46, name: \"accumulator\") property(Number) accumulator_5f51f7\n            in(x: -54, y: 102, name: \"value\") property(Number) value_8d5f7b\n\n            out(x: 210, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 98, y: 60) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            accumulator_5f51f7 -> add_2f9d09.first\n            value_8d5f7b -> add_2f9d09.second\n            add_2f9d09.result -> out_d0fd24\n        } -> reduce_ae7f9c.reducer\n        0 -> reduce_ae7f9c.initial\n        reduce_ae7f9c.result -> out_f3db9f\n        execute_27b8c3 -> reduce_ae7f9c.execute\n        reduce_ae7f9c.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) sum_of_digits_f0be66 root.main.sum_of_digits {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_number\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) sum_output\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 714, y: -155) characters_instance root.Std_k98ojb.Strings.Characters {}\n        instance(x: 933, y: 25) map_instance root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1121, y: -54) reduce_instance root.Std_k98ojb.Iteration.Reduce {}\n\n        input_number -> characters_instance.input\n        characters_instance.characters -> map_instance.items\n\n        func() {\n            in(x: -76, y: 46, name: \"character\") property(String) character_input\n\n            out(x: 382, y: 19, name: \"digit\") property(Number) digit_output\n\n            instance(x: 106, y: 17) expression_instance root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(character)\"\n            }\n            character_input -> expression_instance.gen_0\n            expression_instance.result -> digit_output\n        } -> map_instance.handler\n\n        map_instance.output_list -> reduce_instance.items\n\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_input\n            in(x: 106, y: 17, name: \"digit\") property(Number) digit_input\n\n            out(x: 382, y: 19, name: \"sum\") property(Number) sum_output\n\n            instance(x: 106, y: 17) add_instance root.Std_k98ojb.Math.Add {}\n            accumulated_input -> add_instance.first\n            digit_input -> add_instance.second\n            add_instance.result -> sum_output\n        } -> reduce_instance.reducer\n\n        0 -> reduce_instance.initial_value\n        reduce_instance.result -> sum_output\n        execute_trigger -> characters_instance.execute\n        reduce_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_f5c03d\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 500, y: 100, name: \"sum\") property(Number) sum_f3db9f\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 100) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 100) map_038fce root.Std_k98ojb.Iteration.Map {}\n        instance(x: 400, y: 100) reduce_8cb3f6 root.Std_k98ojb.Iteration.Reduce {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> map_038fce.items\n\n        func() {\n            in(x: -50, y: 0, name: \"char\") property(String) char_5f51f7\n\n            out(x: 150, y: 0, name: \"digit\") property(Number) digit_d0fd24\n\n            instance(x: 50, y: 0) tonumber_2f9d09 root.Std_k98ojb.Strings.ToLower {}\n            char_5f51f7 -> tonumber_2f9d09.input\n            tonumber_2f9d09.output -> digit_d0fd24\n        } -> map_038fce.handler\n\n        map_038fce.output_list -> reduce_8cb3f6.items\n\n        func() {\n            in(x: -50, y: 0, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -50, y: 50, name: \"digit\") property(Number) digit_5f51f7\n\n            out(x: 150, y: 25, name: \"sum\") property(Number) sum_d0fd24\n\n            instance(x: 50, y: 25) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            acc_5f51f7 -> add_2f9d09.first\n            digit_5f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> sum_d0fd24\n        } -> reduce_8cb3f6.reducer\n\n        0 -> reduce_8cb3f6.initial\n        reduce_8cb3f6.result -> sum_f3db9f\n        execute_27b8c3 -> reduce_8cb3f6.execute\n        reduce_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 50, y: 50, name: \"input\") property(Number) input_f5c03d\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 200, y: 50, name: \"out\") property(Number) out_f3db9f\n        out(x: 250, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 150, y: 200) characters_038fce root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 200) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 450, y: 200) reduce_8cb3f6 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 600, y: 200) tolower_f11fda root.Std_k98ojb.Strings.ToLower {}\n\n        input_f5c03d -> tolower_f11fda.input\n        tolower_f11fda.output -> characters_038fce.input\n        characters_038fce.characters -> map_6030c9.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char_5f51f7\n\n            out(x: 100, y: 50, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 0, y: 50) tonumber_2f9d09 root.Std_k98ojb.Strings.ToNumber {}\n            char_5f51f7 -> tonumber_2f9d09.input\n            tonumber_2f9d09.output -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_8cb3f6.items\n\n        func() {\n            in(x: -50, y: 50, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -50, y: 100, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 100, y: 50, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 0, y: 50) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            accumulated_5f51f7 -> add_2f9d09.first\n            value_5f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> out_d0fd24\n        } -> reduce_8cb3f6.reducer\n\n        reduce_8cb3f6.result -> out_f3db9f\n        execute_27b8c3 -> reduce_8cb3f6.reset\n        reduce_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 30, y: 0, name: \"input\") property(Number) input_123456\n        in(x: 30, y: 30, name: \"execute\") trigger() execute_654321\n\n        out(x: 350, y: 0, name: \"sum\") property(Number) sum_abcdef\n        out(x: 350, y: 30, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 90, y: -50) characters_abc123 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 150, y: 50) map_456def root.Std_k98ojb.Iteration.Map {}\n        instance(x: 250, y: 100) reduce_789ghi root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 300, y: 150) add_123abc root.Std_k98ojb.Math.Add {}\n\n        input_123456 -> characters_abc123.input\n        characters_abc123.characters -> map_456def.items\n\n        func() {\n            in(x: -20, y: 20, name: \"char\") property(String) char_abcdef\n\n            out(x: 100, y: 20, name: \"digit\") property(Number) digit_654321\n\n            instance(x: 50, y: 0) tonumber_123456 root.Std_k98ojb.Strings.ToLower {}\n            char_abcdef -> tonumber_123456.input\n            tonumber_123456.output -> digit_654321\n        } -> map_456def.handler\n\n        map_456def.output_list -> reduce_789ghi.items\n\n        func() {\n            in(x: -20, y: 20, name: \"acc\") property(Number) acc_abcdef\n            in(x: -20, y: 60, name: \"digit\") property(Number) digit_654321\n\n            out(x: 100, y: 40, name: \"sum\") property(Number) sum_abcdef\n\n            acc_abcdef -> add_123abc.first\n            digit_654321 -> add_123abc.second\n            add_123abc.result -> sum_abcdef\n        } -> reduce_789ghi.reducer\n\n        0 -> reduce_789ghi.initial\n        reduce_789ghi.result -> sum_abcdef\n        execute_654321 -> reduce_789ghi.execute\n        reduce_789ghi.done -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_123abc\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 100, name: \"sum\") property(Number) sum_789ghi\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_101jkl\n\n        instance(x: 200, y: 100) toString_111aaa root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 100) map_222bbb root.Std_k98ojb.Iteration.Map {}\n        instance(x: 500, y: 100) reduce_333ccc root.Std_k98ojb.Iteration.Reduce {}\n\n        input_123abc -> toString_111aaa.input\n        toString_111aaa.characters -> map_222bbb.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char_444ddd\n\n            out(x: 150, y: 50, name: \"digit\") property(Number) digit_555eee\n\n            instance(x: 50, y: 50) toNumber_666fff root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(char)\"\n            }\n            char_444ddd -> toNumber_666fff.gen_0\n            toNumber_666fff.result -> digit_555eee\n        } -> map_222bbb.handler\n\n        map_222bbb.output_list -> reduce_333ccc.items\n\n        func() {\n            in(x: -50, y: 50, name: \"accumulated\") property(Number) accumulated_777ggg\n            in(x: -50, y: 100, name: \"digit\") property(Number) digit_888hhh\n\n            out(x: 150, y: 75, name: \"sum\") property(Number) sum_999iii\n\n            instance(x: 50, y: 75) add_000jjj root.Std_k98ojb.Math.Add {}\n            accumulated_777ggg -> add_000jjj.first\n            digit_888hhh -> add_000jjj.second\n            add_000jjj.result -> sum_999iii\n        } -> reduce_333ccc.reducer\n\n        0 -> reduce_333ccc.initial\n        reduce_333ccc.result -> sum_789ghi\n        execute_456def -> reduce_333ccc.execute\n        reduce_333ccc.done -> continue_101jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 0, y: 0, name: \"input\") property(Number) input_8f5d4c\n        in(x: 0, y: 50, name: \"execute\") trigger() execute_2b8f7c\n\n        out(x: 400, y: 0, name: \"sum\") property(Number) sum_3a4f9b\n        out(x: 400, y: 50, name: \"continue\") trigger() continue_9b3f7d\n\n        instance(x: 200, y: 0) characters_7c9f8d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 100) map_3f9b8c root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 100) reduce_8b7c6f root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 100, y: 0) toString_4f8c9d root.Std_k98ojb.Strings.ToString {}\n\n        input_8f5d4c -> toString_4f8c9d.input\n        toString_4f8c9d.output -> characters_7c9f8d.input\n        characters_7c9f8d.characters -> map_3f9b8c.items\n\n        func() {\n            in(x: 0, y: 0, name: \"char\") property(String) char_5d9f8c\n\n            out(x: 200, y: 0, name: \"digit\") property(Number) digit_6f9b7c\n\n            instance(x: 100, y: 0) toNumber_9c8d7e root.Std_k98ojb.Strings.ToNumber {}\n\n            char_5d9f8c -> toNumber_9c8d7e.input\n            toNumber_9c8d7e.output -> digit_6f9b7c\n        } -> map_3f9b8c.handler\n\n        map_3f9b8c.output_list -> reduce_8b7c6f.items\n\n        func() {\n            in(x: 0, y: 0, name: \"accumulated\") property(Number) accumulated_7c9f8d\n            in(x: 0, y: 50, name: \"digit\") property(Number) digit_8d9f7b\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) sum_5f8c9d\n\n            instance(x: 100, y: 0) add_9f8b7c root.Std_k98ojb.Math.Add {}\n\n            accumulated_7c9f8d -> add_9f8b7c.first\n            digit_8d9f7b -> add_9f8b7c.second\n            add_9f8b7c.result -> sum_5f8c9d\n        } -> reduce_8b7c6f.reducer\n\n        0 -> reduce_8b7c6f.initial\n        reduce_8b7c6f.result -> sum_3a4f9b\n        execute_2b8f7c -> reduce_8b7c6f.execute\n        reduce_8b7c6f.done -> continue_9b3f7d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) map_038fce root.Std_k98ojb.Iteration.Map {}\n        instance(x: 933, y: 25) reduce_f11fda root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 714, y: -155) add_8cb3f6 root.Std_k98ojb.Math.Add {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> map_038fce.items\n        func() {\n            in(x: -76, y: 46, name: \"char\") property(String) char_5f51f7\n\n            out(x: 382, y: 19, name: \"digit\") property(Number) digit_d0fd24\n\n            instance(x: 106, y: 17) tonumber_2f9d09 root.Std_k98ojb.Strings.ToNumber {}\n            char_5f51f7 -> tonumber_2f9d09.input\n            tonumber_2f9d09.output -> digit_d0fd24\n        } -> map_038fce.handler\n        map_038fce.output_list -> reduce_f11fda.items\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 86, name: \"digit\") property(Number) digit_5f51f7\n\n            out(x: 382, y: 19, name: \"sum\") property(Number) sum_d0fd24\n\n            instance(x: 106, y: 17) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            acc_5f51f7 -> add_2f9d09.first\n            digit_5f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> sum_d0fd24\n        } -> reduce_f11fda.reducer\n        0 -> reduce_f11fda.initial\n        reduce_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) sum_of_digits_f0be66 root.main.sum_of_digits {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 80, y: -80, name: \"input\") property(Number) input_8f5b3d\n        in(x: 80, y: -40, name: \"execute\") trigger() execute_3c8f4b\n\n        out(x: 500, y: 0, name: \"sum\") property(Number) sum_1a2b3c\n        out(x: 500, y: 40, name: \"continue\") trigger() continue_4d5e6f\n\n        instance(x: 240, y: -160) characters_0a1b2c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 240, y: 0) map_3d4e5f root.Std_k98ojb.Iteration.Map {}\n        instance(x: 400, y: 0) reduce_6f7g8h root.Std_k98ojb.Iteration.Reduce {}\n\n        input_8f5b3d -> characters_0a1b2c.input\n        characters_0a1b2c.characters -> map_3d4e5f.items\n\n        func() {\n            in(x: -60, y: 0, name: \"char\") property(String) char_9a8b7c\n\n            out(x: 160, y: 0, name: \"digit\") property(Number) digit_0d1e2f\n\n            instance(x: 40, y: 0) expression_3c4d5e root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(char)\"\n            }\n            char_9a8b7c -> expression_3c4d5e.gen_0\n            expression_3c4d5e.result -> digit_0d1e2f\n        } -> map_3d4e5f.handler\n\n        map_3d4e5f.output_list -> reduce_6f7g8h.items\n\n        func() {\n            in(x: -60, y: 0, name: \"accumulated\") property(Number) accumulated_7f8g9h\n            in(x: -60, y: 40, name: \"digit\") property(Number) digit_1i2j3k\n\n            out(x: 160, y: 20, name: \"sum\") property(Number) sum_4l5m6n\n\n            instance(x: 40, y: 20) add_7o8p9q root.Std_k98ojb.Math.Add {}\n            accumulated_7f8g9h -> add_7o8p9q.first\n            digit_1i2j3k -> add_7o8p9q.second\n            add_7o8p9q.result -> sum_4l5m6n\n        } -> reduce_6f7g8h.reducer\n\n        0 -> reduce_6f7g8h.initial\n        reduce_6f7g8h.result -> sum_1a2b3c\n        execute_3c8f4b -> reduce_6f7g8h.reset\n        reduce_6f7g8h.done -> continue_4d5e6f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 50, y: 50, name: \"input\") property(Number) input_number\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 50, name: \"sum\") property(Number) sum_output\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 50) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 150, y: 150) map_node root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 150) reduce_node root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 450, y: 150) add_node root.Std_k98ojb.Math.Add {}\n\n        input_number -> characters_node.input\n        characters_node.characters -> map_node.items\n\n        func() {\n            in(x: 50, y: 50, name: \"character\") property(String) character_input\n            out(x: 200, y: 50, name: \"digit\") property(Number) digit_output\n\n            instance(x: 100, y: 50) expression_node root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(character)\"\n            }\n\n            character_input -> expression_node.gen_0\n            expression_node.result -> digit_output\n        } -> map_node.handler\n\n        map_node.output_list -> reduce_node.items\n\n        func() {\n            in(x: 50, y: 50, name: \"accumulated\") property(Number) accumulated_input\n            in(x: 50, y: 100, name: \"digit\") property(Number) digit_input\n            out(x: 200, y: 75, name: \"sum\") property(Number) sum_output\n\n            accumulated_input -> add_node.first\n            digit_input -> add_node.second\n            add_node.result -> sum_output\n        } -> reduce_node.reducer\n\n        0 -> reduce_node.initial_value\n        reduce_node.result -> sum_output\n\n        execute_trigger -> characters_node.execute\n        reduce_node.done -> continue_trigger\n    }\n}"
            ],
            "15": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 180, y: -100, name: \"list\") property(List) list_input\n        in(x: 180, y: -50, name: \"execute\") trigger() execute_input\n\n        out(x: 500, y: -100, name: \"isSorted\") property(Bool) is_sorted_output\n        out(x: 500, y: -50, name: \"continue\") trigger() continue_output\n\n        instance(x: 350, y: -100) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 350, y: 0) for_node root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: 0) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 750, y: 0) not_equal_node root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 600, y: 100) get_at_node_1 root.Std_k98ojb.List.GetAt {}\n        instance(x: 750, y: 100) get_at_node_2 root.Std_k98ojb.List.GetAt {}\n        instance(x: 900, y: 0) greater_than_node root.Std_k98ojb.Math.GreaterThan {}\n\n        list_input -> length_node.list\n        length_node.length -> for_node.items\n        for_node.index -> get_at_node_1.index\n        list_input -> get_at_node_1.list\n        for_node.index -> not_equal_node.left\n        length_node.length -> not_equal_node.right\n        not_equal_node.result -> if_node.predicate\n        if_node.then -> for_node.next\n        if_node.else -> continue_output\n        for_node.index -> get_at_node_2.index\n        list_input -> get_at_node_2.list\n        get_at_node_1.item -> greater_than_node.left\n        get_at_node_2.item -> greater_than_node.right\n        greater_than_node.result -> is_sorted_output\n        execute_input -> for_node.reset\n        for_node.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(current <= next)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 1250, y: -100) length_3fbb9f root.Std_k98ojb.List.Length {}\n\n        input_f5c03d -> length_3fbb9f.list\n        1 -> add_b4554f.second\n        length_3fbb9f.length -> add_b4554f.first\n        add_b4554f.result -> for_8cb3f6.items\n        for_8cb3f6.index -> lessthanorequal_f11fda.left\n        length_3fbb9f.length -> lessthanorequal_f11fda.right\n        lessthanorequal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        expression_b720d7.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n        for_8cb3f6.index -> expression_b720d7.gen_0\n        input_f5c03d -> expression_b720d7.gen_1\n        expression_b720d7.gen_0 -> expression_b720d7.current\n        expression_b720d7.gen_1 -> expression_b720d7.next\n        if_07b8c7.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_e19a62.else -> for_8cb3f6.next\n    }\n\n    instance(x: -189, y: 222) is_sorted_f0be66 root.main.is_sorted {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) is_sorted\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 714, y: -155) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) greaterthan_f11fda root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 1121, y: -54) not_07b8c7 root.Std_k98ojb.Logic.Not {}\n\n        input_list -> for_8cb3f6.items\n        for_8cb3f6.index -> greaterthan_f11fda.left\n        0 -> greaterthan_f11fda.right\n        greaterthan_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> not_07b8c7.input\n        not_07b8c7.output -> is_sorted\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        for_8cb3f6.next -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"input\") property(List) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) is_sorted_out\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 714, y: -155) if_check root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) not_equal root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1504, y: -400) less_than root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1812, y: -319) list_get_at_1 root.Std_k98ojb.List.GetAt {}\n        instance(x: 2136, y: -356) list_get_at_2 root.Std_k98ojb.List.GetAt {}\n        instance(x: 1088, y: -256) add_index root.Std_k98ojb.Math.Add {}\n        instance(x: 1250, y: -80) list_length root.Std_k98ojb.List.Length {}\n\n        input_list -> list_length.list\n        list_length.length -> add_index.first\n        -1 -> add_index.second\n        add_index.result -> for_loop.items\n        for_loop.index -> list_get_at_1.index\n        input_list -> list_get_at_1.list\n        for_loop.index -> add_index.first\n        add_index.result -> list_get_at_2.index\n        input_list -> list_get_at_2.list\n        list_get_at_1.item -> less_than.left\n        list_get_at_2.item -> less_than.right\n        less_than.result -> not_equal.left\n        false -> not_equal.right\n        not_equal.result -> if_check.predicate\n        for_loop.onItem -> if_check.execute\n        if_check.then -> continue_trigger\n        if_check.else -> for_loop.next\n        for_loop.done -> is_sorted_out\n        execute_trigger -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 50, y: 50, name: \"list\") property(List<Number>) input_list\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 50, name: \"sorted\") property(Bool) output_sorted\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 250, y: 50) get_at_current root.Std_k98ojb.List.GetAt {}\n        instance(x: 250, y: 100) get_at_next root.Std_k98ojb.List.GetAt {}\n        instance(x: 350, y: 50) less_than_or_equal root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 350, y: 100) if_not_sorted root.Std_k98ojb.Std.If {}\n\n        input_list -> for_loop.items\n        for_loop.index -> get_at_current.index\n        input_list -> get_at_current.list\n        for_loop.index -> Math.Add {\n            first: 1\n            second: for_loop.index\n        } -> get_at_next.index\n        input_list -> get_at_next.list\n\n        get_at_current.item -> less_than_or_equal.left\n        get_at_next.item -> less_than_or_equal.right\n        less_than_or_equal.result -> if_not_sorted.predicate\n\n        for_loop.onItem -> if_not_sorted.execute\n        if_not_sorted.then -> for_loop.next\n        if_not_sorted.else -> continue_trigger\n\n        for_loop.done -> output_sorted\n        for_loop.done -> continue_trigger\n\n        execute_trigger -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 200, y: 100, name: \"input\") property(List<Number>) input_list\n\n        out(x: 800, y: 100, name: \"out\") property(Bool) is_sorted\n\n        instance(x: 400, y: 100) for_1 root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: 100) if_1 root.Std_k98ojb.Std.If {}\n        instance(x: 500, y: 200) lessthanorequal_1 root.Std_k98ojb.Math.LessThanOrEqual {}\n\n        input_list -> for_1.items\n        for_1.index -> lessthanorequal_1.left\n        for_1.item -> lessthanorequal_1.right\n        lessthanorequal_1.result -> if_1.input\n        for_1.onItem -> if_1.execute\n        if_1.then -> for_1.next\n        if_1.else -> is_sorted\n        for_1.done -> is_sorted\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 158, y: -64, name: \"input_list\") property(List<Number>) input_list_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 674, y: -64, name: \"is_sorted\") property(Bool) is_sorted_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 371, y: -114) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 553, y: -239) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 800, y: -168) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1115, y: -116) not_27b8c3 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1324, y: -77) false_5f51f7 root.Std_k98ojb.Std.False {}\n        instance(x: 1333, y: -235) true_d0fd24 root.Std_k98ojb.Std.True {}\n        instance(x: 1003, y: -300) equal_9fba8c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1331, y: -348) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_list_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.item -> lessthanorequal_f11fda.left\n        for_8cb3f6.index -> equal_9fba8c.left\n        0 -> equal_9fba8c.right\n        equal_9fba8c.result -> if_e19a62.predicate\n        for_8cb3f6.onItem -> if_e19a62.execute\n        if_e19a62.then -> for_8cb3f6.next\n        if_e19a62.else -> {\n            for_8cb3f6.index -> lessthanorequal_f11fda.right\n            lessthanorequal_f11fda.result -> if_07b8c7.predicate\n            if_07b8c7.then -> for_8cb3f6.next\n            if_07b8c7.else -> not_27b8c3.input\n            not_27b8c3.output -> is_sorted_f3db9f\n            not_27b8c3.output -> false_5f51f7.value\n            false_5f51f7.value -> continue_8ba06b\n        }\n        for_8cb3f6.done -> {\n            true_d0fd24.value -> is_sorted_f3db9f\n            true_d0fd24.value -> continue_8ba06b\n        }\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_is_sorted\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 591, y: 74) length_instance root.Std_k98ojb.List.Length {}\n        instance(x: 933, y: 25) lessthan_instance root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 714, y: -155) getat_instance root.Std_k98ojb.List.GetAt {}\n        instance(x: 1121, y: -54) if_instance root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) not_equal_instance root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1088, y: -256) add_instance root.Std_k98ojb.Math.Add {}\n\n        input_list -> length_instance.list\n        length_instance.length -> add_instance.first\n        -1 -> add_instance.second\n        add_instance.result -> for_loop.items\n\n        for_loop.index -> getat_instance.index\n        input_list -> getat_instance.list\n        getat_instance.item -> lessthan_instance.left\n\n        for_loop.index -> add_instance.first\n        1 -> add_instance.second\n        add_instance.result -> getat_instance.index\n        input_list -> getat_instance.list\n        getat_instance.item -> lessthan_instance.right\n\n        lessthan_instance.result -> not_equal_instance.left\n        false -> not_equal_instance.right\n        not_equal_instance.result -> if_instance.predicate\n\n        for_loop.onItem -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n\n        if_instance.value -> out_is_sorted\n        for_loop.done -> continue_trigger\n        execute_trigger -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"input\") property(List) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) getat_038fce root.Std_k98ojb.List.GetAt {}\n        instance(x: 1496, y: -187) getat_9fba8c root.Std_k98ojb.List.GetAt {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 2136, y: -356) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1812, y: -319) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1808, y: -497) lessthanorequal_80a119 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1030, y: -479) length_80a119 root.Std_k98ojb.List.Length {}\n\n        input_f5c03d -> length_80a119.list\n        length_80a119.length -> lessthanorequal_80a119.right\n        1 -> lessthanorequal_80a119.left\n        lessthanorequal_80a119.result -> if_e19a62.predicate\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> for_8cb3f6.reset\n        input_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.index -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> getat_038fce.index\n        input_f5c03d -> getat_038fce.list\n        for_8cb3f6.item -> getat_9fba8c.index\n        input_f5c03d -> getat_9fba8c.list\n        getat_9fba8c.item -> lessthanorequal_f11fda.left\n        getat_038fce.item -> lessthanorequal_f11fda.right\n        lessthanorequal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> for_8cb3f6.next\n        if_07b8c7.else -> not_80a119.input\n        not_80a119.output -> out_f3db9f\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> if_e19a62.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 250, y: -50, name: \"input\") property(List<Number>) input_list\n\n        out(x: 700, y: 50, name: \"out\") property(Bool) is_sorted\n\n        instance(x: 450, y: -100) lessthanorequal root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 500, y: 100) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"it ? true : false\"\n        }\n        instance(x: 300, y: 0) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 550, y: -50) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list -> for_loop.items\n        for_loop.onItem -> lessthanorequal.execute\n        for_loop.index -> lessthanorequal.left\n        for_loop.item -> lessthanorequal.right\n        lessthanorequal.result -> not_equal.left\n        false -> not_equal.right\n        not_equal.result -> if_expression.input\n        if_expression.value -> is_sorted\n        for_loop.done -> is_sorted\n    }\n}"
            ],
            "25": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 50, y: 0, name: \"list1\") property(List<Number>) list1\n        in(x: 50, y: 50, name: \"list2\") property(List<Number>) list2\n        in(x: 50, y: 100, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 50, name: \"result\") property(List<Number>) result\n        out(x: 400, y: 100, name: \"done\") trigger() done\n\n        instance(x: 200, y: 50) zip_1 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 300, y: 50) modulo_1 root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_1.left\n        list2 -> zip_1.right\n\n        func() {\n            in(x: 0, y: 0, name: \"left\") property(Number) left\n            in(x: 0, y: 50, name: \"right\") property(Number) right\n\n            out(x: 200, y: 25, name: \"mod_result\") property(Number) mod_result\n\n            left -> modulo_1.value\n            right -> modulo_1.divisor\n            modulo_1.result -> mod_result\n        } -> zip_1.handler\n\n        zip_1.zipped -> result\n        execute -> zip_1.trigger\n        zip_1.zipped -> done\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 174, y: -52, name: \"list1\") property(List<Number>) list1_9fbd3a\n        in(x: 174, y: 50, name: \"list2\") property(List<Number>) list2_3e2a7c\n        in(x: 174, y: 152, name: \"execute\") trigger() execute_4b8a1f\n\n        out(x: 714, y: 50, name: \"result\") property(List<Number>) result_7f9b2d\n        out(x: 714, y: 152, name: \"continue\") trigger() continue_2f9d1b\n\n        instance(x: 474, y: 50) zip_1f9c7d root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 954, y: 50) map_7f3a1c root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1234, y: 50) modulo_8f2b4d root.Std_k98ojb.Math.Modulo {}\n\n        list1_9fbd3a -> zip_1f9c7d.left\n        list2_3e2a7c -> zip_1f9c7d.right\n        zip_1f9c7d.zipped -> map_7f3a1c.items\n\n        func() {\n            in(x: -76, y: 50, name: \"pair\") property(Tuple<Number, Number>) pair_2f8a7b\n\n            out(x: 282, y: 50, name: \"out\") property(Number) out_3e8a1d\n\n            instance(x: 106, y: 50) get_at_1f8b3d root.Std_k98ojb.List.GetAt {}\n            instance(x: 106, y: 150) get_at_2f9b4e root.Std_k98ojb.List.GetAt {}\n\n            pair_2f8a7b -> get_at_1f8b3d.list\n            0 -> get_at_1f8b3d.index\n            pair_2f8a7b -> get_at_2f9b4e.list\n            1 -> get_at_2f9b4e.index\n\n            get_at_1f8b3d.item -> modulo_8f2b4d.value\n            get_at_2f9b4e.item -> modulo_8f2b4d.divisor\n            modulo_8f2b4d.result -> out_3e8a1d\n        } -> map_7f3a1c.handler\n\n        map_7f3a1c.output_list -> result_7f9b2d\n        execute_4b8a1f -> zip_1f9c7d.execute\n        map_7f3a1c.done -> continue_2f9d1b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 100, y: 50, name: \"list1\") property(List<Number>) list1\n        in(x: 100, y: 100, name: \"list2\") property(List<Number>) list2\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 100, name: \"result\") property(List<Number>) result\n        out(x: 500, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: 100) zip_handler root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 700, y: 100) modulo_handler root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_handler.left\n        list2 -> zip_handler.right\n        zip_handler.zipped -> result\n        execute -> zip_handler.trigger\n        zip_handler.done -> continue\n\n        func() {\n            in(x: -100, y: 50, name: \"a\") property(Number) a\n            in(x: -100, y: 100, name: \"b\") property(Number) b\n\n            out(x: 300, y: 75, name: \"out\") property(Number) out\n\n            a -> modulo_handler.value\n            b -> modulo_handler.divisor\n            modulo_handler.result -> out\n        } -> zip_handler.handler\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 82, y: -65, name: \"list1\") property(List<Number>) list1_123abc\n        in(x: 82, y: 32, name: \"list2\") property(List<Number>) list2_456def\n        in(x: 82, y: 129, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 282, y: 32, name: \"result\") property(List<Number>) result_abc123\n        out(x: 282, y: 129, name: \"continue\") trigger() continue_def456\n\n        instance(x: 182, y: 32) zip_123456 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 382, y: 32) map_modulo_654321 root.Std_k98ojb.Iteration.Map {}\n\n        list1_123abc -> zip_123456.left\n        list2_456def -> zip_123456.right\n        zip_123456.zipped -> map_modulo_654321.items\n\n        func() {\n            in(x: -76, y: 46, name: \"pair\") property(Tuple<Number, Number>) pair_789abc\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_def789\n\n            instance(x: 106, y: 17) modulo_987654 root.Std_k98ojb.Math.Modulo {}\n            pair_789abc.item0 -> modulo_987654.value\n            pair_789abc.item1 -> modulo_987654.divisor\n            modulo_987654.result -> out_def789\n        } -> map_modulo_654321.handler\n\n        map_modulo_654321.output_list -> result_abc123\n        execute_789ghi -> zip_123456.trigger\n        zip_123456.done -> continue_def456\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element-wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 72, y: 52, name: \"list1\") property(List<Number>) list1_1c72d8\n        in(x: 72, y: 112, name: \"list2\") property(List<Number>) list2_3b6f8e\n        in(x: 72, y: 172, name: \"execute\") trigger() execute_1d5b7c\n\n        out(x: 312, y: 52, name: \"result\") property(List<Number>) result_2f7b4a\n        out(x: 312, y: 112, name: \"continue\") trigger() continue_4c3a9b\n\n        instance(x: 192, y: 52) zip_5d6e7f root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 432, y: 52) map_7f8e9a root.Std_k98ojb.Iteration.Map {}\n        instance(x: 672, y: 52) modulo_8f9b1c root.Std_k98ojb.Math.Modulo {}\n\n        list1_1c72d8 -> zip_5d6e7f.left\n        list2_3b6f8e -> zip_5d6e7f.right\n        zip_5d6e7f.zipped -> map_7f8e9a.items\n\n        func() {\n            in(x: -76, y: 46, name: \"pair\") property(Tuple<Number, Number>) pair_9f5b7e\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_a3d9f1\n\n            instance(x: 106, y: 17) get_first_2f9d09 root.Std_k98ojb.List.GetAt {}\n            instance(x: 206, y: 17) get_second_3f9e0a root.Std_k98ojb.List.GetAt {}\n\n            pair_9f5b7e -> get_first_2f9d09.list\n            0 -> get_first_2f9d09.index\n            pair_9f5b7e -> get_second_3f9e0a.list\n            1 -> get_second_3f9e0a.index\n\n            get_first_2f9d09.item -> modulo_8f9b1c.value\n            get_second_3f9e0a.item -> modulo_8f9b1c.divisor\n\n            modulo_8f9b1c.result -> out_a3d9f1\n        } -> map_7f8e9a.handler\n\n        map_7f8e9a.output_list -> result_2f7b4a\n        execute_1d5b7c -> zip_5d6e7f.trigger\n        zip_5d6e7f.done -> continue_4c3a9b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 150, y: 150, name: \"list1\") property(List) list1\n        in(x: 150, y: 200, name: \"list2\") property(List) list2\n        in(x: 150, y: 250, name: \"execute\") trigger() execute\n\n        out(x: 550, y: 150, name: \"result\") property(List) result\n        out(x: 550, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 350, y: 150) zip root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 750, y: 150) map root.Std_k98ojb.Iteration.Map {}\n        instance(x: 950, y: 150) modulo root.Std_k98ojb.Math.Modulo {}\n\n        execute -> zip.trigger\n        list1 -> zip.left\n        list2 -> zip.right\n\n        zip.zipped -> map.items\n\n        func() {\n            in(x: -50, y: 150, name: \"pair\") property(Tuple) pair\n\n            out(x: 250, y: 150, name: \"mod_result\") property(Number) mod_result\n\n            instance(x: 50, y: 150) get_first root.Std_k98ojb.List.GetAt {}\n            instance(x: 50, y: 200) get_second root.Std_k98ojb.List.GetAt {}\n\n            pair -> get_first.list\n            pair -> get_second.list\n\n            0 -> get_first.index\n            1 -> get_second.index\n\n            get_first.item -> modulo.value\n            get_second.item -> modulo.divisor\n\n            modulo.result -> mod_result\n        } -> map.handler\n\n        map.output_list -> result\n        map.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 161, y: -211, name: \"list1\") property(List) list1\n        in(x: 161, y: -161, name: \"list2\") property(List) list2\n        in(x: 161, y: -111, name: \"execute\") trigger() execute\n\n        out(x: 1748, y: -10, name: \"result\") property(List) result\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue\n\n        instance(x: 352, y: -493) zip_6030c9 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 591, y: 74) map_038fce root.Std_k98ojb.Iteration.Map {}\n\n        list1 -> zip_6030c9.left\n        list2 -> zip_6030c9.right\n\n        func() {\n            in(x: -76, y: 46, name: \"left\") property(Number) left\n            in(x: -76, y: 96, name: \"right\") property(Number) right\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            left -> modulo_2f9d09.value\n            right -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> out\n        } -> zip_6030c9.handler\n\n        zip_6030c9.zipped -> map_038fce.items\n        map_038fce.output_list -> result\n        execute -> zip_6030c9.trigger\n        map_038fce.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 120, y: 40, name: \"list1\") property(List<Number>) list1\n        in(x: 120, y: 80, name: \"list2\") property(List<Number>) list2\n        in(x: 120, y: 120, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 80, name: \"result\") property(List<Number>) result\n        out(x: 400, y: 120, name: \"continue\") trigger() continue\n\n        instance(x: 240, y: 80) zip_5a6d8c root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 560, y: 80) map_2b7f9a root.Std_k98ojb.Iteration.Map {}\n        instance(x: 720, y: 80) modulo_3e4c5d root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_5a6d8c.left\n        list2 -> zip_5a6d8c.right\n        zip_5a6d8c.zipped -> map_2b7f9a.items\n\n        func() {\n            in(x: -80, y: 40, name: \"pair\") property(Tuple<Number, Number>) pair\n\n            out(x: 160, y: 40, name: \"mod_result\") property(Number) mod_result\n\n            instance(x: 0, y: 40) get_first_1a2b3c root.Std_k98ojb.List.GetAt {}\n            instance(x: 0, y: 80) get_second_4d5e6f root.Std_k98ojb.List.GetAt {}\n\n            pair -> get_first_1a2b3c.list\n            0 -> get_first_1a2b3c.index\n            pair -> get_second_4d5e6f.list\n            1 -> get_second_4d5e6f.index\n\n            get_first_1a2b3c.item -> modulo_3e4c5d.value\n            get_second_4d5e6f.item -> modulo_3e4c5d.divisor\n\n            modulo_3e4c5d.result -> mod_result\n        } -> map_2b7f9a.handler\n\n        map_2b7f9a.output_list -> result\n        execute -> zip_5a6d8c.execute\n        map_2b7f9a.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 40, y: -20, name: \"list1\") property(List<Number>) list1\n        in(x: 40, y: 20, name: \"list2\") property(List<Number>) list2\n        in(x: 40, y: 60, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 20, name: \"result\") property(List<Number>) result\n        out(x: 300, y: 60, name: \"continue\") trigger() continue\n\n        instance(x: 160, y: 20) zip_instance root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 220, y: 20) modulo_instance root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_instance.left\n        list2 -> zip_instance.right\n\n        func() {\n            in(x: -60, y: 20, name: \"left\") property(Number) left\n            in(x: -60, y: 60, name: \"right\") property(Number) right\n\n            out(x: 160, y: 40, name: \"result\") property(Number) result\n\n            left -> modulo_instance.value\n            right -> modulo_instance.divisor\n            modulo_instance.result -> result\n        } -> zip_instance.handler\n\n        zip_instance.zipped -> result\n        execute -> zip_instance.execute\n        zip_instance.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element-wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 100, y: 50, name: \"list1\") property(List) list1_0f3a1b\n        in(x: 100, y: 100, name: \"list2\") property(List) list2_1a2b3c\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 400, y: 100, name: \"result\") property(List) result_3d2c1b\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 100) zip_0a1b2c root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 300, y: 100) modulo_3c2b1a root.Std_k98ojb.Math.Modulo {}\n\n        list1_0f3a1b -> zip_0a1b2c.left\n        list2_1a2b3c -> zip_0a1b2c.right\n\n        func() {\n            in(x: -50, y: 50, name: \"left\") property(Number) left_5f51f7\n            in(x: -50, y: 100, name: \"right\") property(Number) right_6a7b8c\n\n            out(x: 200, y: 75, name: \"out\") property(Number) out_d0fd24\n\n            left_5f51f7 -> modulo_3c2b1a.value\n            right_6a7b8c -> modulo_3c2b1a.divisor\n            modulo_3c2b1a.result -> out_d0fd24\n        } -> zip_0a1b2c.handler\n\n        zip_0a1b2c.zipped -> result_3d2c1b\n        execute_27b8c3 -> zip_0a1b2c.trigger\n        zip_0a1b2c.done -> continue_8ba06b\n    }\n}"
            ],
            "26": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 354, y: -53, name: \"input\") property(String) input_string\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(String) output_string\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 591, y: 74) to_upper_038fce root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_038fce.input\n        to_upper_038fce.output -> output_string\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_string\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 120, y: 100, name: \"input\") property(String) input_string\n        in(x: 120, y: 140, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 140, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 120) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n        \n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> to_upper_instance.execute\n        to_upper_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 200, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"out\") property(String) output_string\n        out(x: 500, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n        \n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> to_upper_instance.trigger\n        to_upper_instance.trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 150, y: 50, name: \"input\") property(String) input_string\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 50, name: \"output\") property(String) output_string\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 75) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        execute_trigger -> to_upper_instance.execute\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n        to_upper_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 200, y: 100, name: \"input\") property(String) input_string\n        in(x: 200, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"output\") property(String) output_string\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 400, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n\n        execute_trigger -> to_uppercase_instance.trigger\n        to_uppercase_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        execute_trigger -> to_uppercase_instance.execute\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n        to_uppercase_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "30": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_up_to_position {\n        in(x: 30, y: 30, name: \"array\") property(List<Any>) array_0a5b6d\n        in(x: 30, y: 90, name: \"position\") property(Number) position_1c3d7e\n        in(x: 30, y: 150, name: \"execute\") trigger() execute_2b4f8c\n\n        out(x: 350, y: 30, name: \"reversed_array\") property(List<Any>) reversed_array_3d6e7f\n        out(x: 350, y: 90, name: \"continue\") trigger() continue_4e7f8a\n\n        instance(x: 150, y: 30) slice_5f6g7h root.Std_k98ojb.List.Slice {}\n        instance(x: 150, y: 90) reversed_6g7h8i root.Std_k98ojb.List.Reversed {}\n        instance(x: 250, y: 60) concat_7h8i9j root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_5f6g7h.start\n        position_1c3d7e -> slice_5f6g7h.end\n        array_0a5b6d -> slice_5f6g7h.list\n        slice_5f6g7h.slice -> reversed_6g7h8i.list\n        reversed_6g7h8i.reversed -> concat_7h8i9j.left\n        array_0a5b6d -> concat_7h8i9j.right\n        position_1c3d7e -> concat_7h8i9j.rightStart\n        concat_7h8i9j.concatenated -> reversed_array_3d6e7f\n\n        execute_2b4f8c -> slice_5f6g7h.reset\n        slice_5f6g7h.done -> continue_4e7f8a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 100, y: 100, name: \"array\") property(List) array_input\n        in(x: 100, y: 150, name: \"position\") property(Number) position_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 150, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 250, y: 150) reverse_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 250, y: 200) concat_instance root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.slice -> reverse_instance.list\n        reverse_instance.reversed -> concat_instance.left\n\n        position_input -> slice_instance.start\n        -1 -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.slice -> concat_instance.right\n        concat_instance.list -> reversed_array_output\n\n        execute_trigger -> slice_instance.reset\n        concat_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_upto_position {\n        in(x: 100, y: 50, name: \"array\") property(List) array_input\n        in(x: 100, y: 100, name: \"position\") property(Number) position_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 50, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 50) slice_1 root.Std_k98ojb.List.Slice {}\n        instance(x: 350, y: 50) reverse_1 root.Std_k98ojb.List.Reversed {}\n        instance(x: 250, y: 150) slice_2 root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 100) concat_1 root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_1.start\n        position_input -> slice_1.end\n        array_input -> slice_1.list\n        slice_1.list -> reverse_1.list\n        reverse_1.list -> concat_1.left\n\n        position_input -> slice_2.start\n        -1 -> slice_2.end\n        array_input -> slice_2.list\n        slice_2.list -> concat_1.right\n\n        concat_1.list -> reversed_array_output\n        execute_trigger -> slice_1.trigger\n        slice_1.done -> slice_2.trigger\n        slice_2.done -> concat_1.trigger\n        concat_1.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_upto_position {\n        in(x: 0, y: 0, name: \"array\") property(List) array_1\n        in(x: 0, y: 100, name: \"position\") property(Number) position_2\n        in(x: 0, y: 200, name: \"execute\") trigger() execute_3\n\n        out(x: 300, y: 0, name: \"reversed_array\") property(List) reversed_array_4\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_5\n\n        instance(x: 100, y: 0) slice_6 root.Std_k98ojb.List.Slice {}\n        instance(x: 200, y: 0) reversed_7 root.Std_k98ojb.List.Reversed {}\n        instance(x: 100, y: 100) slice_8 root.Std_k98ojb.List.Slice {}\n        instance(x: 200, y: 100) concat_9 root.Std_k98ojb.List.Concat {}\n\n        array_1 -> slice_6.list\n        0 -> slice_6.start\n        position_2 -> slice_6.end\n\n        slice_6.slice -> reversed_7.list\n        reversed_7.reversed -> concat_9.left\n\n        array_1 -> slice_8.list\n        position_2 -> slice_8.start\n        -1 -> slice_8.end\n\n        slice_8.slice -> concat_9.right\n        concat_9.list -> reversed_array_4\n\n        execute_3 -> continue_5\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"reverses an array up to a given position.\") reverse_upto_position {\n        in(x: 100, y: 100, name: \"array\") property(List) array_input\n        in(x: 100, y: 150, name: \"position\") property(Number) position_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_input\n\n        out(x: 600, y: 100, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 300, y: 100) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 200) reversed_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 450, y: 150) concat_instance root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.slice -> reversed_instance.list\n\n        reversed_instance.reversed -> concat_instance.left\n        slice_instance.slice -> concat_instance.right\n\n        concat_instance.concatenated -> reversed_array_output\n\n        execute_input -> slice_instance.execute\n        slice_instance.done -> reversed_instance.execute\n        reversed_instance.done -> concat_instance.execute\n        concat_instance.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_upto_position {\n        in(x: 110, y: -20, name: \"array\") property(List) array_1a2b3c\n        in(x: 110, y: 40, name: \"position\") property(Number) position_4d5e6f\n        in(x: 110, y: 100, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 460, y: 40, name: \"reversed_array\") property(List) reversed_array_0j1k2l\n        out(x: 460, y: 100, name: \"continue\") trigger() continue_3m4n5o\n\n        instance(x: 270, y: 40) slice_6p7q8r root.Std_k98ojb.List.Slice {}\n        instance(x: 360, y: 40) reverse_9s0t1u root.Std_k98ojb.List.Reversed {}\n        instance(x: 550, y: 40) concat_2v3w4x root.Std_k98ojb.List.Concat {}\n\n        array_1a2b3c -> slice_6p7q8r.list\n        0 -> slice_6p7q8r.start\n        position_4d5e6f -> slice_6p7q8r.end\n\n        slice_6p7q8r.list -> reverse_9s0t1u.list\n        reverse_9s0t1u.list -> concat_2v3w4x.left\n\n        array_1a2b3c -> slice_6p7q8r.list\n        position_4d5e6f -> slice_6p7q8r.start\n        -1 -> slice_6p7q8r.end\n\n        slice_6p7q8r.list -> concat_2v3w4x.right\n        concat_2v3w4x.list -> reversed_array_0j1k2l\n\n        execute_7g8h9i -> slice_6p7q8r.reset\n        slice_6p7q8r.done -> continue_3m4n5o\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 158, y: -53, name: \"array\") property(List<Any>) array_6f9c8b\n        in(x: 158, y: 47, name: \"position\") property(Number) position_5f7c8d\n        in(x: 158, y: 147, name: \"execute\") trigger() execute_2c9f8e\n\n        out(x: 958, y: 47, name: \"reversed_array\") property(List<Any>) reversed_array_4f7c8e\n        out(x: 958, y: 147, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 408, y: 47) slice_4c7f8e root.Std_k98ojb.List.Slice {}\n        instance(x: 608, y: 47) reversed_3f7c8d root.Std_k98ojb.List.Reversed {}\n        instance(x: 808, y: 47) concat_2f7c8e root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_4c7f8e.start\n        position_5f7c8d -> slice_4c7f8e.end\n        array_6f9c8b -> slice_4c7f8e.list\n        slice_4c7f8e.slice -> reversed_3f7c8d.list\n        reversed_3f7c8d.reversed -> concat_2f7c8e.left\n        slice_4c7f8e.end -> slice_4c7f8e.start\n        array_6f9c8b -> slice_4c7f8e.list\n        slice_4c7f8e.slice -> concat_2f7c8e.right\n        concat_2f7c8e.concatenated -> reversed_array_4f7c8e\n        execute_2c9f8e -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 82, y: 16, name: \"array\") property(List) array_ae8f32\n        in(x: 82, y: 74, name: \"position\") property(Number) position_4f7c1b\n        in(x: 82, y: 132, name: \"execute\") trigger() execute_3d4f6a\n\n        out(x: 484, y: 46, name: \"reversedArray\") property(List) reversedArray_1b2f8c\n        out(x: 484, y: 104, name: \"continue\") trigger() continue_5e3d2a\n\n        instance(x: 290, y: -76) slice_1f2d9b root.Std_k98ojb.List.Slice {}\n        instance(x: 290, y: 46) slice_9f2c8d root.Std_k98ojb.List.Slice {}\n        instance(x: 342, y: -28) reversed_7d3b9f root.Std_k98ojb.List.Reversed {}\n        instance(x: 420, y: 8) concat_4f3a2d root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_1f2d9b.start\n        position_4f7c1b -> slice_1f2d9b.end\n        array_ae8f32 -> slice_1f2d9b.list\n        slice_1f2d9b.slice -> reversed_7d3b9f.list\n        reversed_7d3b9f.reversed -> concat_4f3a2d.left\n        position_4f7c1b -> slice_9f2c8d.start\n        -1 -> slice_9f2c8d.end\n        array_ae8f32 -> slice_9f2c8d.list\n        slice_9f2c8d.slice -> concat_4f3a2d.right\n        concat_4f3a2d.list -> reversedArray_1b2f8c\n        execute_3d4f6a -> continue_5e3d2a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_upto_position {\n        in(x: 100, y: 50, name: \"array\") property(List<Any>) array_input\n        in(x: 100, y: 100, name: \"position\") property(Number) position_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"reversed_array\") property(List<Any>) reversed_array_output\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 50) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 150) reversed_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 450, y: 100) concat_instance root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.slice -> reversed_instance.list\n        reversed_instance.reversed -> concat_instance.left\n\n        array_input -> concat_instance.right\n        position_input -> concat_instance.right_start\n\n        concat_instance.concatenated -> reversed_array_output\n\n        execute_trigger -> slice_instance.reset\n        slice_instance.done -> reversed_instance.reset\n        reversed_instance.done -> concat_instance.reset\n        concat_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_upto_position {\n        in(x: 100, y: 100, name: \"array\") property(List<Any>) array_abc123\n        in(x: 100, y: 150, name: \"position\") property(Number) position_def456\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_ghi789\n\n        out(x: 600, y: 100, name: \"reversedArray\") property(List<Any>) reversedArray_jkl012\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_mno345\n\n        instance(x: 300, y: 100) slice_pqr678 root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 150) reversed_stu901 root.Std_k98ojb.List.Reversed {}\n        instance(x: 450, y: 100) concat_vwx234 root.Std_k98ojb.List.Concat {}\n        instance(x: 450, y: 150) slice2_yza567 root.Std_k98ojb.List.Slice {}\n\n        0 -> slice_pqr678.start\n        position_def456 -> slice_pqr678.end\n        array_abc123 -> slice_pqr678.list\n        slice_pqr678.list -> reversed_stu901.list\n        reversed_stu901.list -> concat_vwx234.left\n        position_def456 -> slice2_yza567.start\n        -1 -> slice2_yza567.end\n        array_abc123 -> slice2_yza567.list\n        slice2_yza567.list -> concat_vwx234.right\n        concat_vwx234.list -> reversedArray_jkl012\n\n        execute_ghi789 -> slice_pqr678.reset\n        concat_vwx234.done -> continue_mno345\n    }\n}"
            ],
            "32": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 354, y: -53, name: \"array\") property(List<Number>) array_5f8c1d\n        in(x: 161, y: -211, name: \"number\") property(Number) number_3a7b1c\n        in(x: 161, y: -311, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"index\") property(Number) index_4a9f2e\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) equal_5b8c3d root.Std_k98ojb.Logic.Equal {}\n\n        array_5f8c1d -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_5b8c3d.left\n        number_3a7b1c -> equal_5b8c3d.right\n        equal_5b8c3d.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        for_8cb3f6.index -> index_4a9f2e\n        if_07b8c7.then -> for_8cb3f6.reset\n        execute_27b8c3 -> for_8cb3f6.reset\n        for_8cb3f6.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) find_first_occurrence_f0be66 root.main.find_first_occurrence {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 200, y: 0, name: \"array\") property(List) array_input\n        in(x: 200, y: 50, name: \"number\") property(Number) number_input\n        in(x: 200, y: 100, name: \"execute\") trigger() execute_input\n\n        out(x: 800, y: 0, name: \"index\") property(Number) index_output\n        out(x: 800, y: 50, name: \"continue\") trigger() continue_output\n\n        instance(x: 400, y: 0) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: 0) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 500, y: 50) equal_node root.Std_k98ojb.Logic.Equal {}\n\n        array_input -> for_loop.items\n        for_loop.item -> equal_node.left\n        number_input -> equal_node.right\n        equal_node.result -> if_node.predicate\n        for_loop.onItem -> if_node.execute\n        if_node.then -> continue_output\n        for_loop.index -> index_output\n        if_node.then -> for_loop.reset\n        execute_input -> for_loop.reset\n        if_node.else -> for_loop.next\n        for_loop.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 80, y: 0, name: \"array\") property(List<Number>) array_abc123\n        in(x: 80, y: 80, name: \"number\") property(Number) number_def456\n        in(x: 80, y: 160, name: \"execute\") trigger() execute_ghi789\n\n        out(x: 480, y: 0, name: \"index\") property(Number) index_jkl012\n        out(x: 480, y: 80, name: \"continue\") trigger() continue_mno345\n\n        instance(x: 240, y: 0) for_loop_pqr678 root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 0) if_condition_stu901 root.Std_k98ojb.Std.If {}\n        instance(x: 560, y: 0) equal_vwx234 root.Std_k98ojb.Logic.Equal {}\n\n        array_abc123 -> for_loop_pqr678.items\n        for_loop_pqr678.item -> equal_vwx234.left\n        number_def456 -> equal_vwx234.right\n        equal_vwx234.result -> if_condition_stu901.predicate\n        for_loop_pqr678.onItem -> if_condition_stu901.execute\n        if_condition_stu901.then -> index_jkl012\n        if_condition_stu901.then -> continue_mno345\n        if_condition_stu901.else -> for_loop_pqr678.next\n        execute_ghi789 -> for_loop_pqr678.reset\n        for_loop_pqr678.index -> index_jkl012\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 50, y: 50, name: \"array\") property(List<Number>) array_abc123\n        in(x: 50, y: 100, name: \"target\") property(Number) target_def456\n        in(x: 50, y: 150, name: \"execute\") trigger() execute_ghi789\n\n        out(x: 300, y: 50, name: \"index\") property(Number) index_jkl012\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_mno345\n\n        instance(x: 150, y: 50) for_loop_pqr678 root.Std_k98ojb.Std.For {}\n        instance(x: 200, y: 150) if_condition_stu901 root.Std_k98ojb.Std.If {}\n        instance(x: 250, y: 100) equal_check_vwx234 root.Std_k98ojb.Logic.Equal {}\n\n        array_abc123 -> for_loop_pqr678.items\n        for_loop_pqr678.item -> equal_check_vwx234.left\n        target_def456 -> equal_check_vwx234.right\n        equal_check_vwx234.result -> if_condition_stu901.predicate\n        for_loop_pqr678.onItem -> if_condition_stu901.execute\n        if_condition_stu901.then -> continue_mno345\n        if_condition_stu901.then -> index_jkl012\n        for_loop_pqr678.index -> index_jkl012\n        if_condition_stu901.else -> for_loop_pqr678.next\n        for_loop_pqr678.done -> continue_mno345\n        execute_ghi789 -> for_loop_pqr678.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 0, y: 0, name: \"array\") property(List) array_1a2b3c\n        in(x: 0, y: 50, name: \"number\") property(Number) number_4d5e6f\n        in(x: 0, y: 100, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 400, y: 0, name: \"index\") property(Number) index_0a1b2c\n        out(x: 400, y: 50, name: \"continue\") trigger() continue_3d4e5f\n\n        instance(x: 200, y: 0) for_loop_6g7h8i root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 0) equal_check_9j0k1l root.Std_k98ojb.Logic.Equal {}\n        instance(x: 350, y: 0) if_node_2m3n4o root.Std_k98ojb.Std.If {}\n\n        execute_7g8h9i -> for_loop_6g7h8i.trigger\n        array_1a2b3c -> for_loop_6g7h8i.items\n        for_loop_6g7h8i.item -> equal_check_9j0k1l.left\n        number_4d5e6f -> equal_check_9j0k1l.right\n        equal_check_9j0k1l.result -> if_node_2m3n4o.predicate\n        for_loop_6g7h8i.onItem -> if_node_2m3n4o.execute\n        if_node_2m3n4o.then -> continue_3d4e5f\n        for_loop_6g7h8i.index -> index_0a1b2c\n        if_node_2m3n4o.else -> for_loop_6g7h8i.next\n        for_loop_6g7h8i.done -> continue_3d4e5f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 144, y: -120, name: \"array\") property(List<Number>) array_5c6b3d\n        in(x: 144, y: -40, name: \"number\") property(Number) number_7f4d8e\n        in(x: 144, y: 40, name: \"execute\") trigger() execute_1a3f2b\n\n        out(x: 648, y: -40, name: \"index\") property(Number) index_3e7f9c\n        out(x: 648, y: 40, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 320, y: -40) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 480, y: -40) equal_4f7d9e root.Std_k98ojb.Logic.Equal {}\n        instance(x: 576, y: -40) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        array_5c6b3d -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_4f7d9e.left\n        number_7f4d8e -> equal_4f7d9e.right\n        equal_4f7d9e.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        for_8cb3f6.index -> index_3e7f9c\n        execute_1a3f2b -> for_8cb3f6.reset\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 120, y: -60, name: \"array\") property(List<Number>) array_1a2b3c\n        in(x: 120, y: -20, name: \"target\") property(Number) target_4d5e6f\n        in(x: 120, y: 20, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 380, y: -20, name: \"index\") property(Number) index_0a1b2c\n        out(x: 380, y: 20, name: \"continue\") trigger() continue_3d4e5f\n\n        instance(x: 260, y: -40) for_6j7k8l root.Std_k98ojb.Std.For {}\n        instance(x: 500, y: -60) if_9m0n1o root.Std_k98ojb.Std.If {}\n        instance(x: 500, y: 0) equal_2p3q4r root.Std_k98ojb.Logic.Equal {}\n\n        array_1a2b3c -> for_6j7k8l.items\n        for_6j7k8l.item -> equal_2p3q4r.left\n        target_4d5e6f -> equal_2p3q4r.right\n        equal_2p3q4r.result -> if_9m0n1o.predicate\n        for_6j7k8l.onItem -> if_9m0n1o.execute\n        if_9m0n1o.then -> continue_3d4e5f\n        for_6j7k8l.index -> index_0a1b2c\n        if_9m0n1o.then -> for_6j7k8l.reset\n        if_9m0n1o.else -> for_6j7k8l.next\n        execute_7g8h9i -> for_6j7k8l.reset\n        for_6j7k8l.done -> continue_3d4e5f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 100, y: 50, name: \"array\") property(List) array_input\n        in(x: 100, y: 100, name: \"number\") property(Number) number_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"index\") property(Number) index_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 50) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"item == number\"\n        }\n        instance(x: 300, y: 150) if_found root.Std_k98ojb.Std.If {}\n\n        execute_trigger -> for_loop.trigger\n        array_input -> for_loop.items\n        for_loop.item -> if_expression.item\n        number_input -> if_expression.number\n        if_expression.value -> if_found.predicate\n        for_loop.onItem -> if_found.execute\n        if_found.then -> continue_trigger\n        for_loop.index -> index_output\n        if_found.then -> for_loop.reset\n        if_found.else -> for_loop.next\n        for_loop.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 64, y: -45, name: \"array\") property(List<Number>) array_1d5f6b\n        in(x: 72, y: -152, name: \"target\") property(Number) target_2f3b8c\n        in(x: 150, y: -250, name: \"execute\") trigger() execute_3e9a1f\n\n        out(x: 1024, y: -80, name: \"index\") property(Number) index_4f7b9e\n        out(x: 1100, y: 20, name: \"continue\") trigger() continue_5e8c7d\n\n        instance(x: 320, y: -140) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: -100) equal_9f8d7e root.Std_k98ojb.Logic.Equal {}\n        instance(x: 800, y: -80) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        array_1d5f6b -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_9f8d7e.left\n        target_2f3b8c -> equal_9f8d7e.right\n        equal_9f8d7e.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_5e8c7d\n        for_8cb3f6.index -> index_4f7b9e\n        if_07b8c7.then -> for_8cb3f6.reset\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_5e8c7d\n        execute_3e9a1f -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 354, y: -53, name: \"array\") property(List<Number>) array_1c4f0d\n        in(x: 161, y: -211, name: \"number\") property(Number) number_2a3b8c\n        in(x: 161, y: -311, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"index\") property(Number) index_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 714, y: -155) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) equal_07b8c7 root.Std_k98ojb.Logic.Equal {}\n\n        array_1c4f0d -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_07b8c7.left\n        number_2a3b8c -> equal_07b8c7.right\n        equal_07b8c7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> index_f3db9f\n        for_8cb3f6.index -> index_f3db9f\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    \n\n    instance(x: -189, y: 222) find_first_occurrence_f0be66 root.main.find_first_occurrence {}\n}"
            ],
            "39": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 0, y: 0, name: \"input_list\") property(List) input_list\n        in(x: 0, y: 50, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 0, name: \"result\") property(Bool) result\n        out(x: 400, y: 50, name: \"continue\") trigger() continue\n\n        instance(x: 100, y: 0) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 200, y: 0) mod_index root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 0) mod_value root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) if_check root.Std_k98ojb.Std.If {}\n        instance(x: 200, y: 50) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list -> for_loop.items\n        for_loop.index -> mod_index.value\n        2 -> mod_index.divisor\n        mod_index.result -> not_equal.left\n        1 -> not_equal.right\n        not_equal.result -> if_check.input\n\n        for_loop.item -> mod_value.value\n        2 -> mod_value.divisor\n        mod_value.result -> if_check.value\n\n        for_loop.onItem -> if_check.then\n        if_check.else -> result\n        if_check.else -> continue\n\n        execute -> for_loop.reset\n        for_loop.done -> result\n        for_loop.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 153, y: -75, name: \"input_list\") property(List<Number>) input_list_7b9f3c\n        in(x: 133, y: -244, name: \"execute\") trigger() execute_1b2c4d\n\n        out(x: 1847, y: -10, name: \"out\") property(Bool) out_9c2d8f\n        out(x: 1893, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 394, y: -162) for_2a8c7d root.Std_k98ojb.Std.For {}\n        instance(x: 814, y: -112) mod_3c8d5f root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1041, y: -312) mod_7f9b3d root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1261, y: -163) equal_4f7d9c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1511, y: -275) if_9f3c7b root.Std_k98ojb.Std.If {}\n        instance(x: 1773, y: -154) if_3b8f7a root.Std_k98ojb.Std.If {}\n\n        input_list_7b9f3c -> for_2a8c7d.items\n        for_2a8c7d.index -> mod_3c8d5f.value\n        2 -> mod_3c8d5f.divisor\n        mod_3c8d5f.result -> equal_4f7d9c.left\n        1 -> equal_4f7d9c.right\n        equal_4f7d9c.result -> if_9f3c7b.predicate\n        for_2a8c7d.onItem -> if_9f3c7b.execute\n        for_2a8c7d.item -> mod_7f9b3d.value\n        2 -> mod_7f9b3d.divisor\n        mod_7f9b3d.result -> if_3b8f7a.predicate\n        if_9f3c7b.then -> if_3b8f7a.execute\n        if_3b8f7a.else -> continue_8ba06b\n        if_3b8f7a.else -> for_2a8c7d.reset\n        if_3b8f7a.then -> for_2a8c7d.next\n        for_2a8c7d.done -> out_9c2d8f\n        execute_1b2c4d -> for_2a8c7d.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") odd_index_odd_numbers {\n        in(x: 154, y: -49, name: \"input_list\") property(List) input_list_7a1d34\n        in(x: 152, y: -230, name: \"execute\") trigger() execute_0f9a12\n\n        out(x: 1164, y: -36, name: \"out\") property(Bool) out_4d9a1f\n        out(x: 1306, y: 117, name: \"continue\") trigger() continue_9b0f23\n\n        instance(x: 424, y: -110) for_7f8b9c root.Std_k98ojb.Std.For {}\n        instance(x: 688, y: -200) modulo_1a2b3c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 924, y: -186) equal_5d7f8e root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1176, y: -165) if_9c0d1e root.Std_k98ojb.Std.If {}\n        instance(x: 438, y: 38) modulo_2b3c4d root.Std_k98ojb.Math.Modulo {}\n        instance(x: 686, y: 51) equal_6e7f8d root.Std_k98ojb.Logic.Equal {}\n        instance(x: 924, y: 60) not_equal_7f8d9e root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1164, y: 65) if_0e1f2d root.Std_k98ojb.Std.If {}\n\n        input_list_7a1d34 -> for_7f8b9c.items\n        for_7f8b9c.index -> modulo_1a2b3c.value\n        2 -> modulo_1a2b3c.divisor\n        1 -> equal_5d7f8e.right\n        modulo_1a2b3c.result -> equal_5d7f8e.left\n        equal_5d7f8e.result -> if_9c0d1e.predicate\n        for_7f8b9c.onItem -> if_9c0d1e.execute\n        for_7f8b9c.item -> modulo_2b3c4d.value\n        2 -> modulo_2b3c4d.divisor\n        1 -> equal_6e7f8d.right\n        modulo_2b3c4d.result -> equal_6e7f8d.left\n        equal_6e7f8d.result -> not_equal_7f8d9e.left\n        false -> not_equal_7f8d9e.right\n        not_equal_7f8d9e.result -> if_0e1f2d.predicate\n        if_9c0d1e.then -> if_0e1f2d.execute\n        if_0e1f2d.else -> continue_9b0f23\n        if_0e1f2d.value -> out_4d9a1f\n        for_7f8b9c.done -> continue_9b0f23\n        execute_0f9a12 -> for_7f8b9c.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in a given list.\") check_odd_indices {\n        in(x: 250, y: 50, name: \"input_list\") property(List) input_list_123\n        in(x: 250, y: 100, name: \"execute\") trigger() execute_456\n\n        out(x: 750, y: 50, name: \"result\") property(Bool) result_789\n        out(x: 750, y: 100, name: \"continue\") trigger() continue_012\n\n        instance(x: 400, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 550, y: 50) mod_check root.Std_k98ojb.Math.Modulo {}\n        instance(x: 600, y: 50) if_odd_index root.Std_k98ojb.Std.If {}\n        instance(x: 700, y: 50) mod_check_odd root.Std_k98ojb.Math.Modulo {}\n        instance(x: 800, y: 50) if_odd_number root.Std_k98ojb.Std.If {}\n\n        input_list_123 -> for_loop.items\n        for_loop.index -> mod_check.value\n        2 -> mod_check.divisor\n        mod_check.result -> if_odd_index.input\n        for_loop.onItem -> if_odd_index.then\n        if_odd_index.then -> mod_check_odd.value\n        for_loop.item -> mod_check_odd.value\n        2 -> mod_check_odd.divisor\n        mod_check_odd.result -> if_odd_number.input\n        if_odd_number.else -> result_789\n        if_odd_number.else -> continue_012\n        if_odd_number.then -> for_loop.next\n        if_odd_index.else -> for_loop.next\n        for_loop.done -> result_789\n        for_loop.done -> continue_012\n        execute_456 -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 0, y: 0, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 300, y: 0, name: \"result\") property(Bool) result\n\n        instance(x: 150, y: -100) for_1 root.Std_k98ojb.Std.For {}\n        instance(x: 150, y: 100) if_1 root.Std_k98ojb.Std.If {}\n        instance(x: 450, y: 0) not_1 root.Std_k98ojb.Logic.Not {}\n        instance(x: 300, y: 100) modulo_1 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 200) equal_1 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 450, y: 200) modulo_2 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 600, y: 100) not_equal_1 root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list -> for_1.items\n        for_1.index -> modulo_1.value\n        2 -> modulo_1.divisor\n        modulo_1.result -> equal_1.left\n        1 -> equal_1.right\n        equal_1.result -> if_1.input\n        for_1.onItem -> if_1.then\n        for_1.done -> result\n        if_1.then -> not_1.input\n        for_1.item -> modulo_2.value\n        2 -> modulo_2.divisor\n        modulo_2.result -> not_equal_1.left\n        0 -> not_equal_1.right\n        not_equal_1.result -> not_1.input\n        not_1.output -> result\n        if_1.else -> for_1.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) filter_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) mod_038fce root.Std_k98ojb.Math.Modulo {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(index % 2 != 0) && (item % 2 != 0)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) not_80a119 root.Std_k98ojb.Logic.Not {}\n\n        input_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.index -> expression_b720d7.gen_0\n        for_8cb3f6.item -> expression_b720d7.gen_1\n        expression_b720d7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> not_80a119.input\n        not_80a119.output -> if_e19a62.predicate\n        if_07b8c7.then -> continue_8ba06b\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_e19a62.else -> for_8cb3f6.next\n        not_80a119.output -> out_f3db9f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in a given list.\") check_odd_indices {\n        in(x: 354, y: -53, name: \"input_list\") property(List) input_list_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"result\") property(Bool) result_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) modulo_f11fda root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) modulo_check_b720d7 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) not_equal_b4554f root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.index -> modulo_f11fda.value\n        2 -> modulo_f11fda.divisor\n        modulo_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n\n        for_8cb3f6.item -> modulo_check_b720d7.value\n        2 -> modulo_check_b720d7.divisor\n        modulo_check_b720d7.result -> not_equal_b4554f.left\n        1 -> not_equal_b4554f.right\n        not_equal_b4554f.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> {\n            false -> result_f3db9f\n            continue_8ba06b\n        }\n        for_8cb3f6.done -> {\n            true -> result_f3db9f\n            continue_8ba06b\n        }\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") odd_index_odd_numbers {\n        in(x: 154, y: -43, name: \"input\") property(List<Number>) input_3d2a5c\n        in(x: 160, y: -210, name: \"execute\") trigger() execute_4b8c3d\n\n        out(x: 1162, y: -20, name: \"out\") property(Bool) out_a2d5b8\n        out(x: 1304, y: 110, name: \"continue\") trigger() continue_5c7d3f\n\n        instance(x: 358, y: -153) for_5a3b2f root.Std_k98ojb.Std.For {}\n        instance(x: 590, y: -50) modulo_9c2d1f root.Std_k98ojb.Math.Modulo {}\n        instance(x: 820, y: -150) equal_1b3d7c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1040, y: -40) if_2c8f3d root.Std_k98ojb.Std.If {}\n        instance(x: 820, y: 100) modulo_5d7e1c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1040, y: 210) equal_7f2c4d root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1260, y: 100) if_3e9f5d root.Std_k98ojb.Std.If {}\n\n        input_3d2a5c -> for_5a3b2f.items\n        for_5a3b2f.index -> modulo_9c2d1f.value\n        2 -> modulo_9c2d1f.divisor\n        modulo_9c2d1f.result -> equal_1b3d7c.left\n        1 -> equal_1b3d7c.right\n        equal_1b3d7c.result -> if_2c8f3d.predicate\n        for_5a3b2f.onItem -> if_2c8f3d.execute\n        for_5a3b2f.item -> modulo_5d7e1c.value\n        2 -> modulo_5d7e1c.divisor\n        modulo_5d7e1c.result -> equal_7f2c4d.left\n        1 -> equal_7f2c4d.right\n        equal_7f2c4d.result -> if_3e9f5d.predicate\n        if_2c8f3d.then -> if_3e9f5d.execute\n        if_3e9f5d.else -> out_a2d5b8\n        if_3e9f5d.else -> continue_5c7d3f\n        if_3e9f5d.then -> for_5a3b2f.next\n        if_2c8f3d.else -> for_5a3b2f.next\n        for_5a3b2f.done -> out_a2d5b8\n        for_5a3b2f.done -> continue_5c7d3f\n        execute_4b8c3d -> for_5a3b2f.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in the given list.\") check_odd_indices {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) filter_038fce root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 933, y: 25) notequal_f11fda root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 714, y: -155) if_8cb3f6 root.Std_k98ojb.Std.If {}\n        instance(x: 1812, y: -319) modulo_80a119 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1121, y: -54) is_numeric_07b8c7 root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(index % 2 != 0) && (item % 2 != 0)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) length_b4554f root.Std_k98ojb.List.Length {}\n        instance(x: 1600, y: -450) not_empty_9fba8c root.Std_k98ojb.List.NotEmpty {}\n        input_f5c03d -> length_b4554f.list\n        length_b4554f.length -> not_empty_9fba8c.list\n        not_empty_9fba8c.isEmpty -> if_8cb3f6.predicate\n        if_8cb3f6.else -> continue_8ba06b\n        input_f5c03d -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n            in(x: -76, y: 146, name: \"index\") property(Number) index_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(index % 2 != 0) && (item % 2 != 0)\"\n            }\n            index_5f51f7 -> expression_2f9d09.gen_0\n            item_5f51f7 -> expression_2f9d09.gen_1\n            expression_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> filter_038fce.items\n        filter_038fce.output_list -> if_e19a62.predicate\n        if_8cb3f6.then -> if_e19a62.execute\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> continue_8ba06b\n        execute_27b8c3 -> if_8cb3f6.execute\n        if_8cb3f6.value -> out_f3db9f\n    }\n\n    instance(x: -189, y: 222) check_odd_indices_f0be66 root.main.check_odd_indices {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in a given list.\") check_odd_indices {\n        in(x: 146, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) modulo_3a7fce root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1812, y: -319) equal_80a119 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 933, y: 25) equal_f11fda root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1088, y: -256) not_1b8c7 root.Std_k98ojb.Logic.Not {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1312, y: -200) and_5f1b6c root.Std_k98ojb.Logic.And {}\n\n        input_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.index -> modulo_3a7fce.value\n        2 -> modulo_3a7fce.divisor\n        modulo_3a7fce.result -> equal_f11fda.left\n        1 -> equal_f11fda.right\n        equal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        for_8cb3f6.item -> modulo_3a7fce.value\n        2 -> modulo_3a7fce.divisor\n        modulo_3a7fce.result -> equal_80a119.left\n        1 -> equal_80a119.right\n        equal_80a119.result -> not_1b8c7.input\n        not_1b8c7.output -> and_5f1b6c.left\n        equal_f11fda.result -> and_5f1b6c.right\n        and_5f1b6c.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_07b8c7.value -> out_f3db9f\n    }\n}"
            ],
            "43": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 100, y: 100, name: \"numbers\") property(List) numbers\n\n        out(x: 400, y: 100, name: \"first_odd\") property(Number) first_odd\n\n        instance(x: 200, y: 100) find_odd root.Std_k98ojb.Iteration.Find {\n            handler: func() {\n                in(x: 100, y: 100, name: \"number\") property(Number) number\n\n                out(x: 300, y: 100, name: \"is_odd\") property(Bool) is_odd\n\n                instance(x: 200, y: 100) modulo root.Std_k98ojb.Math.Modulo {}\n                instance(x: 300, y: 100) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n                number -> modulo.value\n                2 -> modulo.divisor\n                modulo.result -> not_equal.left\n                0 -> not_equal.right\n                not_equal.result -> is_odd\n            }\n        }\n\n        numbers -> find_odd.items\n        find_odd.item -> first_odd\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 154, y: -31, name: \"numbers\") property(List<Number>) numbers_5f7d6a\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: -10, name: \"first_odd\") property(Number) first_odd_4f3db9\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 432, y: -93) find_3b7c6a root.Std_k98ojb.Iteration.Find {}\n        instance(x: 661, y: -54) modulo_1f2a3b root.Std_k98ojb.Math.Modulo {}\n        instance(x: 712, y: -155) not_equal_2a3f6b root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_5f7d6a -> find_3b7c6a.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 182, y: 19, name: \"is_odd\") property(Bool) is_odd_d0fd24\n\n            element_5f51f7 -> modulo_1f2a3b.value\n            2 -> modulo_1f2a3b.divisor\n            modulo_1f2a3b.result -> not_equal_2a3f6b.left\n            0 -> not_equal_2a3f6b.right\n            not_equal_2a3f6b.result -> is_odd_d0fd24\n        } -> find_3b7c6a.predicate\n\n        find_3b7c6a.item -> first_odd_4f3db9\n        execute_27b8c3 -> find_3b7c6a.execute\n        find_3b7c6a.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) find_first_odd_3cbe66 root.main.find_first_odd {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 134, y: -51, name: \"numbers\") property(List<Number>) numbers_4c7a1d\n        in(x: 156, y: -190, name: \"execute\") trigger() execute_2a7c4d\n\n        out(x: 1164, y: 0, name: \"first_odd\") property(Number) first_odd_7e9b3d\n        out(x: 1310, y: 130, name: \"continue\") trigger() continue_9c2b7e\n\n        instance(x: 366, y: -154) find_9f2b1d root.Std_k98ojb.Iteration.Find {}\n        instance(x: 725, y: -54) modulo_5a1b2c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1013, y: -36) not_equal_4f1a3e root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_4c7a1d -> find_9f2b1d.items\n        func() {\n            in(x: -98, y: 25, name: \"item\") property(Number) item_1f3b4d\n\n            out(x: 374, y: 20, name: \"is_odd\") property(Bool) is_odd_3f2c5e\n\n            instance(x: 86, y: 20) modulo_6b3a7d root.Std_k98ojb.Math.Modulo {}\n            instance(x: 216, y: 20) not_equal_8d4c5f root.Std_k98ojb.Logic.NotEqual {}\n\n            item_1f3b4d -> modulo_6b3a7d.value\n            2 -> modulo_6b3a7d.divisor\n            modulo_6b3a7d.result -> not_equal_8d4c5f.left\n            0 -> not_equal_8d4c5f.right\n            not_equal_8d4c5f.result -> is_odd_3f2c5e\n        } -> find_9f2b1d.predicate\n\n        find_9f2b1d.item -> first_odd_7e9b3d\n        execute_2a7c4d -> find_9f2b1d.execute\n        find_9f2b1d.done -> continue_9c2b7e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_odd_number\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 714, y: -155) modulo_check root.Std_k98ojb.Math.Modulo {}\n\n        input_list -> find_odd.items\n        find_odd.item -> out_odd_number\n        find_odd.itemFound -> continue_trigger\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd\n\n            instance(x: 106, y: 17) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n            element -> modulo_check.value\n            2 -> modulo_check.divisor\n            modulo_check.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> is_odd\n        } -> find_odd.predicate\n\n        execute_trigger -> find_odd.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 54, y: -53, name: \"input_list\") property(List) input_list_9f3b0d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: -10, name: \"first_odd\") property(Number) first_odd_f3db9f\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -193) find_6030c9 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 591, y: 74) modulo_038fce root.Std_k98ojb.Math.Modulo {}\n        instance(x: 933, y: 25) not_equal_f11fda root.Std_k98ojb.Logic.NotEqual {}\n        \n        input_list_9f3b0d -> find_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 206, y: 117) not_equal_3f9d09 root.Std_k98ojb.Logic.NotEqual {}\n\n            item_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> not_equal_3f9d09.left\n            0 -> not_equal_3f9d09.right\n            not_equal_3f9d09.result -> is_odd_d0fd24\n        } -> find_6030c9.predicate\n\n        find_6030c9.item -> first_odd_f3db9f\n        execute_27b8c3 -> find_6030c9.execute\n        find_6030c9.item -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 100, y: 100, name: \"numbers\") property(List<Number>) numbers_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"oddNumber\") property(Number) oddNumber_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 250, y: 50) modulo_check root.Std_k98ojb.Math.Modulo {}\n\n        numbers_input -> find_odd.items\n        func() {\n            in(x: -50, y: 0, name: \"number\") property(Number) number_input\n\n            out(x: 200, y: 0, name: \"isOdd\") property(Bool) isOdd_output\n\n            number_input -> modulo_check.value\n            2 -> modulo_check.divisor\n            modulo_check.result -> isOdd_output\n        } -> find_odd.predicate\n\n        find_odd.item -> oddNumber_output\n        execute_trigger -> find_odd.execute\n        find_odd.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) find_6030c9 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 591, y: 74) modulo_038fce root.Std_k98ojb.Math.Modulo {}\n\n        input_f5c03d -> find_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n            instance(x: 212, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n\n            element_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_2f9d09.left\n            1 -> equal_2f9d09.right\n            equal_2f9d09.result -> out_d0fd24\n        } -> find_6030c9.predicate\n\n        find_6030c9.item -> out_f3db9f\n        execute_27b8c3 -> find_6030c9.execute\n        find_6030c9.itemFound -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 54, y: 0, name: \"numbers\") property(List<Number>) numbers_3a2c1d\n        in(x: 54, y: 50, name: \"execute\") trigger() execute_4b8d7e\n\n        out(x: 300, y: 0, name: \"first_odd\") property(Number) first_odd_9f1b2c\n        out(x: 300, y: 50, name: \"continue\") trigger() continue_1c3d7f\n\n        instance(x: 150, y: 0) find_5a3d9b root.Std_k98ojb.Iteration.Find {}\n        instance(x: 450, y: 0) modulo_8b7f6a root.Std_k98ojb.Math.Modulo {}\n\n        numbers_3a2c1d -> find_5a3d9b.items\n        find_5a3d9b.item -> first_odd_9f1b2c\n        find_5a3d9b.found -> continue_1c3d7f\n\n        func() {\n            in(x: -50, y: 0, name: \"item\") property(Number) item_6b2f1e\n\n            out(x: 200, y: 0, name: \"is_odd\") property(Bool) is_odd_7c4d8e\n\n            instance(x: 100, y: 0) not_equal_9f2b3c root.Std_k98ojb.Logic.NotEqual {}\n\n            item_6b2f1e -> modulo_8b7f6a.value\n            2 -> modulo_8b7f6a.divisor\n            modulo_8b7f6a.result -> not_equal_9f2b3c.left\n            0 -> not_equal_9f2b3c.right\n            not_equal_9f2b3c.result -> is_odd_7c4d8e\n        } -> find_5a3d9b.predicate\n\n        execute_4b8d7e -> find_5a3d9b.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 153, y: -62, name: \"numbers\") property(List<Number>) numbers_3c8f0a\n        in(x: 152, y: -185, name: \"execute\") trigger() execute_2d6b0b\n\n        out(x: 840, y: -19, name: \"oddNumber\") property(Number) oddNumber_4f5a2b\n        out(x: 966, y: 102, name: \"continue\") trigger() continue_6a3f1c\n\n        instance(x: 429, y: -98) find_4d5f3a root.Std_k98ojb.Iteration.Find {}\n        instance(x: 633, y: -47) modulo_5b3e9c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 712, y: 91) notEqual_6a4b7d root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_3c8f0a -> find_4d5f3a.items\n        find_4d5f3a.item -> oddNumber_4f5a2b\n        find_4d5f3a.done -> continue_6a3f1c\n        execute_2d6b0b -> find_4d5f3a.execute\n\n        func() {\n            in(x: -68, y: 18, name: \"item\") property(Number) item_7c4e5f\n\n            out(x: 246, y: 12, name: \"out\") property(Bool) out_9b6f4d\n\n            item_7c4e5f -> modulo_5b3e9c.value\n            2 -> modulo_5b3e9c.divisor\n            modulo_5b3e9c.result -> notEqual_6a4b7d.left\n            0 -> notEqual_6a4b7d.right\n            notEqual_6a4b7d.result -> out_9b6f4d\n        } -> find_4d5f3a.predicate\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 150, y: -40, name: \"numbers\") property(List<Number>) numbers_1a2b3c\n        in(x: 150, y: -100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 350, y: -40, name: \"first_odd\") property(Number) first_odd_7g8h9i\n        out(x: 350, y: -100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 400, y: -250) find_3m4n5o root.Std_k98ojb.Iteration.Find {}\n        instance(x: 600, y: -150) modulo_6p7q8r root.Std_k98ojb.Math.Modulo {}\n\n        numbers_1a2b3c -> find_3m4n5o.items\n        func() {\n            in(x: -50, y: 0, name: \"number\") property(Number) number_9s0t1u\n\n            out(x: 150, y: 0, name: \"is_odd\") property(Bool) is_odd_2v3w4x\n\n            instance(x: 50, y: 0) equal_5y6z7a root.Std_k98ojb.Logic.Equal {}\n            number_9s0t1u -> modulo_6p7q8r.value\n            2 -> modulo_6p7q8r.divisor\n            modulo_6p7q8r.result -> equal_5y6z7a.left\n            1 -> equal_5y6z7a.right\n            equal_5y6z7a.result -> is_odd_2v3w4x\n        } -> find_3m4n5o.predicate\n\n        find_3m4n5o.item -> first_odd_7g8h9i\n        execute_4d5e6f -> find_3m4n5o.execute\n        find_3m4n5o.done -> continue_0j1k2l\n    }\n}"
            ],
            "44": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 150, y: -30, name: \"n\") property(Number) n_input\n\n        out(x: 550, y: -30, name: \"sum\") property(Number) sum_output\n\n        instance(x: 250, y: -100) generaterange_4a1f9c root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: -50) filter_7b3f2e root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 550, y: -100) map_9c8d3f root.Std_k98ojb.Iteration.Map {}\n        instance(x: 700, y: -50) reduce_2e4f7b root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_4a1f9c.from\n        n_input -> generaterange_4a1f9c.to\n        generaterange_4a1f9c.list -> filter_7b3f2e.items\n\n        func() {\n            in(x: -100, y: 50, name: \"number\") property(Number) number_input\n            out(x: 100, y: 50, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 0) modulo_1f3d2c root.Std_k98ojb.Math.Modulo {}\n            instance(x: 0, y: 100) not_equal_2d4e3f root.Std_k98ojb.Logic.NotEqual {}\n\n            number_input -> modulo_1f3d2c.value\n            2 -> modulo_1f3d2c.divisor\n            modulo_1f3d2c.result -> not_equal_2d4e3f.left\n            0 -> not_equal_2d4e3f.right\n            not_equal_2d4e3f.result -> is_odd_output\n        } -> filter_7b3f2e.handler\n\n        filter_7b3f2e.output_list -> map_9c8d3f.items\n\n        func() {\n            in(x: -100, y: 50, name: \"odd_number\") property(Number) odd_number_input\n            out(x: 100, y: 50, name: \"square\") property(Number) square_output\n\n            instance(x: 0, y: 0) mul_3d2f4c root.Std_k98ojb.Math.Mul {}\n\n            odd_number_input -> mul_3d2f4c.first\n            odd_number_input -> mul_3d2f4c.second\n            mul_3d2f4c.result -> square_output\n        } -> map_9c8d3f.handler\n\n        map_9c8d3f.output_list -> reduce_2e4f7b.items\n\n        func() {\n            in(x: -100, y: 50, name: \"acc\") property(Number) acc_input\n            in(x: -100, y: 100, name: \"value\") property(Number) value_input\n            out(x: 100, y: 75, name: \"sum\") property(Number) sum_output\n\n            instance(x: 0, y: 75) add_4f5e6b root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_4f5e6b.first\n            value_input -> add_4f5e6b.second\n            add_4f5e6b.result -> sum_output\n        } -> reduce_2e4f7b.reducer\n\n        0 -> reduce_2e4f7b.initial\n        reduce_2e4f7b.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 0, y: 0, name: \"n\") property(Number) n_input\n\n        out(x: 400, y: 0, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 0) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 0) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1000, y: 0) reduce_7f3c5a root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_038fce.from\n        n_input -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n\n        func() {\n            in(x: 0, y: 0, name: \"index\") property(Number) index_input\n\n            out(x: 200, y: 0, name: \"odd_square\") property(Number) odd_square_output\n\n            instance(x: 100, y: 0) expression_1c3f4a root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * index - 1) * (2 * index - 1)\"\n            }\n\n            index_input -> expression_1c3f4a.index\n            expression_1c3f4a.result -> odd_square_output\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_7f3c5a.items\n\n        func() {\n            in(x: 0, y: 0, name: \"accumulated\") property(Number) accumulated_input\n            in(x: 0, y: 100, name: \"current\") property(Number) current_input\n\n            out(x: 200, y: 50, name: \"sum\") property(Number) sum_output\n\n            instance(x: 100, y: 50) add_9f8b6d root.Std_k98ojb.Math.Add {}\n\n            accumulated_input -> add_9f8b6d.first\n            current_input -> add_9f8b6d.second\n            add_9f8b6d.result -> sum_output\n        } -> reduce_7f3c5a.reducer\n\n        0 -> reduce_7f3c5a.initial\n        reduce_7f3c5a.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 104, y: -54, name: \"n\") property(Number) n_8b8f7d\n        in(x: 130, y: -198, name: \"execute\") trigger() execute_ef3a7b\n\n        out(x: 1468, y: -10, name: \"sum\") property(Number) sum_3d9f7e\n        out(x: 1584, y: 120, name: \"continue\") trigger() continue_4ba06b\n\n        instance(x: 377, y: -193) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 718, y: -146) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1080, y: -36) reduce_9c8f7a root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1400, y: -76) add_2f9d09 root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_038fce.from\n        n_8b8f7d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n\n        func() {\n            in(x: -80, y: 60, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 380, y: 20, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 100, y: 20) expression_7f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1) * (2 * element - 1)\"\n            }\n            element_5f51f7 -> expression_7f9d09.gen_0\n            out_d0fd24 -> expression_7f9d09.result\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_9c8f7a.items\n\n        func() {\n            in(x: -60, y: 20, name: \"accumulated\") property(Number) accumulated_7f8f7d\n            in(x: -60, y: 60, name: \"value\") property(Number) value_9c8f7a\n\n            out(x: 380, y: 40, name: \"out\") property(Number) out_4d9f7e\n\n            instance(x: 100, y: 40) add_4f9d09 root.Std_k98ojb.Math.Add {}\n            accumulated_7f8f7d -> add_4f9d09.first\n            value_9c8f7a -> add_4f9d09.second\n            add_4f9d09.result -> out_4d9f7e\n        } -> reduce_9c8f7a.reducer\n\n        0 -> reduce_9c8f7a.initial\n        reduce_9c8f7a.result -> sum_3d9f7e\n        execute_ef3a7b -> reduce_9c8f7a.reset\n        reduce_9c8f7a.done -> continue_4ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 100, y: 50, name: \"n\") property(Number) n_7f4b6a\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_8f9c6d\n\n        out(x: 500, y: 50, name: \"sum\") property(Number) sum_3f7d2a\n        out(x: 500, y: 100, name: \"continue\") trigger() continue_9a0b6e\n\n        instance(x: 300, y: 50) generaterange_123abc root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 150) map_456def root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 250) reduce_789ghi root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_123abc.from\n        n_7f4b6a -> generaterange_123abc.to\n        generaterange_123abc.list -> map_456def.items\n\n        func() {\n            in(x: -50, y: 50, name: \"index\") property(Number) index_abc123\n\n            out(x: 200, y: 50, name: \"odd_square\") property(Number) odd_square_def456\n\n            instance(x: 50, y: 50) expression_odd root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * index - 1) ^ 2\"\n            }\n\n            index_abc123 -> expression_odd.gen_0\n            expression_odd.result -> odd_square_def456\n        } -> map_456def.handler\n\n        map_456def.output_list -> reduce_789ghi.items\n\n        func() {\n            in(x: -50, y: 150, name: \"accumulated\") property(Number) accumulated_ghi789\n            in(x: -50, y: 200, name: \"value\") property(Number) value_jkl012\n\n            out(x: 200, y: 175, name: \"sum\") property(Number) sum_mno345\n\n            instance(x: 50, y: 175) add_pqr678 root.Std_k98ojb.Math.Add {}\n\n            accumulated_ghi789 -> add_pqr678.first\n            value_jkl012 -> add_pqr678.second\n            add_pqr678.result -> sum_mno345\n        } -> reduce_789ghi.reducer\n\n        0 -> reduce_789ghi.initialValue\n        reduce_789ghi.result -> sum_3f7d2a\n        execute_8f9c6d -> generaterange_123abc.trigger\n        reduce_789ghi.done -> continue_9a0b6e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 200, y: 0, name: \"n\") property(Number) n_input\n\n        out(x: 1000, y: 0, name: \"sum\") property(Number) sum_output\n\n        instance(x: 400, y: 0) generaterange_1 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 0) filter_1 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 800, y: 0) map_1 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1200, y: 0) reduce_1 root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_1.from\n        n_input -> generaterange_1.to\n        generaterange_1.list -> filter_1.items\n\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item_input\n            out(x: 200, y: 0, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 100, y: 0) modulo_1 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 300, y: 0) equal_1 root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo_1.value\n            2 -> modulo_1.divisor\n            modulo_1.result -> equal_1.left\n            1 -> equal_1.right\n            equal_1.result -> is_odd_output\n        } -> filter_1.handler\n\n        filter_1.output_list -> map_1.items\n\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item_input\n            out(x: 200, y: 0, name: \"square\") property(Number) square_output\n\n            instance(x: 100, y: 0) mul_1 root.Std_k98ojb.Math.Mul {}\n\n            item_input -> mul_1.first\n            item_input -> mul_1.second\n            mul_1.result -> square_output\n        } -> map_1.handler\n\n        map_1.output_list -> reduce_1.items\n\n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_input\n            in(x: 0, y: 100, name: \"item\") property(Number) item_input\n            out(x: 200, y: 50, name: \"sum\") property(Number) sum_output\n\n            instance(x: 100, y: 50) add_1 root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_1.first\n            item_input -> add_1.second\n            add_1.result -> sum_output\n        } -> reduce_1.reducer\n\n        0 -> reduce_1.initial\n        reduce_1.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 100, y: 50, name: \"n\") property(Number) n_0c2f3d\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_0a7b9c\n\n        out(x: 400, y: 50, name: \"sum\") property(Number) sum_3f8a9f\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 50) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 50) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 500, y: 50) reduce_123abc root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_038fce.from\n        n_0c2f3d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 200, y: 50, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 50, y: 50) expression_abc123 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1) ^ 2\"\n            }\n            element_5f51f7 -> expression_abc123.gen_0\n            expression_abc123.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_123abc.items\n\n        func() {\n            in(x: -50, y: 50, name: \"acc\") property(Number) acc_123abc\n            in(x: -50, y: 100, name: \"value\") property(Number) value_456def\n\n            out(x: 200, y: 75, name: \"out\") property(Number) out_789ghi\n\n            instance(x: 50, y: 75) add_789ghi root.Std_k98ojb.Math.Add {}\n            acc_123abc -> add_789ghi.first\n            value_456def -> add_789ghi.second\n            add_789ghi.result -> out_789ghi\n        } -> reduce_123abc.reducer\n\n        0 -> reduce_123abc.initial\n        reduce_123abc.result -> sum_3f8a9f\n        execute_0a7b9c -> reduce_123abc.execute\n        reduce_123abc.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 112, y: -53, name: \"n\") property(Number) n_input\n\n        out(x: 112, y: 500, name: \"sum\") property(Number) sum_output\n\n        instance(x: 400, y: 100) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 100) filter_4f7b9a root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 800, y: 100) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1000, y: 100) reduce_4a8c9d root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1200, y: 100) add_2f9d09 root.Std_k98ojb.Math.Add {}\n        instance(x: 1400, y: 100) expression_8f7b9a root.Std_k98ojb.Math.Expression {\n            expression: \"it % 2 != 0\"\n        }\n        instance(x: 1600, y: 100) mul_5f9d09 root.Std_k98ojb.Math.Mul {}\n\n        1 -> generaterange_038fce.from\n        n_input -> generaterange_038fce.to\n        generaterange_038fce.list -> filter_4f7b9a.items\n        filter_4f7b9a.output_list -> map_6030c9.items\n        map_6030c9.output_list -> reduce_4a8c9d.items\n        reduce_4a8c9d.result -> sum_output\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            element_5f51f7 -> expression_8f7b9a.gen_0\n            expression_8f7b9a.result -> out_d0fd24\n        } -> filter_4f7b9a.handler\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            element_5f51f7 -> mul_5f9d09.first\n            element_5f51f7 -> mul_5f9d09.second\n            mul_5f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated\n            in(x: 76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            accumulated -> add_2f9d09.first\n            element_5f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> out_d0fd24\n        } -> reduce_4a8c9d.handler\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 254, y: -53, name: \"n\") property(Number) n_input\n\n        out(x: 548, y: -10, name: \"sum\") property(Number) sum_output\n\n        instance(x: 300, y: -250) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: -100) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 900, y: 50) reduce_9fba8c root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1200, y: 200) add_3f9d09 root.Std_k98ojb.Math.Add {}\n        instance(x: 1500, y: 350) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n\n        1 -> generaterange_038fce.from\n        n_input -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_7fba8c root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1)\"\n            }\n            element_5f51f7 -> expression_7fba8c.gen_0\n            expression_7fba8c.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_9fba8c.items\n\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 86, name: \"current\") property(Number) current_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            current_5f51f7 -> mul_2f9d09.first\n            current_5f51f7 -> mul_2f9d09.second\n            mul_2f9d09.result -> add_3f9d09.first\n            accumulated_5f51f7 -> add_3f9d09.second\n            add_3f9d09.result -> out_d0fd24\n        } -> reduce_9fba8c.reducer\n\n        0 -> reduce_9fba8c.initial\n        reduce_9fba8c.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 354, y: -53, name: \"n\") property(Number) n_23b8c3\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_2c8b3f\n\n        out(x: 1748, y: -10, name: \"sum\") property(Number) sum_f4db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8aa06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) reduce_07b8c7 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 106, y: 17) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n\n        1 -> generaterange_038fce.from\n        n_23b8c3 -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * i - 1) ^ 2\"\n            }\n            element_5f51f7 -> expression_2f9d09.gen_0\n            out_d0fd24 -> expression_2f9d09.result\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> reduce_07b8c7.items\n        0 -> reduce_07b8c7.initialValue\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 76, name: \"current\") property(Number) current_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            accumulated_5f51f7 -> add_b4554f.first\n            current_5f51f7 -> add_b4554f.second\n            add_b4554f.result -> out_d0fd24\n        } -> reduce_07b8c7.reducer\n        reduce_07b8c7.result -> sum_f4db9f\n        execute_2c8b3f -> reduce_07b8c7.execute\n        reduce_07b8c7.done -> continue_8aa06b\n    }\n\n    instance(x: -189, y: 222) sum_of_squares_of_odds_f0be66 root.main.sum_of_squares_of_odds {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 354, y: -53, name: \"n\") property(Number) n_0f8c1d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"sum\") property(Number) sum_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 714, y: -155) reduce_8cb3f6 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(2 * i - 1) ^ 2\"\n        }\n        instance(x: 2136, y: -356) add_e19a62 root.Std_k98ojb.Math.Add {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_038fce.from\n        n_0f8c1d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"i\") property(Number) i_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            i_5f51f7 -> expression_b720d7.gen_0\n            expression_b720d7.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_8cb3f6.items\n\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 146, name: \"val\") property(Number) val_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            acc_5f51f7 -> add_e19a62.first\n            val_5f51f7 -> add_e19a62.second\n            add_e19a62.result -> out_d0fd24\n        } -> reduce_8cb3f6.reducer\n\n        0 -> reduce_8cb3f6.initial\n        reduce_8cb3f6.result -> sum_f3db9f\n        execute_27b8c3 -> reduce_8cb3f6.reset\n        reduce_8cb3f6.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) sum_of_squares_of_odd_numbers_f0be66 root.main.sum_of_squares_of_odd_numbers {}\n}"
            ],
            "47": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list\") find_cubes {\n        in(x: 30, y: 30, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 400, y: 30, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 200, y: 30) map_0f3b9c root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_0f3b9c.items\n\n        func() {\n            in(x: -100, y: 30, name: \"element\") property(Number) element\n\n            out(x: 200, y: 30, name: \"cube\") property(Number) cube\n\n            instance(x: 50, y: 30) mul_1 root.Std_k98ojb.Math.Mul {}\n            instance(x: 100, y: 30) mul_2 root.Std_k98ojb.Math.Mul {}\n\n            element -> mul_1.first\n            element -> mul_1.second\n\n            mul_1.result -> mul_2.first\n            element -> mul_2.second\n\n            mul_2.result -> cube\n        } -> map_0f3b9c.handler\n\n        map_0f3b9c.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list\") find_cubes {\n        in(x: 176, y: -51, name: \"input_list\") property(List<Number>) input_list_4f9c8d\n        in(x: 176, y: 69, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 896, y: -20, name: \"output_list\") property(List<Number>) output_list_f3db9f\n        out(x: 896, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 464, y: 8) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 704, y: -48) pow_9fba8c root.Std_k98ojb.Math.Pow {}\n\n        input_list_4f9c8d -> map_6030c9.items\n        map_6030c9.output_list -> output_list_f3db9f\n        map_6030c9.output_list -> continue_8ba06b\n        execute_27b8c3 -> map_6030c9.handler\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) pow_2f9d09 root.Std_k98ojb.Math.Pow {}\n            element_5f51f7 -> pow_2f9d09.x\n            3 -> pow_2f9d09.y\n            pow_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 64, y: 0, name: \"input_list\") property(List<Number>) input_list_1d2f3a\n        in(x: 64, y: 64, name: \"execute\") trigger() execute_2b4f5c\n\n        out(x: 512, y: 0, name: \"output_list\") property(List<Number>) output_list_3c4d5e\n        out(x: 512, y: 64, name: \"continue\") trigger() continue_4e5f6g\n\n        instance(x: 256, y: 0) map_7f8g9h root.Std_k98ojb.Iteration.Map {}\n\n        input_list_1d2f3a -> map_7f8g9h.items\n\n        func() {\n            in(x: -64, y: 0, name: \"element\") property(Number) element_5f6g7h\n\n            out(x: 256, y: 0, name: \"cube\") property(Number) cube_8g9h0i\n\n            instance(x: 64, y: 0) pow_1a2b3c root.Std_k98ojb.Math.Pow {}\n\n            element_5f6g7h -> pow_1a2b3c.x\n            3 -> pow_1a2b3c.y\n            pow_1a2b3c.result -> cube_8g9h0i\n        } -> map_7f8g9h.handler\n\n        map_7f8g9h.output_list -> output_list_3c4d5e\n        execute_2b4f5c -> map_7f8g9h.trigger\n        map_7f8g9h.done -> continue_4e5f6g\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 354, y: -53, name: \"input_list\") property(List) input_list\n\n        out(x: 1748, y: -10, name: \"output_list\") property(List) output_list\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1504, y: -400) pow_9fba8c root.Std_k98ojb.Math.Pow {}\n\n        input_list -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) pow_2f9d09 root.Std_k98ojb.Math.Pow {}\n            element_5f51f7 -> pow_2f9d09.x\n            3 -> pow_2f9d09.y\n            pow_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list\") find_cubes {\n        in(x: 174, y: -38, name: \"input_list\") property(List<Number>) input_list_2f4c8d\n        in(x: 162, y: -195, name: \"execute\") trigger() execute_6c8f3b\n\n        out(x: 1060, y: -47, name: \"output_list\") property(List<Number>) output_list_8b3f7d\n        out(x: 1206, y: 120, name: \"continue\") trigger() continue_1c8f7b\n\n        instance(x: 464, y: -58) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 714, y: -57) pow_2f9d09 root.Std_k98ojb.Math.Pow {}\n        \n        input_list_2f4c8d -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            element_5f51f7 -> pow_2f9d09.x\n            3 -> pow_2f9d09.y\n            pow_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> output_list_8b3f7d\n        execute_6c8f3b -> map_6030c9.execute\n        map_6030c9.done -> continue_1c8f7b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list.\") find_cubes {\n        in(x: 150, y: -50, name: \"input_list\") property(List<Number>) input_list_5f2d9a\n        in(x: 150, y: 50, name: \"execute\") trigger() execute_8b7c2e\n\n        out(x: 750, y: 0, name: \"output_list\") property(List<Number>) output_list_2d3f9b\n        out(x: 750, y: 100, name: \"continue\") trigger() continue_3c7d5f\n\n        instance(x: 400, y: 0) map_9b7d2f root.Std_k98ojb.Iteration.Map {}\n\n        input_list_5f2d9a -> map_9b7d2f.items\n        func() {\n            in(x: -50, y: 0, name: \"element\") property(Number) element_4f3a7d\n\n            out(x: 250, y: 0, name: \"cube\") property(Number) cube_5d4e8c\n\n            instance(x: 100, y: 0) mul_2a3b4c root.Std_k98ojb.Math.Mul {}\n            instance(x: 150, y: 0) mul_3d5e6f root.Std_k98ojb.Math.Mul {}\n\n            element_4f3a7d -> mul_2a3b4c.first\n            element_4f3a7d -> mul_2a3b4c.second\n            mul_2a3b4c.result -> mul_3d5e6f.first\n            element_4f3a7d -> mul_3d5e6f.second\n            mul_3d5e6f.result -> cube_5d4e8c\n        } -> map_9b7d2f.handler\n\n        map_9b7d2f.output_list -> output_list_2d3f9b\n        execute_8b7c2e -> map_9b7d2f.trigger\n        map_9b7d2f.done -> continue_3c7d5f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list.\") find_cubes {\n        in(x: 152, y: -43, name: \"input\") property(List) input_list\n        in(x: 152, y: -143, name: \"execute\") trigger() execute\n\n        out(x: 1122, y: -42, name: \"output\") property(List) output_list\n        out(x: 1122, y: -142, name: \"continue\") trigger() continue\n\n        instance(x: 482, y: -43) map_0d3f9c root.Std_k98ojb.Iteration.Map {}\n        instance(x: 822, y: -43) pow_1a2b3c root.Std_k98ojb.Math.Pow {}\n\n        input_list -> map_0d3f9c.items\n        func() {\n            in(x: -78, y: 46, name: \"element\") property(Number) element\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out\n\n            element -> pow_1a2b3c.x\n            3 -> pow_1a2b3c.y\n            pow_1a2b3c.result -> out\n        } -> map_0d3f9c.handler\n\n        map_0d3f9c.output_list -> output_list\n        execute -> map_0d3f9c.trigger\n        map_0d3f9c.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 154, y: -50, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 454, y: -50, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 304, y: -150) map_3a9c8d root.Std_k98ojb.Iteration.Map {}\n        instance(x: 604, y: -150) pow_9b3f8e root.Std_k98ojb.Math.Pow {}\n\n        input_list -> map_3a9c8d.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element\n\n            out(x: 382, y: 19, name: \"cube\") property(Number) cube\n\n            element -> pow_9b3f8e.x\n            3 -> pow_9b3f8e.y\n            pow_9b3f8e.result -> cube\n        } -> map_3a9c8d.handler\n        map_3a9c8d.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list.\") find_cubes {\n        in(x: 100, y: 50, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 300, y: 50, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 200, y: 100) map_5f2d9b root.Std_k98ojb.Iteration.Map {}\n        instance(x: 400, y: 100) pow_3f9a1c root.Std_k98ojb.Math.Pow {}\n\n        input_list -> map_5f2d9b.items\n        func() {\n            in(x: -50, y: 50, name: \"item\") property(Number) item\n\n            out(x: 150, y: 50, name: \"cube\") property(Number) cube\n\n            item -> pow_3f9a1c.x\n            3 -> pow_3f9a1c.y\n            pow_3f9a1c.result -> cube\n        } -> map_5f2d9b.handler\n\n        map_5f2d9b.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 154, y: -54, name: \"input_list\") property(List<Number>) input_list_5a1f4d\n        in(x: 154, y: -154, name: \"execute\") trigger() execute_1b2c3d\n\n        out(x: 754, y: -54, name: \"output_list\") property(List<Number>) output_list_7c2f4e\n        out(x: 754, y: -154, name: \"continue\") trigger() continue_2a3b4c\n\n        instance(x: 354, y: -54) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n\n        input_list_5a1f4d -> map_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) pow_2f9d09 root.Std_k98ojb.Math.Pow {}\n            element_5f51f7 -> pow_2f9d09.x\n            3 -> pow_2f9d09.y\n            pow_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> output_list_7c2f4e\n        execute_1b2c3d -> map_6030c9.trigger\n        map_6030c9.done -> continue_2a3b4c\n    }\n}"
            ],
            "40": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 156, y: -123, name: \"input_list\") property(List) input_list_123abc\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_456def\n\n        out(x: 1748, y: -10, name: \"product\") property(Number) product_789ghi\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: -50) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: -50) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 900, y: -50) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 1200, y: -50) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 1500, y: -50) multiply root.Std_k98ojb.Math.Mul {}\n\n        input_list_123abc -> filter_even.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_234mno\n\n            out(x: 382, y: 19, name: \"is_even\") property(Bool) is_even_567pqr\n\n            instance(x: 106, y: 17) modulo_even root.Std_k98ojb.Math.Modulo {}\n            instance(x: 300, y: 17) equal_even root.Std_k98ojb.Logic.Equal {}\n\n            element_234mno -> modulo_even.value\n            2 -> modulo_even.divisor\n            modulo_even.result -> equal_even.left\n            0 -> equal_even.right\n            equal_even.result -> is_even_567pqr\n        } -> filter_even.handler\n\n        filter_even.output_list -> first_even.list\n        first_even.item -> multiply.first\n\n        input_list_123abc -> filter_odd.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_345stu\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_678vwx\n\n            instance(x: 106, y: 17) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 300, y: 17) not_equal_odd root.Std_k98ojb.Logic.NotEqual {}\n\n            element_345stu -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> not_equal_odd.left\n            0 -> not_equal_odd.right\n            not_equal_odd.result -> is_odd_678vwx\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> first_odd.list\n        first_odd.item -> multiply.second\n\n        multiply.result -> product_789ghi\n        execute_456def -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 200, y: -50, name: \"list\") property(List<Number>) list_input\n\n        out(x: 200, y: 400, name: \"product\") property(Number) product_output\n\n        instance(x: 400, y: 0) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 0) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 600, y: 100) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 800, y: 50) multiply root.Std_k98ojb.Math.Mul {}\n\n        list_input -> filter_even.items\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n            out(x: 100, y: 0, name: \"is_even\") property(Bool) is_even_output\n\n            instance(x: 0, y: 0) modulo root.Std_k98ojb.Math.Modulo {}\n            instance(x: 50, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo.value\n            2 -> modulo.divisor\n            modulo.result -> equal_zero.left\n            0 -> equal_zero.right\n            equal_zero.result -> is_even_output\n        } -> filter_even.handler\n\n        list_input -> filter_odd.items\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n            out(x: 100, y: 0, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 0) modulo root.Std_k98ojb.Math.Modulo {}\n            instance(x: 50, y: 0) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n\n            item_input -> modulo.value\n            2 -> modulo.divisor\n            modulo.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> is_odd_output\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> multiply.first\n        first_odd.item -> multiply.second\n\n        multiply.result -> product_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 174, y: -20, name: \"input_list\") property(List) input_list_5c3a7b\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1348, y: -10, name: \"product\") property(Number) product_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 352, y: -293) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 933, y: 25) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n        instance(x: 714, y: -155) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 714, y: 55) first_odd root.Std_k98ojb.List.FirstItem {}\n\n        input_list_5c3a7b -> filter_even.items\n        input_list_5c3a7b -> filter_odd.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_8c3a7b root.Std_k98ojb.Math.Modulo {}\n            instance(x: 106, y: 117) equal_7f9d09 root.Std_k98ojb.Logic.Equal {}\n\n            element_5f51f7 -> modulo_8c3a7b.value\n            2 -> modulo_8c3a7b.divisor\n            modulo_8c3a7b.result -> equal_7f9d09.left\n            0 -> equal_7f9d09.right\n            equal_7f9d09.result -> out_d0fd24\n        } -> filter_even.handler\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_8c3a7b root.Std_k98ojb.Math.Modulo {}\n            instance(x: 106, y: 117) not_equal_7f9d09 root.Std_k98ojb.Logic.NotEqual {}\n\n            element_5f51f7 -> modulo_8c3a7b.value\n            2 -> modulo_8c3a7b.divisor\n            modulo_8c3a7b.result -> not_equal_7f9d09.left\n            0 -> not_equal_7f9d09.right\n            not_equal_7f9d09.result -> out_d0fd24\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> mul_2f9d09.first\n        first_odd.item -> mul_2f9d09.second\n\n        mul_2f9d09.result -> product_f3db9f\n\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 144, y: -48, name: \"list\") property(List<Number>) list_1a2b3c\n        in(x: 144, y: 48, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 800, y: 0, name: \"product\") property(Number) product_7g8h9i\n        out(x: 800, y: 96, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 368, y: -128) filter_even_3a4b5c root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 368, y: 32) filter_odd_6d7e8f root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 560, y: -128) first_even_9g0h1i root.Std_k98ojb.Iteration.Find {}\n        instance(x: 560, y: 32) first_odd_2j3k4l root.Std_k98ojb.Iteration.Find {}\n        instance(x: 656, y: -48) mul_5m6n7o root.Std_k98ojb.Math.Mul {}\n\n        list_1a2b3c -> filter_even_3a4b5c.items\n        list_1a2b3c -> filter_odd_6d7e8f.items\n\n        func() {\n            in(x: -80, y: 0, name: \"item\") property(Number) item_1p2q3r\n\n            out(x: 320, y: 0, name: \"out\") property(Bool) out_4s5t6u\n\n            instance(x: 160, y: 0) modulo_7v8w9x root.Std_k98ojb.Math.Modulo {}\n            instance(x: 240, y: 0) equal_0y1z2a root.Std_k98ojb.Logic.Equal {}\n\n            item_1p2q3r -> modulo_7v8w9x.value\n            2 -> modulo_7v8w9x.divisor\n            modulo_7v8w9x.result -> equal_0y1z2a.left\n            0 -> equal_0y1z2a.right\n            equal_0y1z2a.result -> out_4s5t6u\n        } -> filter_even_3a4b5c.handler\n\n        func() {\n            in(x: -80, y: 0, name: \"item\") property(Number) item_3b4c5d\n\n            out(x: 320, y: 0, name: \"out\") property(Bool) out_6e7f8g\n\n            instance(x: 160, y: 0) modulo_9h0i1j root.Std_k98ojb.Math.Modulo {}\n            instance(x: 240, y: 0) not_equal_2k3l4m root.Std_k98ojb.Logic.NotEqual {}\n\n            item_3b4c5d -> modulo_9h0i1j.value\n            2 -> modulo_9h0i1j.divisor\n            modulo_9h0i1j.result -> not_equal_2k3l4m.left\n            0 -> not_equal_2k3l4m.right\n            not_equal_2k3l4m.result -> out_6e7f8g\n        } -> filter_odd_6d7e8f.handler\n\n        filter_even_3a4b5c.output_list -> first_even_9g0h1i.items\n        filter_odd_6d7e8f.output_list -> first_odd_2j3k4l.items\n\n        func() {\n            in(x: -80, y: 0, name: \"item\") property(Number) item_5n6o7p\n\n            out(x: 320, y: 0, name: \"out\") property(Bool) out_8q9r0s\n\n            instance(x: 160, y: 0) not_empty_1t2u3v root.Std_k98ojb.List.NotEmpty {}\n\n            item_5n6o7p -> not_empty_1t2u3v.list\n            not_empty_1t2u3v.isEmpty -> out_8q9r0s\n        } -> first_even_9g0h1i.predicate\n\n        func() {\n            in(x: -80, y: 0, name: \"item\") property(Number) item_4w5x6y\n\n            out(x: 320, y: 0, name: \"out\") property(Bool) out_7z8a9b\n\n            instance(x: 160, y: 0) not_empty_0c1d2e root.Std_k98ojb.List.NotEmpty {}\n\n            item_4w5x6y -> not_empty_0c1d2e.list\n            not_empty_0c1d2e.isEmpty -> out_7z8a9b\n        } -> first_odd_2j3k4l.predicate\n\n        first_even_9g0h1i.item -> mul_5m6n7o.first\n        first_odd_2j3k4l.item -> mul_5m6n7o.second\n        mul_5m6n7o.result -> product_7g8h9i\n\n        execute_4d5e6f -> filter_even_3a4b5c.handler\n        execute_4d5e6f -> filter_odd_6d7e8f.handler\n        execute_4d5e6f -> first_even_9g0h1i.predicate\n        execute_4d5e6f -> first_odd_2j3k4l.predicate\n        first_even_9g0h1i.item -> continue_0j1k2l\n        first_odd_2j3k4l.item -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 132, y: -101, name: \"list\") property(List) list_5c9d8f\n        in(x: 118, y: -263, name: \"execute\") trigger() execute_1a2b3c\n\n        out(x: 1860, y: -16, name: \"product\") property(Number) product_8f3d9a\n        out(x: 1860, y: 104, name: \"continue\") trigger() continue_7b3c4d\n\n        instance(x: 350, y: -130) filter_even_9f8c7d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 350, y: -300) filter_odd_3d7e2a root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: -130) first_even_2b8c7d root.Std_k98ojb.List.FirstItem {}\n        instance(x: 600, y: -300) first_odd_1a7e2a root.Std_k98ojb.List.FirstItem {}\n        instance(x: 850, y: -215) mul_3f9d8b root.Std_k98ojb.Math.Mul {}\n\n        list_5c9d8f -> filter_even_9f8c7d.items\n        list_5c9d8f -> filter_odd_3d7e2a.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 17) equal_3a9d8b root.Std_k98ojb.Logic.Equal {}\n\n            element_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_3a9d8b.left\n            0 -> equal_3a9d8b.right\n            equal_3a9d8b.result -> out_d0fd24\n        } -> filter_even_9f8c7d.handler\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 17) not_equal_3a9d8b root.Std_k98ojb.Logic.NotEqual {}\n\n            element_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> not_equal_3a9d8b.left\n            0 -> not_equal_3a9d8b.right\n            not_equal_3a9d8b.result -> out_d0fd24\n        } -> filter_odd_3d7e2a.handler\n\n        filter_even_9f8c7d.output_list -> first_even_2b8c7d.list\n        filter_odd_3d7e2a.output_list -> first_odd_1a7e2a.list\n\n        first_even_2b8c7d.item -> mul_3f9d8b.first\n        first_odd_1a7e2a.item -> mul_3f9d8b.second\n\n        mul_3f9d8b.result -> product_8f3d9a\n        execute_1a2b3c -> filter_even_9f8c7d.execute\n        execute_1a2b3c -> filter_odd_3d7e2a.execute\n        first_even_2b8c7d.item -> continue_7b3c4d\n        first_odd_1a7e2a.item -> continue_7b3c4d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") find_product_of_first_even_odd {\n        in(x: 154, y: -45, name: \"list\") property(List<Number>) list_8a7b6c\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"product\") property(Number) product_9f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) filter_even_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) filter_odd_038fce root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 933, y: 25) first_even_f11fda root.Std_k98ojb.List.FirstItem {}\n        instance(x: 714, y: -155) first_odd_8cb3f6 root.Std_k98ojb.List.FirstItem {}\n        instance(x: 1121, y: -54) mul_07b8c7 root.Std_k98ojb.Math.Mul {}\n\n        list_8a7b6c -> filter_even_6030c9.items\n        list_8a7b6c -> filter_odd_038fce.items\n\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 382, y: 19, name: \"is_even\") property(Bool) is_even_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 306, y: 17) equal_3f9d09 root.Std_k98ojb.Logic.Equal {}\n\n            item_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_3f9d09.left\n            0 -> equal_3f9d09.right\n            equal_3f9d09.result -> is_even_d0fd24\n        } -> filter_even_6030c9.handler\n\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 306, y: 17) not_equal_3f9d09 root.Std_k98ojb.Logic.NotEqual {}\n\n            item_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> not_equal_3f9d09.left\n            0 -> not_equal_3f9d09.right\n            not_equal_3f9d09.result -> is_odd_d0fd24\n        } -> filter_odd_038fce.handler\n\n        filter_even_6030c9.output_list -> first_even_f11fda.list\n        filter_odd_038fce.output_list -> first_odd_8cb3f6.list\n\n        first_even_f11fda.item -> mul_07b8c7.first\n        first_odd_8cb3f6.item -> mul_07b8c7.second\n\n        mul_07b8c7.result -> product_9f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") find_product_of_first_even_odd {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) product_output\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 933, y: 25) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 714, y: -155) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 1121, y: -54) mul_product root.Std_k98ojb.Math.Mul {}\n        instance(x: 1812, y: -319) if_check root.Std_k98ojb.Std.If {}\n\n        input_list -> filter_even.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_input\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) is_even_output\n\n            instance(x: 106, y: 17) modulo_even root.Std_k98ojb.Math.Modulo {}\n            instance(x: 206, y: 17) equal_even root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo_even.value\n            2 -> modulo_even.divisor\n            modulo_even.result -> equal_even.left\n            0 -> equal_even.right\n            equal_even.result -> is_even_output\n        } -> filter_even.handler\n\n        input_list -> filter_odd.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_input\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) is_odd_output\n\n            instance(x: 106, y: 17) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 206, y: 17) not_equal_odd root.Std_k98ojb.Logic.NotEqual {}\n\n            item_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> not_equal_odd.left\n            0 -> not_equal_odd.right\n            not_equal_odd.result -> is_odd_output\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n        first_even.item -> mul_product.first\n        first_odd.item -> mul_product.second\n        mul_product.result -> product_output\n        execute_trigger -> if_check.execute\n        if_check.value -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") find_product_of_first_even_odd {\n        in(x: 154, y: -51, name: \"input\") property(List<Number>) input_5c1d2b\n        in(x: 159, y: -223, name: \"execute\") trigger() execute_3a9d8c\n\n        out(x: 1684, y: -10, name: \"out\") property(Number) out_9b3f8d\n        out(x: 1890, y: 120, name: \"continue\") trigger() continue_7c0b6a\n\n        instance(x: 351, y: -493) filter_even_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 713, y: -493) filter_odd_7a9d6e root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1075, y: -50) first_even_2b9f0d root.Std_k98ojb.Iteration.Find {}\n        instance(x: 1075, y: -250) first_odd_5a9f0d root.Std_k98ojb.Iteration.Find {}\n        instance(x: 1437, y: -150) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n        instance(x: 1800, y: -150) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_5c1d2b -> filter_even_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 306, y: 17) equal_3f9d09 root.Std_k98ojb.Logic.Equal {}\n            element_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_3f9d09.left\n            0 -> equal_3f9d09.right\n            equal_3f9d09.result -> out_d0fd24\n        } -> filter_even_6030c9.handler\n\n        input_5c1d2b -> filter_odd_7a9d6e.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 306, y: 17) not_equal_3f9d09 root.Std_k98ojb.Logic.NotEqual {}\n            element_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> not_equal_3f9d09.left\n            0 -> not_equal_3f9d09.right\n            not_equal_3f9d09.result -> out_d0fd24\n        } -> filter_odd_7a9d6e.handler\n\n        filter_even_6030c9.output_list -> first_even_2b9f0d.items\n        filter_odd_7a9d6e.output_list -> first_odd_5a9f0d.items\n\n        first_even_2b9f0d.item -> mul_2f9d09.first\n        first_odd_5a9f0d.item -> mul_2f9d09.second\n\n        mul_2f9d09.result -> if_07b8c7.value\n        if_07b8c7.value -> out_9b3f8d\n\n        execute_3a9d8c -> filter_even_6030c9.handler\n        execute_3a9d8c -> filter_odd_7a9d6e.handler\n        if_07b8c7.then -> continue_7c0b6a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 160, y: -20, name: \"input_list\") property(List<Number>) input_list_1f5c03d\n        in(x: 160, y: -100, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 480, y: -20, name: \"product\") property(Number) product_f3db9f\n        out(x: 640, y: 60, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 360, y: -160) find_even root.Std_k98ojb.Iteration.Find {}\n        instance(x: 360, y: 0) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 560, y: -80) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n\n        input_list_1f5c03d -> find_even.items\n        input_list_1f5c03d -> find_odd.items\n\n        func() {\n            in(x: -60, y: -40, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 60, y: -40, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 0, y: -40) modulo_3a9f8b root.Std_k98ojb.Math.Modulo {}\n            instance(x: 120, y: -40) equal_4b8c7a root.Std_k98ojb.Logic.Equal {}\n\n            item_5f51f7 -> modulo_3a9f8b.value\n            2 -> modulo_3a9f8b.divisor\n            modulo_3a9f8b.result -> equal_4b8c7a.left\n            0 -> equal_4b8c7a.right\n            equal_4b8c7a.result -> out_d0fd24\n        } -> find_even.predicate\n\n        func() {\n            in(x: -60, y: 40, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 60, y: 40, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 0, y: 40) modulo_3a9f8b root.Std_k98ojb.Math.Modulo {}\n            instance(x: 120, y: 40) not_equal_4b8c7a root.Std_k98ojb.Logic.NotEqual {}\n\n            item_5f51f7 -> modulo_3a9f8b.value\n            2 -> modulo_3a9f8b.divisor\n            modulo_3a9f8b.result -> not_equal_4b8c7a.left\n            0 -> not_equal_4b8c7a.right\n            not_equal_4b8c7a.result -> out_d0fd24\n        } -> find_odd.predicate\n\n        find_even.item -> mul_2f9d09.first\n        find_odd.item -> mul_2f9d09.second\n        mul_2f9d09.result -> product_f3db9f\n\n        execute_27b8c3 -> find_even.execute\n        find_even.itemFound -> find_odd.execute\n        find_odd.itemFound -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 40, y: 20, name: \"input_list\") property(List) input_list_123abc\n        in(x: 40, y: 60, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 40, name: \"product\") property(Number) product_789ghi\n        out(x: 400, y: 80, name: \"continue\") trigger() continue_101jkl\n\n        instance(x: 200, y: 20) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 200, y: 80) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 40) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 600, y: 100) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 800, y: 70) mul root.Std_k98ojb.Math.Mul {}\n\n        input_list_123abc -> filter_even.items\n        input_list_123abc -> filter_odd.items\n\n        func() {\n            in(x: -20, y: 20, name: \"item\") property(Number) item_even\n\n            out(x: 120, y: 20, name: \"is_even\") property(Bool) is_even\n\n            instance(x: 40, y: 20) mod_even root.Std_k98ojb.Math.Modulo {}\n            instance(x: 80, y: 20) equal_even root.Std_k98ojb.Logic.Equal {}\n\n            item_even -> mod_even.value\n            2 -> mod_even.divisor\n            mod_even.result -> equal_even.left\n            0 -> equal_even.right\n            equal_even.result -> is_even\n        } -> filter_even.handler\n\n        func() {\n            in(x: -20, y: 80, name: \"item\") property(Number) item_odd\n\n            out(x: 120, y: 80, name: \"is_odd\") property(Bool) is_odd\n\n            instance(x: 40, y: 80) mod_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 80, y: 80) not_equal_odd root.Std_k98ojb.Logic.NotEqual {}\n\n            item_odd -> mod_odd.value\n            2 -> mod_odd.divisor\n            mod_odd.result -> not_equal_odd.left\n            0 -> not_equal_odd.right\n            not_equal_odd.result -> is_odd\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> mul.first\n        first_odd.item -> mul.second\n\n        mul.result -> product_789ghi\n        execute_456def -> filter_even.execute\n        filter_even.output_list -> filter_odd.execute\n        filter_odd.output_list -> first_even.list\n        first_even.item -> first_odd.list\n        first_odd.item -> mul.first\n        mul.result -> product_789ghi\n        mul.result -> continue_101jkl\n    }\n}"
            ],
            "41": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 154, y: -53, name: \"array\") property(List<Number>) array_input\n        in(x: 161, y: -211, name: \"element\") property(Number) element_input\n        in(x: 161, y: -261, name: \"execute\") trigger() execute_trigger\n\n        out(x: 748, y: -10, name: \"position\") property(Number) position_output\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1121, y: -54) if_check root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) add_expression root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n        instance(x: 1496, y: -187) result_expression root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n        instance(x: 2136, y: -356) if_final_check root.Std_k98ojb.Std.If {}\n\n        array_input -> for_loop.items\n        for_loop.item -> equal_check.left\n        element_input -> equal_check.right\n        equal_check.result -> if_check.predicate\n        for_loop.onItem -> if_check.execute\n        if_check.then -> result_expression.execute\n        for_loop.index -> add_expression.index\n        for_loop.index -> result_expression.index\n        result_expression.result -> position_output\n        if_check.else -> continue_trigger\n        if_final_check.then -> continue_trigger\n        for_loop.done -> continue_trigger\n        execute_trigger -> for_loop.reset\n        if_final_check.else -> for_loop.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 354, y: -53, name: \"array\") property(List<Number>) array_f5c03d\n        in(x: 354, y: -153, name: \"element\") property(Number) element_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"position\") property(Number) position_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) equal_b720d7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 933, y: 25) add_f11fda root.Std_k98ojb.Math.Add {}\n        instance(x: 1812, y: -319) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) assign_b4554f root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n\n        array_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_b720d7.left\n        element_f5c03d -> equal_b720d7.right\n        equal_b720d7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        if_07b8c7.then -> assign_b4554f.execute\n        for_8cb3f6.index -> assign_b4554f.gen_0\n        assign_b4554f.result -> position_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -189, y: 222) find_last_position_f0be66 root.main.find_last_position {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 354, y: -53, name: \"array\") property(List<Number>) array_f5c03d\n        in(x: 354, y: -103, name: \"element\") property(Number) element_2a3b7d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"position\") property(Number) position_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) equal_07b8c7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 1800, y: -200) expression_last_index root.Std_k98ojb.Math.Expression {\n            expression: \"last_index\"\n        }\n        instance(x: 2000, y: -100) not_equal_9fba8c root.Std_k98ojb.Logic.NotEqual {}\n\n        array_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_07b8c7.left\n        element_2a3b7d -> equal_07b8c7.right\n        equal_07b8c7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> if_e19a62.execute\n        for_8cb3f6.index -> expression_b720d7.gen_0\n        expression_b720d7.result -> expression_last_index.gen_0\n        expression_last_index.result -> position_f3db9f\n        expression_last_index.result -> not_equal_9fba8c.left\n        -1 -> not_equal_9fba8c.right\n        not_equal_9fba8c.result -> if_e19a62.predicate\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_07b8c7.else -> for_8cb3f6.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the last position of an element in a sorted array.\") find_last_position {\n        in(x: 50, y: 50, name: \"array\") property(List<Number>) array_input\n        in(x: 50, y: 100, name: \"element\") property(Number) element_input\n        in(x: 50, y: 150, name: \"execute\") trigger() execute_input\n\n        out(x: 300, y: 50, name: \"position\") property(Number) position_output\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_output\n\n        instance(x: 200, y: 50) length_instance root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 100) for_instance root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 50) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 600, y: 50) if_instance root.Std_k98ojb.Std.If {}\n        instance(x: 800, y: 50) set_position_instance root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n\n        array_input -> length_instance.list\n        array_input -> for_instance.items\n        for_instance.index -> set_position_instance.index\n        element_input -> equal_instance.left\n        for_instance.item -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.then -> set_position_instance.execute\n        set_position_instance.result -> position_output\n        for_instance.onItem -> if_instance.execute\n        for_instance.done -> continue_output\n        execute_input -> for_instance.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 354, y: -53, name: \"array\") property(List<Number>) array_123abc\n        in(x: 161, y: -211, name: \"element\") property(Number) element_456def\n        in(x: 161, y: -311, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 1748, y: -10, name: \"position\") property(Number) position_abc123\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_def456\n\n        instance(x: 352, y: -493) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 591, y: 74) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 933, y: 25) if_condition root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) assign_position root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n\n        array_123abc -> for_loop.items\n        for_loop.item -> equal_check.left\n        element_456def -> equal_check.right\n        equal_check.result -> if_condition.predicate\n        for_loop.onItem -> if_condition.execute\n        if_condition.then -> assign_position.execute\n        for_loop.index -> assign_position.gen_0\n        assign_position.result -> position_abc123\n        if_condition.else -> for_loop.next\n        for_loop.done -> continue_def456\n        execute_789ghi -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array\n        in(x: 100, y: 150, name: \"element\") property(Number) element\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"position\") property(Number) position\n        out(x: 400, y: 150, name: \"done\") trigger() done\n\n        instance(x: 250, y: 100) reversed root.Std_k98ojb.List.Reversed {}\n        instance(x: 250, y: 200) find root.Std_k98ojb.Iteration.Find {}\n        instance(x: 550, y: 100) length root.Std_k98ojb.List.Length {}\n        instance(x: 550, y: 200) sub root.Std_k98ojb.Math.Sub {}\n\n        array -> reversed.list\n        reversed.list -> find.items\n        func() {\n            in(x: -50, y: 50, name: \"item\") property(Number) item\n            in(x: -50, y: 100, name: \"index\") property(Number) index\n\n            out(x: 150, y: 50, name: \"result\") property(Bool) result\n\n            instance(x: 50, y: 50) equal root.Std_k98ojb.Logic.Equal {}\n\n            item -> equal.left\n            element -> equal.right\n            equal.result -> result\n        } -> find.predicate\n\n        find.item -> sub.first\n        length.list -> sub.second\n        length.length -> sub.second\n        sub.result -> position\n\n        execute -> length.list\n        execute -> find.execute\n        find.done -> done\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the last position of an element in a sorted array.\") find_last_position {\n        in(x: 64, y: -59, name: \"array\") property(List) array_9a8f3d\n        in(x: 68, y: -20, name: \"element\") property(Number) element_2b8f7c\n        in(x: 64, y: 18, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 204, y: -10, name: \"position\") property(Number) position_8b7c9f\n        out(x: 204, y: 18, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 322, y: -150) length_8c3f7d root.Std_k98ojb.List.Length {}\n        instance(x: 534, y: -150) sub_5c8f3e root.Std_k98ojb.Math.Sub {}\n        instance(x: 534, y: -50) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 754, y: -50) equal_7b9f8c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 754, y: 50) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1004, y: 50) add_4c9f3d root.Std_k98ojb.Math.Add {}\n\n        array_9a8f3d -> length_8c3f7d.list\n        length_8c3f7d.length -> sub_5c8f3e.first\n        1 -> sub_5c8f3e.second\n        sub_5c8f3e.result -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_7b9f8c.left\n        element_2b8f7c -> equal_7b9f8c.right\n        equal_7b9f8c.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> position_8b7c9f\n        for_8cb3f6.index -> add_4c9f3d.first\n        1 -> add_4c9f3d.second\n        add_4c9f3d.result -> position_8b7c9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_07b8c7.else -> for_8cb3f6.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the last position of an element in a sorted array.\") last_position {\n        in(x: 50, y: -50, name: \"array\") property(List<Number>) array_123456\n        in(x: 50, y: 0, name: \"element\") property(Number) element_654321\n        in(x: 50, y: 50, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 300, y: 0, name: \"position\") property(Number) position_789abc\n        out(x: 300, y: 50, name: \"done\") trigger() done_123abc\n\n        instance(x: 150, y: -50) reversed_1a2b3c root.Std_k98ojb.List.Reversed {}\n        instance(x: 150, y: 0) for_4d5e6f root.Std_k98ojb.Std.For {}\n        instance(x: 150, y: 50) equal_7g8h9i root.Std_k98ojb.Logic.Equal {}\n        instance(x: 200, y: 0) if_a1b2c3 root.Std_k98ojb.Std.If {}\n        instance(x: 250, y: 0) sub_d4e5f6 root.Std_k98ojb.Math.Sub {}\n\n        array_123456 -> reversed_1a2b3c.list\n        reversed_1a2b3c.list -> for_4d5e6f.items\n        for_4d5e6f.item -> equal_7g8h9i.left\n        element_654321 -> equal_7g8h9i.right\n        equal_7g8h9i.result -> if_a1b2c3.predicate\n        for_4d5e6f.onItem -> if_a1b2c3.execute\n        if_a1b2c3.then -> done_123abc\n        for_4d5e6f.index -> sub_d4e5f6.first\n        List.Length(array_123456) -> sub_d4e5f6.second\n        sub_d4e5f6.result -> position_789abc\n        execute_abcdef -> for_4d5e6f.reset\n        if_a1b2c3.else -> for_4d5e6f.next\n        for_4d5e6f.done -> done_123abc\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 80, y: -80, name: \"array\") property(List<Number>) array_1a2b3c\n        in(x: 80, y: -40, name: \"element\") property(Number) element_4d5e6f\n        in(x: 80, y: 0, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 400, y: -40, name: \"position\") property(Number) position_0a1b2c\n        out(x: 400, y: 0, name: \"continue\") trigger() continue_3d4e5f\n\n        instance(x: 240, y: -80) reversed_6g7h8i root.Std_k98ojb.List.Reversed {}\n        instance(x: 560, y: -40) sub_9j0k1l root.Std_k98ojb.Math.Sub {}\n        instance(x: 240, y: 0) find_2m3n4o root.Std_k98ojb.Iteration.Find {}\n        instance(x: 720, y: -40) length_5p6q7r root.Std_k98ojb.List.Length {}\n\n        array_1a2b3c -> reversed_6g7h8i.list\n        reversed_6g7h8i.list -> find_2m3n4o.items\n        func() {\n            in(x: -80, y: 0, name: \"item\") property(Number) item_5s6t7u\n\n            out(x: 160, y: 0, name: \"out\") property(Bool) out_8v9w0x\n\n            instance(x: 0, y: 0) equal_1y2z3a root.Std_k98ojb.Logic.Equal {}\n            item_5s6t7u -> equal_1y2z3a.left\n            element_4d5e6f -> equal_1y2z3a.right\n            equal_1y2z3a.result -> out_8v9w0x\n        } -> find_2m3n4o.predicate\n\n        find_2m3n4o.item -> length_5p6q7r.list\n        length_5p6q7r.length -> sub_9j0k1l.first\n        find_2m3n4o.index -> sub_9j0k1l.second\n        sub_9j0k1l.result -> position_0a1b2c\n\n        execute_7g8h9i -> find_2m3n4o.execute\n        find_2m3n4o.found -> continue_3d4e5f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the last position of an element in a sorted array.\") find_last_position {\n        in(x: 50, y: 50, name: \"array\") property(List) array_1\n        in(x: 50, y: 100, name: \"element\") property(Number) element_2\n        in(x: 50, y: 150, name: \"execute\") trigger() execute_3\n\n        out(x: 500, y: 100, name: \"position\") property(Number) position_4\n        out(x: 500, y: 150, name: \"done\") trigger() done_5\n\n        instance(x: 250, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 150) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 350, y: 250) if_condition root.Std_k98ojb.Std.If {}\n        instance(x: 400, y: 350) store_position root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n\n        array_1 -> for_loop.items\n        for_loop.item -> equal_check.left\n        element_2 -> equal_check.right\n        equal_check.result -> if_condition.predicate\n        for_loop.index -> store_position.index\n        if_condition.then -> store_position.execute\n        store_position.result -> position_4\n        if_condition.then -> for_loop.next\n        for_loop.done -> done_5\n        execute_3 -> for_loop.reset\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "best_params_optimization": "semantic",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": -1,
        "seed": 346,
        "n_generations_per_task": 10,
        "model": "gpt-4o",
        "largest_context": 5183,
        "task_candidates": {
            "8": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_all {\n        in(x: 100, y: 50, name: \"number\") property(Number) number_input\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"result\") property(Bool) result_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) map_instance root.Std_k98ojb.Iteration.Map {}\n        instance(x: 550, y: 100) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 800, y: 100) is_empty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        execute_trigger -> map_instance.trigger\n        array_input -> map_instance.items\n\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_input\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out_output\n\n            instance(x: 100, y: 50) greater_than_instance root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greater_than_instance.left\n            element_input -> greater_than_instance.right\n            greater_than_instance.result -> out_output\n        } -> map_instance.handler\n\n        map_instance.output_list -> filter_instance.items\n\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Bool) element_input\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out_output\n\n            instance(x: 100, y: 50) not_instance root.Std_k98ojb.Logic.Not {}\n            element_input -> not_instance.input\n            not_instance.output -> out_output\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> is_empty_instance.list\n        is_empty_instance.isEmpty -> result_output\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: 50, name: \"number\") property(Number) number_input\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"result\") property(Bool) result_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) isempty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        array_input -> filter_instance.items\n        func() {\n            in(x: 50, y: 50, name: \"element\") property(Number) element_input\n\n            out(x: 150, y: 50, name: \"out\") property(Bool) out_output\n\n            instance(x: 100, y: 50) greaterthan_instance root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greaterthan_instance.left\n            element_input -> greaterthan_instance.right\n            greaterthan_instance.result -> out_output\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> isempty_instance.list\n        isempty_instance.isEmpty -> result_output\n        execute_trigger -> filter_instance.trigger\n        isempty_instance.isEmpty -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: 100, name: \"number\") property(Number) number_input\n        in(x: 100, y: 200, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 300, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 100, name: \"result\") property(Bool) result_output\n        out(x: 500, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 100) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 700, y: 100) if_condition root.Std_k98ojb.Std.If {}\n        instance(x: 500, y: 300) not_operator root.Std_k98ojb.Logic.Not {}\n        instance(x: 500, y: 200) lessthanorequal_check root.Std_k98ojb.Math.LessThanOrEqual {}\n\n        array_input -> for_loop.items\n        for_loop.item -> lessthanorequal_check.left\n        number_input -> lessthanorequal_check.right\n        lessthanorequal_check.result -> if_condition.predicate\n        for_loop.onItem -> if_condition.execute\n        if_condition.then -> not_operator.input\n        not_operator.output -> result_output\n        if_condition.else -> for_loop.next\n        for_loop.done -> continue_trigger\n        execute_trigger -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 354, y: -53, name: \"number\") property(Number) number_input\n        in(x: 161, y: -211, name: \"array\") property(List<Number>) array_input\n        in(x: 161, y: -311, name: \"execute\") trigger() execute_input\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_result\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_output\n\n        instance(x: 352, y: -493) map_instance root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) greaterthan_instance root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 714, y: -155) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1121, y: -54) is_empty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        array_input -> map_instance.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_input\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_bool\n\n            element_input -> greaterthan_instance.left\n            number_input -> greaterthan_instance.right\n            greaterthan_instance.result -> out_bool\n        } -> map_instance.handler\n\n        map_instance.output_list -> filter_instance.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Bool) element_bool\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_filter\n\n            element_bool -> out_filter\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> is_empty_instance.list\n        is_empty_instance.isEmpty -> out_result\n        execute_input -> map_instance.execute\n        is_empty_instance.isEmpty -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_all {\n        in(x: 150, y: -100, name: \"number\") property(Number) number_input\n        in(x: 150, y: -50, name: \"array\") property(List<Number>) array_input\n        in(x: 150, y: 0, name: \"execute\") trigger() execute_input\n\n        out(x: 550, y: -50, name: \"result\") property(Bool) result_output\n        out(x: 550, y: 0, name: \"continue\") trigger() continue_output\n\n        instance(x: 350, y: -50) map_instance root.Std_k98ojb.Iteration.Map {}\n        instance(x: 350, y: 50) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 550, y: -150) isempty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        execute_input -> map_instance.trigger\n        array_input -> map_instance.items\n        func() {\n            in(x: -50, y: 0, name: \"element\") property(Number) element_input\n\n            out(x: 150, y: 0, name: \"is_greater\") property(Bool) is_greater_output\n\n            instance(x: 50, y: 0) greaterthan_instance root.Std_k98ojb.Math.GreaterThan {}\n            element_input -> greaterthan_instance.right\n            number_input -> greaterthan_instance.left\n            greaterthan_instance.result -> is_greater_output\n        } -> map_instance.handler\n\n        map_instance.output_list -> filter_instance.items\n        func() {\n            in(x: -50, y: 0, name: \"element\") property(Bool) element_input\n\n            out(x: 150, y: 0, name: \"filtered\") property(Bool) filtered_output\n\n            element_input -> filtered_output\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> isempty_instance.list\n        isempty_instance.isEmpty -> result_output\n        execute_input -> filter_instance.trigger\n        execute_input -> isempty_instance.trigger\n        isempty_instance.isEmpty -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 162, y: -34, name: \"number\") property(Number) number_1c9f4d\n        in(x: 166, y: -132, name: \"array\") property(List<Number>) array_4f7a1e\n        in(x: 170, y: -230, name: \"execute\") trigger() execute_1a2b3c\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_2b3c4d\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_5d6e7f\n\n        instance(x: 352, y: -493) for_9ab8c7 root.Std_k98ojb.Std.For {}\n        instance(x: 714, y: -155) greaterthan_5e6f7a root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 1121, y: -54) if_8b9c0d root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) not_7f8a9b root.Std_k98ojb.Logic.Not {}\n\n        array_4f7a1e -> for_9ab8c7.items\n        number_1c9f4d -> greaterthan_5e6f7a.left\n        for_9ab8c7.item -> greaterthan_5e6f7a.right\n        greaterthan_5e6f7a.result -> if_8b9c0d.predicate\n        for_9ab8c7.onItem -> if_8b9c0d.execute\n        if_8b9c0d.then -> continue_5d6e7f\n        if_8b9c0d.else -> not_7f8a9b.input\n        not_7f8a9b.output -> out_2b3c4d\n        for_9ab8c7.done -> continue_5d6e7f\n        execute_1a2b3c -> for_9ab8c7.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 100, y: 50, name: \"number\") property(Number) number_5a8c3d\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_8b9f2e\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_1c7f3b\n\n        out(x: 400, y: 100, name: \"result\") property(Bool) result_9e8d4f\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_2a6b7c\n\n        instance(x: 200, y: 100) for_4c5d6e root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 50) greaterthan_3f4e5d root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 350, y: 100) if_6b7c8d root.Std_k98ojb.Std.If {}\n        instance(x: 300, y: 150) not_7d8e9f root.Std_k98ojb.Logic.Not {}\n\n        execute_1c7f3b -> for_4c5d6e.trigger\n        array_8b9f2e -> for_4c5d6e.items\n        for_4c5d6e.item -> greaterthan_3f4e5d.right\n        number_5a8c3d -> greaterthan_3f4e5d.left\n        greaterthan_3f4e5d.result -> not_7d8e9f.input\n        not_7d8e9f.output -> if_6b7c8d.input\n        for_4c5d6e.onItem -> if_6b7c8d.execute\n        if_6b7c8d.then -> continue_2a6b7c\n        if_6b7c8d.else -> for_4c5d6e.next\n        for_4c5d6e.done -> result_9e8d4f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_array {\n        in(x: 50, y: 0, name: \"number\") property(Number) number_input\n        in(x: 50, y: 50, name: \"array\") property(List<Number>) array_input\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_input\n\n        out(x: 300, y: 50, name: \"result\") property(Bool) result_output\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_output\n\n        instance(x: 150, y: 50) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 200, y: 150) is_empty_instance root.Std_k98ojb.List.IsEmpty {}\n\n        array_input -> filter_instance.items\n        func() {\n            in(x: 0, y: 0, name: \"element\") property(Number) element_input\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) out_output\n\n            instance(x: 100, y: 0) greater_than_instance root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greater_than_instance.left\n            element_input -> greater_than_instance.right\n            greater_than_instance.result -> out_output\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> is_empty_instance.list\n        is_empty_instance.isEmpty -> result_output\n        execute_input -> filter_instance.execute\n        execute_input -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_all {\n        in(x: 354, y: -53, name: \"number\") property(Number) number_123456\n        in(x: 161, y: -211, name: \"array\") property(List<Number>) array_abcdef\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) greaterthan_11fda root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1812, y: -319) not_80a119 root.Std_k98ojb.Logic.Not {}\n\n        array_abcdef -> for_8cb3f6.items\n        for_8cb3f6.item -> greaterthan_11fda.right\n        number_123456 -> greaterthan_11fda.left\n        greaterthan_11fda.result -> not_80a119.input\n        not_80a119.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> out_f3db9f\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the entered number is greater than the elements of the given array.\") is_greater_than_all {\n        in(x: 180, y: -53, name: \"number\") property(Number) number_input\n        in(x: 180, y: -153, name: \"array\") property(List<Number>) array_input\n        in(x: 180, y: -253, name: \"execute\") trigger() execute_input\n\n        out(x: 480, y: -53, name: \"result\") property(Bool) result_output\n        out(x: 480, y: 47, name: \"continue\") trigger() continue_output\n\n        instance(x: 380, y: -153) filter_7a9b3f root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 580, y: -253) is_empty_3c8b9f root.Std_k98ojb.List.IsEmpty {}\n\n        execute_input -> filter_7a9b3f.execute\n        array_input -> filter_7a9b3f.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_input\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_result\n\n            instance(x: 106, y: 17) greater_than_2f9d09 root.Std_k98ojb.Math.GreaterThan {}\n            number_input -> greater_than_2f9d09.left\n            element_input -> greater_than_2f9d09.right\n            greater_than_2f9d09.result -> out_result\n        } -> filter_7a9b3f.handler\n\n        filter_7a9b3f.output_list -> is_empty_3c8b9f.list\n        is_empty_3c8b9f.isEmpty -> result_output\n        execute_input -> continue_output\n    }\n}"
            ],
            "10": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 161, y: -211, name: \"word\") property(String) word_4f7c1a\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"match\") property(Bool) match_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) contains_6030c9 root.Std_k98ojb.Strings.Contains {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        word_4f7c1a -> contains_6030c9.input\n        \"z\" -> contains_6030c9.contains\n        contains_6030c9.result -> if_07b8c7.predicate\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> match_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) contains_6030c9 root.Std_k98ojb.Strings.Contains {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> contains_6030c9.input\n        \"z\" -> contains_6030c9.contains\n        contains_6030c9.result -> if_07b8c7.predicate\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) match_word_with_z_f0be66 root.main.match_word_with_z {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the word contains 'z'.\") contains_z {\n        in(x: 50, y: 50, name: \"word\") property(String) word_input\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 50, name: \"result\") property(Bool) result_output\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 75) contains_z_check root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n\n        word_input -> contains_z_check.input\n        contains_z_check.result -> result_output\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 108, y: -44, name: \"input\") property(String) input_f5c03d\n        in(x: 174, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 348, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 394, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) contains_6030c9 root.Std_k98ojb.Strings.Contains {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> contains_6030c9.input\n        \"z\" -> contains_6030c9.contains\n        contains_6030c9.result -> if_07b8c7.predicate\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_word\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) contains_z\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) contains_z_check root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n\n        input_word -> contains_z_check.input\n        contains_z_check.result -> contains_z\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_word\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"match\") property(Bool) match_result\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 100) contains_z root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n        \n        input_word -> contains_z.input\n        contains_z.result -> match_result\n        execute_trigger -> contains_z.execute\n        contains_z.execute -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_word\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_result\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) contains_check root.Std_k98ojb.Strings.Contains {}\n\n        input_word -> contains_check.input\n        \"z\" -> contains_check.contains\n        contains_check.result -> output_result\n\n        execute_trigger -> contains_check.execute\n        contains_check.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 100, y: 100, name: \"input\") property(String) input_5f3d9a\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_1a2b3c\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_4d5e6f\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_7g8h9i\n\n        instance(x: 200, y: 150) contains_z_123abc root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n        input_5f3d9a -> contains_z_123abc.input\n        contains_z_123abc.result -> out_4d5e6f\n        execute_1a2b3c -> continue_7g8h9i\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 80, y: 80, name: \"input\") property(String) input_5c03d\n        in(x: 80, y: 160, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 80, name: \"out\") property(Bool) out_f3db9f\n        out(x: 300, y: 160, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 120) contains_8cb3f6 root.Std_k98ojb.Strings.Contains {}\n        \n        input_5c03d -> contains_8cb3f6.input\n        \"z\" -> contains_8cb3f6.contains\n        contains_8cb3f6.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"matches a word containing 'z'.\") match_word_with_z {\n        in(x: 50, y: 50, name: \"input\") property(String) input_9f3d7c\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_4a3d7b\n\n        out(x: 250, y: 50, name: \"contains_z\") property(Bool) contains_z_7c4a2d\n        out(x: 250, y: 100, name: \"continue\") trigger() continue_8f3b2a\n\n        instance(x: 150, y: 75) contains_9b3d8c root.Std_k98ojb.Strings.Contains {\n            contains: \"z\"\n        }\n\n        input_9f3d7c -> contains_9b3d8c.input\n        contains_9b3d8c.result -> contains_z_7c4a2d\n        execute_4a3d7b -> continue_8f3b2a\n    }\n}"
            ],
            "14": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 154, y: -37, name: \"input\") property(Number) input_0b9d7e\n        in(x: 150, y: -178, name: \"execute\") trigger() execute_0c0f12\n\n        out(x: 1168, y: -35, name: \"out\") property(Number) out_1c9f6d\n        out(x: 1314, y: 95, name: \"continue\") trigger() continue_7a3c2f\n\n        instance(x: 348, y: -108) characters_4b8c9d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 578, y: -56) map_5f9d1b root.Std_k98ojb.Iteration.Map {}\n        instance(x: 837, y: -15) reduce_9b8d3f root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1131, y: -163) add_8b9c4e root.Std_k98ojb.Math.Add {}\n\n        input_0b9d7e -> characters_4b8c9d.input\n        characters_4b8c9d.characters -> map_5f9d1b.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(String) element_2c8f9e\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_3d9e2b\n\n            instance(x: 106, y: 17) to_number_5b8d1f root.Std_k98ojb.Strings.ToNumber {}\n            element_2c8f9e -> to_number_5b8d1f.input\n            to_number_5b8d1f.output -> out_3d9e2b\n        } -> map_5f9d1b.handler\n        map_5f9d1b.output_list -> reduce_9b8d3f.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_6b8d3f\n            in(x: -76, y: 126, name: \"current\") property(Number) current_4c8f1e\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_5d9f2c\n\n            accumulated_6b8d3f -> add_8b9c4e.first\n            current_4c8f1e -> add_8b9c4e.second\n            add_8b9c4e.result -> out_5d9f2c\n        } -> reduce_9b8d3f.reducer\n        reduce_9b8d3f.result -> out_1c9f6d\n        execute_0c0f12 -> reduce_9b8d3f.reset\n        reduce_9b8d3f.done -> continue_7a3c2f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 0, y: 0, name: \"input\") property(Number) input_0c0e1f\n        in(x: 0, y: 50, name: \"execute\") trigger() execute_3a0f5c\n\n        out(x: 200, y: 0, name: \"sum\") property(Number) sum_4b5e3f\n        out(x: 200, y: 50, name: \"continue\") trigger() continue_8a0b5d\n\n        instance(x: 100, y: 0) characters_5d0e1f root.Std_k98ojb.Strings.Characters {}\n        instance(x: 100, y: 100) map_7c0f2d root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 0) reduce_9b0e4f root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 300, y: 100) add_1a0b2c root.Std_k98ojb.Math.Add {}\n\n        input_0c0e1f -> characters_5d0e1f.input\n        characters_5d0e1f.characters -> map_7c0f2d.items\n\n        func() {\n            in(x: -100, y: 0, name: \"char\") property(String) char_1d0e2f\n\n            out(x: 100, y: 0, name: \"digit\") property(Number) digit_2b0f3c\n\n            instance(x: 0, y: 0) expression_3c0e4d root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(char)\"\n            }\n\n            char_1d0e2f -> expression_3c0e4d.gen_0\n            expression_3c0e4d.result -> digit_2b0f3c\n        } -> map_7c0f2d.handler\n\n        map_7c0f2d.output_list -> reduce_9b0e4f.items\n\n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(Number) acc_4d0e5f\n            in(x: -100, y: 50, name: \"digit\") property(Number) digit_5e0f6c\n\n            out(x: 100, y: 0, name: \"new_acc\") property(Number) new_acc_6b0e7d\n\n            acc_4d0e5f -> add_1a0b2c.first\n            digit_5e0f6c -> add_1a0b2c.second\n            add_1a0b2c.result -> new_acc_6b0e7d\n        } -> reduce_9b0e4f.reducer\n\n        0 -> reduce_9b0e4f.initial\n        reduce_9b0e4f.result -> sum_4b5e3f\n        execute_3a0f5c -> reduce_9b0e4f.reset\n        reduce_9b0e4f.done -> continue_8a0b5d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"out\") property(Number) output_sum\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_string root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 100) map_digits root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 150) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        input_number -> to_string.input\n        to_string.characters -> map_digits.items\n\n        func() {\n            in(x: 0, y: 0, name: \"char\") property(String) char_input\n            out(x: 200, y: 0, name: \"digit\") property(Number) digit_output\n\n            instance(x: 100, y: 0) to_number root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(char)\"\n            }\n\n            char_input -> to_number.char\n            to_number.result -> digit_output\n        } -> map_digits.handler\n\n        map_digits.output_list -> reduce_sum.items\n\n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_input\n            in(x: 0, y: 50, name: \"digit\") property(Number) digit_input\n            out(x: 200, y: 0, name: \"sum\") property(Number) sum_output\n\n            instance(x: 100, y: 0) add_digits root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_digits.first\n            digit_input -> add_digits.second\n            add_digits.result -> sum_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> output_sum\n\n        execute_trigger -> to_string.trigger\n        reduce_sum.done -> continue_trigger\n    }\n\n    instance(x: 100, y: 300) sum_of_digits_instance root.main.sum_of_digits {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 300, y: 100, name: \"input\") property(Number) input_5f4c9d\n        in(x: 300, y: 150, name: \"execute\") trigger() execute_7b8c3f\n\n        out(x: 500, y: 100, name: \"sum\") property(Number) sum_9f8d3a\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_1a2b3c\n\n        instance(x: 400, y: 50) toString_4a5b6c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 600, y: 50) map_7c8d9e root.Std_k98ojb.Iteration.Map {}\n        instance(x: 800, y: 50) reduce_0f1a2b root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1000, y: 50) add_3d4e5f root.Std_k98ojb.Math.Add {}\n\n        input_5f4c9d -> toString_4a5b6c.input\n        toString_4a5b6c.characters -> map_7c8d9e.items\n\n        func() {\n            in(x: 100, y: 100, name: \"char\") property(String) char_2b3c4d\n\n            out(x: 300, y: 100, name: \"digit\") property(Number) digit_5e6f7g\n\n            instance(x: 200, y: 100) parseInt_8h9i0j root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(char)\"\n            }\n            char_2b3c4d -> parseInt_8h9i0j.gen_0\n            parseInt_8h9i0j.result -> digit_5e6f7g\n        } -> map_7c8d9e.handler\n\n        map_7c8d9e.output_list -> reduce_0f1a2b.items\n\n        func() {\n            in(x: 100, y: 100, name: \"accumulated\") property(Number) accumulated_1b2c3d\n            in(x: 100, y: 150, name: \"digit\") property(Number) digit_4e5f6g\n\n            out(x: 300, y: 100, name: \"sum\") property(Number) sum_7h8i9j\n\n            accumulated_1b2c3d -> add_3d4e5f.first\n            digit_4e5f6g -> add_3d4e5f.second\n            add_3d4e5f.result -> sum_7h8i9j\n        } -> reduce_0f1a2b.reducer\n\n        0 -> reduce_0f1a2b.initial\n        reduce_0f1a2b.result -> sum_9f8d3a\n\n        execute_7b8c3f -> reduce_0f1a2b.execute\n        reduce_0f1a2b.done -> continue_1a2b3c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 50, y: 0, name: \"input\") property(Number) input_1a2b3c\n        in(x: 100, y: 0, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 300, y: 0, name: \"out\") property(Number) out_7g8h9i\n        out(x: 350, y: 0, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 150, y: -100) characters_3m4n5o root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: -50) map_6p7q8r root.Std_k98ojb.Iteration.Map {}\n        instance(x: 250, y: 50) reduce_9s0t1u root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 200, y: 100) add_2v3w4x root.Std_k98ojb.Math.Add {}\n\n        input_1a2b3c -> characters_3m4n5o.input\n        characters_3m4n5o.characters -> map_6p7q8r.items\n\n        func() {\n            in(x: -50, y: 0, name: \"char\") property(String) char_5y6z7a\n\n            out(x: 100, y: 0, name: \"out\") property(Number) out_8b9c0d\n\n            instance(x: 0, y: 0) to_number_1e2f3g root.Std_k98ojb.Strings.ToNumber {}\n            char_5y6z7a -> to_number_1e2f3g.input\n            to_number_1e2f3g.output -> out_8b9c0d\n        } -> map_6p7q8r.handler\n\n        map_6p7q8r.output_list -> reduce_9s0t1u.items\n\n        func() {\n            in(x: -50, y: 0, name: \"accumulated\") property(Number) accumulated_4h5i6j\n            in(x: -50, y: 50, name: \"current\") property(Number) current_7k8l9m\n\n            out(x: 100, y: 0, name: \"out\") property(Number) out_0n1o2p\n\n            accumulated_4h5i6j -> add_2v3w4x.first\n            current_7k8l9m -> add_2v3w4x.second\n            add_2v3w4x.result -> out_0n1o2p\n        } -> reduce_9s0t1u.reducer\n\n        reduce_9s0t1u.result -> out_7g8h9i\n        execute_4d5e6f -> reduce_9s0t1u.execute\n        reduce_9s0t1u.done -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 180, y: -44, name: \"input\") property(Number) input_3b0c3f\n        in(x: 72, y: -210, name: \"execute\") trigger() execute_29b8c3\n\n        out(x: 1400, y: 0, name: \"sum\") property(Number) sum_4bdb9f\n        out(x: 1510, y: 140, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 350, y: -150) characters_1a3c4e root.Std_k98ojb.Strings.Characters {}\n        instance(x: 600, y: 0) map_7c9f6d root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1100, y: -100) reduce_9f8a6b root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 850, y: -50) tonumber_5e2f7a root.Std_k98ojb.Strings.ToNumeric {}\n\n        input_3b0c3f -> characters_1a3c4e.input\n        characters_1a3c4e.characters -> map_7c9f6d.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char_5f51f7\n\n            out(x: 250, y: 50, name: \"num\") property(Number) num_d0fd24\n\n            char_5f51f7 -> tonumber_5e2f7a.input\n            tonumber_5e2f7a.output -> num_d0fd24\n        } -> map_7c9f6d.handler\n\n        map_7c9f6d.output_list -> reduce_9f8a6b.items\n\n        func() {\n            in(x: -100, y: 0, name: \"accum\") property(Number) accum_7f51f7\n            in(x: -100, y: 100, name: \"num\") property(Number) num_8f51f7\n\n            out(x: 200, y: 50, name: \"sum\") property(Number) sum_d0fd24\n\n            instance(x: 50, y: 50) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            accum_7f51f7 -> add_2f9d09.first\n            num_8f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> sum_d0fd24\n        } -> reduce_9f8a6b.reducer\n\n        0 -> reduce_9f8a6b.initial\n        reduce_9f8a6b.result -> sum_4bdb9f\n        execute_29b8c3 -> reduce_9f8a6b.execute\n        reduce_9f8a6b.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 100, y: 50, name: \"input\") property(Number) input_3d0f2b\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_9f8c2d\n\n        out(x: 500, y: 50, name: \"sum\") property(Number) sum_4b7c1e\n        out(x: 500, y: 100, name: \"continue\") trigger() continue_1a2b3c\n\n        instance(x: 200, y: 50) characters_6a7b8c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 50) map_9d8e7f root.Std_k98ojb.Iteration.Map {}\n        instance(x: 400, y: 50) reduce_5f6e7d root.Std_k98ojb.Iteration.Reduce {}\n\n        input_3d0f2b -> characters_6a7b8c.input\n        characters_6a7b8c.characters -> map_9d8e7f.items\n\n        func() {\n            in(x: -50, y: 0, name: \"character\") property(String) character_8e9f0a\n\n            out(x: 150, y: 0, name: \"digit\") property(Number) digit_1b2c3d\n\n            instance(x: 50, y: 0) expression_4c5d6e root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(character)\"\n            }\n\n            character_8e9f0a -> expression_4c5d6e.gen_0\n            expression_4c5d6e.result -> digit_1b2c3d\n        } -> map_9d8e7f.handler\n\n        map_9d8e7f.output_list -> reduce_5f6e7d.items\n\n        func() {\n            in(x: -50, y: 0, name: \"accumulated\") property(Number) accumulated_2d3e4f\n            in(x: -50, y: 50, name: \"digit\") property(Number) digit_5f6g7h\n\n            out(x: 150, y: 25, name: \"sum\") property(Number) sum_7h8i9j\n\n            instance(x: 50, y: 25) add_8i9j0k root.Std_k98ojb.Math.Add {}\n\n            accumulated_2d3e4f -> add_8i9j0k.first\n            digit_5f6g7h -> add_8i9j0k.second\n            add_8i9j0k.result -> sum_7h8i9j\n        } -> reduce_5f6e7d.reducer\n\n        0 -> reduce_5f6e7d.initial_value\n        reduce_5f6e7d.result -> sum_4b7c1e\n        execute_9f8c2d -> reduce_5f6e7d.execute\n        reduce_5f6e7d.done -> continue_1a2b3c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Get the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 10, y: 10, name: \"input\") property(Number) input_f5c03d\n        in(x: 10, y: 40, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 10, name: \"sum\") property(Number) sum_f3db9f\n        out(x: 300, y: 40, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 100, y: 100) to_string_123abc root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 100) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 100) reduce_456def root.Std_k98ojb.Iteration.Reduce {}\n\n        input_f5c03d -> to_string_123abc.input\n        to_string_123abc.characters -> map_6030c9.items\n\n        func() {\n            in(x: -50, y: 0, name: \"char\") property(String) char_5f51f7\n\n            out(x: 100, y: 0, name: \"digit\") property(Number) digit_d0fd24\n\n            instance(x: 0, y: 0) to_number_789ghi root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(char)\"\n            }\n            char_5f51f7 -> to_number_789ghi.gen_0\n            to_number_789ghi.result -> digit_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_456def.items\n\n        func() {\n            in(x: -50, y: 0, name: \"acc\") property(Number) acc_abc123\n            in(x: -50, y: 30, name: \"digit\") property(Number) digit_def456\n\n            out(x: 100, y: 15, name: \"sum\") property(Number) sum_ghi789\n\n            instance(x: 0, y: 15) add_jkl012 root.Std_k98ojb.Math.Add {}\n            acc_abc123 -> add_jkl012.first\n            digit_def456 -> add_jkl012.second\n            add_jkl012.result -> sum_ghi789\n        } -> reduce_456def.reducer\n\n        0 -> reduce_456def.initial\n        reduce_456def.result -> sum_f3db9f\n        execute_27b8c3 -> reduce_456def.reset\n        reduce_456def.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 60, y: 60, name: \"input\") property(Number) input_123456\n        in(x: 60, y: 100, name: \"execute\") trigger() execute_654321\n\n        out(x: 500, y: 60, name: \"sum\") property(Number) sum_abcdef\n        out(x: 500, y: 100, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 160, y: 60) toString_1 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 60) map_2 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 400, y: 60) reduce_3 root.Std_k98ojb.Iteration.Reduce {}\n\n        input_123456 -> toString_1.input\n        toString_1.characters -> map_2.items\n\n        func() {\n            in(x: 60, y: 60, name: \"character\") property(String) character_4\n\n            out(x: 300, y: 60, name: \"digit\") property(Number) digit_5\n\n            instance(x: 160, y: 60) toNumber_6 root.Std_k98ojb.Math.Expression {\n                expression: \"parseInt(a)\"\n            }\n\n            character_4 -> toNumber_6.a\n            toNumber_6.result -> digit_5\n        } -> map_2.handler\n\n        map_2.output_list -> reduce_3.items\n\n        func() {\n            in(x: 60, y: 60, name: \"acc\") property(Number) acc_7\n            in(x: 60, y: 100, name: \"digit\") property(Number) digit_8\n\n            out(x: 300, y: 80, name: \"sum\") property(Number) sum_9\n\n            instance(x: 160, y: 80) add_10 root.Std_k98ojb.Math.Add {}\n\n            acc_7 -> add_10.first\n            digit_8 -> add_10.second\n            add_10.result -> sum_9\n        } -> reduce_3.reducer\n\n        0 -> reduce_3.initial\n        reduce_3.result -> sum_abcdef\n        execute_654321 -> reduce_3.execute\n        reduce_3.done -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the sum of the digits of a non-negative integer.\") sum_of_digits {\n        in(x: 144, y: -77, name: \"input\") property(Number) input_7a8b3c\n        in(x: 145, y: -178, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 734, y: -20, name: \"sum\") property(Number) sum_5c3d9f\n        out(x: 892, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) map_8cb3f6 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1121, y: -54) reduce_07b8c7 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"acc + digit\"\n        }\n\n        input_7a8b3c -> characters_6030c9.input\n        characters_6030c9.characters -> map_8cb3f6.items\n\n        func() {\n            in(x: -76, y: 46, name: \"char\") property(String) char_5f51f7\n\n            out(x: 382, y: 19, name: \"digit\") property(Number) digit_d0fd24\n\n            instance(x: 106, y: 17) to_number_2f9d09 root.Std_k98ojb.Strings.ToNumber {}\n            char_5f51f7 -> to_number_2f9d09.input\n            to_number_2f9d09.output -> digit_d0fd24\n        } -> map_8cb3f6.handler\n\n        map_8cb3f6.output_list -> reduce_07b8c7.items\n\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 96, name: \"digit\") property(Number) digit_5f51f7\n\n            out(x: 382, y: 19, name: \"sum\") property(Number) sum_d0fd24\n\n            acc_5f51f7 -> expression_b720d7.gen_0\n            digit_5f51f7 -> expression_b720d7.gen_1\n            expression_b720d7.result -> sum_d0fd24\n        } -> reduce_07b8c7.reducer\n\n        0 -> reduce_07b8c7.initial\n        reduce_07b8c7.result -> sum_5c3d9f\n        execute_27b8c3 -> reduce_07b8c7.execute\n        reduce_07b8c7.done -> continue_8ba06b\n    }\n}"
            ],
            "15": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 180, y: -100, name: \"list\") property(List) list_123abc\n        in(x: 180, y: -200, name: \"execute\") trigger() execute_456def\n\n        out(x: 600, y: -100, name: \"out\") property(Bool) out_789ghi\n        out(x: 600, y: -200, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 400, y: -300) for_abc123 root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: -150) if_456def root.Std_k98ojb.Std.If {}\n        instance(x: 400, y: 0) lessthanorequal_789ghi root.Std_k98ojb.Math.LessThanOrEqual {}\n\n        list_123abc -> for_abc123.items\n        for_abc123.item -> lessthanorequal_789ghi.left\n        for_abc123.index -> lessthanorequal_789ghi.right\n        lessthanorequal_789ghi.result -> if_456def.predicate\n        for_abc123.onItem -> if_456def.execute\n        if_456def.then -> for_abc123.next\n        if_456def.else -> continue_012jkl\n        if_456def.value -> out_789ghi\n        for_abc123.done -> continue_012jkl\n        execute_456def -> for_abc123.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 20, y: 20, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 300, y: 20, name: \"is_sorted\") property(Bool) is_sorted\n\n        instance(x: 100, y: 20) for_0f7d4a root.Std_k98ojb.Std.For {}\n        instance(x: 200, y: 20) if_2a3d5b root.Std_k98ojb.Std.If {}\n        instance(x: 150, y: 100) lessthanorequal_3b4c6d root.Std_k98ojb.Math.LessThanOrEqual {}\n\n        input_list -> for_0f7d4a.items\n        for_0f7d4a.item -> lessthanorequal_3b4c6d.left\n        for_0f7d4a.index -> lessthanorequal_3b4c6d.right\n        lessthanorequal_3b4c6d.result -> if_2a3d5b.predicate\n        for_0f7d4a.onItem -> if_2a3d5b.execute\n        if_2a3d5b.then -> for_0f7d4a.next\n        if_2a3d5b.else -> is_sorted\n        for_0f7d4a.done -> is_sorted\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 714, y: -155) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) greaterthan_07b8c7 root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 933, y: 25) getat_current root.Std_k98ojb.List.GetAt {}\n        instance(x: 1088, y: -256) getat_next root.Std_k98ojb.List.GetAt {}\n        instance(x: 1504, y: -400) not_07b8c7 root.Std_k98ojb.Logic.Not {}\n        \n        input_list -> for_8cb3f6.items\n        for_8cb3f6.index -> getat_current.index\n        input_list -> getat_current.list\n        for_8cb3f6.index -> Math.Add(1) -> getat_next.index\n        input_list -> getat_next.list\n        getat_current.item -> greaterthan_07b8c7.left\n        getat_next.item -> greaterthan_07b8c7.right\n        greaterthan_07b8c7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> not_07b8c7.input\n        not_07b8c7.result -> out_f3db9f\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 10, y: 10, name: \"list\") property(List<Number>) list_input\n\n        out(x: 150, y: 10, name: \"isSorted\") property(Bool) is_sorted_output\n\n        instance(x: 50, y: 50) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 250, y: 50) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 450, y: 50) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 650, y: 50) logic_not_80a119 root.Std_k98ojb.Logic.Not {}\n\n        list_input -> for_8cb3f6.items\n        for_8cb3f6.item -> lessthanorequal_f11fda.left\n        for_8cb3f6.index -> lessthanorequal_f11fda.right\n        lessthanorequal_f11fda.result -> if_07b8c7.predicate\n        if_07b8c7.else -> logic_not_80a119.input\n        logic_not_80a119.output -> is_sorted_output\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> for_8cb3f6.next\n        for_8cb3f6.done -> is_sorted_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 0, y: 0, name: \"list\") property(List<Number>) list_0\n        in(x: 0, y: 50, name: \"execute\") trigger() execute_1\n\n        out(x: 300, y: 0, name: \"isSorted\") property(Bool) isSorted_2\n        out(x: 300, y: 50, name: \"continue\") trigger() continue_3\n\n        instance(x: 150, y: 0) for_4 root.Std_k98ojb.Std.For {}\n        instance(x: 150, y: 100) lessthanorequal_5 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 150, y: 200) if_6 root.Std_k98ojb.Std.If {}\n        instance(x: 150, y: 300) not_7 root.Std_k98ojb.Logic.Not {}\n\n        list_0 -> for_4.items\n        for_4.item -> lessthanorequal_5.left\n        for_4.index -> lessthanorequal_5.right\n        lessthanorequal_5.result -> if_6.predicate\n        for_4.onItem -> if_6.execute\n        if_6.then -> continue_3\n        if_6.else -> not_7.input\n        not_7.output -> isSorted_2\n        for_4.done -> isSorted_2\n        execute_1 -> for_4.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 120, y: 80, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 480, y: 80, name: \"is_sorted\") property(Bool) is_sorted\n\n        instance(x: 240, y: 80) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 360, y: 80) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 300, y: 160) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n\n        input_list -> for_8cb3f6.items\n        for_8cb3f6.index -> lessthanorequal_f11fda.left\n        input_list -> lessthanorequal_f11fda.right\n        lessthanorequal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n\n        if_07b8c7.then -> is_sorted\n        for_8cb3f6.done -> is_sorted\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 124, y: -58, name: \"input\") property(List<Number>) input_ae3b2d\n        in(x: 120, y: -202, name: \"execute\") trigger() execute_8f3b9c\n\n        out(x: 1720, y: -20, name: \"out\") property(Bool) out_9c3b7f\n        out(x: 1866, y: 110, name: \"continue\") trigger() continue_3b9f8d\n\n        instance(x: 341, y: -170) length_1a3b9d root.Std_k98ojb.List.Length {}\n        instance(x: 567, y: -180) sub_2b3f9d root.Std_k98ojb.Math.Sub {}\n        instance(x: 789, y: -190) generaterange_3b9f7d root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 1010, y: -200) for_4b9f8d root.Std_k98ojb.Std.For {}\n        instance(x: 1245, y: -150) getat_5b9f7d root.Std_k98ojb.List.GetAt {}\n        instance(x: 1467, y: -160) getat_6b9f8d root.Std_k98ojb.List.GetAt {}\n        instance(x: 1690, y: -210) lessthanorequal_7b9f9d root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1910, y: -220) if_8b9f8d root.Std_k98ojb.Std.If {}\n        instance(x: 2120, y: -230) not_9b9f7d root.Std_k98ojb.Logic.Not {}\n\n        input_ae3b2d -> length_1a3b9d.list\n        length_1a3b9d.length -> sub_2b3f9d.first\n        1 -> sub_2b3f9d.second\n        0 -> generaterange_3b9f7d.from\n        sub_2b3f9d.result -> generaterange_3b9f7d.to\n        generaterange_3b9f7d.list -> for_4b9f8d.items\n        for_4b9f8d.index -> getat_5b9f7d.index\n        input_ae3b2d -> getat_5b9f7d.list\n        for_4b9f8d.index -> getat_6b9f8d.index\n        1 -> getat_6b9f8d.index\n        input_ae3b2d -> getat_6b9f8d.list\n        getat_5b9f7d.item -> lessthanorequal_7b9f9d.left\n        getat_6b9f8d.item -> lessthanorequal_7b9f9d.right\n        lessthanorequal_7b9f9d.result -> if_8b9f8d.predicate\n        for_4b9f8d.onItem -> if_8b9f8d.execute\n        if_8b9f8d.else -> not_9b9f7d.input\n        not_9b9f7d.result -> out_9c3b7f\n        if_8b9f8d.then -> for_4b9f8d.next\n        for_4b9f8d.done -> continue_3b9f8d\n        execute_8f3b9c -> for_4b9f8d.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 110, y: -10, name: \"list\") property(List) list_8f7a2d\n        in(x: 110, y: 70, name: \"execute\") trigger() execute_3b9f6a\n\n        out(x: 380, y: 30, name: \"out\") property(Bool) out_3e5c1b\n        out(x: 380, y: 90, name: \"continue\") trigger() continue_1b2a3d\n\n        instance(x: 220, y: -100) for_9a3d2b root.Std_k98ojb.Std.For {}\n        instance(x: 520, y: -30) if_4c2d1a root.Std_k98ojb.Std.If {}\n        instance(x: 380, y: -180) lessthanorequal_7b3c4d root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 700, y: 30) not_2a3b1c root.Std_k98ojb.Logic.Not {}\n\n        list_8f7a2d -> for_9a3d2b.items\n        for_9a3d2b.index -> lessthanorequal_7b3c4d.left\n        list_8f7a2d -> lessthanorequal_7b3c4d.right\n        lessthanorequal_7b3c4d.result -> if_4c2d1a.predicate\n        for_9a3d2b.onItem -> if_4c2d1a.execute\n        if_4c2d1a.then -> continue_1b2a3d\n        if_4c2d1a.else -> not_2a3b1c.input\n        not_2a3b1c.output -> out_3e5c1b\n        for_9a3d2b.done -> continue_1b2a3d\n        execute_3b9f6a -> for_9a3d2b.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 100, y: 100, name: \"input_list\") property(List) input_list_1a2b3c\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 400, y: 100, name: \"is_sorted\") property(Bool) is_sorted_7g8h9i\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 200, y: 50) for_loop_3m4n5o root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 50) less_than_6p7q8r root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 350, y: 150) not_sorted_if_9s0t1u root.Std_k98ojb.Std.If {}\n\n        input_list_1a2b3c -> for_loop_3m4n5o.items\n        for_loop_3m4n5o.item -> less_than_6p7q8r.left\n        for_loop_3m4n5o.index -> less_than_6p7q8r.right\n        less_than_6p7q8r.result -> not_sorted_if_9s0t1u.predicate\n        for_loop_3m4n5o.onItem -> not_sorted_if_9s0t1u.execute\n        not_sorted_if_9s0t1u.then -> continue_0j1k2l\n        not_sorted_if_9s0t1u.else -> is_sorted_7g8h9i\n        for_loop_3m4n5o.done -> continue_0j1k2l\n        execute_4d5e6f -> for_loop_3m4n5o.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a specified list is sorted or not.\") is_sorted {\n        in(x: 126, y: -32, name: \"input_list\") property(List) input_list_3c7a8b\n        in(x: 126, y: 56, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 370, y: 56, name: \"is_sorted\") property(Bool) is_sorted_f3db9f\n        out(x: 370, y: 140, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 322, y: -111) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 189, y: -215) length_5a1d4e root.Std_k98ojb.List.Length {}\n        instance(x: 527, y: -10) not_45b9c3 root.Std_k98ojb.Logic.Not {}\n        instance(x: 754, y: -73) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1020, y: -68) getat_1c4d2e root.Std_k98ojb.List.GetAt {}\n        instance(x: 1020, y: 62) getat_8b7d5a root.Std_k98ojb.List.GetAt {}\n        instance(x: 1287, y: -10) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1554, y: -68) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_list_3c7a8b -> length_5a1d4e.list\n        length_5a1d4e.length -> if_07b8c7.predicate\n        if_07b8c7.value -> is_sorted_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> for_8cb3f6.trigger\n        input_list_3c7a8b -> for_8cb3f6.items\n        for_8cb3f6.index -> getat_1c4d2e.index\n        input_list_3c7a8b -> getat_1c4d2e.list\n        for_8cb3f6.index -> getat_8b7d5a.index\n        input_list_3c7a8b -> getat_8b7d5a.list\n        getat_1c4d2e.item -> lessthanorequal_f11fda.left\n        getat_8b7d5a.item -> lessthanorequal_f11fda.right\n        lessthanorequal_f11fda.result -> not_45b9c3.input\n        not_45b9c3.result -> if_e19a62.predicate\n        for_8cb3f6.onItem -> if_e19a62.execute\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> for_8cb3f6.next\n        if_e19a62.value -> is_sorted_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}"
            ],
            "25": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 50, y: 0, name: \"list1\") property(List<Number>) list1\n        in(x: 50, y: 50, name: \"list2\") property(List<Number>) list2\n        in(x: 50, y: 100, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 50, name: \"result\") property(List<Number>) result\n        out(x: 400, y: 100, name: \"done\") trigger() done\n\n        instance(x: 200, y: 50) zip_1 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 300, y: 50) map_1 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 500, y: 50) modulo_1 root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_1.left\n        list2 -> zip_1.right\n        zip_1.zipped -> map_1.items\n\n        func() {\n            in(x: -50, y: 0, name: \"pair\") property(Tuple<Number, Number>) pair\n\n            out(x: 200, y: 0, name: \"out\") property(Number) out\n\n            instance(x: 100, y: 0) get_first root.Std_k98ojb.List.GetAt {\n                index: 0\n            }\n            instance(x: 100, y: 50) get_second root.Std_k98ojb.List.GetAt {\n                index: 1\n            }\n\n            pair -> get_first.list\n            pair -> get_second.list\n            get_first.item -> modulo_1.value\n            get_second.item -> modulo_1.divisor\n            modulo_1.result -> out\n        } -> map_1.handler\n\n        map_1.output_list -> result\n        execute -> zip_1.trigger\n        map_1.done -> done\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element-wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 150, name: \"list2\") property(List) list2\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"result\") property(List) result\n        out(x: 400, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 100) zip root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 300, y: 100) modulo root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip.left\n        list2 -> zip.right\n\n        func() {\n            in(x: 50, y: 50, name: \"left\") property(Number) left\n            in(x: 50, y: 100, name: \"right\") property(Number) right\n\n            out(x: 150, y: 75, name: \"result\") property(Number) result\n\n            left -> modulo.value\n            right -> modulo.divisor\n            modulo.result -> result\n        } -> zip.handler\n\n        zip.zipped -> result\n        execute -> zip.execute\n        zip.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 90, y: -32, name: \"list1\") property(List<Number>) list1_12d3f6\n        in(x: 90, y: 20, name: \"list2\") property(List<Number>) list2_12d3f7\n        in(x: 90, y: 72, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 420, y: 20, name: \"result\") property(List<Number>) result_8f3db9f\n        out(x: 420, y: 72, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 220, y: 20) zip_6030c9 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 620, y: 20) map_8cb3f6 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1020, y: 20) modulo_b720d7 root.Std_k98ojb.Math.Modulo {}\n\n        list1_12d3f6 -> zip_6030c9.left\n        list2_12d3f7 -> zip_6030c9.right\n        zip_6030c9.zipped -> map_8cb3f6.items\n\n        func() {\n            in(x: -76, y: 46, name: \"pair\") property(Tuple<Number, Number>) pair_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) getat_2f9d09 root.Std_k98ojb.List.GetAt {}\n            instance(x: 306, y: 17) getat_3f9d09 root.Std_k98ojb.List.GetAt {}\n\n            pair_5f51f7 -> getat_2f9d09.list\n            0 -> getat_2f9d09.index\n            pair_5f51f7 -> getat_3f9d09.list\n            1 -> getat_3f9d09.index\n\n            getat_2f9d09.item -> modulo_b720d7.value\n            getat_3f9d09.item -> modulo_b720d7.divisor\n\n            modulo_b720d7.result -> out_d0fd24\n        } -> map_8cb3f6.handler\n\n        map_8cb3f6.output_list -> result_8f3db9f\n        execute_27b8c3 -> zip_6030c9.handler\n        map_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 150, y: -50, name: \"list1\") property(List<Number>) list1_9f1c0d\n        in(x: 150, y: 50, name: \"list2\") property(List<Number>) list2_5a8f4b\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_1a3f4b\n\n        out(x: 650, y: 50, name: \"result\") property(List<Number>) result_2b4d1a\n        out(x: 650, y: 150, name: \"continue\") trigger() continue_3c2b1a\n\n        instance(x: 350, y: 50) zip_1b2c3d root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 500, y: 50) map_2c3d4e root.Std_k98ojb.Iteration.Map {}\n        instance(x: 850, y: 50) modulo_3d4e5f root.Std_k98ojb.Math.Modulo {}\n\n        list1_9f1c0d -> zip_1b2c3d.left\n        list2_5a8f4b -> zip_1b2c3d.right\n        zip_1b2c3d.zipped -> map_2c3d4e.items\n\n        func() {\n            in(x: -50, y: 50, name: \"pair\") property(Tuple<Number, Number>) pair_4e5f6g\n\n            out(x: 250, y: 50, name: \"mod_result\") property(Number) mod_result_5f6g7h\n\n            instance(x: 50, y: 50) get_first_6g7h8i root.Std_k98ojb.List.GetAt {}\n            instance(x: 50, y: 100) get_second_7h8i9j root.Std_k98ojb.List.GetAt {}\n\n            pair_4e5f6g -> get_first_6g7h8i.list\n            0 -> get_first_6g7h8i.index\n            pair_4e5f6g -> get_second_7h8i9j.list\n            1 -> get_second_7h8i9j.index\n\n            get_first_6g7h8i.item -> modulo_3d4e5f.value\n            get_second_7h8i9j.item -> modulo_3d4e5f.divisor\n            modulo_3d4e5f.result -> mod_result_5f6g7h\n        } -> map_2c3d4e.handler\n\n        map_2c3d4e.output_list -> result_2b4d1a\n        execute_1a3f4b -> zip_1b2c3d.trigger\n        zip_1b2c3d.done -> continue_3c2b1a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element-wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 100, y: 50, name: \"list1\") property(List<Number>) list1\n        in(x: 100, y: 100, name: \"list2\") property(List<Number>) list2\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"result\") property(List<Number>) result\n        out(x: 400, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 100) zip_1 root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 300, y: 100) modulo_1 root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_1.left\n        list2 -> zip_1.right\n\n        func() {\n            in(x: -100, y: 50, name: \"a\") property(Number) a\n            in(x: -100, y: 100, name: \"b\") property(Number) b\n\n            out(x: 100, y: 75, name: \"out\") property(Number) out\n\n            a -> modulo_1.value\n            b -> modulo_1.divisor\n            modulo_1.result -> out\n        } -> zip_1.handler\n\n        zip_1.zipped -> result\n        execute -> zip_1.trigger\n        zip_1.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 100, y: 100, name: \"list1\") property(List<Number>) list1_1a2b3c\n        in(x: 100, y: 200, name: \"list2\") property(List<Number>) list2_4d5e6f\n        in(x: 100, y: 300, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 500, y: 150, name: \"result\") property(List<Number>) result_0a1b2c\n        out(x: 500, y: 250, name: \"continue\") trigger() continue_3d4e5f\n\n        instance(x: 300, y: 150) zip_6j7k8l root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 700, y: 150) map_9m0n1o root.Std_k98ojb.Iteration.Map {}\n        instance(x: 900, y: 150) modulo_2p3q4r root.Std_k98ojb.Math.Modulo {}\n\n        list1_1a2b3c -> zip_6j7k8l.left\n        list2_4d5e6f -> zip_6j7k8l.right\n        zip_6j7k8l.zipped -> map_9m0n1o.items\n\n        func() {\n            in(x: -100, y: 100, name: \"pair\") property(Tuple<Number, Number>) pair_5s6t7u\n\n            out(x: 200, y: 100, name: \"out\") property(Number) out_8v9w0x\n\n            instance(x: 0, y: 100) get_first_1y2z3a root.Std_k98ojb.List.GetAt {}\n            instance(x: 0, y: 200) get_second_4b5c6d root.Std_k98ojb.List.GetAt {}\n\n            pair_5s6t7u -> get_first_1y2z3a.list\n            0 -> get_first_1y2z3a.index\n            pair_5s6t7u -> get_second_4b5c6d.list\n            1 -> get_second_4b5c6d.index\n\n            get_first_1y2z3a.item -> modulo_2p3q4r.value\n            get_second_4b5c6d.item -> modulo_2p3q4r.divisor\n\n            modulo_2p3q4r.result -> out_8v9w0x\n        } -> map_9m0n1o.handler\n\n        map_9m0n1o.output_list -> result_0a1b2c\n        execute_7g8h9i -> zip_6j7k8l.handler\n        map_9m0n1o.output_list -> continue_3d4e5f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"performs element-wise modulo on two lists of the same length\") element_wise_modulo {\n        in(x: 50, y: -50, name: \"list1\") property(List<Number>) list1\n        in(x: 50, y: 0, name: \"list2\") property(List<Number>) list2\n        in(x: 50, y: 50, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 0, name: \"result\") property(List<Number>) result\n        out(x: 300, y: 50, name: \"continue\") trigger() continue\n\n        instance(x: 150, y: 0) zip_6e8a5b root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 450, y: 0) map_4f9c6e root.Std_k98ojb.Iteration.Map {}\n        instance(x: 600, y: 0) modulo_3d8a7f root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_6e8a5b.left\n        list2 -> zip_6e8a5b.right\n        zip_6e8a5b.zipped -> map_4f9c6e.items\n\n        func() {\n            in(x: -50, y: 0, name: \"pair\") property(Tuple<Number, Number>) pair\n\n            out(x: 200, y: 0, name: \"out\") property(Number) out\n\n            instance(x: 100, y: 0) get_at_left root.Std_k98ojb.List.GetAt {\n                index: 0\n            }\n            instance(x: 100, y: 50) get_at_right root.Std_k98ojb.List.GetAt {\n                index: 1\n            }\n\n            pair -> get_at_left.list\n            pair -> get_at_right.list\n\n            get_at_left.item -> modulo_3d8a7f.value\n            get_at_right.item -> modulo_3d8a7f.divisor\n\n            modulo_3d8a7f.result -> out\n        } -> map_4f9c6e.handler\n\n        map_4f9c6e.output_list -> result\n        execute -> zip_6e8a5b.trigger\n        zip_6e8a5b.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 100, y: 100, name: \"list1\") property(List<Number>) list1\n        in(x: 100, y: 200, name: \"list2\") property(List<Number>) list2\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"result\") property(List<Number>) result\n        out(x: 400, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 100) zip_handler root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 300, y: 100) modulo root.Std_k98ojb.Math.Modulo {}\n\n        list1 -> zip_handler.left\n        list2 -> zip_handler.right\n\n        func() {\n            in(x: -100, y: 100, name: \"left\") property(Number) left\n            in(x: -100, y: 200, name: \"right\") property(Number) right\n\n            out(x: 100, y: 100, name: \"out\") property(Number) out\n\n            left -> modulo.value\n            right -> modulo.divisor\n            modulo.result -> out\n        } -> zip_handler.handler\n\n        zip_handler.zipped -> result\n        execute -> zip_handler.execute\n        zip_handler.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 162, y: -59, name: \"list1\") property(List) list1_1d9c8f\n        in(x: 162, y: 23, name: \"list2\") property(List) list2_7a1c4b\n        in(x: 164, y: 111, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 672, y: 30, name: \"result\") property(List) result_3b1a4e\n        out(x: 820, y: 111, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 413, y: 22) zip_8b1c2f root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 592, y: 20) map_6c7b3d root.Std_k98ojb.Iteration.Map {}\n\n        list1_1d9c8f -> zip_8b1c2f.left\n        list2_7a1c4b -> zip_8b1c2f.right\n        zip_8b1c2f.zipped -> map_6c7b3d.items\n\n        func() {\n            in(x: -48, y: 46, name: \"pair\") property(Tuple) pair_5f51f7\n\n            out(x: 392, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 146, y: 17) getat_2f9d09 root.Std_k98ojb.List.GetAt {}\n            instance(x: 296, y: 17) getat_4f9d09 root.Std_k98ojb.List.GetAt {}\n            instance(x: 546, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n\n            pair_5f51f7 -> getat_2f9d09.list\n            0 -> getat_2f9d09.index\n            pair_5f51f7 -> getat_4f9d09.list\n            1 -> getat_4f9d09.index\n\n            getat_2f9d09.item -> modulo_2f9d09.value\n            getat_4f9d09.item -> modulo_2f9d09.divisor\n\n            modulo_2f9d09.result -> out_d0fd24\n        } -> map_6c7b3d.handler\n\n        map_6c7b3d.output_list -> result_3b1a4e\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Performs element-wise modulo on two lists of the same length.\") element_wise_modulo {\n        in(x: 180, y: -20, name: \"list1\") property(List) list1_8a7b6c\n        in(x: 180, y: 40, name: \"list2\") property(List) list2_9b8c7d\n        in(x: 180, y: 100, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 520, y: 40, name: \"result\") property(List) result_3c9d8e\n        out(x: 520, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 360, y: 40) zip_7c8d9e root.Std_k98ojb.Iteration.Zip {}\n        instance(x: 720, y: 40) modulo_4d9e7f root.Std_k98ojb.Math.Modulo {}\n\n        list1_8a7b6c -> zip_7c8d9e.left\n        list2_9b8c7d -> zip_7c8d9e.right\n\n        func() {\n            in(x: -80, y: 40, name: \"left\") property(Number) left_5f6a7b\n            in(x: -80, y: 100, name: \"right\") property(Number) right_6g7b8c\n\n            out(x: 200, y: 70, name: \"result\") property(Number) result_7d8e9f\n\n            left_5f6a7b -> modulo_4d9e7f.value\n            right_6g7b8c -> modulo_4d9e7f.divisor\n            modulo_4d9e7f.result -> result_7d8e9f\n        } -> zip_7c8d9e.handler\n\n        zip_7c8d9e.zipped -> result_3c9d8e\n        execute_27b8c3 -> zip_7c8d9e.execute\n        zip_7c8d9e.done -> continue_8ba06b\n    }\n}"
            ],
            "26": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 50, y: 50, name: \"input\") property(String) input_string\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 250, y: 50, name: \"output\") property(String) output_string\n        out(x: 250, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 50) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> to_upper_instance.execute\n        to_upper_instance.continue -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n        execute_trigger -> to_uppercase_instance.trigger\n        to_uppercase_instance.trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n        execute_trigger -> to_uppercase_instance.execute\n        to_uppercase_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n\n        execute_trigger -> to_uppercase_instance.execute\n        to_uppercase_instance.continue -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 200, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 200) to_upper_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_string -> to_upper_instance.input\n        to_upper_instance.output -> output_string\n\n        execute_trigger -> to_upper_instance.execute\n        to_upper_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_str\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_str\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 150) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        input_str -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_str\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 150) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n\n        execute_trigger -> to_uppercase_instance.execute\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n        to_uppercase_instance.continue -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"converts a given string to uppercase.\") to_uppercase {\n        in(x: 150, y: 100, name: \"input\") property(String) input_string\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_string\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 125) to_uppercase_instance root.Std_k98ojb.Strings.ToUpper {}\n        input_string -> to_uppercase_instance.input\n        to_uppercase_instance.output -> output_string\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "30": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_up_to_position {\n        in(x: 30, y: 30, name: \"array\") property(List<Any>) array_0a5b6d\n        in(x: 30, y: 90, name: \"position\") property(Number) position_1c3d7e\n        in(x: 30, y: 150, name: \"execute\") trigger() execute_2b4f8c\n\n        out(x: 350, y: 30, name: \"reversed_array\") property(List<Any>) reversed_array_3d6e7f\n        out(x: 350, y: 90, name: \"continue\") trigger() continue_4e7f8a\n\n        instance(x: 150, y: 30) slice_5f6g7h root.Std_k98ojb.List.Slice {}\n        instance(x: 150, y: 90) reversed_6g7h8i root.Std_k98ojb.List.Reversed {}\n        instance(x: 250, y: 60) concat_7h8i9j root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_5f6g7h.start\n        position_1c3d7e -> slice_5f6g7h.end\n        array_0a5b6d -> slice_5f6g7h.list\n        slice_5f6g7h.slice -> reversed_6g7h8i.list\n        reversed_6g7h8i.reversed -> concat_7h8i9j.left\n        array_0a5b6d -> concat_7h8i9j.right\n        position_1c3d7e -> concat_7h8i9j.rightStart\n        concat_7h8i9j.concatenated -> reversed_array_3d6e7f\n\n        execute_2b4f8c -> slice_5f6g7h.reset\n        slice_5f6g7h.done -> continue_4e7f8a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_upto_position {\n        in(x: 50, y: 50, name: \"array\") property(List) array_input\n        in(x: 50, y: 100, name: \"position\") property(Number) position_input\n        in(x: 50, y: 150, name: \"execute\") trigger() execute_input\n\n        out(x: 450, y: 100, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 450, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 200, y: 50) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 200, y: 150) reversed_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 350, y: 100) concat_instance root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.slice -> reversed_instance.list\n\n        reversed_instance.reversed -> concat_instance.left\n        array_input -> concat_instance.right\n        position_input -> concat_instance.start\n\n        concat_instance.concatenated -> reversed_array_output\n\n        execute_input -> slice_instance.execute\n        slice_instance.done -> reversed_instance.execute\n        reversed_instance.done -> concat_instance.execute\n        concat_instance.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverse an array up to a given position.\") reverse_up_to_position {\n        in(x: 100, y: 50, name: \"array\") property(List) array_input\n        in(x: 100, y: 100, name: \"position\") property(Number) position_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_input\n\n        out(x: 400, y: 100, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 200, y: 50) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 200, y: 150) slice_rest_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 50) reverse_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 300, y: 150) concat_instance root.Std_k98ojb.List.Concat {}\n\n        array_input -> slice_instance.list\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n\n        slice_instance.slice -> reverse_instance.list\n\n        array_input -> slice_rest_instance.list\n        position_input -> slice_rest_instance.start\n        -1 -> slice_rest_instance.end\n\n        reverse_instance.reversed -> concat_instance.left\n        slice_rest_instance.slice -> concat_instance.right\n\n        concat_instance.list -> reversed_array_output\n        execute_input -> slice_instance.execute\n        slice_instance.done -> reverse_instance.execute\n        reverse_instance.done -> slice_rest_instance.execute\n        slice_rest_instance.done -> concat_instance.execute\n        concat_instance.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_upto_position {\n        in(x: 50, y: 0, name: \"array\") property(List) array_input\n        in(x: 50, y: 50, name: \"position\") property(Number) position_input\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 0, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 300, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 0) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 150, y: 100) reversed_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 150, y: 200) concat_instance root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.slice -> reversed_instance.list\n        reversed_instance.reversed -> concat_instance.left\n\n        array_input -> concat_instance.right\n        position_input -> concat_instance.rightStart\n\n        concat_instance.list -> reversed_array_output\n        execute_trigger -> slice_instance.trigger\n        concat_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 100, y: 50, name: \"array\") property(List<Any>) array_input\n        in(x: 100, y: 100, name: \"position\") property(Number) position_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"reversed_array\") property(List<Any>) reversed_array_output\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 50) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 50) reverse_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 500, y: 50) concat_instance root.Std_k98ojb.List.Concat {}\n\n        array_input -> slice_instance.list\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n\n        slice_instance.slice -> reverse_instance.list\n        reverse_instance.reversed -> concat_instance.left\n\n        array_input -> concat_instance.right\n        position_input -> concat_instance.start\n\n        concat_instance.concatenated -> reversed_array_output\n        execute_trigger -> slice_instance.trigger\n        concat_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 50, y: 50, name: \"array\") property(List<Any>) array_input\n        in(x: 50, y: 100, name: \"position\") property(Number) position_input\n        in(x: 50, y: 150, name: \"execute\") trigger() execute_input\n\n        out(x: 300, y: 100, name: \"reversed_array\") property(List<Any>) reversed_array_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 150, y: 50) slice_1 root.Std_k98ojb.List.Slice {}\n        instance(x: 150, y: 100) slice_2 root.Std_k98ojb.List.Slice {}\n        instance(x: 150, y: 150) reversed root.Std_k98ojb.List.Reversed {}\n        instance(x: 250, y: 100) concat root.Std_k98ojb.List.Concat {}\n\n        array_input -> slice_1.list\n        0 -> slice_1.start\n        position_input -> slice_1.end\n\n        array_input -> slice_2.list\n        position_input -> slice_2.start\n        -1 -> slice_2.end\n\n        slice_1.slice -> reversed.list\n        reversed.reversed -> concat.left\n        slice_2.slice -> concat.right\n\n        concat.concat -> reversed_array_output\n        execute_input -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_upto_position {\n        in(x: 150, y: -50, name: \"array\") property(List<Any>) array_input\n        in(x: 150, y: 0, name: \"position\") property(Number) position_input\n        in(x: 150, y: 50, name: \"execute\") trigger() execute_input\n\n        out(x: 500, y: 0, name: \"reversed_array\") property(List<Any>) reversed_array_output\n        out(x: 500, y: 50, name: \"continue\") trigger() continue_output\n\n        instance(x: 300, y: -50) slice_1 root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 0) slice_2 root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: -50) reverse root.Std_k98ojb.List.Reversed {}\n        instance(x: 400, y: 0) concat root.Std_k98ojb.List.Concat {}\n\n        array_input -> slice_1.list\n        0 -> slice_1.start\n        position_input -> slice_1.end\n\n        array_input -> slice_2.list\n        position_input -> slice_2.start\n        -1 -> slice_2.end\n\n        slice_1.slice -> reverse.list\n        reverse.reversed -> concat.left\n        slice_2.slice -> concat.right\n\n        concat.list -> reversed_array_output\n        execute_input -> concat.trigger\n        concat.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 76, y: -46, name: \"array\") property(List<Any>) array_input\n        in(x: 76, y: 46, name: \"position\") property(Number) position_input\n        in(x: 76, y: 138, name: \"execute\") trigger() execute_input\n\n        out(x: 472, y: 46, name: \"reversed_array\") property(List<Any>) reversed_array_output\n        out(x: 472, y: 138, name: \"continue\") trigger() continue_output\n\n        instance(x: 282, y: -45) slice_start root.Std_k98ojb.List.Slice {}\n        instance(x: 282, y: 67) slice_end root.Std_k98ojb.List.Slice {}\n        instance(x: 602, y: -45) reverse_slice root.Std_k98ojb.List.Reversed {}\n        instance(x: 912, y: 46) concat_slices root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_start.start\n        position_input -> slice_start.end\n        array_input -> slice_start.list\n\n        position_input -> slice_end.start\n        -1 -> slice_end.end\n        array_input -> slice_end.list\n\n        slice_start.slice -> reverse_slice.list\n        reverse_slice.reversed -> concat_slices.left\n        slice_end.slice -> concat_slices.right\n\n        concat_slices.concat -> reversed_array_output\n        execute_input -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 100, y: 100, name: \"array\") property(List) array_input\n        in(x: 100, y: 150, name: \"position\") property(Number) position_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 100) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 200) reverse_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 450, y: 150) concat_instance root.Std_k98ojb.List.Concat {}\n\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n        array_input -> slice_instance.list\n\n        slice_instance.list -> reverse_instance.list\n\n        reverse_instance.list -> concat_instance.left\n        array_input -> concat_instance.right\n        position_input -> concat_instance.right_start\n\n        concat_instance.list -> reversed_array_output\n        execute_trigger -> concat_instance.right_trigger\n        concat_instance.right_done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Reverses an array up to a given position.\") reverse_up_to_position {\n        in(x: 100, y: 50, name: \"array\") property(List) array_input\n        in(x: 100, y: 100, name: \"position\") property(Number) position_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 50, name: \"reversed_array\") property(List) reversed_array_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) slice_instance root.Std_k98ojb.List.Slice {}\n        instance(x: 200, y: 150) reversed_instance root.Std_k98ojb.List.Reversed {}\n        instance(x: 300, y: 100) concat_instance root.Std_k98ojb.List.Concat {}\n\n        execute_trigger -> slice_instance.trigger\n        array_input -> slice_instance.list\n        0 -> slice_instance.start\n        position_input -> slice_instance.end\n\n        slice_instance.slice -> reversed_instance.list\n        reversed_instance.reversed -> concat_instance.left\n        array_input -> concat_instance.right\n        position_input -> concat_instance.rightStart\n\n        concat_instance.list -> reversed_array_output\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "32": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 354, y: -53, name: \"array\") property(List<Number>) array_5f8c1d\n        in(x: 161, y: -211, name: \"number\") property(Number) number_3a7b4c\n        in(x: 161, y: -311, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"index\") property(Number) index_4a9f2e\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) equal_5b8c3d root.Std_k98ojb.Logic.Equal {}\n\n        array_5f8c1d -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_5b8c3d.left\n        number_3a7b4c -> equal_5b8c3d.right\n        equal_5b8c3d.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        for_8cb3f6.index -> index_4a9f2e\n        if_07b8c7.then -> for_8cb3f6.reset\n        execute_27b8c3 -> for_8cb3f6.reset\n        for_8cb3f6.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) find_first_occurrence_f0be66 root.main.find_first_occurrence {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_1a2b3c\n        in(x: 100, y: 150, name: \"number\") property(Number) number_4d5e6f\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 300, y: 150, name: \"index\") property(Number) index_0j1k2l\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_3m4n5o\n\n        instance(x: 150, y: 300) for_6p7q8r root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 150) if_9s0t1u root.Std_k98ojb.Std.If {}\n        instance(x: 550, y: 150) equal_2v3w4x root.Std_k98ojb.Logic.Equal {}\n\n        array_1a2b3c -> for_6p7q8r.items\n        for_6p7q8r.item -> equal_2v3w4x.left\n        number_4d5e6f -> equal_2v3w4x.right\n        equal_2v3w4x.result -> if_9s0t1u.predicate\n        for_6p7q8r.onItem -> if_9s0t1u.execute\n        if_9s0t1u.then -> continue_3m4n5o\n        for_6p7q8r.index -> index_0j1k2l\n        if_9s0t1u.else -> for_6p7q8r.next\n        for_6p7q8r.done -> continue_3m4n5o\n        execute_7g8h9i -> for_6p7q8r.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 250, y: -100, name: \"array\") property(List<Number>) array_9f4d1c\n        in(x: 250, y: -50, name: \"target\") property(Number) target_1a2b3c\n        in(x: 250, y: 0, name: \"execute\") trigger() execute_2b3c4d\n\n        out(x: 550, y: 0, name: \"index\") property(Number) index_3c4d5e\n        out(x: 550, y: 50, name: \"continue\") trigger() continue_4d5e6f\n\n        instance(x: 350, y: 0) for_5e6f7g root.Std_k98ojb.Std.For {}\n        instance(x: 450, y: -50) equal_6f7g8h root.Std_k98ojb.Logic.Equal {}\n        instance(x: 450, y: 0) if_7g8h9i root.Std_k98ojb.Std.If {}\n\n        array_9f4d1c -> for_5e6f7g.items\n        for_5e6f7g.item -> equal_6f7g8h.left\n        target_1a2b3c -> equal_6f7g8h.right\n        equal_6f7g8h.result -> if_7g8h9i.predicate\n        for_5e6f7g.onItem -> if_7g8h9i.execute\n        if_7g8h9i.then -> continue_4d5e6f\n        for_5e6f7g.index -> index_3c4d5e\n        if_7g8h9i.then -> for_5e6f7g.reset\n        if_7g8h9i.else -> for_5e6f7g.next\n        execute_2b3c4d -> for_5e6f7g.reset\n        for_5e6f7g.done -> continue_4d5e6f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 150, name: \"number\") property(Number) number_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"index\") property(Number) index_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 100) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 350, y: 100) if_node root.Std_k98ojb.Std.If {}\n\n        array_input -> for_loop.items\n        for_loop.item -> equal_check.left\n        number_input -> equal_check.right\n        equal_check.result -> if_node.predicate\n\n        execute_trigger -> for_loop.reset\n        for_loop.onItem -> if_node.execute\n        if_node.then -> continue_trigger\n        for_loop.index -> index_output\n        if_node.else -> for_loop.next\n        for_loop.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 154, y: -54, name: \"array\") property(List<Number>) array_input\n        in(x: 154, y: -104, name: \"number\") property(Number) number_input\n        in(x: 154, y: -154, name: \"execute\") trigger() execute_trigger\n\n        out(x: 154, y: 54, name: \"index\") property(Number) index_output\n        out(x: 154, y: 104, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 350, y: -50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 550, y: -50) if_condition root.Std_k98ojb.Std.If {}\n        instance(x: 750, y: -50) equal_condition root.Std_k98ojb.Logic.Equal {}\n\n        array_input -> for_loop.items\n        for_loop.index -> index_output\n        for_loop.item -> equal_condition.left\n        number_input -> equal_condition.right\n        equal_condition.result -> if_condition.predicate\n        for_loop.onItem -> if_condition.execute\n        if_condition.then -> continue_trigger\n        if_condition.then -> for_loop.reset\n        execute_trigger -> for_loop.reset\n        if_condition.else -> for_loop.next\n        for_loop.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 30, y: 0, name: \"array\") property(List) array_123abc\n        in(x: 30, y: 60, name: \"number\") property(Number) number_456def\n        in(x: 30, y: 120, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 300, y: 60, name: \"index\") property(Number) index_abc123\n        out(x: 300, y: 120, name: \"continue\") trigger() continue_def456\n\n        instance(x: 100, y: 200) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 200, y: 200) if_equal root.Std_k98ojb.Logic.Equal {}\n\n        execute_789ghi -> for_loop.trigger\n        array_123abc -> for_loop.items\n\n        for_loop.item -> if_equal.left\n        number_456def -> if_equal.right\n\n        if_equal.result -> if_condition\n        if_condition -> for_loop.onItem\n\n        if_condition -> index_abc123\n        if_condition -> continue_def456\n\n        if_condition -> for_loop.done\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 154, y: -37, name: \"array\") property(List<Number>) array_3d6c8b\n        in(x: 154, y: 46, name: \"number\") property(Number) number_4e2f6d\n        in(x: 154, y: 129, name: \"execute\") trigger() execute_7f3d2c\n\n        out(x: 154, y: 270, name: \"index\") property(Number) index_9f3d7b\n        out(x: 154, y: 353, name: \"continue\") trigger() continue_8c2f1b\n\n        instance(x: 415, y: 58) for_2f6b9c root.Std_k98ojb.Std.For {}\n        instance(x: 704, y: 46) equal_3f9c8b root.Std_k98ojb.Logic.Equal {}\n        instance(x: 978, y: 36) if_8f3b2d root.Std_k98ojb.Std.If {}\n\n        array_3d6c8b -> for_2f6b9c.items\n        for_2f6b9c.item -> equal_3f9c8b.left\n        number_4e2f6d -> equal_3f9c8b.right\n        equal_3f9c8b.result -> if_8f3b2d.predicate\n        for_2f6b9c.onItem -> if_8f3b2d.execute\n        if_8f3b2d.then -> continue_8c2f1b\n        for_2f6b9c.index -> index_9f3d7b\n        if_8f3b2d.else -> for_2f6b9c.next\n        for_2f6b9c.done -> continue_8c2f1b\n        execute_7f3d2c -> for_2f6b9c.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 132, y: -58, name: \"array\") property(List<Number>) array_9c1a2b\n        in(x: 132, y: 58, name: \"number\") property(Number) number_3f7d2e\n        in(x: 132, y: 174, name: \"execute\") trigger() execute_7b8c3f\n\n        out(x: 652, y: 58, name: \"index\") property(Number) index_1d4f5e\n        out(x: 652, y: 174, name: \"continue\") trigger() continue_4a7d9e\n\n        instance(x: 322, y: -10) for_1b7c8d root.Std_k98ojb.Std.For {}\n        instance(x: 492, y: 58) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 572, y: 120) if_8c3f7b root.Std_k98ojb.Std.If {}\n\n        execute_7b8c3f -> for_1b7c8d.trigger\n        array_9c1a2b -> for_1b7c8d.items\n        for_1b7c8d.item -> equal_2f9d09.left\n        number_3f7d2e -> equal_2f9d09.right\n        equal_2f9d09.result -> if_8c3f7b.predicate\n        for_1b7c8d.onItem -> if_8c3f7b.execute\n        if_8c3f7b.then -> continue_4a7d9e\n        for_1b7c8d.index -> index_1d4f5e\n        if_8c3f7b.then -> for_1b7c8d.reset\n        if_8c3f7b.else -> for_1b7c8d.next\n        for_1b7c8d.done -> continue_4a7d9e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 200, y: 50, name: \"array\") property(List<Number>) array_input\n        in(x: 200, y: 100, name: \"number\") property(Number) number_input\n        in(x: 200, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"index\") property(Number) index_output\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 400, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 150) if_condition root.Std_k98ojb.Std.If {}\n        instance(x: 400, y: 250) equal_check root.Std_k98ojb.Logic.Equal {}\n\n        array_input -> for_loop.items\n        for_loop.index -> index_output\n        for_loop.item -> equal_check.left\n        number_input -> equal_check.right\n        equal_check.result -> if_condition.predicate\n        execute_trigger -> for_loop.reset\n        for_loop.onItem -> if_condition.execute\n        if_condition.then -> continue_trigger\n        if_condition.else -> for_loop.next\n        for_loop.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n        in(x: 100, y: 50, name: \"array\") property(List<Number>) array_123456\n        in(x: 100, y: 100, name: \"target\") property(Number) target_654321\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 400, y: 100, name: \"index\") property(Number) index_789012\n        out(x: 400, y: 150, name: \"done\") trigger() done_345678\n\n        instance(x: 200, y: 50) for_loop_987654 root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 50) equal_check_abcdef root.Std_k98ojb.Logic.Equal {}\n        instance(x: 300, y: 100) if_condition_123abc root.Std_k98ojb.Std.If {}\n\n        array_123456 -> for_loop_987654.items\n        for_loop_987654.item -> equal_check_abcdef.left\n        target_654321 -> equal_check_abcdef.right\n        equal_check_abcdef.result -> if_condition_123abc.predicate\n        for_loop_987654.onItem -> if_condition_123abc.execute\n        if_condition_123abc.then -> done_345678\n        for_loop_987654.index -> index_789012\n        if_condition_123abc.else -> for_loop_987654.next\n        execute_abcdef -> for_loop_987654.reset\n    }\n}"
            ],
            "39": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 0, y: 0, name: \"input_list\") property(List) input_list\n\n        out(x: 300, y: 0, name: \"result\") property(Bool) result\n\n        instance(x: 100, y: 0) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 200, y: 0) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"(index % 2 != 0) && (item % 2 == 0)\"\n        }\n        instance(x: 400, y: 0) logic_not root.Std_k98ojb.Logic.Not {}\n\n        input_list -> for_loop.items\n        for_loop.index -> if_expression.index\n        for_loop.item -> if_expression.item\n        if_expression.value -> logic_not.input\n        logic_not.result -> result\n        for_loop.done -> result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 134, y: -58, name: \"input_list\") property(List) input_list_1f9d2a\n        in(x: 130, y: -211, name: \"execute\") trigger() execute_0a4b9d\n\n        out(x: 1400, y: -10, name: \"out\") property(Bool) out_4f2c1d\n        out(x: 1536, y: 120, name: \"continue\") trigger() continue_9ba07b\n\n        instance(x: 316, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 555, y: 74) filter_7b8fce root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 877, y: 25) modulo_8f1fda root.Std_k98ojb.Math.Modulo {}\n        instance(x: 658, y: -155) if_7cb3f6 root.Std_k98ojb.Std.If {}\n        instance(x: 1762, y: -319) not_equal_90a119 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1061, y: -54) equal_07b8c7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1444, y: -400) if_720d7 root.Std_k98ojb.Std.If {}\n        instance(x: 1436, y: -187) if_9fba8c root.Std_k98ojb.Std.If {}\n        instance(x: 2076, y: -356) not_19a62 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1028, y: -256) add_34554f root.Std_k98ojb.Math.Add {}\n        1 -> modulo_8f1fda.divisor\n        input_list_1f9d2a -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n            in(x: -76, y: 86, name: \"index\") property(Number) index_6f61f8\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n            instance(x: 206, y: 17) modulo_3f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 306, y: 17) equal_4f9d09 root.Std_k98ojb.Logic.Equal {}\n            index_6f61f8 -> modulo_3f9d09.value\n            2 -> modulo_3f9d09.divisor\n            modulo_3f9d09.result -> equal_2f9d09.left\n            1 -> equal_2f9d09.right\n            element_5f51f7 -> modulo_3f9d09.value\n            2 -> modulo_3f9d09.divisor\n            modulo_3f9d09.result -> equal_4f9d09.left\n            1 -> equal_4f9d09.right\n            equal_2f9d09.result -> if_7cb3f6.predicate\n            if_7cb3f6.then -> equal_4f9d09.result\n            if_7cb3f6.else -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> filter_7b8fce.items\n        filter_7b8fce.output_list -> if_720d7.predicate\n        if_720d7.then -> out_4f2c1d\n        if_720d7.else -> not_19a62.input\n        not_19a62.result -> out_4f2c1d\n        execute_0a4b9d -> map_6030c9.handler\n        execute_0a4b9d -> filter_7b8fce.handler\n        if_720d7.then -> continue_9ba07b\n        if_720d7.else -> continue_9ba07b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in the given list.\") check_odd_indices {\n        in(x: 158, y: -71, name: \"input\") property(List) input_8d1a2f\n        in(x: 158, y: 19, name: \"execute\") trigger() execute_1b4a5f\n\n        out(x: 1406, y: 15, name: \"out\") property(Bool) out_3c6d7e\n        out(x: 1542, y: 135, name: \"continue\") trigger() continue_7d5f2c\n\n        instance(x: 349, y: -56) for_9c8f3d root.Std_k98ojb.Std.For {}\n        instance(x: 646, y: 30) modulo_4d5f2b root.Std_k98ojb.Math.Modulo {}\n        instance(x: 888, y: -56) equal_6a7d8c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1150, y: -56) modulo_8b7f4c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1380, y: -56) equal_2c9d3e root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1134, y: 120) if_3d7a5e root.Std_k98ojb.Std.If {}\n\n        input_8d1a2f -> for_9c8f3d.items\n        for_9c8f3d.index -> modulo_4d5f2b.value\n        2 -> modulo_4d5f2b.divisor\n        1 -> equal_6a7d8c.right\n        modulo_4d5f2b.result -> equal_6a7d8c.left\n        equal_6a7d8c.result -> if_3d7a5e.predicate\n        for_9c8f3d.onItem -> if_3d7a5e.execute\n        for_9c8f3d.item -> modulo_8b7f4c.value\n        2 -> modulo_8b7f4c.divisor\n        1 -> equal_2c9d3e.right\n        modulo_8b7f4c.result -> equal_2c9d3e.left\n        equal_2c9d3e.result -> out_3c6d7e\n        if_3d7a5e.then -> continue_7d5f2c\n        if_3d7a5e.else -> for_9c8f3d.next\n        for_9c8f3d.done -> continue_7d5f2c\n        execute_1b4a5f -> for_9c8f3d.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) result\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue\n\n        instance(x: 352, y: -493) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 714, y: -155) if_odd_index root.Std_k98ojb.Std.IfExpression {\n            expression: \"index % 2 != 0\"\n        }\n        instance(x: 933, y: 25) if_odd_number root.Std_k98ojb.Std.IfExpression {\n            expression: \"item % 2 != 0\"\n        }\n        instance(x: 1121, y: -54) and_check root.Std_k98ojb.Logic.And {}\n        instance(x: 1504, y: -400) not_odd_number root.Std_k98ojb.Logic.Not {}\n        instance(x: 1812, y: -319) if_final_check root.Std_k98ojb.Std.If {}\n\n        input_list -> for_loop.items\n        for_loop.index -> if_odd_index.index\n        if_odd_index.value -> and_check.left\n        for_loop.item -> if_odd_number.item\n        if_odd_number.value -> and_check.right\n        and_check.result -> not_odd_number.input\n        not_odd_number.output -> if_final_check.predicate\n        if_final_check.then -> continue\n        if_final_check.else -> for_loop.next\n        for_loop.done -> result\n        execute -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 180, y: 40, name: \"input_list\") property(List) input_list_1a2b3c\n        in(x: 180, y: 80, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 600, y: 60, name: \"result\") property(Bool) result_7g8h9i\n        out(x: 600, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 400, y: 40) for_loop_3m4n5o root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 140) if_expression_6p7q8r root.Std_k98ojb.Std.IfExpression {\n            expression: \"(index % 2 != 0) && (item % 2 != 0)\"\n        }\n        instance(x: 800, y: 40) not_9s0t1u root.Std_k98ojb.Logic.Not {}\n\n        input_list_1a2b3c -> for_loop_3m4n5o.items\n        execute_4d5e6f -> for_loop_3m4n5o.reset\n        for_loop_3m4n5o.onItem -> if_expression_6p7q8r.execute\n        for_loop_3m4n5o.index -> if_expression_6p7q8r.index\n        for_loop_3m4n5o.item -> if_expression_6p7q8r.item\n        if_expression_6p7q8r.value -> not_9s0t1u.input\n        not_9s0t1u.output -> result_7g8h9i\n        for_loop_3m4n5o.done -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") odd_index_odd_numbers {\n        in(x: 60, y: 20, name: \"input_list\") property(List) input_list_2f1c3a\n        in(x: 60, y: 60, name: \"execute\") trigger() execute_4b8f7c\n\n        out(x: 400, y: 40, name: \"result\") property(Bool) result_9c3f5d\n        out(x: 400, y: 80, name: \"continue\") trigger() continue_5a8b6e\n\n        instance(x: 200, y: 20) for_1a2b3c root.Std_k98ojb.Std.For {}\n        instance(x: 260, y: 60) if_3d4e5f root.Std_k98ojb.Std.If {}\n        instance(x: 320, y: 100) modulo_6a7b8c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 380, y: 140) equal_9d0e1f root.Std_k98ojb.Logic.Equal {}\n        instance(x: 440, y: 180) not_equal_2b3c4d root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 500, y: 220) if_expression_5e6f7g root.Std_k98ojb.Std.IfExpression {\n            expression: \"index % 2 != 0 ? (item % 2 != 0) : true\"\n        }\n\n        input_list_2f1c3a -> for_1a2b3c.items\n        execute_4b8f7c -> for_1a2b3c.reset\n        for_1a2b3c.onItem -> if_expression_5e6f7g.execute\n        for_1a2b3c.index -> if_expression_5e6f7g.index\n        for_1a2b3c.item -> if_expression_5e6f7g.item\n        if_expression_5e6f7g.value -> if_3d4e5f.predicate\n        if_3d4e5f.then -> for_1a2b3c.next\n        if_3d4e5f.else -> result_9c3f5d\n        if_3d4e5f.else -> continue_5a8b6e\n        for_1a2b3c.done -> result_9c3f5d\n        for_1a2b3c.done -> continue_5a8b6e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers in a given list.\") check_odd_indices {\n        in(x: 100, y: 50, name: \"input_list\") property(List) input_list\n\n        out(x: 400, y: 50, name: \"result\") property(Bool) result\n\n        instance(x: 200, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 50) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"index % 2 != 0 ? value % 2 != 0 : true\"\n        }\n        instance(x: 500, y: 50) reduce_and root.Std_k98ojb.Iteration.Reduce {\n            handler: func() {\n                in(x: 50, y: 50, name: \"acc\") property(Bool) acc\n                in(x: 50, y: 100, name: \"current\") property(Bool) current\n\n                out(x: 200, y: 75, name: \"result\") property(Bool) result\n\n                instance(x: 100, y: 75) logic_and root.Std_k98ojb.Logic.And {}\n                acc -> logic_and.left\n                current -> logic_and.right\n                logic_and.result -> result\n            }\n        }\n\n        input_list -> for_loop.items\n        for_loop.item -> if_expression.value\n        for_loop.index -> if_expression.index\n        if_expression.value -> reduce_and.items\n        reduce_and.result -> result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 354, y: -53, name: \"input\") property(List) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) filter_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) notempty_038fce root.Std_k98ojb.List.NotEmpty {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1504, y: -400) modulo_b720d7 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1496, y: -187) equal_9fba8c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n\n        input_f5c03d -> for_8cb3f6.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n            in(x: -76, y: 96, name: \"index\") property(Number) index_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n            instance(x: 106, y: 67) modulo_3f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 67) equal_3f9d09 root.Std_k98ojb.Logic.Equal {}\n            instance(x: 350, y: 42) and_4f9d09 root.Std_k98ojb.Logic.And {}\n\n            index_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_2f9d09.left\n            1 -> equal_2f9d09.right\n\n            item_5f51f7 -> modulo_3f9d09.value\n            2 -> modulo_3f9d09.divisor\n            modulo_3f9d09.result -> equal_3f9d09.left\n            1 -> equal_3f9d09.right\n\n            equal_2f9d09.result -> and_4f9d09.left\n            equal_3f9d09.result -> and_4f9d09.right\n\n            and_4f9d09.result -> out_d0fd24\n        } -> filter_6030c9.handler\n\n        for_8cb3f6.index -> filter_6030c9.index\n        for_8cb3f6.item -> filter_6030c9.item\n        filter_6030c9.output_list -> notempty_038fce.list\n        notempty_038fce.isEmpty -> if_07b8c7.predicate\n        if_07b8c7.value -> out_f3db9f\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 150, y: -50, name: \"input_list\") property(List) input_list_123456\n        in(x: 150, y: -150, name: \"execute\") trigger() execute_654321\n\n        out(x: 850, y: -50, name: \"result\") property(Bool) result_abcdef\n        out(x: 850, y: 50, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 400, y: -50) for_loop_789012 root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: -150) modulo_345678 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 600, y: -50) is_odd_987654 root.Std_k98ojb.Std.IfExpression {\n            expression: \"index % 2 != 0\"\n        }\n        instance(x: 600, y: 50) is_odd_number_456789 root.Std_k98ojb.Std.IfExpression {\n            expression: \"item % 2 != 0\"\n        }\n        instance(x: 800, y: -50) logic_and_123789 root.Std_k98ojb.Logic.And {}\n        instance(x: 1000, y: -50) if_statement_654987 root.Std_k98ojb.Std.If {}\n\n        input_list_123456 -> for_loop_789012.items\n        for_loop_789012.index -> is_odd_987654.index\n        for_loop_789012.item -> is_odd_number_456789.item\n        is_odd_987654.value -> logic_and_123789.left\n        is_odd_number_456789.value -> logic_and_123789.right\n        logic_and_123789.result -> if_statement_654987.predicate\n        for_loop_789012.onItem -> if_statement_654987.execute\n        if_statement_654987.then -> for_loop_789012.next\n        if_statement_654987.else -> result_abcdef\n        if_statement_654987.else -> continue_fedcba\n        for_loop_789012.done -> result_abcdef\n        for_loop_789012.done -> continue_fedcba\n        execute_654321 -> for_loop_789012.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether every odd index contains odd numbers of a given list.\") check_odd_indices {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) filter_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) notempty_f11fda root.Std_k98ojb.List.NotEmpty {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) modulo_b720d7 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1496, y: -187) equal_9fba8c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        1 -> generaterange_038fce.from\n        input_f5c03d -> List.Length.list\n        List.Length.length -> generaterange_038fce.to\n        generaterange_038fce.list -> filter_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"index\") property(Number) index_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            index_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_9fba8c.left\n            1 -> equal_9fba8c.right\n            equal_9fba8c.result -> out_d0fd24\n        } -> filter_6030c9.handler\n        filter_6030c9.output_list -> for_8cb3f6.items\n        for_8cb3f6.index -> List.GetAt.index\n        input_f5c03d -> List.GetAt.list\n        List.GetAt.item -> modulo_b720d7.value\n        2 -> modulo_b720d7.divisor\n        modulo_b720d7.result -> equal_9fba8c.left\n        1 -> equal_9fba8c.right\n        equal_9fba8c.result -> if_e19a62.predicate\n        for_8cb3f6.onItem -> if_e19a62.execute\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> if_07b8c7.execute\n        for_8cb3f6.done -> if_07b8c7.execute\n        notempty_f11fda.isEmpty -> if_07b8c7.predicate\n        if_07b8c7.value -> out_f3db9f\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -189, y: 222) check_odd_indices_f0be66 root.main.check_odd_indices {}\n}"
            ],
            "43": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 100, y: 100, name: \"numbers\") property(List) numbers\n\n        out(x: 400, y: 100, name: \"first_odd\") property(Number) first_odd\n\n        instance(x: 200, y: 100) find_odd root.Std_k98ojb.Iteration.Find {\n            handler: func() {\n                in(x: -100, y: 0, name: \"number\") property(Number) number\n\n                out(x: 100, y: 0, name: \"is_odd\") property(Bool) is_odd\n\n                instance(x: 0, y: 0) modulo root.Std_k98ojb.Math.Modulo {}\n                instance(x: 50, y: 0) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n                number -> modulo.value\n                2 -> modulo.divisor\n                modulo.result -> not_equal.left\n                0 -> not_equal.right\n                not_equal.result -> is_odd\n            }\n        }\n\n        numbers -> find_odd.items\n        find_odd.item -> first_odd\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 174, y: -53, name: \"numbers\") property(List<Number>) numbers_9c3a7d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 374, y: -10, name: \"oddNumber\") property(Number) oddNumber_f3db9f\n        out(x: 494, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 512, y: -75) find_9a8b1f root.Std_k98ojb.Iteration.Find {}\n        instance(x: 718, y: -143) modulo_38d1f4 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 944, y: -115) notEqual_1c8f7a root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_9c3a7d -> find_9a8b1f.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"isOdd\") property(Bool) isOdd_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 206, y: 67) notEqual_3f9d09 root.Std_k98ojb.Logic.NotEqual {}\n\n            element_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> notEqual_3f9d09.left\n            0 -> notEqual_3f9d09.right\n            notEqual_3f9d09.result -> isOdd_d0fd24\n        } -> find_9a8b1f.predicate\n\n        find_9a8b1f.item -> oddNumber_f3db9f\n        execute_27b8c3 -> find_9a8b1f.execute\n        find_9a8b1f.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 112, y: -31, name: \"numbers\") property(List<Number>) numbers_3c3a5f\n        in(x: 97, y: -197, name: \"execute\") trigger() execute_3f2c5d\n\n        out(x: 734, y: 15, name: \"first_odd\") property(Number) first_odd_9d4b6a\n        out(x: 893, y: 95, name: \"continue\") trigger() continue_5f7c8e\n\n        instance(x: 359, y: -126) find_6a9f2b root.Std_k98ojb.Iteration.Find {}\n        instance(x: 565, y: -96) modulo_1f7b8c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 675, y: -84) not_equal_3f9d6e root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_3c3a5f -> find_6a9f2b.items\n        find_6a9f2b.item -> first_odd_9d4b6a\n        find_6a9f2b.found -> continue_5f7c8e\n        find_6a9f2b.notFound -> continue_5f7c8e\n        func() {\n            in(x: -38, y: 22, name: \"item\") property(Number) item_1a2b3c\n\n            out(x: 236, y: 25, name: \"is_odd\") property(Bool) is_odd_4d5e6f\n\n            item_1a2b3c -> modulo_1f7b8c.value\n            2 -> modulo_1f7b8c.divisor\n            modulo_1f7b8c.result -> not_equal_3f9d6e.left\n            0 -> not_equal_3f9d6e.right\n            not_equal_3f9d6e.result -> is_odd_4d5e6f\n        } -> find_6a9f2b.predicate\n\n        execute_3f2c5d -> find_6a9f2b.trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 120, y: -80, name: \"numbers\") property(List<Number>) numbers_9f8b7a\n        in(x: 120, y: -40, name: \"execute\") trigger() execute_4f2c3d\n\n        out(x: 400, y: -80, name: \"oddNumber\") property(Number) oddNumber_3d9b7f\n        out(x: 400, y: -40, name: \"continue\") trigger() continue_7b3a6f\n\n        instance(x: 240, y: -160) find_9a3b5c root.Std_k98ojb.Iteration.Find {}\n        instance(x: 600, y: -160) modulo_5b8c3e root.Std_k98ojb.Math.Modulo {}\n        instance(x: 800, y: -160) notEqual_2a4d7f root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_9f8b7a -> find_9a3b5c.items\n        find_9a3b5c.item -> oddNumber_3d9b7f\n        find_9a3b5c.found -> continue_7b3a6f\n        find_9a3b5c.notFound -> continue_7b3a6f\n\n        func() {\n            in(x: -40, y: 0, name: \"number\") property(Number) number_2c8d3f\n\n            out(x: 320, y: 0, name: \"isOdd\") property(Bool) isOdd_4d9f7e\n\n            number_2c8d3f -> modulo_5b8c3e.value\n            2 -> modulo_5b8c3e.divisor\n            modulo_5b8c3e.result -> notEqual_2a4d7f.left\n            0 -> notEqual_2a4d7f.right\n            notEqual_2a4d7f.result -> isOdd_4d9f7e\n        } -> find_9a3b5c.predicate\n\n        execute_4f2c3d -> find_9a3b5c.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 100, y: 100, name: \"numbers\") property(List) numbers_abc123\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_abc123\n\n        out(x: 500, y: 100, name: \"first_odd\") property(Number) first_odd_abc123\n        out(x: 500, y: 200, name: \"continue\") trigger() continue_abc123\n\n        instance(x: 300, y: 100) find_abc123 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 300, y: 200) modulo_abc123 root.Std_k98ojb.Math.Modulo {}\n\n        numbers_abc123 -> find_abc123.items\n        find_abc123.item -> first_odd_abc123\n        find_abc123.found -> continue_abc123\n\n        func() {\n            in(x: -100, y: 100, name: \"item\") property(Number) item_abc123\n\n            out(x: 100, y: 100, name: \"is_odd\") property(Bool) is_odd_abc123\n\n            2 -> modulo_abc123.divisor\n            item_abc123 -> modulo_abc123.value\n            modulo_abc123.result -> is_odd_abc123\n        } -> find_abc123.predicate\n\n        execute_abc123 -> find_abc123.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 134, y: -53, name: \"numbers\") property(List<Number>) numbers_123abc\n        in(x: 134, y: -211, name: \"execute\") trigger() execute_456def\n\n        out(x: 674, y: -10, name: \"oddNumber\") property(Number) oddNumber_789ghi\n        out(x: 834, y: 120, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 312, y: -150) find_789mno root.Std_k98ojb.Iteration.Find {}\n        instance(x: 512, y: -250) modulo_345pqr root.Std_k98ojb.Math.Modulo {}\n        instance(x: 712, y: -350) notEqual_678stu root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_123abc -> find_789mno.items\n        func() {\n            in(x: -76, y: 46, name: \"number\") property(Number) number_abc123\n\n            out(x: 382, y: 19, name: \"isOdd\") property(Bool) isOdd_def456\n\n            instance(x: 106, y: 17) equal_ghi789 root.Std_k98ojb.Logic.Equal {}\n            number_abc123 -> modulo_345pqr.value\n            2 -> modulo_345pqr.divisor\n            modulo_345pqr.result -> equal_ghi789.left\n            0 -> equal_ghi789.right\n            equal_ghi789.result -> notEqual_678stu.left\n            false -> notEqual_678stu.right\n            notEqual_678stu.result -> isOdd_def456\n        } -> find_789mno.predicate\n\n        find_789mno.item -> oddNumber_789ghi\n        execute_456def -> find_789mno.execute\n        find_789mno.item -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 100, y: 50, name: \"numbers\") property(List<Number>) numbers_input\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 50, name: \"first_odd\") property(Number) first_odd_output\n        out(x: 500, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 50) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 200, y: 50) modulo_check root.Std_k98ojb.Math.Modulo {}\n\n        numbers_input -> find_odd.items\n        func() {\n            in(x: 50, y: 50, name: \"number\") property(Number) number_input\n\n            out(x: 150, y: 50, name: \"is_odd\") property(Bool) is_odd_output\n\n            number_input -> modulo_check.value\n            2 -> modulo_check.divisor\n            modulo_check.result -> is_odd_output\n        } -> find_odd.predicate\n\n        find_odd.item -> first_odd_output\n        execute_trigger -> find_odd.execute\n        find_odd.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 200, y: 0, name: \"numbers\") property(List) numbers_1a2b3c\n        in(x: 200, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 800, y: 0, name: \"first_odd\") property(Number) first_odd_7g8h9i\n        out(x: 800, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 400, y: 0) find_3m4n5o root.Std_k98ojb.Iteration.Find {}\n        instance(x: 600, y: 0) modulo_6p7q8r root.Std_k98ojb.Math.Modulo {}\n\n        numbers_1a2b3c -> find_3m4n5o.items\n        find_3m4n5o.item -> first_odd_7g8h9i\n        find_3m4n5o.found -> continue_0j1k2l\n\n        func() {\n            in(x: 0, y: 0, name: \"number\") property(Number) number_9s0t1u\n\n            out(x: 200, y: 0, name: \"is_odd\") property(Bool) is_odd_2v3w4x\n\n            instance(x: 100, y: 0) equal_5y6z7a root.Std_k98ojb.Logic.Equal {}\n\n            number_9s0t1u -> modulo_6p7q8r.value\n            2 -> modulo_6p7q8r.divisor\n            modulo_6p7q8r.result -> equal_5y6z7a.left\n            1 -> equal_5y6z7a.right\n            equal_5y6z7a.result -> is_odd_2v3w4x\n        } -> find_3m4n5o.predicate\n\n        execute_4d5e6f -> find_3m4n5o.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 270, y: -220, name: \"numbers\") property(List<Number>) numbers_7a2b3c\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"first_odd\") property(Number) first_odd_4f3d9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) find_6030c9 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 714, y: -155) modulo_8cb3f6 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 933, y: 25) not_equal_f11fda root.Std_k98ojb.Logic.NotEqual {}\n\n        numbers_7a2b3c -> find_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"number\") property(Number) number_5f51f7\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 382, y: 17) not_equal_2f9d09 root.Std_k98ojb.Logic.NotEqual {}\n\n            number_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> not_equal_2f9d09.left\n            0 -> not_equal_2f9d09.right\n            not_equal_2f9d09.result -> is_odd_d0fd24\n        } -> find_6030c9.predicate\n\n        find_6030c9.item -> first_odd_4f3d9f\n        execute_27b8c3 -> find_6030c9.execute\n        find_6030c9.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first odd number in a given list of numbers.\") find_first_odd {\n        in(x: 240, y: 90, name: \"numbers\") property(List<Number>) numbers_123abc\n        in(x: 240, y: 140, name: \"execute\") trigger() execute_456def\n\n        out(x: 620, y: 110, name: \"oddNumber\") property(Number) oddNumber_789ghi\n        out(x: 620, y: 160, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 400, y: 120) find_odd_345mno root.Std_k98ojb.Iteration.Find {\n            handler: func() {\n                in(x: 20, y: 20, name: \"number\") property(Number) number_pqr\n\n                out(x: 200, y: 20, name: \"isOdd\") property(Bool) isOdd_stu\n\n                instance(x: 100, y: 20) modulo_567vwx root.Std_k98ojb.Math.Modulo {}\n                instance(x: 150, y: 20) notEqual_890yz root.Std_k98ojb.Logic.NotEqual {}\n\n                number_pqr -> modulo_567vwx.value\n                2 -> modulo_567vwx.divisor\n                modulo_567vwx.result -> notEqual_890yz.left\n                0 -> notEqual_890yz.right\n                notEqual_890yz.result -> isOdd_stu\n            }\n        }\n\n        numbers_123abc -> find_odd_345mno.items\n        execute_456def -> find_odd_345mno.execute\n        find_odd_345mno.item -> oddNumber_789ghi\n        find_odd_345mno.done -> continue_012jkl\n    }\n}"
            ],
            "44": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 150, y: -30, name: \"n\") property(Number) n_input\n\n        out(x: 550, y: -30, name: \"sum\") property(Number) sum_output\n\n        instance(x: 250, y: -100) generaterange_odd_numbers root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 450, y: -100) filter_odd_numbers root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 650, y: -100) map_square_numbers root.Std_k98ojb.Iteration.Map {}\n        instance(x: 850, y: -100) reduce_sum_squares root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd_numbers.from\n        n_input -> generaterange_odd_numbers.to\n        generaterange_odd_numbers.list -> filter_odd_numbers.items\n\n        func() {\n            in(x: -50, y: 50, name: \"number\") property(Number) number_input\n\n            out(x: 150, y: 50, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 50, y: 50) modulo_check root.Std_k98ojb.Math.Modulo {}\n\n            number_input -> modulo_check.value\n            2 -> modulo_check.divisor\n            modulo_check.result -> is_odd_output\n        } -> filter_odd_numbers.handler\n\n        filter_odd_numbers.output_list -> map_square_numbers.items\n\n        func() {\n            in(x: -50, y: 50, name: \"number\") property(Number) number_input\n\n            out(x: 150, y: 50, name: \"square\") property(Number) square_output\n\n            instance(x: 50, y: 50) square_calc root.Std_k98ojb.Math.Mul {}\n\n            number_input -> square_calc.first\n            number_input -> square_calc.second\n            square_calc.result -> square_output\n        } -> map_square_numbers.handler\n\n        map_square_numbers.output_list -> reduce_sum_squares.items\n\n        func() {\n            in(x: -50, y: 50, name: \"acc\") property(Number) acc_input\n            in(x: -50, y: 100, name: \"number\") property(Number) number_input\n\n            out(x: 150, y: 75, name: \"sum\") property(Number) sum_output\n\n            instance(x: 50, y: 75) add_numbers root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_numbers.first\n            number_input -> add_numbers.second\n            add_numbers.result -> sum_output\n        } -> reduce_sum_squares.reducer\n\n        0 -> reduce_sum_squares.initial_value\n        reduce_sum_squares.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 254, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) reduce_f11fda root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 714, y: -155) mul_8cb3f6 root.Std_k98ojb.Math.Mul {}\n        instance(x: 1121, y: -54) add_07b8c7 root.Std_k98ojb.Math.Add {}\n        \n        1 -> generaterange_038fce.from\n        input_f5c03d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1)\"\n            }\n            element_5f51f7 -> expression_2f9d09.gen_0\n            expression_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> reduce_f11fda.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 146, name: \"current\") property(Number) current_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            current_5f51f7 -> mul_8cb3f6.first\n            current_5f51f7 -> mul_8cb3f6.second\n            mul_8cb3f6.result -> add_07b8c7.first\n            accumulated_5f51f7 -> add_07b8c7.second\n            add_07b8c7.result -> out_d0fd24\n        } -> reduce_f11fda.handler\n        0 -> reduce_f11fda.initial\n        reduce_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> reduce_f11fda.reset\n        reduce_f11fda.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) sum_of_squares_of_odds_f0be66 root.main.sum_of_squares_of_odds {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 714, y: -155) reduce_8cb3f6 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1121, y: -54) mul_07b8c7 root.Std_k98ojb.Math.Mul {}\n\n        1 -> generaterange_038fce.from\n        input_f5c03d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * n - 1)\"\n            }\n            element_5f51f7 -> expression_2f9d09.n\n            expression_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_8cb3f6.items\n\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 146, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            value_5f51f7 -> mul_07b8c7.first\n            value_5f51f7 -> mul_07b8c7.second\n            mul_07b8c7.result -> add_b4554f.second\n            accumulated_5f51f7 -> add_b4554f.first\n            add_b4554f.result -> out_d0fd24\n        } -> reduce_8cb3f6.reducer\n\n        0 -> reduce_8cb3f6.initial\n        reduce_8cb3f6.result -> out_f3db9f\n        execute_27b8c3 -> reduce_8cb3f6.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Calculates the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 250, y: -150, name: \"n\") property(Number) n_1a2b3c\n        in(x: 250, y: -100, name: \"execute\") trigger() execute_2b3c4d\n\n        out(x: 800, y: -150, name: \"sum\") property(Number) sum_3c4d5e\n        out(x: 800, y: -100, name: \"continue\") trigger() continue_4d5e6f\n\n        instance(x: 400, y: -200) generaterange_5e6f7g root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: -200) filter_odds_6f7g8h root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: -50) map_squares_7g8h9i root.Std_k98ojb.Iteration.Map {}\n        instance(x: 700, y: -150) reduce_sum_8h9i0j root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_5e6f7g.from\n        n_1a2b3c -> generaterange_5e6f7g.to\n        generaterange_5e6f7g.list -> filter_odds_6f7g8h.items\n\n        func() {\n            in(x: -50, y: 50, name: \"number\") property(Number) number_9i0j1k\n\n            out(x: 200, y: 50, name: \"is_odd\") property(Bool) is_odd_0j1k2l\n\n            instance(x: 100, y: 50) modulo_1k2l3m root.Std_k98ojb.Math.Modulo {}\n            instance(x: 150, y: 50) equal_zero_2l3m4n root.Std_k98ojb.Logic.Equal {}\n\n            number_9i0j1k -> modulo_1k2l3m.value\n            2 -> modulo_1k2l3m.divisor\n            modulo_1k2l3m.result -> equal_zero_2l3m4n.left\n            1 -> equal_zero_2l3m4n.right\n            equal_zero_2l3m4n.result -> is_odd_0j1k2l\n        } -> filter_odds_6f7g8h.handler\n\n        filter_odds_6f7g8h.output_list -> map_squares_7g8h9i.items\n\n        func() {\n            in(x: -50, y: 50, name: \"number\") property(Number) number_3m4n5o\n\n            out(x: 200, y: 50, name: \"square\") property(Number) square_4n5o6p\n\n            instance(x: 100, y: 50) mul_5o6p7q root.Std_k98ojb.Math.Mul {}\n\n            number_3m4n5o -> mul_5o6p7q.first\n            number_3m4n5o -> mul_5o6p7q.second\n            mul_5o6p7q.result -> square_4n5o6p\n        } -> map_squares_7g8h9i.handler\n\n        map_squares_7g8h9i.output_list -> reduce_sum_8h9i0j.items\n\n        func() {\n            in(x: -50, y: 50, name: \"acc\") property(Number) acc_6p7q8r\n            in(x: -50, y: 100, name: \"value\") property(Number) value_7q8r9s\n\n            out(x: 200, y: 75, name: \"new_acc\") property(Number) new_acc_8r9s0t\n\n            instance(x: 100, y: 75) add_9s0t1u root.Std_k98ojb.Math.Add {}\n\n            acc_6p7q8r -> add_9s0t1u.first\n            value_7q8r9s -> add_9s0t1u.second\n            add_9s0t1u.result -> new_acc_8r9s0t\n        } -> reduce_sum_8h9i0j.reducer\n\n        0 -> reduce_sum_8h9i0j.initial\n        reduce_sum_8h9i0j.result -> sum_3c4d5e\n        execute_2b3c4d -> reduce_sum_8h9i0j.execute\n        reduce_sum_8h9i0j.done -> continue_4d5e6f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 174, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 548, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 694, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n        instance(x: 714, y: -155) reduce_8cb3f6 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1121, y: -54) add_07b8c7 root.Std_k98ojb.Math.Add {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(2 * i - 1)\"\n        }\n        instance(x: 1496, y: -187) add_9fba8c root.Std_k98ojb.Math.Add {}\n        \n        1 -> generaterange_038fce.from\n        input_f5c03d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * it - 1)\"\n            }\n            element_5f51f7 -> expression_2f9d09.it\n            expression_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> reduce_8cb3f6.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 46, name: \"current\") property(Number) current_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n            current_5f51f7 -> mul_2f9d09.first\n            current_5f51f7 -> mul_2f9d09.second\n            mul_2f9d09.result -> add_07b8c7.first\n            accumulated_5f51f7 -> add_07b8c7.second\n            add_07b8c7.result -> out_d0fd24\n        } -> reduce_8cb3f6.reducer\n        0 -> reduce_8cb3f6.initial\n        reduce_8cb3f6.result -> out_f3db9f\n        execute_27b8c3 -> reduce_8cb3f6.reset\n        reduce_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 100, y: 50, name: \"n\") property(Number) n_input\n\n        out(x: 600, y: 50, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 50) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 50) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 800, y: 50) map_square root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1000, y: 50) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        generaterange_odd.list -> filter_odd.items\n\n        func() {\n            in(x: -50, y: 0, name: \"number\") property(Number) number_input\n            out(x: 200, y: 0, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 50, y: 0) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 100, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            number_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> equal_zero.left\n            1 -> equal_zero.right\n            equal_zero.result -> is_odd_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_square.items\n\n        func() {\n            in(x: -50, y: 0, name: \"number\") property(Number) number_input\n            out(x: 200, y: 0, name: \"square\") property(Number) square_output\n\n            instance(x: 50, y: 0) square root.Std_k98ojb.Math.Mul {}\n\n            number_input -> square.first\n            number_input -> square.second\n            square.result -> square_output\n        } -> map_square.handler\n\n        map_square.output_list -> reduce_sum.items\n\n        func() {\n            in(x: -50, y: 0, name: \"acc\") property(Number) acc_input\n            in(x: -50, y: 50, name: \"value\") property(Number) value_input\n            out(x: 200, y: 25, name: \"sum\") property(Number) sum_output\n\n            instance(x: 50, y: 25) add root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add.first\n            value_input -> add.second\n            add.result -> sum_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 50, y: 0, name: \"n\") property(Number) n_123abc\n        in(x: 50, y: 50, name: \"execute\") trigger() execute_456def\n\n        out(x: 500, y: 0, name: \"sum\") property(Number) sum_789ghi\n        out(x: 500, y: 50, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 150, y: 0) generaterange_345mno root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 0) map_678pqr root.Std_k98ojb.Iteration.Map {}\n        instance(x: 450, y: 0) reduce_901stu root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_345mno.from\n        n_123abc -> generaterange_345mno.to\n        generaterange_345mno.list -> map_678pqr.items\n\n        func() {\n            in(x: -50, y: 0, name: \"i\") property(Number) i_234vwx\n\n            out(x: 200, y: 0, name: \"square\") property(Number) square_567yz\n\n            instance(x: 100, y: 0) expression_890abc root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * i - 1) * (2 * i - 1)\"\n            }\n            i_234vwx -> expression_890abc.gen_0\n            expression_890abc.result -> square_567yz\n        } -> map_678pqr.handler\n\n        map_678pqr.output_list -> reduce_901stu.items\n\n        func() {\n            in(x: -50, y: 0, name: \"acc\") property(Number) acc_345def\n            in(x: -50, y: 50, name: \"value\") property(Number) value_678ghi\n\n            out(x: 200, y: 0, name: \"sum\") property(Number) sum_901jkl\n\n            instance(x: 100, y: 0) add_234mno root.Std_k98ojb.Math.Add {}\n            acc_345def -> add_234mno.first\n            value_678ghi -> add_234mno.second\n            add_234mno.result -> sum_901jkl\n        } -> reduce_901stu.reducer\n\n        0 -> reduce_901stu.initial\n        reduce_901stu.result -> sum_789ghi\n        execute_456def -> generaterange_345mno.reset\n        reduce_901stu.done -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 126, y: -45, name: \"input\") property(Number) input_123456\n        in(x: 126, y: -80, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 126, y: 100, name: \"sum\") property(Number) sum_789012\n        out(x: 126, y: 135, name: \"continue\") trigger() continue_345678\n\n        instance(x: 350, y: -60) generaterange_9abcd1 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 550, y: -60) map_efghij root.Std_k98ojb.Iteration.Map {}\n        instance(x: 750, y: -60) reduce_klmnop root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 950, y: -60) add_qrstuv root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_9abcd1.from\n        input_123456 -> generaterange_9abcd1.to\n        generaterange_9abcd1.list -> map_efghij.items\n\n        func() {\n            in(x: -50, y: 0, name: \"element\") property(Number) element_246810\n            out(x: 150, y: 0, name: \"out\") property(Number) out_135791\n\n            instance(x: 50, y: 0) mul_wxyzab root.Std_k98ojb.Math.Mul {}\n            element_246810 -> mul_wxyzab.first\n            element_246810 -> mul_wxyzab.second\n            mul_wxyzab.result -> out_135791\n        } -> map_efghij.handler\n\n        map_efghij.output_list -> reduce_klmnop.items\n\n        func() {\n            in(x: -50, y: 0, name: \"acc\") property(Number) acc_314159\n            in(x: -50, y: 50, name: \"val\") property(Number) val_271828\n            out(x: 150, y: 25, name: \"out\") property(Number) out_161803\n\n            acc_314159 -> add_qrstuv.first\n            val_271828 -> add_qrstuv.second\n            add_qrstuv.result -> out_161803\n        } -> reduce_klmnop.reducer\n\n        0 -> reduce_klmnop.initial\n        reduce_klmnop.result -> sum_789012\n        execute_abcdef -> reduce_klmnop.execute\n        reduce_klmnop.done -> continue_345678\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odds {\n        in(x: 354, y: -53, name: \"n\") property(Number) n_354\n\n        out(x: 1748, y: -10, name: \"sum\") property(Number) sum_1748\n\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) filter_8cb3f6 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1121, y: -54) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1504, y: -400) reduce_b720d7 root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_038fce.from\n        n_354 -> generaterange_038fce.to\n        generaterange_038fce.list -> filter_8cb3f6.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 306, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n\n            element_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_2f9d09.left\n            1 -> equal_2f9d09.right\n            equal_2f9d09.result -> out_d0fd24\n        } -> filter_8cb3f6.handler\n\n        filter_8cb3f6.output_list -> map_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n            element_5f51f7 -> mul_2f9d09.first\n            element_5f51f7 -> mul_2f9d09.second\n            mul_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_b720d7.items\n\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 96, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            accumulated_5f51f7 -> add_2f9d09.first\n            value_5f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> out_d0fd24\n        } -> reduce_b720d7.handler\n\n        0 -> reduce_b720d7.initial\n        reduce_b720d7.result -> sum_1748\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Returns the sum of the squares of the first n odd natural numbers.\") sum_of_squares_of_odd_numbers {\n        in(x: 90, y: 0, name: \"n\") property(Number) n_5c1b6f\n        in(x: 90, y: 30, name: \"execute\") trigger() execute_1f7a8b\n\n        out(x: 320, y: 0, name: \"sum\") property(Number) sum_6f3a2b\n        out(x: 320, y: 30, name: \"continue\") trigger() continue_4d9c8e\n\n        instance(x: 180, y: 0) generaterange_6f4b2c root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 180, y: 90) map_8d2f3e root.Std_k98ojb.Iteration.Map {}\n        instance(x: 500, y: 0) reduce_2b4f1a root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 320, y: 90) add_3e2c1d root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_6f4b2c.from\n        n_5c1b6f -> generaterange_6f4b2c.to\n        generaterange_6f4b2c.list -> map_8d2f3e.items\n\n        func() {\n            in(x: -90, y: 0, name: \"item\") property(Number) item_2d1b5f\n\n            out(x: 90, y: 0, name: \"square\") property(Number) square_7f1c3e\n\n            instance(x: 0, y: 0) expression_9d3f2a root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * item - 1) * (2 * item - 1)\"\n            }\n\n            item_2d1b5f -> expression_9d3f2a.gen_0\n            expression_9d3f2a.result -> square_7f1c3e\n        } -> map_8d2f3e.handler\n\n        map_8d2f3e.output_list -> reduce_2b4f1a.items\n\n        func() {\n            in(x: -90, y: 0, name: \"acc\") property(Number) acc_3d1f5e\n            in(x: -90, y: 30, name: \"value\") property(Number) value_5f3c2b\n\n            out(x: 90, y: 0, name: \"result\") property(Number) result_6e2d3f\n\n            acc_3d1f5e -> add_3e2c1d.first\n            value_5f3c2b -> add_3e2c1d.second\n            add_3e2c1d.result -> result_6e2d3f\n        } -> reduce_2b4f1a.reducer\n\n        0 -> reduce_2b4f1a.initial\n        reduce_2b4f1a.result -> sum_6f3a2b\n        execute_1f7a8b -> reduce_2b4f1a.execute\n        reduce_2b4f1a.done -> continue_4d9c8e\n    }\n}"
            ],
            "47": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list\") find_cubes {\n        in(x: 30, y: 30, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 400, y: 30, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 200, y: 30) map_0f3b9c root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_0f3b9c.items\n\n        func() {\n            in(x: -100, y: 30, name: \"element\") property(Number) element\n\n            out(x: 200, y: 30, name: \"cube\") property(Number) cube\n\n            instance(x: 50, y: 30) mul_1 root.Std_k98ojb.Math.Mul {}\n            instance(x: 100, y: 30) mul_2 root.Std_k98ojb.Math.Mul {}\n\n            element -> mul_1.first\n            element -> mul_1.second\n\n            mul_1.result -> mul_2.first\n            element -> mul_2.second\n\n            mul_2.result -> cube\n        } -> map_0f3b9c.handler\n\n        map_0f3b9c.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 50, y: 0, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 300, y: 0, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 150, y: 0) map_Iteration_Map root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_Iteration_Map.items\n\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n\n            out(x: 200, y: 0, name: \"cube\") property(Number) cube\n\n            instance(x: 100, y: 0) math_expression root.Std_k98ojb.Math.Expression {\n                expression: \"item * item * item\"\n            }\n\n            item -> math_expression.item\n            math_expression.result -> cube\n        } -> map_Iteration_Map.handler\n\n        map_Iteration_Map.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list.\") find_cubes {\n        in(x: 100, y: 50, name: \"input_list\") property(List<Number>) input_list_123456\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 400, y: 50, name: \"output_list\") property(List<Number>) output_list_654321\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 200, y: 75) map_instance root.Std_k98ojb.Iteration.Map {}\n\n        input_list_123456 -> map_instance.items\n\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_987654\n\n            out(x: 150, y: 50, name: \"cube\") property(Number) cube_456789\n\n            instance(x: 50, y: 50) pow_instance root.Std_k98ojb.Math.Pow {\n                y: 3\n            }\n\n            element_987654 -> pow_instance.x\n            pow_instance.result -> cube_456789\n        } -> map_instance.handler\n\n        map_instance.output_list -> output_list_654321\n        execute_abcdef -> map_instance.execute\n        map_instance.done -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 80, y: 60, name: \"input_list\") property(List<Number>) input_list_123abc\n        in(x: 80, y: 120, name: \"execute\") trigger() execute_456def\n\n        out(x: 500, y: 60, name: \"output_list\") property(List<Number>) output_list_789ghi\n        out(x: 500, y: 120, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 240, y: 60) map_instance root.Std_k98ojb.Iteration.Map {}\n\n        input_list_123abc -> map_instance.items\n\n        func() {\n            in(x: -40, y: 40, name: \"element\") property(Number) element_abc123\n\n            out(x: 300, y: 40, name: \"out\") property(Number) out_def456\n\n            instance(x: 120, y: 40) pow_instance root.Std_k98ojb.Math.Pow {}\n\n            element_abc123 -> pow_instance.x\n            3 -> pow_instance.y\n\n            pow_instance.result -> out_def456\n        } -> map_instance.handler\n\n        map_instance.output_list -> output_list_789ghi\n        execute_456def -> map_instance.trigger\n        map_instance.done -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 20, y: 20, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 300, y: 20, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 150, y: 20) map_123456 root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_123456.items\n\n        func() {\n            in(x: -20, y: 20, name: \"element\") property(Number) element\n\n            out(x: 100, y: 20, name: \"cube\") property(Number) cube\n\n            instance(x: 40, y: 20) pow_654321 root.Std_k98ojb.Math.Pow {\n                y: 3\n            }\n\n            element -> pow_654321.x\n            pow_654321.result -> cube\n        } -> map_123456.handler\n\n        map_123456.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 154, y: -50, name: \"input_list\") property(List<Number>) input_list_2a3b7c\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_1b2c3d\n\n        out(x: 748, y: -10, name: \"output_list\") property(List<Number>) output_list_3d4e5f\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_6e7f8g\n\n        instance(x: 352, y: -93) map_4a5b6c root.Std_k98ojb.Iteration.Map {}\n        input_list_2a3b7c -> map_4a5b6c.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_7f8g9h\n\n            out(x: 382, y: 19, name: \"cube\") property(Number) cube_0a1b2c\n\n            instance(x: 106, y: 17) mul_3b4c5d root.Std_k98ojb.Math.Mul {}\n            instance(x: 306, y: 17) mul_6d7e8f root.Std_k98ojb.Math.Mul {}\n            element_7f8g9h -> mul_3b4c5d.first\n            element_7f8g9h -> mul_3b4c5d.second\n            mul_3b4c5d.result -> mul_6d7e8f.first\n            element_7f8g9h -> mul_6d7e8f.second\n            mul_6d7e8f.result -> cube_0a1b2c\n        } -> map_4a5b6c.handler\n        map_4a5b6c.output_list -> output_list_3d4e5f\n        execute_1b2c3d -> map_4a5b6c.execute\n        map_4a5b6c.done -> continue_6e7f8g\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list.\") find_cubes {\n        in(x: 100, y: 100, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 500, y: 100, name: \"output_list\") property(List<Number>) output_list\n\n        instance(x: 300, y: 100) map_instance root.Std_k98ojb.Iteration.Map {}\n\n        input_list -> map_instance.items\n\n        func() {\n            in(x: 0, y: 0, name: \"element\") property(Number) element\n\n            out(x: 200, y: 0, name: \"cube\") property(Number) cube\n\n            instance(x: 100, y: 0) expression_instance root.Std_k98ojb.Math.Expression {\n                expression: \"x * x * x\"\n            }\n\n            element -> expression_instance.x\n            expression_instance.result -> cube\n        } -> map_instance.handler\n\n        map_instance.output_list -> output_list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list.\") find_cubes {\n        in(x: 78, y: 43, name: \"input_list\") property(List<Number>) input_list_9b7f3d\n        in(x: 78, y: 93, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: 43, name: \"output_list\") property(List<Number>) output_list_f3db9f\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: 143) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n\n        input_list_9b7f3d -> map_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n            instance(x: 206, y: 117) mul_3f9d09 root.Std_k98ojb.Math.Mul {}\n\n            element_5f51f7 -> mul_2f9d09.first\n            element_5f51f7 -> mul_2f9d09.second\n            mul_2f9d09.result -> mul_3f9d09.first\n            element_5f51f7 -> mul_3f9d09.second\n            mul_3f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> output_list_f3db9f\n        execute_27b8c3 -> map_6030c9.trigger\n        map_6030c9.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find cubes of individual elements in a list.\") find_cubes {\n        in(x: 300, y: -50, name: \"input_list\") property(List<Number>) input_list_3f4d1a\n        in(x: 300, y: -150, name: \"execute\") trigger() execute_8f3b2a\n\n        out(x: 900, y: -50, name: \"output_list\") property(List<Number>) output_list_4b5c2b\n        out(x: 900, y: -150, name: \"continue\") trigger() continue_7e4a3c\n\n        instance(x: 600, y: -100) map_5d6e3f root.Std_k98ojb.Iteration.Map {}\n\n        input_list_3f4d1a -> map_5d6e3f.items\n\n        func() {\n            in(x: -50, y: 0, name: \"element\") property(Number) element_6f7g8h\n\n            out(x: 300, y: 0, name: \"cube\") property(Number) cube_7g8h9i\n\n            instance(x: 100, y: 0) mul_8h9i0j root.Std_k98ojb.Math.Mul {}\n            instance(x: 200, y: 0) mul_9i0j1k root.Std_k98ojb.Math.Mul {}\n\n            element_6f7g8h -> mul_8h9i0j.first\n            element_6f7g8h -> mul_8h9i0j.second\n            mul_8h9i0j.result -> mul_9i0j1k.first\n            element_6f7g8h -> mul_9i0j1k.second\n            mul_9i0j1k.result -> cube_7g8h9i\n        } -> map_5d6e3f.handler\n\n        map_5d6e3f.output_list -> output_list_4b5c2b\n        execute_8f3b2a -> map_5d6e3f.trigger\n        map_5d6e3f.done -> continue_7e4a3c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find cubes of individual elements in a list.\") find_cubes {\n        in(x: 354, y: -53, name: \"input_list\") property(List<Number>) input_list_9b8f3d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"output_list\") property(List<Number>) output_list_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        input_list_9b8f3d -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"cube\") property(Number) cube_d0fd24\n\n            instance(x: 106, y: 17) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n            instance(x: 106, y: 100) mul_3f9d09 root.Std_k98ojb.Math.Mul {}\n            element_5f51f7 -> mul_2f9d09.first\n            element_5f51f7 -> mul_2f9d09.second\n            mul_2f9d09.result -> mul_3f9d09.first\n            element_5f51f7 -> mul_3f9d09.second\n            mul_3f9d09.result -> cube_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> output_list_f3db9f\n        execute_27b8c3 -> map_6030c9.trigger\n        map_6030c9.done -> continue_8ba06b\n    }\n}"
            ],
            "40": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 156, y: -123, name: \"input_list\") property(List) input_list_123abc\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_456def\n\n        out(x: 1748, y: -10, name: \"product\") property(Number) product_789ghi\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: -50) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: -50) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 900, y: -50) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 1200, y: -50) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 1500, y: -50) multiply root.Std_k98ojb.Math.Mul {}\n\n        input_list_123abc -> filter_even.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_234mno\n\n            out(x: 382, y: 19, name: \"is_even\") property(Bool) is_even_567pqr\n\n            instance(x: 106, y: 17) modulo_even root.Std_k98ojb.Math.Modulo {}\n            instance(x: 300, y: 17) equal_even root.Std_k98ojb.Logic.Equal {}\n\n            element_234mno -> modulo_even.value\n            2 -> modulo_even.divisor\n            modulo_even.result -> equal_even.left\n            0 -> equal_even.right\n            equal_even.result -> is_even_567pqr\n        } -> filter_even.handler\n\n        filter_even.output_list -> first_even.list\n        first_even.item -> multiply.first\n\n        input_list_123abc -> filter_odd.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_345stu\n\n            out(x: 382, y: 19, name: \"is_odd\") property(Bool) is_odd_678vwx\n\n            instance(x: 106, y: 17) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 300, y: 17) not_equal_odd root.Std_k98ojb.Logic.NotEqual {}\n\n            element_345stu -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> not_equal_odd.left\n            0 -> not_equal_odd.right\n            not_equal_odd.result -> is_odd_678vwx\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> first_odd.list\n        first_odd.item -> multiply.second\n\n        multiply.result -> product_789ghi\n        execute_456def -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 100, y: 100, name: \"list\") property(List<Number>) list_input\n\n        out(x: 600, y: 100, name: \"product\") property(Number) product_output\n\n        instance(x: 200, y: 100) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 200, y: 200) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 400, y: 200) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 500, y: 150) multiply root.Std_k98ojb.Math.Mul {}\n\n        list_input -> filter_even.items\n        list_input -> filter_odd.items\n\n        func() {\n            in(x: -50, y: 0, name: \"item\") property(Number) item_input\n            out(x: 50, y: 0, name: \"output\") property(Bool) output\n\n            instance(x: 0, y: 0) is_even root.Std_k98ojb.Math.Modulo {}\n            instance(x: 0, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> is_even.value\n            2 -> is_even.divisor\n            is_even.result -> equal_zero.left\n            0 -> equal_zero.right\n            equal_zero.result -> output\n        } -> filter_even.handler\n\n        func() {\n            in(x: -50, y: 0, name: \"item\") property(Number) item_input\n            out(x: 50, y: 0, name: \"output\") property(Bool) output\n\n            instance(x: 0, y: 0) is_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 0, y: 50) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n\n            item_input -> is_odd.value\n            2 -> is_odd.divisor\n            is_odd.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> output\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> multiply.first\n        first_odd.item -> multiply.second\n\n        multiply.result -> product_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 50, y: 50, name: \"input\") property(List<Number>) input_list\n\n        out(x: 450, y: 50, name: \"out\") property(Number) output_product\n\n        instance(x: 200, y: 0) find_even root.Std_k98ojb.Iteration.Find {}\n        instance(x: 200, y: 100) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 350, y: 50) mul_even_odd root.Std_k98ojb.Math.Mul {}\n\n        input_list -> find_even.items\n        input_list -> find_odd.items\n\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n\n            out(x: 150, y: 0, name: \"out\") property(Bool) is_even\n\n            instance(x: 50, y: 0) mod_2 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 100, y: 0) equal_0 root.Std_k98ojb.Logic.Equal {}\n\n            item -> mod_2.value\n            2 -> mod_2.divisor\n            mod_2.result -> equal_0.left\n            0 -> equal_0.right\n            equal_0.result -> is_even\n        } -> find_even.predicate\n\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n\n            out(x: 150, y: 0, name: \"out\") property(Bool) is_odd\n\n            instance(x: 50, y: 0) mod_2 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 100, y: 0) not_equal_0 root.Std_k98ojb.Logic.NotEqual {}\n\n            item -> mod_2.value\n            2 -> mod_2.divisor\n            mod_2.result -> not_equal_0.left\n            0 -> not_equal_0.right\n            not_equal_0.result -> is_odd\n        } -> find_odd.predicate\n\n        find_even.item -> mul_even_odd.first\n        find_odd.item -> mul_even_odd.second\n        mul_even_odd.result -> output_product\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the product of first even and odd number of a given list.\") find_product {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"product\") property(Number) product_out\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 500, y: 0) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 500, y: 200) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 700, y: 0) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 700, y: 200) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 900, y: 100) mul_even_odd root.Std_k98ojb.Math.Mul {}\n\n        input_list -> filter_even.items\n        input_list -> filter_odd.items\n\n        func() {\n            in(x: -100, y: 50, name: \"item\") property(Number) item\n            out(x: 100, y: 50, name: \"out\") property(Bool) out\n\n            instance(x: 0, y: 0) mod_2 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 0) equal_0 root.Std_k98ojb.Logic.Equal {}\n\n            item -> mod_2.value\n            2 -> mod_2.divisor\n            mod_2.result -> equal_0.left\n            0 -> equal_0.right\n            equal_0.result -> out\n        } -> filter_even.handler\n\n        func() {\n            in(x: -100, y: 50, name: \"item\") property(Number) item\n            out(x: 100, y: 50, name: \"out\") property(Bool) out\n\n            instance(x: 0, y: 0) mod_2 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 0) not_equal_0 root.Std_k98ojb.Logic.NotEqual {}\n\n            item -> mod_2.value\n            2 -> mod_2.divisor\n            mod_2.result -> not_equal_0.left\n            0 -> not_equal_0.right\n            not_equal_0.result -> out\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> mul_even_odd.first\n        first_odd.item -> mul_even_odd.second\n\n        mul_even_odd.result -> product_out\n\n        execute_trigger -> filter_even.execute\n        filter_even.output_list -> filter_odd.execute\n        filter_odd.output_list -> first_even.list\n        first_even.item -> first_odd.list\n        first_odd.item -> mul_even_odd.first\n        mul_even_odd.result -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the product of the first even and odd number in a list.\") product_of_first_even_odd {\n        in(x: 150, y: -100, name: \"input\") property(List<Number>) input_list\n        in(x: 150, y: -50, name: \"execute\") trigger() execute_trigger\n\n        out(x: 150, y: 150, name: \"product\") property(Number) product_output\n        out(x: 150, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 400, y: -100) find_even root.Std_k98ojb.Iteration.Find {}\n        instance(x: 400, y: 0) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 700, y: -50) mul_even_odd root.Std_k98ojb.Math.Mul {}\n\n        input_list -> find_even.items\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item\n\n            out(x: 100, y: 0, name: \"result\") property(Bool) result\n\n            instance(x: 0, y: 0) mod_check root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            item -> mod_check.value\n            2 -> mod_check.divisor\n            mod_check.result -> equal_zero.left\n            0 -> equal_zero.right\n            equal_zero.result -> result\n        } -> find_even.predicate\n\n        input_list -> find_odd.items\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item\n\n            out(x: 100, y: 0, name: \"result\") property(Bool) result\n\n            instance(x: 0, y: 0) mod_check root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 0) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n\n            item -> mod_check.value\n            2 -> mod_check.divisor\n            mod_check.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> result\n        } -> find_odd.predicate\n\n        find_even.item -> mul_even_odd.first\n        find_odd.item -> mul_even_odd.second\n        mul_even_odd.result -> product_output\n\n        execute_trigger -> find_even.execute\n        find_even.done -> find_odd.execute\n        find_odd.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 106, y: -34, name: \"input_list\") property(List) input_list_6f4d3b\n        in(x: 123, y: -155, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1125, y: -34, name: \"product\") property(Number) product_1a2b3c\n        out(x: 1261, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 310, y: -125) filter_even_5a6b7c root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 310, y: 45) filter_odd_7d8e9f root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 540, y: -125) first_even_1b2c3d root.Std_k98ojb.List.FirstItem {}\n        instance(x: 540, y: 45) first_odd_4e5f6g root.Std_k98ojb.List.FirstItem {}\n        instance(x: 780, y: -40) mul_9h0i1j root.Std_k98ojb.Math.Mul {}\n\n        input_list_6f4d3b -> filter_even_5a6b7c.items\n        input_list_6f4d3b -> filter_odd_7d8e9f.items\n\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 256, y: 17) equal_3g4h5i root.Std_k98ojb.Logic.Equal {}\n\n            item_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> equal_3g4h5i.left\n            0 -> equal_3g4h5i.right\n            equal_3g4h5i.result -> out_d0fd24\n        } -> filter_even_5a6b7c.handler\n\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) modulo_2f9d09 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 256, y: 17) not_equal_6j7k8l root.Std_k98ojb.Logic.NotEqual {}\n\n            item_5f51f7 -> modulo_2f9d09.value\n            2 -> modulo_2f9d09.divisor\n            modulo_2f9d09.result -> not_equal_6j7k8l.left\n            0 -> not_equal_6j7k8l.right\n            not_equal_6j7k8l.result -> out_d0fd24\n        } -> filter_odd_7d8e9f.handler\n\n        filter_even_5a6b7c.output_list -> first_even_1b2c3d.list\n        filter_odd_7d8e9f.output_list -> first_odd_4e5f6g.list\n\n        first_even_1b2c3d.item -> mul_9h0i1j.first\n        first_odd_4e5f6g.item -> mul_9h0i1j.second\n\n        mul_9h0i1j.result -> product_1a2b3c\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 68, y: -51, name: \"input_list\") property(List) input_list_1a2b3c\n        in(x: 68, y: -151, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 280, y: -51, name: \"product\") property(Number) product_7g8h9i\n        out(x: 280, y: 49, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 238, y: -263) find_even root.Std_k98ojb.Iteration.Find {}\n        instance(x: 238, y: -163) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 470, y: -63) mul_3m4n5o root.Std_k98ojb.Math.Mul {}\n\n        input_list_1a2b3c -> find_even.items\n        input_list_1a2b3c -> find_odd.items\n\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_6p7q8r\n\n            out(x: 132, y: 46, name: \"is_even\") property(Bool) is_even_9s0t1u\n\n            instance(x: 16, y: 46) modulo_2v3w4x root.Std_k98ojb.Math.Modulo {}\n            instance(x: 64, y: 46) equal_5y6z7a root.Std_k98ojb.Logic.Equal {}\n\n            item_6p7q8r -> modulo_2v3w4x.value\n            2 -> modulo_2v3w4x.divisor\n            modulo_2v3w4x.result -> equal_5y6z7a.left\n            0 -> equal_5y6z7a.right\n            equal_5y6z7a.result -> is_even_9s0t1u\n        } -> find_even.predicate\n\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_6p7q8r\n\n            out(x: 132, y: 46, name: \"is_odd\") property(Bool) is_odd_9s0t1u\n\n            instance(x: 16, y: 46) modulo_2v3w4x root.Std_k98ojb.Math.Modulo {}\n            instance(x: 64, y: 46) not_equal_5y6z7a root.Std_k98ojb.Logic.NotEqual {}\n\n            item_6p7q8r -> modulo_2v3w4x.value\n            2 -> modulo_2v3w4x.divisor\n            modulo_2v3w4x.result -> not_equal_5y6z7a.left\n            0 -> not_equal_5y6z7a.right\n            not_equal_5y6z7a.result -> is_odd_9s0t1u\n        } -> find_odd.predicate\n\n        find_even.item -> mul_3m4n5o.first\n        find_odd.item -> mul_3m4n5o.second\n        mul_3m4n5o.result -> product_7g8h9i\n\n        execute_4d5e6f -> find_even.execute\n        find_even.item -> find_odd.execute\n        find_odd.item -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 50, y: 0, name: \"list\") property(List<Number>) list_123456\n        in(x: 50, y: 50, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 350, y: 0, name: \"product\") property(Number) product_789abc\n        out(x: 350, y: 50, name: \"continue\") trigger() continue_def456\n\n        instance(x: 150, y: -50) filter_even root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 150, y: 50) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 250, y: -50) first_even root.Std_k98ojb.List.FirstItem {}\n        instance(x: 250, y: 50) first_odd root.Std_k98ojb.List.FirstItem {}\n        instance(x: 450, y: 0) multiply root.Std_k98ojb.Math.Mul {}\n\n        list_123456 -> filter_even.items\n        list_123456 -> filter_odd.items\n\n        func() {\n            in(x: -50, y: 0, name: \"item\") property(Number) item_even\n\n            out(x: 50, y: 0, name: \"is_even\") property(Bool) is_even\n\n            instance(x: 0, y: 0) mod_even root.Std_k98ojb.Math.Modulo {}\n            instance(x: 0, y: 50) equal_even root.Std_k98ojb.Logic.Equal {}\n\n            item_even -> mod_even.value\n            2 -> mod_even.divisor\n            mod_even.result -> equal_even.left\n            0 -> equal_even.right\n            equal_even.result -> is_even\n        } -> filter_even.handler\n\n        func() {\n            in(x: -50, y: 0, name: \"item\") property(Number) item_odd\n\n            out(x: 50, y: 0, name: \"is_odd\") property(Bool) is_odd\n\n            instance(x: 0, y: 0) mod_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 0, y: 50) not_equal_odd root.Std_k98ojb.Logic.NotEqual {}\n\n            item_odd -> mod_odd.value\n            2 -> mod_odd.divisor\n            mod_odd.result -> not_equal_odd.left\n            0 -> not_equal_odd.right\n            not_equal_odd.result -> is_odd\n        } -> filter_odd.handler\n\n        filter_even.output_list -> first_even.list\n        filter_odd.output_list -> first_odd.list\n\n        first_even.item -> multiply.first\n        first_odd.item -> multiply.second\n\n        multiply.result -> product_789abc\n        execute_abcdef -> filter_even.execute\n        filter_even.output_list -> filter_odd.execute\n        filter_odd.output_list -> first_even.execute\n        first_even.item -> first_odd.execute\n        first_odd.item -> multiply.execute\n        multiply.result -> continue_def456\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 160, y: -72, name: \"input_list\") property(List) input_list_f5c03d\n        in(x: 160, y: -172, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 550, y: -72, name: \"product\") property(Number) product_f3db9f\n        out(x: 550, y: -172, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 380, y: -260) find_even root.Std_k98ojb.Iteration.Find {}\n        instance(x: 380, y: -60) find_odd root.Std_k98ojb.Iteration.Find {}\n        instance(x: 720, y: -160) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n\n        input_list_f5c03d -> find_even.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 200, y: 46, name: \"is_even\") property(Bool) is_even_d0fd24\n\n            instance(x: 50, y: 46) modulo_4b5d9c root.Std_k98ojb.Math.Modulo {}\n            instance(x: 120, y: 46) equal_5a9b3f root.Std_k98ojb.Logic.Equal {}\n\n            element_5f51f7 -> modulo_4b5d9c.value\n            2 -> modulo_4b5d9c.divisor\n            modulo_4b5d9c.result -> equal_5a9b3f.left\n            0 -> equal_5a9b3f.right\n            equal_5a9b3f.result -> is_even_d0fd24\n        } -> find_even.predicate\n\n        input_list_f5c03d -> find_odd.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 200, y: 46, name: \"is_odd\") property(Bool) is_odd_d0fd24\n\n            instance(x: 50, y: 46) modulo_4b5d9c root.Std_k98ojb.Math.Modulo {}\n            instance(x: 120, y: 46) not_equal_5a9b3f root.Std_k98ojb.Logic.NotEqual {}\n\n            element_5f51f7 -> modulo_4b5d9c.value\n            2 -> modulo_4b5d9c.divisor\n            modulo_4b5d9c.result -> not_equal_5a9b3f.left\n            0 -> not_equal_5a9b3f.right\n            not_equal_5a9b3f.result -> is_odd_d0fd24\n        } -> find_odd.predicate\n\n        find_even.item -> mul_2f9d09.first\n        find_odd.item -> mul_2f9d09.second\n        mul_2f9d09.result -> product_f3db9f\n\n        execute_27b8c3 -> find_even.execute\n        find_even.itemFound -> find_odd.execute\n        find_odd.itemFound -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the product of first even and odd number of a given list.\") product_of_first_even_odd {\n        in(x: 90, y: -50, name: \"input\") property(List) input_3a8b6c\n        in(x: 90, y: -100, name: \"execute\") trigger() execute_4a7c2d\n\n        out(x: 90, y: 50, name: \"out\") property(Number) out_5d9f8e\n        out(x: 90, y: 100, name: \"continue\") trigger() continue_7b6e3f\n\n        instance(x: 250, y: -100) filter_even_4f7a9b root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 250, y: 0) filter_odd_5f8a9c root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 450, y: -50) first_even_3d9b7c root.Std_k98ojb.Iteration.Find {}\n        instance(x: 450, y: 50) first_odd_4e8b7d root.Std_k98ojb.Iteration.Find {}\n        instance(x: 650, y: 0) mul_5f7c9d root.Std_k98ojb.Math.Mul {}\n\n        input_3a8b6c -> filter_even_4f7a9b.items\n        func() {\n            in(x: -60, y: 0, name: \"item\") property(Number) item_6f8b9d\n\n            out(x: 100, y: 0, name: \"out\") property(Bool) out_7d9b8e\n\n            instance(x: 20, y: 0) modulo_8e9c7f root.Std_k98ojb.Math.Modulo {}\n            instance(x: 60, y: 0) equal_9f8d7c root.Std_k98ojb.Logic.Equal {}\n\n            item_6f8b9d -> modulo_8e9c7f.value\n            2 -> modulo_8e9c7f.divisor\n            modulo_8e9c7f.result -> equal_9f8d7c.left\n            0 -> equal_9f8d7c.right\n            equal_9f8d7c.result -> out_7d9b8e\n        } -> filter_even_4f7a9b.handler\n\n        input_3a8b6c -> filter_odd_5f8a9c.items\n        func() {\n            in(x: -60, y: 0, name: \"item\") property(Number) item_8e9d7f\n\n            out(x: 100, y: 0, name: \"out\") property(Bool) out_9f8e7c\n\n            instance(x: 20, y: 0) modulo_9e8f7d root.Std_k98ojb.Math.Modulo {}\n            instance(x: 60, y: 0) not_equal_8f9d7e root.Std_k98ojb.Logic.NotEqual {}\n\n            item_8e9d7f -> modulo_9e8f7d.value\n            2 -> modulo_9e8f7d.divisor\n            modulo_9e8f7d.result -> not_equal_8f9d7e.left\n            0 -> not_equal_8f9d7e.right\n            not_equal_8f9d7e.result -> out_9f8e7c\n        } -> filter_odd_5f8a9c.handler\n\n        filter_even_4f7a9b.output_list -> first_even_3d9b7c.items\n        func() {\n            in(x: -60, y: 0, name: \"item\") property(Number) item_9f8e7c\n\n            out(x: 100, y: 0, name: \"out\") property(Bool) out_8e9f7d\n\n            true -> out_8e9f7d\n        } -> first_even_3d9b7c.predicate\n\n        filter_odd_5f8a9c.output_list -> first_odd_4e8b7d.items\n        func() {\n            in(x: -60, y: 0, name: \"item\") property(Number) item_7f8e9d\n\n            out(x: 100, y: 0, name: \"out\") property(Bool) out_6e9f8c\n\n            true -> out_6e9f8c\n        } -> first_odd_4e8b7d.predicate\n\n        first_even_3d9b7c.item -> mul_5f7c9d.first\n        first_odd_4e8b7d.item -> mul_5f7c9d.second\n        mul_5f7c9d.result -> out_5d9f8e\n\n        execute_4a7c2d -> filter_even_4f7a9b.execute\n        execute_4a7c2d -> filter_odd_5f8a9c.execute\n        first_even_3d9b7c.item -> continue_7b6e3f\n    }\n}"
            ],
            "41": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 154, y: -53, name: \"array\") property(List<Number>) array_1d2f3c\n        in(x: 161, y: -211, name: \"element\") property(Number) element_3b8a4d\n        in(x: 168, y: -369, name: \"execute\") trigger() execute_9c2d7e\n\n        out(x: 1748, y: -10, name: \"position\") property(Number) position_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) reversed_6030c9 root.Std_k98ojb.List.Reversed {}\n        instance(x: 591, y: 74) find_038fce root.Std_k98ojb.Iteration.Find {}\n        instance(x: 933, y: 25) sub_f11fda root.Std_k98ojb.Math.Sub {}\n        instance(x: 714, y: -155) length_8cb3f6 root.Std_k98ojb.List.Length {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) equal_b720d7 root.Std_k98ojb.Logic.Equal {}\n\n        array_1d2f3c -> reversed_6030c9.list\n        reversed_6030c9.list -> find_038fce.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n            item_5f51f7 -> equal_2f9d09.left\n            element_3b8a4d -> equal_2f9d09.right\n            equal_2f9d09.result -> out_d0fd24\n        } -> find_038fce.predicate\n        find_038fce.item -> if_07b8c7.predicate\n        find_038fce.index -> sub_f11fda.first\n        length_8cb3f6.length -> sub_f11fda.second\n        sub_f11fda.result -> position_f3db9f\n        array_1d2f3c -> length_8cb3f6.list\n        if_07b8c7.then -> continue_8ba06b\n        execute_9c2d7e -> find_038fce.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"find the last position of an element in a sorted array.\") last_position {\n        in(x: 140, y: -50, name: \"array\") property(List<Number>) array_0c0e4f\n        in(x: 160, y: -20, name: \"element\") property(Number) element_5f51f7\n        in(x: 180, y: 10, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1600, y: 0, name: \"position\") property(Number) position_f3db9f\n        out(x: 1600, y: 50, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 400, y: -100) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 700, y: -100) equal_7b8c7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1000, y: -100) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1300, y: -100) assign_0a1b2c root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n\n        array_0c0e4f -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_7b8c7.left\n        element_5f51f7 -> equal_7b8c7.right\n        equal_7b8c7.result -> if_e19a62.predicate\n        for_8cb3f6.onItem -> if_e19a62.execute\n        if_e19a62.then -> assign_0a1b2c.execute\n        for_8cb3f6.index -> assign_0a1b2c.gen_0\n        assign_0a1b2c.result -> position_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -189, y: 222) last_position_f0be66 root.main.last_position {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 100, y: 50, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 100, name: \"element\") property(Number) element_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"position\") property(Number) position_output\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 250, y: 200) if_equal root.Std_k98ojb.Logic.Equal {}\n        instance(x: 250, y: 300) store_position root.Std_k98ojb.Std.If {}\n\n        array_input -> for_loop.items\n        for_loop.index -> if_equal.left\n        element_input -> if_equal.right\n\n        for_loop.onItem -> if_equal.execute\n        if_equal.result -> store_position.predicate\n\n        if_equal.then -> store_position.execute\n        for_loop.index -> store_position.value\n        store_position.value -> position_output\n\n        for_loop.done -> continue_trigger\n        execute_trigger -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the last position of an element in a sorted array.\") find_last_position {\n        in(x: 300, y: -100, name: \"array\") property(List<Number>) array_input\n        in(x: 300, y: -50, name: \"element\") property(Number) element_input\n        in(x: 300, y: 0, name: \"execute\") trigger() execute_input\n\n        out(x: 600, y: -50, name: \"position\") property(Number) position_output\n        out(x: 600, y: 0, name: \"continue\") trigger() continue_output\n\n        instance(x: 400, y: -200) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 500, y: -150) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: -50) max_index root.Std_k98ojb.Math.Max {}\n\n        array_input -> for_loop.items\n        for_loop.item -> equal_check.left\n        element_input -> equal_check.right\n\n        equal_check.result -> Std.If {\n            in(x: 550, y: -100, name: \"input\") property(Bool) input\n            in(x: 550, y: -75, name: \"then\") trigger() then_trigger\n            in(x: 550, y: -50, name: \"else\") trigger() else_trigger\n\n            out(x: 600, y: -75, name: \"value\") property(Bool) value_output\n        }.input\n\n        for_loop.index -> max_index.first\n        max_index.result -> position_output\n\n        for_loop.onItem -> Std.If.then_trigger\n        Std.If.value_output -> continue_output\n\n        execute_input -> for_loop.reset\n        for_loop.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 180, y: -160, name: \"array\") property(List<Number>) array_1c3d4b\n        in(x: 180, y: -80, name: \"element\") property(Number) element_2a4d5c\n        in(x: 180, y: 0, name: \"execute\") trigger() execute_3b5e6d\n\n        out(x: 400, y: -80, name: \"position\") property(Number) position_4c6f7d\n        out(x: 400, y: 0, name: \"continue\") trigger() continue_5d7e8f\n\n        instance(x: 600, y: -160) reversed_6e8f9a root.Std_k98ojb.List.Reversed {}\n        instance(x: 800, y: -80) for_7f9g0b root.Std_k98ojb.Std.For {}\n        instance(x: 1000, y: 0) if_8g0h1c root.Std_k98ojb.Std.If {}\n        instance(x: 1200, y: 80) equal_9h1i2d root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1400, y: 160) sub_a2j3k4 root.Std_k98ojb.Math.Sub {}\n\n        array_1c3d4b -> reversed_6e8f9a.list\n        reversed_6e8f9a.list -> for_7f9g0b.items\n        for_7f9g0b.item -> equal_9h1i2d.left\n        element_2a4d5c -> equal_9h1i2d.right\n        equal_9h1i2d.result -> if_8g0h1c.predicate\n        for_7f9g0b.onItem -> if_8g0h1c.execute\n        if_8g0h1c.then -> continue_5d7e8f\n        for_7f9g0b.index -> sub_a2j3k4.first\n        array_1c3d4b -> List.Length -> sub_a2j3k4.second\n        sub_a2j3k4.result -> position_4c6f7d\n        for_7f9g0b.done -> continue_5d7e8f\n        execute_3b5e6d -> for_7f9g0b.reset\n        if_8g0h1c.else -> for_7f9g0b.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 200, y: -50, name: \"array\") property(List<Number>) array_1a2b3c\n        in(x: 200, y: 0, name: \"element\") property(Number) element_4d5e6f\n        in(x: 200, y: 50, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 400, y: 0, name: \"position\") property(Number) position_j1k2l3\n        out(x: 400, y: 50, name: \"done\") trigger() done_m4n5o6\n\n        instance(x: 600, y: -100) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: -50) equal_9p0q1r root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1000, y: 0) if_2s3t4u root.Std_k98ojb.Std.If {}\n        instance(x: 1200, y: 50) set_position_5v6w7x root.Std_k98ojb.Math.Expression {\n            expression: \"index\"\n        }\n\n        array_1a2b3c -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_9p0q1r.left\n        element_4d5e6f -> equal_9p0q1r.right\n        equal_9p0q1r.result -> if_2s3t4u.predicate\n        for_8cb3f6.onItem -> if_2s3t4u.execute\n        if_2s3t4u.then -> set_position_5v6w7x.execute\n        for_8cb3f6.index -> set_position_5v6w7x.gen_0\n        set_position_5v6w7x.result -> position_j1k2l3\n        for_8cb3f6.done -> done_m4n5o6\n        execute_7g8h9i -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the last position of an element in a sorted array.\") find_last_position {\n        in(x: 100, y: 50, name: \"array\") property(List<Number>) array_input\n        in(x: 100, y: 100, name: \"element\") property(Number) element_input\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"position\") property(Number) position_output\n        out(x: 400, y: 150, name: \"done\") trigger() done_trigger\n\n        instance(x: 200, y: 50) reversed_list root.Std_k98ojb.List.Reversed {}\n        instance(x: 200, y: 100) find_instance root.Std_k98ojb.Iteration.Find {}\n        instance(x: 200, y: 150) length_instance root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 100) sub_instance root.Std_k98ojb.Math.Sub {}\n\n        array_input -> reversed_list.list\n        reversed_list.list -> find_instance.items\n        element_input -> find_instance.handler\n        array_input -> length_instance.list\n\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item_input\n            in(x: 0, y: 50, name: \"index\") property(Number) index_input\n\n            out(x: 200, y: 0, name: \"result\") property(Bool) result_output\n\n            instance(x: 100, y: 0) equal_instance root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> equal_instance.left\n            element_input -> equal_instance.right\n            equal_instance.result -> result_output\n        } -> find_instance.handler\n\n        length_instance.length -> sub_instance.first\n        find_instance.index -> sub_instance.second\n        sub_instance.result -> position_output\n\n        execute_trigger -> find_instance.execute\n        find_instance.item -> done_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the last position of an element in a sorted array.\") find_last_position {\n        in(x: 10, y: 10, name: \"array\") property(List<Number>) array_1\n        in(x: 10, y: 60, name: \"element\") property(Number) element_2\n        in(x: 10, y: 110, name: \"execute\") trigger() execute_3\n\n        out(x: 300, y: 10, name: \"position\") property(Number) position_4\n        out(x: 300, y: 60, name: \"continue\") trigger() continue_5\n\n        instance(x: 100, y: 10) length_6 root.Std_k98ojb.List.Length {}\n        instance(x: 100, y: 60) sub_7 root.Std_k98ojb.Math.Sub {}\n        instance(x: 100, y: 110) for_8 root.Std_k98ojb.Std.For {}\n        instance(x: 200, y: 10) equal_9 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 200, y: 60) if_10 root.Std_k98ojb.Std.If {}\n\n        array_1 -> length_6.list\n        length_6.length -> sub_7.first\n        1 -> sub_7.second\n        sub_7.result -> for_8.items\n        for_8.index -> equal_9.left\n        element_2 -> equal_9.right\n        equal_9.result -> if_10.predicate\n        for_8.onItem -> if_10.execute\n        if_10.then -> position_4\n        if_10.then -> continue_5\n        if_10.else -> for_8.next\n        execute_3 -> for_8.reset\n        for_8.done -> continue_5\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the last position of an element in a sorted array.\") find_last_position {\n        in(x: 60, y: 60, name: \"array\") property(List<Number>) array_input\n        in(x: 60, y: 120, name: \"element\") property(Number) element_input\n        in(x: 60, y: 180, name: \"execute\") trigger() execute_input\n\n        out(x: 300, y: 120, name: \"position\") property(Number) position_output\n        out(x: 300, y: 180, name: \"done\") trigger() done_output\n\n        instance(x: 120, y: 240) reversed_array root.Std_k98ojb.List.Reversed {}\n        instance(x: 120, y: 300) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 300) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 300, y: 360) if_check root.Std_k98ojb.Std.If {}\n        instance(x: 480, y: 300) sub_index root.Std_k98ojb.Math.Sub {}\n\n        array_input -> reversed_array.list\n        reversed_array.list -> for_loop.items\n        for_loop.item -> equal_check.left\n        element_input -> equal_check.right\n        equal_check.result -> if_check.predicate\n        for_loop.onItem -> if_check.execute\n        if_check.then -> done_output\n        if_check.then -> sub_index.first\n        sub_index.result -> position_output\n        for_loop.index -> sub_index.second\n        reversed_array.list -> sub_index.second\n        for_loop.done -> done_output\n        execute_input -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the last position of an element in a sorted array.\") find_last_position {\n        in(x: 100, y: 100, name: \"array\") property(List<Number>) array_1\n        in(x: 100, y: 150, name: \"element\") property(Number) element_1\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_1\n\n        out(x: 400, y: 100, name: \"position\") property(Number) position_1\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_1\n\n        instance(x: 250, y: 100) reversed_1 root.Std_k98ojb.List.Reversed {}\n        instance(x: 250, y: 150) find_1 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 250, y: 200) sub_1 root.Std_k98ojb.Math.Sub {}\n        instance(x: 250, y: 250) length_1 root.Std_k98ojb.List.Length {}\n        instance(x: 250, y: 300) not_equal_1 root.Std_k98ojb.Logic.NotEqual {}\n\n        execute_1 -> reversed_1.trigger\n        array_1 -> reversed_1.list\n        reversed_1.reversed -> find_1.items\n\n        func() {\n            in(x: 100, y: 100, name: \"item\") property(Number) item_1\n            in(x: 100, y: 150, name: \"index\") property(Number) index_1\n\n            out(x: 300, y: 100, name: \"result\") property(Bool) result_1\n\n            instance(x: 200, y: 100) equal_1 root.Std_k98ojb.Logic.Equal {}\n            item_1 -> equal_1.left\n            element_1 -> equal_1.right\n            equal_1.result -> result_1\n        } -> find_1.predicate\n\n        find_1.item -> not_equal_1.left\n        element_1 -> not_equal_1.right\n\n        reversed_1.reversed -> length_1.list\n        length_1.length -> sub_1.first\n        find_1.index -> sub_1.second\n\n        sub_1.result -> position_1\n        execute_1 -> find_1.execute\n        find_1.item -> not_equal_1.left\n        not_equal_1.result -> continue_1\n    }\n}"
            ]
        }
    }
]