[
    {
        "experiment_name": "regular_similarity_1_shot",
        "best_params_optimization": "semantic",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 3,
        "n_generations_per_task": 10,
        "model": "llama3.3:70b-instruct-fp16",
        "largest_context": 3925,
        "task_candidates": {
            "7": [
                "instance(x: 100, y: 100) SetsIntersection_9f2e7a root.Sets.Intersection {}\nin(x: -200, y: 0, name: \"list1\") property(List) list1 -> SetsIntersection_9f2e7a.left\nin(x: 0, y: 0, name: \"list2\") property(List) list2 -> SetsIntersection_9f2e7a.right\n\ninstance(x: 300, y: 100) ListIsEmpty_e72c67 root.List.IsEmpty {}\nSetsIntersection_9f2e7a.intersect -> ListIsEmpty_e72c67.list\n\ninstance(x: 500, y: 100) LogicNot_71d8b5 root.Logic.Not {}\nListIsEmpty_e72c67.isEmpty -> LogicNot_71d8b5.input\nout(x: 700, y: 100, name: \"result\") property(Boolean) result <- LogicNot_71d8b5.output",
                "instance(x: 100, y: 100) list1_8e3c11 root.Std_k98ojb.List.Empty {}\ninstance(x: 200, y: 100) list2_8a4d22 root.Std_k98ojb.List.Empty {}\n\nfunc() has_common_element {\n    in(x: -231, y: -69, name: \"list1\") property(List) list1_f45a6e\n    in(x: -223, y: 18, name: \"list2\") property(List) list2_4c9f7d\n\n    out(x: 245, y: -54, name: \"result\") property(Boolean) result_a8c5b3\n\n    instance(x: 0, y: 0) intersection_dfc45a root.Sets.Intersection {}\n    list1_f45a6e -> intersection_dfc45a.left\n    list2_4c9f7d -> intersection_dfc45a.right\n\n    instance(x: 100, y: 0) not_empty_54a3b2 root.List.NotEmpty {}\n    intersection_dfc45a.intersect -> not_empty_54a3b2.list\n    not_empty_54a3b2.isEmpty -> result_a8c5b3\n}\n\ninstance(x: 300, y: 100) has_common_element_4e9f1d root.main.has_common_element {}\nlist1_8e3c11 -> has_common_element_4e9f1d.list1_f45a6e\nlist2_8a4d22 -> has_common_element_4e9f1d.list2_4c9f7d",
                "instance(x: 100, y: 100) sets_difference_5f3c17 root.Std_k98ojb.Sets.Difference {}\ninstance(x: 200, y: 100) list1_f4a789 property(List) \ninstance(x: 300, y: 100) list2_6e7c51 property(List) \nlist1_f4a789 -> sets_difference_5f3c17.left\nlist2_6e7c51 -> sets_difference_5f3c17.right\n\ninstance(x: 400, y: 100) logic_not_ecc9d8 root.Std_k98ojb.Logic.Not {}\nsets_difference_5f3c17.difference -> logic_not_ecc9d8.input\nlogic_not_ecc9d8.output -> result_4e8c54\n\ninstance(x: 500, y: 100) list_empty_71a3a1 root.Std_k98ojb.List.Empty {}\nlist_empty_71a3a1.list -> sets_difference_5f3c17.right\nlogic_not_ecc9d8.input -> result_4e8c54\n\ninstance(x: 600, y: 100) list_isempty_6c0a22 root.Std_k98ojb.List.IsEmpty {}\nsets_difference_5f3c17.difference -> list_isempty_6c0a22.list\nlist_isempty_6c0a22.isEmpty -> result_4e8c54",
                "instance(x: 100, y: 100) list1_4a6c11 root.Std_k98ojb.List.Empty {}\ninstance(x: 200, y: 100) list2_4e8d22 root.Std_k98ojb.List.Empty {}\n\nfunc() has_common_element {\n    in(x: -173, y: -181, name: \"list1\") property(List) list1_f5a9c6\n    in(x: -154, y: -13, name: \"list2\") property(List) list2_8f44e4\n\n    out(x: 784, y: -110, name: \"result\") property(Boolean) result_48d571\n\n    instance(x: 300, y: 200) filter_e4sdc2 root.Std_k98ojb.Iteration.Filter {}\n    list1_f5a9c6 -> filter_e4sdc2.items\n    func() {\n        in(x: -231, y: -69, name: \"item\") property(Any) item_48d571\n\n        out(x: 245, y: -54, name: \"result\") property(Boolean) result_8f44e4\n\n        instance(x: 400, y: 250) contains_dsa31 root.Std_k98ojb.List.Contains {}\n        list2_8f44e4 -> contains_dsa31.list\n        item_48d571 -> contains_dsa31.item\n        contains_dsa31.result -> result_8f44e4\n    } -> filter_e4sdc2.handler\n    instance(x: 500, y: 300) not_empty_32rf43 root.Std_k98ojb.List.NotEmpty {}\n    filter_e4sdc2.output_list -> not_empty_32rf43.list\n    not_empty_32rf43.isNotEmpty -> result_48d571\n}",
                "instance(x: 100, y: 100) SetsIntersection_1 root.Sets.Intersection {}\nin(x: -150, y: 50, name: \"list1\") property(List) list1 -> SetsIntersection_1.left\nin(x: -150, y: 150, name: \"list2\") property(List) list2 -> SetsIntersection_1.right\n\ninstance(x: 250, y: 100) ListIsEmpty_2 root.List.IsEmpty {}\nSetsIntersection_1.intersect -> ListIsEmpty_2.list\n\nout(x: 350, y: 100, name: \"result\") property(Bool) result\ninstance(x: 300, y: 150) LogicNot_3 root.Logic.Not {}\nListIsEmpty_2.isEmpty -> LogicNot_3.input\nLogicNot_3.output -> result",
                "instance(x: 100, y: 100) List.Contains_9d8f43 root.Std_k98ojb.List.Contains {}\ninstance(x: 200, y: 100) Iteration.Map_f46a21 root.Std_k98ojb.Iteration.Map {\n    handler: func() {\n        in(x: -150, y: -50) item_afe211 property(Any) item\n        out(x: 50, y: -50) result_2c2e5d property(Boolean) result\n        instance(x: -50, y: 0) List.Contains_35a332 root.Std_k98ojb.List.Contains {}\n        item_afe211 -> List.Contains_35a332.item\n        List.Contains_9d8f43.list -> List.Contains_35a332.list\n        List.Contains_35a332.contains -> result_2c2e5d\n    }\n}\ninstance(x: 300, y: 100) Iteration.Find_b6b Dee root.Std_k98ojb.Iteration.Find {\n    items: Iteration.Map_f46a21.output_list\n    predicate: func() {\n        in(x: -150, y: -50) item_9d8f43 property(Any) item\n        out(x: 50, y: -50) result_c7c211 property(Boolean) result\n        instance(x: -50, y: 0) Logic.Not_2e8a32 root.Std_k98ojb.Logic.Not {}\n        item_9d8f43 -> Logic.Not_2e8a32.input\n        Logic.Not_2e8a32.output -> result_c7c211\n    }\n}\nList.Contains_9d8f43.list -> Iteration.Map_f46a21.items\nIteration.Find_b6b Dee.item -> null",
                "instance(x: 100, y: 100) list1_4a2c11 root.Std_k98ojb.List.Empty {}\ninstance(x: 200, y: 100) list2_5f6e22 root.Std_k98ojb.List.Empty {}\n\ninstance(x: 150, y: 150) intersection_30a831 root.Sets.Intersection {}\nlist1_4a2c11.list -> intersection_30a831.left\nlist2_5f6e22.list -> intersection_30a831.right\n\ninstance(x: 250, y: 200) is_not_empty_68d9b3 root.Std_k98ojb.List.NotEmpty {}\nintersection_30a831.intersect -> is_not_empty_68d9b3.list\nis_not_empty_68d9b3.isEmpty -> output",
                "instance(x: 100, y: 100) List.Contains_4a8f1b root.Std_k98ojb.List.Contains {}\ninstance(x: 200, y: 100) Iteration.Map_f5c2e9 root.Std_k98ojb.Iteration.Map {}\nList.Contains_4a8f1b.item -> Iteration.Map_f5c2e9.handler\nin(x: 0, y: 0, name: \"list1\") property(List) list1_e4e5d3\nin(x: 100, y: 0, name: \"list2\") property(List) list2_5a8f1b\nlist2_5a8f1b -> List.Contains_4a8f1b.list\nlist1_e4e5d3 -> Iteration.Map_f5c2e9.items\nout(x: 300, y: 100, name: \"result\") property(Bool) result_71f6a7\ninstance(x: 250, y: 150) Logic.Or_5c2e95 root.Std_k98ojb.Logic.Or {}\nIteration.Map_f5c2e9.output_list -> Logic.Or_5c2e95.left\nLogic.Or_5c2e95.result -> result_71f6a7",
                "instance(x: 100, y: 100) list1_5a31c4 root.Std_k98ojb.List.Empty {}\ninstance(x: 200, y: 100) list2_5e3d95 root.Std_k98ojb.List.Empty {}\n\ninstance(x: 150, y: 150) intersection_d8f45b root.Sets.Intersection {}\nlist1_5a31c4.list -> intersection_d8f45b.left\nlist2_5e3d95.list -> intersection_d8f45b.right\n\ninstance(x: 250, y: 200) is_not_empty_f4a6e9 root.Std_k98ojb.List.NotEmpty {}\nintersection_d8f45b.intersect -> is_not_empty_f4a6e9.list\nis_not_empty_f4a6e9.isEmpty -> output",
                "instance(x: 100, y: 100) SetsIntersection_5a4d7b root.Sets.Intersection {}\nin(x: -200, y: 0, name: \"list1\") property(List) list1_e6f2c9 -> SetsIntersection_5a4d7b.left\nin(x: -200, y: -100, name: \"list2\") property(List) list2_3c8e51 -> SetsIntersection_5a4d7b.right\n\ninstance(x: 300, y: 0) ListIsEmpty_e8f9e1 root.List.IsEmpty {}\nSetsIntersection_5a4d7b.intersect -> ListIsEmpty_e8f9e1.list\n\ninstance(x: 400, y: 100) LogicNot_f3c8c2 root.Logic.Not {}\nListIsEmpty_e8f9e1.isEmpty -> LogicNot_f3c8c2.input\nout(x: 500, y: 0, name: \"result\") property(Boolean) result_71a7b6 <- LogicNot_f3c8c2.output"
            ],
            "11": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e65f11 root.Std_k98ojb.List.Sort {}\n        instance(x: 375, y: -207, name: \"check for consecutive numbers\") reduce_2c0e7a root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e65f11.list\n        sort_e65f11.sorted_list -> reduce_2c0e7a.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_f4851d\n            in(x: -23, y: 79, name: \"current\") property(Number) current_d8b4f5\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_2c0e7a\n\n            instance(x: 226, y: 56) substract_e3d9a1 root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_f4851d root.Std_k98ojb.Logic.Equal {}\n            instance(x: 246, y: -209, name: \"get previous number\") get_at_7c95e2 root.Std_k98ojb.List.GetAt {}\n            reduce_2c0e7a.index -> get_at_7c95e2.index\n            sort_e65f11.sorted_list -> get_at_7c95e2.list\n            1 -> substract_e3d9a1.first\n            get_at_7c95e2.item -> substract_e3d9a1.second\n            current_d8b4f5 -> equal_f4851d.right\n            substract_e3d9a1.result -> equal_f4851d.left\n            acc_f4851d -> output_2c0e7a\n            equal_f4851d.result -> output_2c0e7a\n        } -> reduce_2c0e7a.handler\n        true -> reduce_2c0e7a.initial_value\n        reduce_2c0e7a.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e6c1a3 root.Std_k98ojb.List.Sort {}\n        instance(x: 434, y: -207, name: \"check each pair of numbers\") reduce_f46e4d root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e6c1a3.list\n        sort_e6c1a3.sorted_list -> reduce_f46e4d.items\n        func() {\n            in(x: -30, y: -25, name: \"accumulated\") property(Bool) accumulated_bfc7b5\n            in(x: -23, y: 79, name: \"current\") property(Number) current_81298e\n            in(x: -10, y: 150, name: \"index\") property(Number) index_e9f1a4\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) substract_76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_f83a85 root.Std_k98ojb.Logic.Equal {}\n            index_e9f1a4 -> substract_76d2b.first\n            current_81298e -> substract_76d2b.second\n            1 -> equal_f83a85.right\n            substract_76d2b.result -> equal_f83a85.left\n            equal_f83a85.result -> output_efbc78\n            accumulated_bfc7b5 -> output_efbc78\n        } -> reduce_f46e4d.handler\n        true -> reduce_f46e4d.initial_value\n        reduce_f46e4d.accumulated -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -195, name: \"sort the list\") sort_f3a5c1 root.Std_k98ojb.List.Sort {}\n        instance(x: 391, y: -205, name: \"check each pair of numbers\") reduce_e4f5e6 root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_f3a5c1.list\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_d8d2b9\n            in(x: -23, y: 79, name: \"current\") property(Number) current_170471\n            in(x: -10, y: 133, name: \"index\") property(Number) index_f7c1e3\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) subtract_76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) notequal_7836b4 root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 645, y: -13) and_f9f1e5 root.Std_k98ojb.Logic.And {}\n            index_f7c1e3 -> subtract_76d2b.first\n            current_170471 -> subtract_76d2b.second\n            notequal_7836b4.result -> and_f9f1e5.right\n            acc_d8d2b9 -> and_f9f1e5.left\n            1 -> subtract_76d2b.first\n            index_f7c1e3 -> subtract_76d2b.second\n            subtract_76d2b.result -> notequal_7836b4.left\n            0 -> notequal_7836b4.right\n            and_f9f1e5.result -> output_efbc78\n        } -> reduce_e4f5e6.handler\n        sort_f3a5c1.sorted_list -> reduce_e4f5e6.items\n        true -> reduce_e4f5e6.initial_value\n        reduce_e4f5e6.result -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e6a5f3 root.Std_k98ojb.List.Sort {}\n        instance(x: 434, y: -207, name: \"check for consecutive numbers\") reduce_f46c22 root.Std_k98ojb.Iteration.Reduce {}\n        func() {\n            in(x: -30, y: -25, name: \"current\") property(Bool) current_170471\n            in(x: -23, y: 79, name: \"_index\") property(Number) _index_769593\n            in(x: -10, y: 123, name: \"item\") property(Number) item_e2b4d9\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) substract_6c3e95 root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) not_equal_c9e8a5 root.Std_k98ojb.Logic.NotEqual {}\n            1 -> substract_6c3e95.second\n            item_e2b4d9 -> substract_6c3e95.first\n            _index_769593 -> reduce_f46c22.index\n            not_equal_c9e8a5.result -> output_efbc78\n            sort_e6a5f3.sorted_list -> reduce_f46c22.items\n            list_07cae4 -> sort_e6a5f3.list\n            substract_6c3e95.result -> not_equal_c9e8a5.left\n            current_170471 -> not_equal_c9e8a5.right\n        } -> reduce_f46c22.handler\n        true -> reduce_f46c22.initial_value\n        reduce_f46c22.result -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e6f5a3 root.Std_k98ojb.List.Sort {}\n        instance(x: 434, y: -207, name: \"check for consecutive numbers\") reduce_91c22e root.Std_k98ojb.Iteration.Reduce {}\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_170471\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n            in(x: -16, y: 131, name: \"index\") property(Number) index_8e0f5d\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) get_at_d76d2b root.Std_k98ojb.List.GetAt {}\n            instance(x: 463, y: 51) sub_7836b4 root.Std_k98ojb.Math.Sub {}\n            instance(x: 645, y: 49) equal_c9f5a3 root.Std_k98ojb.Logic.Equal {}\n            list_07cae4 -> get_at_d76d2b.list\n            index_8e0f5d -> get_at_d76d2b.index\n            sub_7836b4.result -> equal_c9f5a3.left\n            current_769593 -> equal_c9f5a3.right\n            1 -> sub_7836b4.first\n            get_at_d76d2b.item -> sub_7836b4.second\n            acc_170471 -> output_efbc78\n            equal_c9f5a3.result -> output_efbc78\n        } -> reduce_91c22e.handler\n        sort_e6f5a3.sorted_list -> reduce_91c22e.items\n        true -> reduce_91c22e.initial_value\n        reduce_91c22e.result -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e6f94a root.Std_k98ojb.List.Sort {}\n        instance(x: 380, y: -207, name: \"check for consecutive numbers\") reduce_dfd5c1 root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e6f94a.list\n        sort_e6f94a.sorted_list -> reduce_dfd5c1.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_170471\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n            in(x: -16, y: 123, name: \"index\") property(Number) index_ea5f64\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) subtract_76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) not_equal_c83b4 root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 246, y: -209) and_9c3e3b root.Std_k98ojb.Logic.And {}\n            index_ea5f64 -> subtract_76d2b.first\n            current_769593 -> subtract_76d2b.second\n            not_equal_c83b4.left -> subtract_76d2b.result\n            1 -> not_equal_c83b4.right\n            acc_170471 -> and_9c3e3b.left\n            not_equal_c83b4.result -> and_9c3e3b.right\n            and_9c3e3b.result -> output_efbc78\n        } -> reduce_dfd5c1.handler\n        true -> reduce_dfd5c1.initial_value\n        reduce_dfd5c1.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_f5e2a3 root.Std_k98ojb.List.Sort {}\n        instance(x: 421, y: -207, name: \"check if consecutive\") reduce_4c0f6d root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_f5e2a3.list\n        sort_f5e2a3.sorted_list -> reduce_4c0f6d.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_eb8ed1\n            in(x: -23, y: 79, name: \"current\") property(Number) current_f4c bee\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_2a3d95\n\n            instance(x: 226, y: 56) substract_c76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) not_equal_f7c32f root.Std_k98ojb.Logic.NotEqual {}\n            1 -> substract_c76d2b.second\n            current_f4c_bee -> substract_c76d2b.first\n            not_equal_f7c32f.result -> output_2a3d95\n            substract_c76d2b.result -> not_equal_f7c32f.left\n            acc_eb8ed1 -> not_equal_f7c32f.right\n        } -> reduce_4c0f6d.handler\n        true -> reduce_4c0f6d.initial_value\n        reduce_4c0f6d.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e6f3a5 root.Std_k98ojb.List.Sort {}\n        instance(x: 375, y: -207, name: \"check if all numbers are consecutive\") reduce_9c0e45 root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e6f3a5.list\n        sort_e6f3a5.sorted_list -> reduce_9c0e45.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_170471\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n            in(x: -15, y: 123, name: \"index\") property(Number) index_ea9c7d\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) substract_76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) not_equal_c73e3b root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 656, y: 43) and_4c7f5a root.Std_k98ojb.Logic.And {}\n            index_ea9c7d -> substract_76d2b.first\n            current_769593 -> substract_76d2b.second\n            not_equal_c73e3b.left -> substract_76d2b.result\n            1 -> not_equal_c73e3b.right\n            acc_170471 -> and_4c7f5a.left\n            not_equal_c73e3b.result -> and_4c7f5a.right\n            and_4c7f5a.result -> output_efbc78\n        } -> reduce_9c0e45.handler\n        true -> reduce_9c0e45.initial_value\n        reduce_9c0e45.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_f3a2c5 root.Std_k98ojb.List.Sort {}\n        instance(x: 355, y: -207, name: \"check for consecutive numbers\") reduce_e4f9a6 root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_f3a2c5.list\n        sort_f3a2c5.sorted_list -> reduce_e4f9a6.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_c51b22\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) substract_ba6c2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_7836b4 root.Std_k98ojb.Logic.Equal {}\n            1 -> substract_ba6c2b.second\n            acc_c51b22 -> equal_7836b4.left\n            equal_7836b4.result -> output_efbc78\n            substract_ba6c2b.result -> equal_7836b4.right\n            current_769593 -> substract_ba6c2b.first\n        } -> reduce_e4f9a6.handler\n        true -> reduce_e4f9a6.initial_value\n        reduce_e4f9a6.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_2e5f65 root.Std_k98ojb.List.Sort {}\n        instance(x: 391, y: -207, name: \"check for consecutive numbers\") reduce_e64a3c root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_2e5f65.list\n        sort_2e5f65.sorted_list -> reduce_e64a3c.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_f46d8b\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) substract_ea6f2e root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_7836b4 root.Std_k98ojb.Logic.Equal {}\n            1 -> substract_ea6f2e.second\n            acc_f46d8b -> equal_7836b4.left\n            equal_7836b4.result -> output_efbc78\n            substract_ea6f2e.result -> equal_7836b4.right\n            current_769593 -> substract_ea6f2e.first\n        } -> reduce_e64a3c.handler\n        true -> reduce_e64a3c.initial_value\n        reduce_e64a3c.result -> output_8d07dc\n    }\n}"
            ],
            "17": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -515, y: 100, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && main_list_slice == sublist\"\n        }\n        for_d26972.item -> ifexpression_875761.gen_0\n        for_d26973.index -> ifexpression_875761.gen_1\n        sublist_ec88cd -> ifexpression_875761.gen_2\n        main_list_ec88cd -> for_d26972.items\n        for_d26972.done -> continue_a96db6\n        for_d26972.onItem -> for_d26973.reset\n        for_d26973.item -> ifexpression_875761.execute\n        for_d26973.done -> ifexpression_875761.else\n        ifexpression_875761.then -> output_5bbcd7\n        ifexpression_875761.value -> output_5bbcd7\n        execute_90aaec -> for_d26972.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 30, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) if_875761 root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26973.items\n        main_list_ec88cd -> for_d26972.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.onItem -> if_875761.input\n        for_d26973.done -> if_875761.input\n        if_875761.then -> output_5bbcd7\n        if_875761.else -> continue_a96db6\n        for_d26972.done -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a specified list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 70, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) if_6f4e1c root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26973.items\n        main_list_ec88cd -> for_d26972.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.onItem -> if_6f4e1c.execute\n        for_d26973.done -> if_6f4e1c.then\n        for_d26972.index -> if_6f4e1c.value\n        if_6f4e1c.else -> continue_a96db6\n        if_6f4e1c.then -> output_5bbcd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 80, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 100, y: 200) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && main_list_slice == sublist\"\n        }\n        main_list_ec88cd -> for_d26972.items\n        for_d26972.item -> for_d26973.reset\n        for_d26972.done -> continue_a96db6\n        for_d26972.index -> ifexpression_875761.gen_0\n        sublist_ec88cd -> for_d26973.items\n        for_d26973.onItem -> ifexpression_875761.execute\n        for_d26973.done -> for_d26972.next\n        main_list_ec88cd -> ifexpression_875761.main_list\n        sublist_ec88cd -> ifexpression_875761.sublist\n        execute_90aaec -> for_d26972.reset\n        ifexpression_875761.value -> output_5bbcd7\n        ifexpression_875761.then -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 30, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) if_4a9d6f root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26972.items\n        main_list_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.done -> if_4a9d6f.input\n        for_d26973.done -> if_4a9d6f.input\n        if_4a9d6f.then -> output_5bbcd7\n        if_4a9d6f.else -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -515, y: 80, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1021, y: 5) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list.slice(start, start + sublist.length) == sublist\"\n        }\n        main_list_ec88cd -> for_d26972.items\n        for_d26972.item -> ifexpression_875761.gen_0\n        for_d26973.index -> ifexpression_875761.gen_1\n        execute_90aaec -> for_d26972.reset\n        for_d26972.onItem -> for_d26973.execute\n        for_d26973.done -> continue_a96db6\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> ifexpression_875761.sublist\n        ifexpression_875761.value -> output_5bbcd7\n        ifexpression_875761.then -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 30, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) if_3f51a7 root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.reset\n        sublist_ec88cd -> for_d26973.items\n        main_list_ec88cd -> for_d26972.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.onItem -> if_3f51a7.execute\n        for_d26972.done -> continue_a96db6\n        for_d26973.done -> if_3f51a7.then\n        for_d26973.item -> if_3f51a7.value\n        if_3f51a7.else -> output_5bbcd7\n        for_d26972.item -> if_3f51a7.input\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -455, y: 80, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 100, y: 150) if_6a4e46 root.Std_k98ojb.Std.If {}\n        instance(x: 500, y: 200) equals_f0c3d5 root.Std_k98ojb.Logic.Equal {}\n\n        for_d26972.item -> for_d26973.reset\n        sublist_ec88cd -> for_d26973.items\n        main_list_ec88cd -> for_d26972.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.onItem -> if_6a4e46.input\n        for_d26973.done -> if_6a4e46.input\n        equals_f0c3d5.left -> for_d26972.item\n        equals_f0c3d5.right -> for_d26973.item\n        equals_f0c3d5.result -> if_6a4e46.value\n        if_6a4e46.then -> output_5bbcd7\n        if_6a4e46.else -> continue_a96db6\n        for_d26972.done -> output_5bbcd7\n        for_d26973.onItem -> equals_f0c3d5.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 30, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 100, y: 200) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && main_list_slice == sublist\"\n        }\n        main_list_ec88cd -> for_d26972.items\n        for_d26972.item -> for_d26973.reset\n        for_d26972.index -> ifexpression_875761.gen_0\n        sublist_ec88cd -> for_d26973.items\n        for_d26973.done -> ifexpression_875761.execute\n        for_d26973.onItem -> for_d26973.next\n        main_list_ec88cd -> ifexpression_875761.main_list\n        sublist_ec88cd -> ifexpression_875761.sublist\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.done -> continue_a96db6\n        ifexpression_875761.then -> output_5bbcd7\n        ifexpression_875761.else -> for_d26972.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1021, y: 5) if_2f9e4a root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26972.items\n        main_list_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.done -> if_2f9e4a.input\n        for_d26972.onItem -> for_d26973.reset\n        for_d26973.done -> for_d26972.next\n        for_d26973.item -> if_2f9e4a.value\n        if_2f9e4a.then -> output_5bbcd7\n        if_2f9e4a.else -> continue_a96db6\n    }\n}"
            ],
            "27": [
                "List.GetAt {\n  items: input_list\n  index: 0\n} -> first_item\n\nMath.Sub {\n  first: Math.Add { first: first_item; second: 1 }\n  second: 1\n} -> expected_first\n\nIteration.Find {\n  items: input_list\n  predicate: func(x) {\n    Logic.NotEqual {\n      left: x\n      right: expected_first\n    }\n  }\n} -> found\n\nStd.If {\n  input: found.item\n  then: Math.Add { first: found.index; second: 1 }\n  else: List.Length { list: input_list }\n} -> result",
                "List.FirstItem {\n  item: List.GetAt { index: 0, list: input_list } \n} -> first_item\n\nMath.Add {\n  first: first_item,\n  second: 0\n} -> expected_num\n\nIteration.Find {\n  items: input_list,\n  predicate: Logic.NotEqual {\n    left: expected_num,\n    right: List.GetAt { index: Iteration.Find.index, list: input_list }\n  }\n} -> smallest_missing_num\n\nMath.Add {\n  first: expected_num,\n  second: 1\n} -> increment_expected_num\n\nStd.If {\n  input: smallest_missing_num,\n  then: smallest_missing_num,\n  else: increment_expected_num\n} -> result",
                "List.GetAt -> Iteration.Find.handler\n    instance(x: 0, y: 0) List.GetAt {}\n    instance(x: 100, y: 0) Iteration.Find {}\n    instance(x: 200, y: 0) Math.Add {}\n    instance(x: 300, y: 0) Logic.Equal {}\n    instance(x: 400, y: 0) Std.If {}\n    List.GetAt.index -> Math.Add.result\n    Math.Add.first -> Iteration.Find.index\n    Math.Add.second -> 1\n    Iteration.Find.items -> List.GetAt.list\n    Iteration.Find.predicate -> Logic.Equal.left\n    Logic.Equal.right -> 0\n    Logic.Equal.left -> List.GetAt.result\n    Std.If.input -> Logic.Equal.result\n    Std.If.then -> Iteration.Find.index\n    Std.If.else -> Math.Add.result",
                "List.FirstItem {\n  items: List.GenerateRange { from: 1, to: 10000 }\n}\n-> Iteration.Find {\n  handler: func(item, index) {\n    Logic.NotEqual {\n      left: item,\n      right: List.GetAt {\n        list: input_list,\n        index: index\n      }\n    }\n  }\n}\n-> Math.Add { first: found_item, second: -1 }",
                "List.FirstItem {\n  item: List.GetAt { index: 0, list: input_list } \n} -> first_item\n\nMath.Sub {\n  first: List.Length { list: input_list },\n  second: 1\n} -> length_minus_one\n\nIteration.Find {\n  items: input_list,\n  predicate: func(x) {\n    Math.NotEqual {\n      left: x,\n      right: List.GetAt { index: x - first_item, list: input_list }\n    }\n  }\n} -> smallest_missing\n\nStd.IfExpression {\n  expression: \"smallest_missing != null ? smallest_missing : length_minus_one + 1\"\n} -> result",
                "List.GetAt -> Iteration.Find.handler\n    instance(x: 100, y: 100) list_get_at_node List.GetAt {}\n    instance(x: 200, y: 100) iteration_find_node Iteration.Find {}\n    list_get_at_node.index -> iteration_find_node.index\n    iteration_find_node.items -> list_get_at_node.list\n\n    instance(x: 300, y: 100) math_add_node Math.Add {}\n    math_add_node.first -> iteration_find_node.item\n    math_add_node.second -> 1\n\n    instance(x: 400, y: 100) logic_not_equal_node Logic.NotEqual {}\n    logic_not_equal_node.left -> iteration_find_node.found\n    logic_not_equal_node.right -> false\n\n    instance(x: 500, y: 100) std_if_node Std.If {}\n    std_if_node.input -> logic_not_equal_node.result\n    math_add_node.result -> std_if_node.then_value\n    iteration_find_node.item -> std_if_node.else_value\n\n    instance(x: 600, y: 100) list_length_node List.Length {}\n    list_length_node.list -> iteration_find_node.items\n\n    instance(x: 700, y: 100) math_less_than_or_equal_node Math.LessThanOrEqual {}\n    math_less_than_or_equal_node.left -> iteration_find_node.index\n    math_less_than_or_equal_node.right -> list_length_node.length\n\n    instance(x: 800, y: 100) std_if_expression_node Std.IfExpression {}\n    std_if_expression_node.expression -> \"index < length ? find(items, index + 1) : item\"\n    iteration_find_node.index -> std_if_expression_node.index\n    iteration_find_node.item -> std_if_expression_node.item\n    list_length_node.length -> std_if_expression_node.length\n    iteration_find_node.items -> std_if_expression_node.items\n\n    instance(x: 900, y: 100) math_add_node_init Math.Add {}\n    math_add_node_init.first -> 0\n    math_add_node_init.second -> 1\n    math_add_node_init.result -> iteration_find_node.index\n\n    iteration_find_node.handler -> list_get_at_node\n    iteration_find_node.context -> std_if_expression_node\n    iteration_find_node.items -> list_get_at_node.list\n    iteration_find_node.index -> math_add_node_init.result",
                "List.FirstItem {\n  items: List.GenerateRange { from: 1, to: 10000 }\n}\n-> Iteration.Find {\n  handler: Std.IfExpression {\n    expression: \"it == null || it > item\"\n  }\n  items: input_list\n}\n-> Math.Sub {\n  first: found_item\n  second: index\n}",
                "List.GetAt -> Iteration.Find.handler\n    instance(x: 82, y: -100) list_get_at_node List.GetAt {}\n    instance(x: 246, y: -145) iteration_find_node Iteration.Find {}\n    list_get_at_node.index -> iteration_find_node.index\n    iteration_find_node.item -> Math.Add.first\n    Math.Add.second = 1\n    Math.Add -> Logic.NotEqual.left\n    list_get_at_node.list -> iteration_find_node.items\n    instance(x: 82, y: -51) math_add_node Math.Add {}\n    instance(x: 246, y: -100) logic_not_equal_node Logic.NotEqual {}\n    math_add_node.result -> logic_not_equal_node.right\n    logic_not_equal_node.left -> list_get_at_node.item\n    iteration_find_node.handler = logic_not_equal_node\n    instance(x: 82, y: 4) std_count_node Std.Count {}\n    std_count_node.count -> list_get_at_node.index\n    iteration_find_node.items -> std_count_node.reset\n    instance(x: 246, y: -51) math_sub_node Math.Sub {}\n    math_sub_node.first = iteration_find_node.index\n    math_sub_node.second = 1\n    math_sub_node.result -> std_count_node.count\n    iteration_find_node.index -> math_sub_node.first",
                "List.FirstItem {\n  items: List.GenerateRange { from: 1, to: 10000 }\n}\n-> Iteration.Find {\n  handler: Std.IfExpression {\n    expression: \"it == null ? true : it > item\"\n  }\n  items: input_list\n}\n-> Math.Sub {\n  first: found_item\n  second: 1\n}",
                "List.FirstItem {\n  item: List.GetAt { index: 0, list: input_list } \n} -> first_item\n\nMath.Add {\n  first: first_item,\n  second: 0\n} -> expected_num\n\nIteration.Find {\n  items: input_list,\n  predicate: Logic.NotEqual {\n    left: expected_num,\n    right: List.GetAt { index: Iteration.Find.index, list: input_list }\n  }\n} -> smallest_missing_num\n\nMath.Expression {\n  expression: \"i + 1\"\n} -> increment\n\nIteration.Reduce {\n  items: input_list,\n  reducer: Math.Min {\n    left: Iteration.Reduce.accumulated,\n    right: List.GetAt { index: Iteration.Reduce.index, list: input_list }\n  },\n  initial_value: expected_num\n} -> smallest_missing\n\nLogic.If {\n  input: Logic.NotEqual { \n    left: smallest_missing_num, \n    right: Null \n  },\n  then: smallest_missing_num,\n  else: Math.Add { \n    first: List.LastItem { item: List.GetAt { index: List.Length { list: input_list } - 1, list: input_list } }, \n    second: increment \n  }\n} -> result"
            ],
            "31": [
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 110, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 240, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 370, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\nStrings_Replace_3.output -> output",
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput_string -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\noutput_string <- Strings_Replace_3.output",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput_string -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\nStrings_Replace_3.output -> output_string",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput_string -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\noutput_string <- Strings_Replace_3.output",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput_string -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\nStrings_Replace_3.output -> output_string",
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output"
            ],
            "33": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) firstitem_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> firstitem_038fce.list\n        instance(x: 933, y: 25) filter_f11fda root.Std_k98ojb.Iteration.Filter {\n            handler: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) equal_e19a62 root.Std_k98ojb.Logic.Equal {}\n                firstitem_038fce.item -> equal_e19a62.left\n                element_5f51f7 -> equal_e19a62.right\n                equal_e19a62.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> filter_f11fda.items\n        instance(x: 1504, y: -400) if_07b8c7 root.Std_k98ojb.Std.If {}\n        filter_f11fda.output_list -> if_07b8c7.input\n        firstitem_038fce.item -> if_07b8c7.then\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) first_item_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> first_item_038fce.list\n        instance(x: 933, y: 25) all_same_f11fda root.Std_k98ojb.Iteration.Find {\n            predicate: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) not_equal_2f9d09 root.Std_k98ojb.Logic.NotEqual {}\n                element_5f51f7 -> not_equal_2f9d09.left\n                first_item_038fce.item -> not_equal_2f9d09.right\n                not_equal_2f9d09.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> all_same_f11fda.items\n        instance(x: 1504, y: -400) if_e19a62 root.Std_k98ojb.Std.If {}\n        all_same_f11fda.item -> if_e19a62.input\n        execute_27b8c3 -> if_e19a62.execute\n        if_e19a62.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) first_item_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> first_item_038fce.list\n        instance(x: 933, y: 25) all_same_e19a62 root.Std_k98ojb.Iteration.Find {\n            predicate: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) not_equal_f9d09 root.Std_k98ojb.Logic.NotEqual {}\n                first_item_038fce.item -> not_equal_f9d09.left\n                element_5f51f7 -> not_equal_f9d09.right\n                not_equal_f9d09.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> all_same_e19a62.items\n        instance(x: 1504, y: -400) if_07b8c7 root.Std_k98ojb.Std.If {}\n        all_same_e19a62.item -> if_07b8c7.input\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        List.GenerateRange(0, List.Length(characters_6030c9.characters) - 1) -> Iteration.Map(items: List.GenerateRange(0, List.Length(characters_6030c9.characters) - 1), handler: func(in(x: 106, y: 17, name: \"index\") property(Number) index_f5f51f7, out(x: 382, y: 19, name: \"out\") property(String) out_d0fd24) { List.GetAt(characters_6030c9.characters, index_f5f51f7) -> out_d0fd24 })\n        Iteration.Map(items: List.GenerateRange(0, List.Length(characters_6030c9.characters) - 1), handler: func(in(x: 106, y: 17, name: \"index\") property(Number) index_f5f51f7, out(x: 382, y: 19, name: \"out\") property(String) out_d0fd24) { List.GetAt(characters_6030c9.characters, index_f5f51f7) -> out_d0fd24 }) -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        List.GenerateRange(0, 1) -> equals_f11fda.right\n        execute_27b8c3 -> characters_6030c9.execute\n        equals_f11fda.result -> out_f3db9f\n        equals_f11fda.result -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) first_item_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> first_item_038fce.list\n        instance(x: 933, y: 25) all_same_f11fda root.Std_k98ojb.Iteration.Find {\n            predicate: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) not_equal_2f9d09 root.Std_k98ojb.Logic.NotEqual {}\n                element_5f51f7 -> not_equal_2f9d09.left\n                first_item_038fce.item -> not_equal_2f9d09.right\n                not_equal_2f9d09.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> all_same_f11fda.items\n        instance(x: 1504, y: -400) if_e19a62 root.Std_k98ojb.Std.If {}\n        all_same_f11fda.item -> if_e19a62.input\n        execute_27b8c3 -> if_e19a62.execute\n        if_e19a62.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) first_item_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> first_item_038fce.list\n        instance(x: 933, y: 25) all_same_e19a62 root.Std_k98ojb.Iteration.Find {\n            predicate: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) not_equal_f9d09 root.Std_k98ojb.Logic.NotEqual {}\n                first_item_038fce.item -> not_equal_f9d09.left\n                element_5f51f7 -> not_equal_f9d09.right\n                not_equal_f9d09.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> all_same_e19a62.items\n        instance(x: 1504, y: -400) if_07b8c7 root.Std_k98ojb.Std.If {}\n        all_same_e19a62.item -> if_07b8c7.input\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        characters_6030c9.characters -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        characters_6030c9.characters -> equals_f11fda.right\n        execute_27b8c3 -> equals_f11fda.execute\n        equals_f11fda.result -> out_f3db9f\n        equals_f11fda.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1812, y: -319) and_80a119 root.Std_k98ojb.Logic.And {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> equals_f11fda.left\n        for_8cb3f6.index -> if_07b8c7.execute\n        List.GetAt(characters_6030c9.characters, 0) -> equals_f11fda.right\n        equals_f11fda.result -> and_80a119.left\n        for_8cb3f6.done -> and_80a119.right\n        and_80a119.result -> if_07b8c7.predicate\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> for_8cb3f6.next\n        execute_27b8c3 -> for_8cb3f6.reset\n        and_80a119.result -> out_f3db9f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        characters_6030c9.characters -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        1 -> equals_f11fda.right\n        equals_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) first_item_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> first_item_038fce.list\n        instance(x: 933, y: 25) all_same_f11fda root.Std_k98ojb.Iteration.Find {\n            predicate: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) not_equal_b720d7 root.Std_k98ojb.Logic.NotEqual {}\n                first_item_038fce.item -> not_equal_b720d7.left\n                element_5f51f7 -> not_equal_b720d7.right\n                not_equal_b720d7.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> all_same_f11fda.items\n        instance(x: 1504, y: -400) if_e19a62 root.Std_k98ojb.Std.If {}\n        all_same_f11fda.item -> if_e19a62.input\n        execute_27b8c3 -> if_e19a62.execute\n        if_e19a62.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n    }\n}"
            ],
            "37": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f4c0e5 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: lambda((x: Number) -> Boolean) { \n                Strings.IsNumeric(x.toString()) \n            }\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        \n        str_6b655b -> characters_f4c0e5.input\n        characters_f4c0e5.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f5c2e6 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: lambda((item: String), (index: Number)) => {\n                root.Std_k98ojb.Strings.IsNumeric(item)\n            }\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        str_6b655b -> characters_f5c2e6.input\n        characters_f5c2e6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_e3f475 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_numeric_handler\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        characters_e3f475.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> characters_e3f475.execute\n        characters_e3f475.done -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is numeric.\") is_numeric_handler {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"item\") property(String) item_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) is_numeric_e3f475 root.Std_k98ojb.Strings.IsNumeric {\n            input: item_6b655b\n        }\n        is_numeric_e3f475.result -> output_732a8a\n        execute_cdac2a -> is_numeric_e3f475.execute\n        is_numeric_e3f475.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: \"Logic.And( Strings.IsNumeric(it), true )\"\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n\n        str_6b655b -> characters_3d7de6.input\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f5c1e2 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: \"isNumeric\"\n        }\n        str_6b655b -> characters_f5c1e2.input\n        characters_f5c1e2.characters -> filter_96023e.items\n        instance(x: 656, y: -330) length_88bb8a root.Std_k98ojb.List.Length {}\n        filter_96023e.output_list -> length_88bb8a.list\n        length_88bb8a.length -> output_732a8a\n        execute_cdac2a -> characters_f5c1e2.execute\n        characters_f5c1e2.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_numeric_handler\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        \n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> characters_3d7de6.execute\n        characters_3d7de6.done -> continue_d9efd7\n\n        func(doc: \"checks if a character is numeric.\") is_numeric_handler {\n            in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n            in(x: -436, y: -213, name: \"c\") property(String) c_6b655b\n\n            out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n            out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n            instance(x: 80, y: -417) is_numeric_3d7de6 root.Std_k98ojb.Strings.IsNumeric {\n                input: c_6b655b\n            }\n            is_numeric_3d7de6.result -> output_732a8a\n            execute_cdac2a -> is_numeric_3d7de6.execute\n            is_numeric_3d7de6.done -> continue_d9efd7\n        }\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_e4b5e2 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: isNumeric\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n\n        str_6b655b -> characters_e4b5e2.input\n        characters_e4b5e2.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is numeric.\") isNumeric {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"char\") property(String) char_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) isNumeric_e4b5e2 root.Std_k98ojb.Strings.IsNumeric {}\n        char_6b655b -> isNumeric_e4b5e2.input\n        isNumeric_e4b5e2.result -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_numeric_5f2c1a\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        instance(x: 656, y: -330) is_numeric_5f2c1a root.Std_k98ojb.Strings.IsNumeric {}\n\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> characters_3d7de6.execute\n        characters_3d7de6.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_e4b5c2 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_f0f6d9 root.Iteration.Filter {\n            handler: is_numeric\n        }\n        instance(x: 97, y: -127) length_3a8e4c root.Std_k98ojb.List.Length {}\n\n        str_6b655b -> characters_e4b5c2.input\n        characters_e4b5c2.characters -> filter_f0f6d9.items\n        filter_f0f6d9.output_list -> length_3a8e4c.list\n        length_3a8e4c.length -> output_732a8a\n\n        func(doc: \"checks if a character is numeric.\") is_numeric {\n            in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n            in(x: -436, y: -213, name: \"char\") property(String) char_6b655b\n\n            out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n            out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n            instance(x: 80, y: -417) is_numeric_e4b5c2 root.Std_k98ojb.Strings.IsNumeric {}\n            char_6b655b -> is_numeric_e4b5c2.input\n            is_numeric_e4b5c2.result -> output_732a8a\n        }\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f5c1e3 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_e4f2c9 root.Iteration.Filter {\n            handler: lambda(item: \"char\", index: \"index\") -> item.match(/\\d/)\n        }\n        str_6b655b -> characters_f5c1e3.input\n        characters_f5c1e3.characters -> filter_e4f2c9.items\n        instance(x: 656, y: -330) length_88bb8a root.Std_k98ojb.List.Length {}\n        filter_e4f2c9.output_list -> length_88bb8a.list\n        length_88bb8a.length -> output_732a8a\n        execute_cdac2a -> characters_f5c1e3.execute\n        characters_f5c1e3.done -> continue_d9efd7\n    }\n}"
            ],
            "38": [
                "instance(x: 100, y: 100) iteration_3c0f17 root.Iteration.Reduce {\n    handler: func(a: 0, b: 1) => Math.Pow(b, 4) + a,\n    items: List.GenerateRange(from: 1, to: n),\n    context: null\n}\ninstance(x: 200, y: 100) list_get_at_2f3d15 root.List.GetAt {\n    index: 0,\n    list: iteration_3c0f17.output_list\n}\ninstance(x: 300, y: 100) math_pow_f892a4 root.Math.Pow {\n    x: list_get_at_2f3d15.item,\n    y: 2\n}\ninstance(x: 400, y: 100) iteration_filter_dae1e6 root.Iteration.Filter {\n    handler: func(a: 0) => a % 2 == 1,\n    items: List.GenerateRange(from: 1, to: n)\n}\niteration_filter_dae1e6.output_list -> iteration_3c0f17.items",
                "instance(x: 23, y: -1) Std_For_4b2a5e root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116 * 2, step: 2)\n}\ninstance(x: 118, y: 136) Math.Pow_51f964 root.Std_k98ojb.Math.Pow {\n    x: Std_For_4b2a5e.item\n    y: 4\n}\ninstance(x: 303, y: 2) Math.Add_64046c root.Std_k98ojb.Math.Add {\n    first: sum_365f7b\n    second: Math.Pow_51f964.result\n}\nStd_For_4b2a5e.on_item -> Math.Pow_51f964\nMath.Pow_51f964 -> Math.Add_64046c\nMath.Add_64046c.result -> sum_365f7b",
                "instance(x: 219, y: 55) Std_For_1 root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116 * 2, step: 2)\n}\ninstance(x: 571, y: 7) Math_Pow_2 root.Std_k98ojb.Math.Pow {\n    x: Std_For_1.item\n    y: 4\n}\ninstance(x: 303, y: 2) Math_Add_3 root.Std_k98ojb.Math.Add {\n    first: sum_365f7b\n    second: Math_Pow_2.result\n}\nStd_For_1.on_item -> Math_Pow_2.x\nMath_Pow_2.result -> Math_Add_3.second\nMath_Add_3.result -> sum_365f7b",
                "instance(x: 23, y: -1) count_3a3116 root.Std_k98ojb.Std.Count {}\ninstance(x: 12, y: 136) for_2d6da6 root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116)\n}\ninstance(x: 303, y: 2) mathpow_64046c root.Std_k98ojb.Math.Pow {}\ninstance(x: 118, y: -26) mul_f892a4 root.Std_k98ojb.Math.Mul {}\ndata_instance(x: 330, y: 133) data_cde0dc  = 4\nmathpow_64046c.first: for_2d6da6.item\nmathpow_64046c.y: data_cde0dc\nmul_f892a4.first: mathpow_64046c.result\nmul_f892a4.second: count_3a3116.count\ncount_3a3116.count -> sum_365f7b\nfor_2d6da6.trigger: n_3a3116",
                "instance(x: 23, y: -1) Std_For_4b2a5e root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116 + 1)\n}\ninstance(x: 118, y: 135) Math.Pow_71f45d root.Std_k98ojb.Math.Pow {\n    x: Math_Mul_4c9e15.result\n    y: 4\n}\ninstance(x: 12, y: 136) Math_Mul_4c9e15 root.Std_k98ojb.Math.Mul {\n    first: Std_For_4b2a5e.item\n    second: 2\n}\ninstance(x: 303, y: 2) Math_Sub_64046c root.Std_k98ojb.Math.Sub {\n    first: Math_Mul_4c9e15.result\n    second: 1\n}\ninstance(x: 571, y: 7) sum_365f7b property(Number)\ninstance(x: 23, y: -1) n_3a3116 property(Number)\nStd_For_4b2a5e.on_item -> Math_Sub_64046c\nMath_Sub_64046c.result -> Math_Pow_71f45d\nMath_Pow_71f45d.result -> sum_365f7b",
                "instance(x: 118, y: -26) iteration_reduce_9dcc3d root.Std_k98ojb.Iteration.Reduce {\n    items: List.GenerateRange { from: 1, to: n }\n    handler: Math.Pow { x: item, y: 4 }\n}\n\ninstance(x: 23, y: -1) list_generate_range_f892a4 root.Std_k98ojb.List.GenerateRange {\n    from: 1\n    to: n\n}\ninstance(x: 12, y: 136) math_pow_2d6da6 root.Std_k98ojb.Math.Pow {\n    x: item\n    y: 4\n}\n\ninstance(x: 303, y: 2) iteration_map_64046c root.Std_k98ojb.Iteration.Map {\n    items: list_generate_range_f892a4\n    handler: math_pow_2d6da6\n}\niteration_reduce_9dcc3d.result -> sum",
                "instance(x: 23, y: -1) count_4d2f7b root.Std_k98ojb.Std.Count {}\ninstance(x: 12, y: 136) for_f892a4 root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n)\n}\ninstance(x: 303, y: 2) mathpow_64046c root.Std_k98ojb.Math.Pow {}\ninstance(x: 118, y: -26) mathmul_9dcc3d root.Std_k98ojb.Math.Mul {}\ndata_instance(x: 330, y: 133) data_cde0dc = 4\nmathpow_64046c.x: for_f892a4.item\nmathpow_64046c.y: data_cde0dc\nmathmul_9dcc3d.first: mathpow_64046c.result\nmathmul_9dcc3d.second: count_4d2f7b.count\ncount_4d2f7b.reset: for_f892a4.done\nfor_f892a4.trigger: n",
                "instance(x: 114, y: 134) iteration_7c9f42 root.Iteration.Reduce {\n    instance(x: 23, y: 83) math_pow_f35a4e root.Math.Pow {}\n    data_instance(x: 330, y: 133) data_cde0dc  = 4\n    math_pow_f35a4e.y -> data_cde0dc\n    iteration_7c9f42.handler -> math_pow_f35a4e.x\n    instance(x: 12, y: 136) expression_2d6da6 root.Math.Expression {\n        expression: \"2*n-1\"\n    }\n    expression_2d6da6.result -> math_pow_f35a4e.x\n    iteration_7c9f42.initial -> data_instance(x: 55, y: 24) data_b6b5e3 = 0\n    instance(x: 303, y: 2) add_e48e34 root.Math.Add {}\n    add_e48e34.first -> iteration_7c9f42.accumulator\n    math_pow_f35a4e.result -> add_e48e34.second\n    iteration_7c9f42.handler -> add_e48e34\n    instance(x: 114, y: -26) list_generate_range_3b5c11 root.List.GenerateRange {\n        data_instance(x: 1, y: 23) data_afeadb = 1\n        data_instance(x: 55, y: 24) data_b6b5e3 = 10\n        data_afeadb -> list_generate_range_3b5c11.from\n        data_b6b5e3 -> list_generate_range_3b5c11.to\n    }\n    iteration_7c9f42.items -> list_generate_range_3b5c11\n    expression_2d6da6.gen_0 -> iteration_7c9f42.index\n}",
                "instance(x: 23, y: -1) for_2e3f95 root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n)\n}\ninstance(x: 118, y: 136) mathpow_f892a4 root.Std_k98ojb.Math.Pow {\n    x: for_2e3f95.item\n    y: 4\n}\ninstance(x: 303, y: 2) sum_64046c root.Std_k98ojb.Iteration.Reduce {\n    item: mathpow_f892a4.result\n    handler: lambda(acc, current) => acc + current\n}\nfor_2e3f95.trigger -> for_2e3f95.trigger\nsum_64046c.result -> result",
                "instance(x: 100, y: 100) iteration_reduce_6b7c16 root.Std_k98ojb.Iteration.Reduce {\n    handler: \"Math.Pow\"\n}\ndata_instance(x: 200, y: 150) data_4a2e46 = 4\ninstance(x: 50, y: 50) list_generate_range_e8f9d5 root.Std_k98ojb.List.GenerateRange {\n    from: 1\n    to: \"n\"\n}\ndata_instance(x: 250, y: 100) data_6a9513 = 2\ninstance(x: 150, y: 50) iteration_map_f46c16 root.Std_k98ojb.Iteration.Map {\n    handler: \"Math.Mul\"\n}\niteration_reduce_6b7c16.handler_second -> data_4a2e46\nlist_generate_range_e8f9d5.from -> data_6a9513\niteration_map_f46c16.handler_first -> list_generate_range_e8f9d5\niteration_map_f46c16.handler_second -> data_6a9513\niteration_reduce_6b7c16.input_list -> iteration_map_f46c16.output_list"
            ],
            "46": [
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { \n    expression: \"6 * x^2\"\n}\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) Math_Mul_6d8f2c root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_31e4a5 root.Math.Mul {}\n6 -> Math_Mul_6d8f2c.first\nin(x: 0, y: 0, name: \"side\") property(Number) side_9f44b7 -> Math_Mul_6d8f2c.second\nside_9f44b7 -> Math_Mul_31e4a5.first\nside_9f44b7 -> Math_Mul_31e4a5.second\nMath_Mul_31e4a5.result -> Math_Mul_6d8f2c.second\nout(x: 300, y: 100, name: \"surface_area\") property(Number) surface_area_f0b3a1\nMath_Mul_6d8f2c.result -> surface_area_f0b3a1",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { expression: \"6 * x^2\" }\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) Math_Mul_6 root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_7 root.Math.Mul {}\n6 -> Math_Mul_6.first\ninstance(x: 0, y: 0) size_8 root.Std.Input { \n    name: \"size\"\n}\nsize_8 -> Math_Mul_6.second\nMath_Mul_6.result -> Math_Mul_7.first\nsize_8 -> Math_Mul_7.second\nMath_Mul_7.result",
                "instance(x: 100, y: 100) Math_Mul_6d8f2c root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_31e415 root.Math.Mul {}\n6 -> Math_Mul_6d8f2c.first\nin(x: 0, y: 0, name: \"side\") property(Number) side_71a3b5 -> Math_Mul_6d8f2c.second\nside_71a3b5 -> Math_Mul_31e415.first\nside_71a3b5 -> Math_Mul_31e415.second\nMath_Mul_31e415.result -> Math_Mul_6d8f2c.second\nout(x: 300, y: 100, name: \"surfaceArea\") property(Number) surfaceArea_38d92e\nMath_Mul_6d8f2c.result -> surfaceArea_38d92e",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { expression: \"6 * x^2\" }\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) Math_Mul_6 root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_7 root.Math.Mul {}\n6 -> Math_Mul_6.first\ninstance(x: 0, y: 0) size_5 root.Std.Input { name: \"size\" }\nsize_5 -> Math_Mul_6.second\nMath_Mul_6.result -> Math_Mul_7.first\nsize_5 -> Math_Mul_7.second\ninstance(x: 300, y: 100) result_8 root.Std.Output { name: \"surface area\" }\nMath_Mul_7.result -> result_8",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { expression: \"6 * x^2\" }\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) Math_Mul_6 root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_7 root.Math.Mul {}\n6 -> Math_Mul_6.first\ninstance(x: 0, y: 0) size_5 root.Std.Input { \n    name: \"size\"\n}\nsize_5 -> Math_Mul_6.second\nMath_Mul_6.result -> Math_Mul_7.first\nsize_5 -> Math_Mul_7.second\nMath_Mul_7.result -> root.Output",
                "instance(x: 100, y: 100) Math_Mul_6d8f1c root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_3b9e88 root.Math.Mul {}\n6 -> Math_Mul_6d8f1c.first\nin(x: 0, y: 0, name: \"side\") property(Number) side_39a04d -> Math_Mul_6d8f1c.second\nMath_Mul_6d8f1c.result -> Math_Mul_3b9e88.first\nside_39a04d -> Math_Mul_3b9e88.second\nout(x: 300, y: 100, name: \"surfaceArea\") property(Number) surfaceArea_7f4442\nMath_Mul_3b9e88.result -> surfaceArea_7f4442"
            ],
            "19": [
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max {\n  items: List.GenerateRange { from: 1, to: 10 }\n} -> Math.Sub {\n  first: List.Max { items: List.GenerateRange { from: 1, to: 10 } }\n  second: List.Min { items: List.GenerateRange { from: 1, to: 10 } }\n} -> result",
                "List.Max(max_list: items) max_node \nList.Min(min_list: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max {\n  items: input_list\n} max_node\n\nList.Min {\n  items: input_list\n} min_node\n\nMath.Sub {\n  first: max_node.max\n  second: min_node.min\n} sub_node\n\nsub_node.result -> output",
                "List.Max(max_list: items) max_node\nList.Min(min_list: items) min_node\nMath.Sub(first: max_node.max, second: min_node.min) sub_node\nout(x: 159, y: -219, name: \"difference\") property(Number) difference_ai\nsub_node.result -> difference_ai",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_list: items) max_node\nList.Min(min_list: items) min_node\nMath.Sub(first: max_node.max, second: min_node.min) sub_node\nout(x: 159, y: -219, name: \"difference\") property(Number) difference_ai\nsub_node.result -> difference_ai",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node"
            ],
            "22": [
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}\ninput_number -> value\nresult -> left",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n        value: input_number\n        divisor: 2\n    }\n    instance(x: 200, y: 100) logic_equal Logic.Equal {\n        left: math_modulo.result\n        right: 0\n    }\n    logic_equal.result -> is_even",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n}\ninstance(x: 200, y: 100) logic_equal Logic.Equal {\n    left: math_modulo.result\n    right: 0\n}\nin(x: 50, y: 150) property(Number) number\nnumber -> math_modulo.value\nmath_modulo.divisor: 2",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n        value: input_number\n        divisor: 2\n    }\n    instance(x: 200, y: 100) logic_equal Logic.Equal {\n        left: math_modulo.result\n        right: 0\n    }\n    logic_equal.result -> is_even",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n}\ninstance(x: 200, y: 100) logic_equal Logic.Equal {\n    left: math_modulo.result\n    right: 0\n}\nmath_modulo.divisor -> 2\nin(x: 50, y: 100) number property(Number) number\nnumber -> math_modulo.value\nout(x: 300, y: 100) is_even property(Bool) is_even\nlogic_equal.result -> is_even",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n}\ninstance(x: 200, y: 100) logic_equal Logic.Equal {\n    left: math_modulo.result\n    right: 0\n}\nmath_modulo.divisor -> 2\nin(x: 50, y: 100) number property(Number) number\n\nnumber -> math_modulo.value",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}"
            ],
            "23": [
                "instance(x: 100, y: 100) iteration_find_5e3f1a root.Iteration.Find {}\niteration_find_5e3f1a.items = Strings.Characters(input).characters\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_f4c0d2\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_6a63e7\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Strings.Contains {}\n    strings_contains_1088d5.input = Strings.Slice(input, 0, List.GetAt(List.GenerateRange(0, List.Length(Strings.Characters(input).characters)), iteration_find_5e3f1a.index)).slice\n    char_f4c0d2 -> strings_contains_1088d5.contains\n    strings_contains_1088d5.result -> bool_6a63e7\n} -> iteration_find_5e3f1a.predicate\niteration_find_5e3f1a.item -> result",
                "instance(x: 100, y: 100) iteration_find_1 root.Iteration.Find {}\niteration_find_1.items = Strings.Characters(input).characters\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Strings.Contains {}\n    Strings.Slice(input, 0, List.GetAt(Strings.Characters(input).characters, iteration_find_1.index - 1)) -> strings_contains_1088d5.input\n    char_9f6850 -> strings_contains_1088d5.contains\n    strings_contains_1088d5.result -> bool_af09a7\n} -> iteration_find_1.predicate\niteration_find_1.item -> result",
                "instance(x: 100, y: 100) Std_For_1 root.Std.For {}\ninstance(x: 200, y: 100) Strings_Characters_2 root.Strings.Characters {}\nStrings_Characters_2 -> Std_For_1.items\ninstance(x: 300, y: 150) Iteration_Find_3 root.Iteration.Find {}\nfunc() {\n    in(x: -113, y: 34, name: \"elem\") property(String) elem_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) List Contains_1088d5 root.List.Contains {}\n    Std_For_1.listWithItem -> List Contains_1088d5.list\n    elem_9f6850 -> List Contains_1088d5.item\n    List Contains_1088d5.result -> bool_af09a7\n} -> Iteration_Find_3.predicate\nStd_For_1.on item -> Iteration_Find_3.items\ninstance(x: 400, y: 100) input_4 root.Std.Input {}\ninput_4 -> Strings_Characters_2.input\nIteration_Find_3.item -> output",
                "instance(x: 100, y: 100) characters_1 root.Std_k98ojb.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_2 root.Std_k98ojb.Iteration.Find {}\ncharacters_1.characters -> iteration_2.items\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) contains_1088d5 root.Std_k98ojb.Strings.Contains {}\n    instance(x: 310, y: 35) slice_807ffd root.Std_k98ojb.List.Slice {}\n    iteration_2.index -> slice_807ffd.start\n    iteration_2.index -> slice_807ffd.end\n    characters_1.characters -> slice_807ffd.list\n    char_9f6850 -> contains_1088d5.contains\n    slice_807ffd.slice -> contains_1088d5.input\n    contains_1088d5.result -> bool_af09a7\n} -> iteration_2.predicate\niteration_2.item",
                "instance(x: 100, y: 100) iteration_find_1 root.Iteration.Find {}\niteration_find_1.items = Strings.Characters(input).characters\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Strings.Contains {}\n    Strings.Slice(input, 0, List.GetAt(Strings.Characters(input).characters, iteration_find_1.index - 1)) -> strings_contains_1088d5.input\n    char_9f6850 -> strings_contains_1088d5.contains\n    strings_contains_1088d5.result -> bool_af09a7\n} -> iteration_find_1.predicate\niteration_find_1.item -> result",
                "instance(x: 100, y: 100) characters_1 root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_2 root.Iteration.Find {}\ncharacters_1 -> iteration_2.items\ninstance(x: 500, y: 150) seen_3 root.List.Empty {}\niteration_2.predicate = func() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) contains_1088d5 root.List.Contains {}\n    seen_3 -> contains_1088d5.list\n    char_9f6850 -> contains_1088d5.item\n    contains_1088d5.result -> bool_af09a7\n}\niteration_2.handler = func() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    seen_3 -> List.Add.list\n    char_9f6850 -> List.Add.item\n    List.Add.result -> seen_3\n}\niteration_2.item -> result",
                "instance(x: 100, y: 100) characters_9f6850 root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_6d05b0 root.Iteration.Find {}\ncharacters_9f6850.characters -> iteration_6d05b0.items\ninstance(x: 500, y: 150) seen_f47a5e root.List.Empty {}\ninstance(x: 700, y: 200) check_807ffd root.Std.IfExpression {\n    expression: \"seen.Contains(char)\"\n}\niteration_6d05b0.item -> check_807ffd.char\ncheck_807ffd.value -> iteration_6d05b0.predicate\ninstance(x: 900, y: 250) add_to_seen_1088d5 root.List.Add {}\nadd_to_seen_1088d5.listWithItem -> seen_f47a5e\niteration_6d05b0.item -> add_to_seen_1088d5.item\nseen_f47a5e -> add_to_seen_1088d5.list\ncheck_807ffd.then -> add_to_seen_1088d5.trigger\niteration_6d05b0.item -> check_807ffd.seen",
                "instance(x: 100, y: 100) characters_1 root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_2 root.Iteration.Find {}\ncharacters_1 -> iteration_2.items\ninstance(x: 500, y: 150) seen_3 root.List.Empty {}\niteration_2.predicate = func() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) contains_1088d5 root.List.Contains {}\n    seen_3 -> contains_1088d5.list\n    char_9f6850 -> contains_1088d5.item\n    contains_1088d5.result -> bool_af09a7\n}\niteration_2.handler = func() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    seen_3 -> List.Add.list\n    char_9f6850 -> List.Add.item\n} -> List.Add\nList.Add.listWithItem -> seen_3\niteration_2.item -> result",
                "instance(x: 100, y: 100) Std_For_1 root.Std.For {}\ninstance(x: 200, y: 150) Strings_Characters_2 root.Strings.Characters {}\nStrings_Characters_2 -> Std_For_1.items\ninstance(x: 250, y: 200) Iteration_Find_3 root.Iteration.Find {}\ninstance(x: 300, y: 250) Logic_NotEqual_4 root.Logic.NotEqual {}\ninstance(x: 350, y: 300) List_GetAt_5 root.List.GetAt {}\nList_GetAt_5 -> Logic_NotEqual_4.left\nStd_For_1.item -> List_GetAt_5.index\nStrings_Characters_2.characters -> List_GetAt_5.list\nStd_For_1.item -> Logic_NotEqual_4.right\nLogic_NotEqual_4.result -> Iteration_Find_3.predicate\nStrings_Characters_2.characters -> Iteration_Find_3.items\ninstance(x: 400, y: 350) input_6 property(String) {}\ninput_6 -> Strings_Characters_2.input\ninstance(x: 450, y: 400) result_7 property(String) {}\nIteration_Find_3.item -> result_7",
                "instance(x: 100, y: 100) iteration_find_6d05b0 root.Iteration.Find {}\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n\n    instance(x: 89, y: 29) list_contains_e48b95 root.List.Contains {}\n    in(x: -140, y: -20, name: \"list\") property(List) list_f5c1d4\n    iteration_find_6d05b0.context -> list_f5c1d4\n    char_9f6850 -> list_contains_e48b95.item\n    list_contains_e48b95.result -> bool_af09a7\n} -> iteration_find_6d05b0.predicate\n\ninstance(x: 300, y: 100) strings_characters_50e2c3 root.Strings.Characters {}\nin(x: -200, y: 0, name: \"string\") property(String) string_b9d8f1\nstring_b9d8f1 -> strings_characters_50e2c3.input\nstrings_characters_50e2c3.characters -> iteration_find_6d05b0.items\n\nout(x: 600, y: 100, name: \"char\") property(String) char_e48a95\niteration_find_6d05b0.item -> char_e48a95"
            ],
            "35": [
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(input: items) -> sorted_items\nList.GetAt(index: 1, list: sorted_items) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(input: items) -> sorted_items\nList.GetAt(index: 1, list: sorted_items) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(input: items) -> sorted_items\nList.GetAt(index: 1, list: sorted_items) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_1_shot",
        "best_params_optimization": "semantic",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 75,
        "n_generations_per_task": 10,
        "model": "llama3.3:70b-instruct-fp16",
        "largest_context": 3925,
        "task_candidates": {
            "7": [
                "instance(x: 100, y: 100) SetsIntersection_9f2e7a root.Sets.Intersection {}\nin(x: -200, y: 0, name: \"list1\") property(List) list1 -> SetsIntersection_9f2e7a.left\nin(x: 0, y: 0, name: \"list2\") property(List) list2 -> SetsIntersection_9f2e7a.right\n\ninstance(x: 300, y: 100) ListIsEmpty_e72c67 root.List.IsEmpty {}\nSetsIntersection_9f2e7a.intersect -> ListIsEmpty_e72c67.list\n\ninstance(x: 500, y: 100) LogicNot_71d8b5 root.Logic.Not {}\nListIsEmpty_e72c67.isEmpty -> LogicNot_71d8b5.input\nout(x: 700, y: 100, name: \"result\") property(Boolean) result <- LogicNot_71d8b5.output",
                "instance(x: 100, y: 100) List.Contains_4a2c11 root.Std_k98ojb.List.Contains {}\ninstance(x: 200, y: 100) Iteration.Map_b5f21e root.Std_k98ojb.Iteration.Map {}\nList.Contains_4a2c11.item -> Iteration.Map_b5f21e.handler\nin(x: 0, y: 0, name: \"list1\") property(List) list1_e8d41a\nin(x: 100, y: 0, name: \"list2\") property(List) list2_4c9b7a\nlist2_4c9b7a -> Iteration.Map_b5f21e.items\ninstance(x: 300, y: 100) Logic.Or_f81c22 root.Std_k98ojb.Logic.Or {}\nIteration.Map_b5f21e.output_list -> Logic.Or_f81c22.left\nout(x: 400, y: 100, name: \"result\") property(Boolean) result_4a2c11\nLogic.Or_f81c22.result -> result_4a2c11\nfunc() {\n    in(x: -231, y: -69, name: \"item\") property(Any) item_e245cb\n    out(x: 245, y: -54, name: \"result\") property(Boolean) result_e245cb\n    instance(x: -8, y: -53) List.Contains_9f6c95 root.Std_k98ojb.List.Contains {}\n    list1_e8d41a -> List.Contains_9f6c95.list\n    item_e245cb -> List.Contains_9f6c95.item\n    List.Contains_9f6c95.contains -> result_e245cb\n} -> Iteration.Map_b5f21e.handler",
                "instance(x: 100, y: 100) sets_difference_1 root.Sets.Difference {}\ninstance(x: 200, y: 100) logic_not_2 root.Logic.Not {}\ninstance(x: 300, y: 100) list_empty_3 root.List.Empty {}\ninstance(x: 400, y: 100) iteration_find_4 root.Iteration.Find {}\ninstance(x: 500, y: 100) query_filter_5 root.Query.Filter {}\n\nin(x: 0, y: 0, name: \"list1\") property(List) list1\nin(x: 50, y: 0, name: \"list2\") property(List) list2\n\nout(x: 600, y: 100, name: \"result\") property(Boolean) result\n\nlist1 -> query_filter_5.items\nlist2 -> query_filter_5.where\nquery_filter_5.result -> sets_difference_1.left\nlist_empty_3.list -> sets_difference_1.right\nsets_difference_1.intersect -> iteration_find_4.items\niteration_find_4.item -> logic_not_2.input\nlogic_not_2.output -> result",
                "instance(x: 100, y: 100) Sets.Intersection_9c0b4a root.Std_k98ojb.Sets.Intersection {}\nin(x: -200, y: 100, name: \"list1\") property(List) list1_e3f8d7 -> Sets.Intersection_9c0b4a.left\nin(x: -100, y: 100, name: \"list2\") property(List) list2_a8d5e6 -> Sets.Intersection_9c0b4a.right\ninstance(x: 200, y: 100) List.IsEmpty_b5a1f3 root.Std_k98ojb.List.IsEmpty {}\nSets.Intersection_9c0b4a.intersect -> List.IsEmpty_b5a1f3.list\nin(x: 300, y: 100, name: \"result\") property(Bool) result_f7e8d2\nList.IsEmpty_b5a1f3.isEmpty -> result_f7e8d2",
                "instance(x: 100, y: 100) list1_6a5f7d root.Std_k98ojb.List.IsEmpty {}\ninstance(x: 200, y: 100) list2_f46a8e root.Std_k98ojb.List.IsEmpty {}\ninstance(x: 300, y: 100) not_empty_3c9b24 root.Std_k98ojb.Logic.Not {}\nlist1_6a5f7d.isEmpty -> not_empty_3c9b24.input\ninstance(x: 400, y: 100) not_empty_list2_e92e95 root.Std_k98ojb.Logic.Not {}\nlist2_f46a8e.isEmpty -> not_empty_list2_e92e95.input\ninstance(x: 500, y: 100) and_5f4c21 root.Std_k98ojb.Logic.And {}\nnot_empty_3c9b24.output -> and_5f4c21.left\nnot_empty_list2_e92e95.output -> and_5f4c21.right\ninstance(x: 600, y: 100) for_8d94fc root.Std_k98ojb.Std.For {}\nand_5f4c21.output -> for_8d94fc.trigger\nlist1_6a5f7d.list -> for_8d94fc.items\ninstance(x: 700, y: 100) contains_d9d8a3 root.Std_k98ojb.List.Contains {}\nfor_8d94fc.item -> contains_d9d8a3.item\nlist2_f46a8e.list -> contains_d9d8a3.list\ncontains_d9d8a3.output -> for_8d94fc.done",
                "instance(x: 100, y: 100) List.Contains_5c4a3d root.Std_k98ojb.List.Contains {}\ninstance(x: 200, y: 100) Iteration.Find_9f2e55 root.Std_k98ojb.Iteration.Find {}\nList.Contains_5c4a3d.item -> Iteration.Find_9f2e55.predicate\nin(x: 0, y: 0, name: \"list1\") property(List) list1_e4a52e\nin(x: 100, y: 0, name: \"list2\") property(List) list2_afe3c8\nlist1_e4a52e -> Iteration.Find_9f2e55.items\nlist2_afe3c8 -> List.Contains_5c4a3d.list\nout(x: 300, y: 100, name: \"result\") property(Boolean) result_47a321\nIteration.Find_9f2e55.item -> List.Contains_5c4a3d.item\nList.Contains_5c4a3d.contains -> result_47a321",
                "instance(x: 100, y: 100) List.Contains_7a85e2 root.Std_k98ojb.List.Contains {}\ninstance(x: 200, y: 100) Iteration.Map_bf9c81 root.Std_k98ojb.Iteration.Map {}\nList.Contains_7a85e2.item -> Iteration.Map_bf9c81.handler\nin(x: 0, y: 0, name: \"list1\") property(List) list1_e4d9a5\nin(x: 100, y: 0, name: \"list2\") property(List) list2_6c2e44\nlist2_6c2e44 -> Iteration.Map_bf9c81.items\nlist1_e4d9a5 -> List.Contains_7a85e2.list\nout(x: 300, y: 100, name: \"result\") property(Boolean) result_39f12b\ninstance(x: 250, y: 150) Logic.Or_3c9418 root.Std_k98ojb.Logic.Or {}\nIteration.Map_bf9c81.output_list -> Logic.Or_3c9418.left\nLogic.Or_3c9418.result -> result_39f12b",
                "instance(x: 100, y: 100) sets_intersection_1 root.Sets.Intersection {}\ninstance(x: 200, y: 100) list1_f2e7a4 property(List) \ninstance(x: 300, y: 100) list2_6c3d31 property(List) \nlist1_f2e7a4 -> sets_intersection_1.left\nlist2_6c3d31 -> sets_intersection_1.right\ninstance(x: 400, y: 100) logic_not_5b8f12 root.Logic.Not {}\ninstance(x: 500, y: 100) list_is_empty_f9e5a7 root.List.IsEmpty {}\nsets_intersection_1.intersect -> list_is_empty_f9e5a7.list\nlist_is_empty_f9e5a7.isEmpty -> logic_not_5b8f12.input",
                "instance(x: 100, y: 100) list1_6c0d5a root.Std_k98ojb.List.Empty {}\ninstance(x: 200, y: 100) list2_afe531 root.Std_k98ojb.List.Empty {}\n\nfunc() has_common_element {\n    in(x: -173, y: -181, name: \"list1\") property(List) list1_1f846b\n    in(x: -181, y: -13, name: \"list2\") property(List) list2_c62075\n\n    out(x: 784, y: -110, name: \"result\") property(Boolean) result_e245cb\n\n    instance(x: 133, y: -131) iteration_201051 root.Std_k98ojb.Iteration.Find {}\n    list1_1f846b -> iteration_201051.items\n    func() {\n        in(x: -231, y: -69, name: \"item\") property(Any) item_42bc6f\n\n        out(x: 245, y: -54, name: \"result\") property(Boolean) result_e245cb\n\n        instance(x: -8, y: -53) contains_4e8c54 root.Std_k98ojb.List.Contains {}\n        list2_c62075 -> contains_4e8c54.list\n        item_42bc6f -> contains_4e8c54.item\n        contains_4e8c54.result -> result_e245cb\n    } -> iteration_201051.predicate\n    iteration_201051.found -> result_e245cb\n}\n\ninstance(x: 300, y: 100) has_common_element_6c0d5a root.main.has_common_element {}\nlist1_6c0d5a -> has_common_element_6c0d5a.list1_1f846b\nlist2_afe531 -> has_common_element_6c0d5a.list2_c62075",
                "instance(x: 100, y: 100) list1_1f846b root.Std_k98ojb.List.Empty {}\ninstance(x: 200, y: 100) list2_c62075 root.Std_k98ojb.List.Empty {}\n\ninstance(x: 150, y: 150) intersection_d8d3e4 root.Sets.Intersection {}\nlist1_1f846b -> intersection_d8d3e4.left\nlist2_c62075 -> intersection_d8d3e4.right\n\ninstance(x: 250, y: 200) is_not_empty_f0a7c9 root.List.NotEmpty {}\nintersection_d8d3e4.intersect -> is_not_empty_f0a7c9.list"
            ],
            "11": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e65f11 root.Std_k98ojb.List.Sort {}\n        instance(x: 375, y: -207, name: \"check for consecutive numbers\") reduce_2c0e7a root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e65f11.list\n        sort_e65f11.sorted_list -> reduce_2c0e7a.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_f4851d\n            in(x: -23, y: 79, name: \"current\") property(Number) current_d8b4f5\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_2c0e7a\n\n            instance(x: 226, y: 56) substract_e3d9a1 root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_f4851d root.Std_k98ojb.Logic.Equal {}\n            instance(x: 246, y: -209, name: \"get previous number\") get_at_7c95e2 root.Std_k98ojb.List.GetAt {}\n            reduce_2c0e7a.index -> get_at_7c95e2.index\n            sort_e65f11.sorted_list -> get_at_7c95e2.list\n            1 -> substract_e3d9a1.first\n            get_at_7c95e2.item -> substract_e3d9a1.second\n            current_d8b4f5 -> equal_f4851d.right\n            substract_e3d9a1.result -> equal_f4851d.left\n            acc_f4851d -> output_2c0e7a\n            equal_f4851d.result -> output_2c0e7a\n        } -> reduce_2c0e7a.handler\n        true -> reduce_2c0e7a.initial_value\n        reduce_2c0e7a.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e6a2c7 root.Std_k98ojb.List.Sort {}\n        instance(x: 434, y: -207, name: \"check each pair of numbers\") reduce_d45981 root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e6a2c7.list\n        sort_e6a2c7.sorted_list -> reduce_d45981.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_f46f12\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) substract_c76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) not_equal_7836b4 root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 631, y: -23) and_1c9f65 root.Std_k98ojb.Logic.And {}\n            1 -> substract_c76d2b.second\n            current_769593 -> substract_c76d2b.first\n            not_equal_7836b4.right -> 0\n            acc_f46f12 -> and_1c9f65.left\n            not_equal_7836b4.result -> and_1c9f65.right\n            not_equal_7836b4.left -> substract_c76d2b.result\n            and_1c9f65.result -> output_efbc78\n        } -> reduce_d45981.handler\n        true -> reduce_d45981.initial_value\n        reduce_d45981.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -194, name: \"sort the list\") sort_e64c7a root.Std_k98ojb.List.Sort {}\n        instance(x: 373, y: -201, name: \"check if consecutive\") reduce_9e3f1a root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e64c7a.list\n        sort_e64c7a.sorted_list -> reduce_9e3f1a.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_170471\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n            in(x: -10, y: 130, name: \"index\") property(Number) index_24c2a6\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) subtract_f4e5b3 root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_7836b4 root.Std_k98ojb.Logic.Equal {}\n            instance(x: 631, y: -13) get_at_e8c7a2 root.Std_k98ojb.List.GetAt {}\n            list_07cae4 -> get_at_e8c7a2.list\n            index_24c2a6 -> get_at_e8c7a2.index\n            subtract_f4e5b3.result -> equal_7836b4.left\n            1 -> subtract_f4e5b3.second\n            current_769593 -> subtract_f4e5b3.first\n            get_at_e8c7a2.item -> equal_7836b4.right\n            equal_7836b4.result -> output_efbc78\n            acc_170471 -> output_efbc78\n        } -> reduce_9e3f1a.handler\n        true -> reduce_9e3f1a.initial_value\n        reduce_9e3f1a.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_f46a51 root.Std_k98ojb.List.Sort {}\n        instance(x: 434, y: -207, name: \"check each pair of numbers\") iteration_9e4c1f root.Std_k98ojb.Iteration.Filter {}\n        list_07cae4 -> sort_f46a51.list\n        sort_f46a51.sorted_list -> iteration_9e4c1f.items\n        func() {\n            in(x: -30, y: -25, name: \"current\") property(Number) current_170471\n            in(x: -23, y: 79, name: \"index\") property(Number) index_769593\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56, name: \"get next number\") get_next_f75a2b root.Std_k98ojb.List.GetAt {}\n            instance(x: 463, y: 51, name: \"check if numbers are consecutive\") not_equal_7836b4 root.Std_k98ojb.Logic.NotEqual {}\n            iteration_9e4c1f.items -> get_next_f75a2b.list\n            index_769593 -> get_next_f75a2b.index\n            1 -> get_next_f75a2b.index_offset\n            not_equal_7836b4.result -> output_efbc78\n            current_170471 -> not_equal_7836b4.left\n            get_next_f75a2b.item -> not_equal_7836b4.right\n        } -> iteration_9e4c1f.handler\n        instance(x: 847, y: -203) all_true_d32727 root.Std_k98ojb.List.Contains {}\n        iteration_9e4c1f.output_list -> all_true_d32727.list\n        false -> all_true_d32727.item\n        all_true_d32727.is_contained -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e6a94c root.Std_k98ojb.List.Sort {}\n        instance(x: 395, y: -207, name: \"check each pair of numbers\") iteration_f4f2e5 root.Std_k98ojb.Iteration.Find {}\n        func() {\n            in(x: -30, y: -25, name: \"current index\") property(Number) current_170471\n            in(x: -23, y: 79, name: \"previous number\") property(Number) previous_769593\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) sub_b76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) not_equal_7836b4 root.Std_k98ojb.Logic.NotEqual {}\n            previous_769593 -> sub_b76d2b.first\n            current_170471 -> sub_b76d2b.second\n            1 -> not_equal_7836b4.right\n            sub_b76d2b.result -> not_equal_7836b4.left\n            not_equal_7836b4.result -> output_efbc78\n        } -> iteration_f4f2e5.predicate\n        list_07cae4 -> sort_e6a94c.list\n        iteration_f4f2e5.item -> output_8d07dc\n        sort_e6a94c.sorted_list -> iteration_f4f2e5.items\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -123) sort_f3c761 root.Std_k98ojb.List.Sort {}\n        instance(x: 375, y: -114) reduce_29e2a5 root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_f3c761.list\n        sort_f3c761.sorted_list -> reduce_29e2a5.items\n        func() {\n            in(x: 122, y: -33) acc property(Bool) _acc_e9f0b1\n            in(x: 123, y: 85) current property(Number) _current_d6d3c7\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_8a64e5\n\n            instance(x: 355, y: -13) substract_b4f2b1 root.Std_k98ojb.Math.Sub {}\n            instance(x: 572, y: -11) not_equal_c9d0c3 root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 226, y: 56) and_4526a7 root.Std_k98ojb.Logic.And {}\n            1 -> substract_b4f2b1.second\n            _current_d6d3c7 -> substract_b4f2b1.first\n            not_equal_c9d0c3.left -> substract_b4f2b1.result\n            _acc_e9f0b1 -> and_4526a7.left\n            not_equal_c9d0c3.result -> and_4526a7.right\n            true -> not_equal_c9d0c3.right\n            and_4526a7.result -> output_8a64e5\n        } -> reduce_29e2a5.handler\n        reduce_29e2a5.result -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e6f5a2 root.Std_k98ojb.List.Sort {}\n        instance(x: 434, y: -207, name: \"check each pair of numbers\") reduce_f46c4e root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e6f5a2.list\n        sort_e6f5a2.sorted_list -> reduce_f46c4e.items\n        func() {\n            in(x: -30, y: -25, name: \"accumulated\") property(Bool) accumulated_170471\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n            in(x: -12, y: 129, name: \"previous\") property(Number) previous_d7d2a3\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) substract_76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_c6a5f4 root.Std_k98ojb.Logic.Equal {}\n            previous_d7d2a3 -> substract_76d2b.first\n            current_769593 -> substract_76d2b.second\n            1 -> equal_c6a5f4.right\n            substract_76d2b.result -> equal_c6a5f4.left\n            equal_c6a5f4.result -> output_efbc78\n            accumulated_170471 -> output_efbc78\n        } -> reduce_f46c4e.handler\n        true -> reduce_f46c4e.initial_value\n        reduce_f46c4e.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -195) sort_f6c0a3 root.Std_k98ojb.List.Sort {}\n        instance(x: 434, y: -193) reduce_2e7c4f root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_f6c0a3.list\n        sort_f6c0a3.sorted_list -> reduce_2e7c4f.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_e9d1b5\n            in(x: -23, y: 79, name: \"current\") property(Number) current_ba4088\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_6f4e3c\n\n            instance(x: 226, y: 56) substract_e64d95 root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_7836b4 root.Std_k98ojb.Logic.Equal {}\n            1 -> substract_e64d95.second\n            acc_e9d1b5 -> equal_7836b4.left\n            substract_e64d95.result -> equal_7836b4.right\n            current_ba4088 -> substract_e64d95.first\n            equal_7836b4.result -> output_6f4e3c\n        } -> reduce_2e7c4f.handler\n        true -> reduce_2e7c4f.initial_value\n        reduce_2e7c4f.result -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e679d5 root.Std_k98ojb.List.Sort {}\n        instance(x: 421, y: -207, name: \"check each pair of numbers\") iteration_32727d root.Std_k98ojb.Iteration.Filter {}\n        list_07cae4 -> sort_e679d5.list\n        sort_e679d5.sorted_list -> iteration_32727d.items\n\n        func() {\n            in(x: -30, y: -25, name: \"current\") property(Number) _index_170471\n            in(x: -23, y: 79, name: \"_index\") property(Number) _index_769593\n            in(x: -23, y: 29, name: \"item\") property(Number) item_f4e2a6\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) sub_76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_f7836b4 root.Std_k98ojb.Logic.Equal {}\n            1 -> sub_76d2b.first\n            item_f4e2a6 -> sub_76d2b.second\n            sub_76d2b.result -> equal_f7836b4.left\n            0 -> equal_f7836b4.right\n            equal_f7836b4.result -> output_efbc78\n        } -> iteration_32727d.handler\n\n        instance(x: 847, y: -203) not_75283f root.Std_k98ojb.Logic.Not {}\n        instance(x: 1058, y: -207) contains_32727d root.Std_k98ojb.List.Contains {}\n        false -> contains_32727d.item\n        iteration_32727d.output_list -> contains_32727d.list\n        not_75283f.result -> output_8d07dc\n        contains_32727d.is_contained -> not_75283f.input\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_f46a5c root.Std_k98ojb.List.Sort {}\n        instance(x: 437, y: -207, name: \"check for consecutive numbers\") reduce_d8763f root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_f46a5c.list\n        sort_f46a5c.sorted_list -> reduce_d8763f.items\n\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_b9d8b1\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n            in(x: 10, y: -16, name: \"index\") property(Number) index_e7a6c3\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) substract_9f2b8e root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_e52c11 root.Std_k98ojb.Logic.Equal {}\n            index_e7a6c3 -> substract_9f2b8e.first\n            1 -> substract_9f2b8e.second\n            current_769593 -> equal_e52c11.right\n            substract_9f2b8e.result -> equal_e52c11.left\n            acc_b9d8b1 -> output_efbc78\n            equal_e52c11.result -> output_efbc78\n        } -> reduce_d8763f.handler\n        true -> reduce_d8763f.initial_value\n        reduce_d8763f.output -> output_8d07dc\n    }\n}"
            ],
            "17": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -515, y: 100, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && main_list_slice == sublist\"\n        }\n        for_d26972.item -> ifexpression_875761.gen_0\n        for_d26973.index -> ifexpression_875761.gen_1\n        sublist_ec88cd -> ifexpression_875761.gen_2\n        main_list_ec88cd -> for_d26972.items\n        for_d26972.done -> continue_a96db6\n        for_d26972.onItem -> for_d26973.reset\n        for_d26973.item -> ifexpression_875761.execute\n        for_d26973.done -> ifexpression_875761.else\n        ifexpression_875761.then -> output_5bbcd7\n        ifexpression_875761.value -> output_5bbcd7\n        execute_90aaec -> for_d26972.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 100, y: 200) if_875761 root.Std_k98ojb.Std.If {}\n        instance(x: 500, y: 300) equals_123456 root.Std_k98ojb.Logic.Equal {}\n\n        main_list_ec88cd -> for_d26972.items\n        sublist_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26972.reset\n        for_d26972.onItem -> for_d26973.reset\n        for_d26972.item -> if_875761.input\n        for_d26973.item -> equals_123456.right\n        for_d26972.index -> if_875761.value\n        List.GetAt(main_list_ec88cd, for_d26972.index + for_d26973.index).itemAtIndex -> equals_123456.left\n        equals_123456.equal -> if_875761.then\n        if_875761.then -> continue_a96db6\n        if_875761.else -> output_5bbcd7\n        for_d26973.done -> if_875761.execute\n        for_d26972.done -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 100, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list.slice(start, start + sublist.length) == sublist\"\n        }\n        main_list_ec88cd -> for_d26972.items\n        for_d26972.item -> ifexpression_875761.gen_0\n        sublist_ec88cd -> ifexpression_875761.gen_1\n        for_d26972.index -> ifexpression_875761.gen_2\n        for_d26973.done -> continue_a96db6\n        ifexpression_875761.then -> output_5bbcd7\n        ifexpression_875761.else -> for_d26973.reset\n        execute_90aaec -> for_d26972.execute\n        for_d26972.onItem -> ifexpression_875761.execute\n        for_d26972.done -> continue_a96db6\n        for_d26973.item -> output_5bbcd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1020, y: 30) if_875761 root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26973.items\n        main_list_ec88cd -> for_d26972.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.onItem -> if_875761.input\n        for_d26973.done -> if_875761.input\n        if_875761.then -> output_5bbcd7\n        if_875761.else -> continue_a96db6\n        for_d26972.done -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 80, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1020, y: 150) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && equal\"\n        }\n        instance(x: 1100, y: 250) ifexpression_875762 root.Std_k98ojb.Std.IfExpression {\n            expression: \"sublist_item == main_list_item\"\n        }\n\n        for_d26972.done -> continue_a96db6\n        for_d26973.done -> ifexpression_875761.execute\n        for_d26972.onItem -> for_d26973.reset\n        for_d26973.onItem -> ifexpression_875762.execute\n        sublist_ec88cd -> for_d26973.items\n        main_list_ec88cd -> for_d26972.items\n        for_d26972.item -> for_d26973.main_list_item\n        for_d26973.item -> ifexpression_875762.gen_0\n        ifexpression_875762.value -> output_5bbcd7\n        ifexpression_875761.then -> output_5bbcd7\n        ifexpression_875761.else -> continue_a96db6\n        execute_90aaec -> for_d26972.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 100, y: 200) if_6c0e7a root.Std_k98ojb.Std.If {}\n        instance(x: 500, y: 250) equals_f4f2d5 root.Std_k98ojb.Logic.Equal {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26972.items\n        main_list_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.done -> if_6c0e7a.input\n        for_d26973.done -> if_6c0e7a.input\n        if_6c0e7a.then -> output_5bbcd7\n        if_6c0e7a.else -> continue_a96db6\n        equals_f4f2d5.left -> for_d26972.item\n        equals_f4f2d5.right -> for_d26973.item\n        equals_f4f2d5.result -> if_6c0e7a.value\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 80, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 100, y: 200) if_5bbcd7 root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26972.items\n        main_list_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.done -> if_5bbcd7.input\n        for_d26972.onItem -> for_d26973.reset\n        for_d26973.done -> for_d26972.next\n        if_5bbcd7.then -> output_5bbcd7\n        if_5bbcd7.else -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) if_875761 root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26972.items\n        main_list_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.done -> if_875761.input\n        for_d26972.onItem -> for_d26973.reset\n        for_d26973.done -> for_d26972.next\n        if_875761.then -> output_5bbcd7\n        if_875761.else -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 30) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && all(main_list[main_list_index..main_list_index + sublist_length] == sublist)\"\n        }\n        for_d26972.item -> ifexpression_875761.gen_0\n        for_d26973.index -> ifexpression_875761.gen_1\n        for_d26972.onItem -> ifexpression_875761.execute\n        main_list_ec88cd -> for_d26972.items\n        sublist_ec88cd -> for_d26973.items\n        ifexpression_875761.value -> output_5bbcd7\n        ifexpression_875761.then -> continue_a96db6\n        execute_90aaec -> for_d26972.reset\n        for_d26972.done -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1020, y: 30) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && main_list_slice == sublist\"\n        }\n        for_d26972.item -> ifexpression_875761.gen_2\n        for_d26972.index -> ifexpression_875761.gen_0\n        main_list_ec88cd -> for_d26972.items\n        for_d26972.onItem -> ifexpression_875761.execute\n        for_d26973.done -> continue_a96db6\n        sublist_ec88cd -> for_d26973.items\n        for_d26973.item -> ifexpression_875761.gen_1\n        for_d26973.onItem -> for_d26972.reset\n        execute_90aaec -> for_d26973.reset\n        ifexpression_875761.then -> output_5bbcd7\n        ifexpression_875761.else -> continue_a96db6\n        main_list_ec88cd -> ifexpression_875761.main_list\n        sublist_ec88cd -> ifexpression_875761.sublist\n    }\n}"
            ],
            "27": [
                "List.GetAt {\n  items: input_list\n  index: 0\n} -> first_item\n\nMath.Sub {\n  first: Math.Add { first: first_item; second: 1 }\n  second: 1\n} -> expected_first\n\nIteration.Find {\n  items: input_list\n  predicate: func(x) {\n    Logic.NotEqual {\n      left: x\n      right: expected_first\n    }\n  }\n} -> found\n\nStd.If {\n  input: found.item\n  then: Math.Add { first: found.index; second: 1 }\n  else: List.Length { list: input_list }\n} -> result",
                "List.GetAt -> Iteration.Find.handler\n    instance(x: 0, y: 0) list_get_at_node List.GetAt {}\n    instance(x: 100, y: 0) iteration_find_node Iteration.Find {}\n    list_get_at_node.index -> iteration_find_node.index\n    iteration_find_node.items -> list_get_at_node.list\n\n    instance(x: 200, y: 0) math_add_node Math.Add {}\n    instance(x: 300, y: 0) iteration_reduce_node Iteration.Reduce {}\n    math_add_node.first -> iteration_reduce_node.handler\n    iteration_reduce_node.items -> math_add_node.second\n\n    instance(x: 400, y: 0) list_generate_range_node List.GenerateRange {}\n    instance(x: 500, y: 0) std_if_node Std.If {}\n    list_generate_range_node.from -> std_if_node.input\n    iteration_find_node.item -> std_if_node.then\n    math_add_node.result -> std_if_node.else\n\n    instance(x: 600, y: 0) list_slice_node List.Slice {}\n    list_slice_node.list -> list_get_at_node.list\n    list_slice_node.start -> iteration_find_node.index\n    list_slice_node.end -> math_add_node.result\n\n    instance(x: 700, y: 0) std_if_expression_node Std.IfExpression {}\n    std_if_expression_node.expression -> \"a + 1\"\n    list_slice_node.list -> std_if_expression_node.a\n    iteration_reduce_node.handler -> std_if_expression_node.b",
                "List.GetAt -> Iteration.Find.handler\n    instance(x: 0, y: 0) list_get_at_node List.GetAt {}\n    instance(x: 100, y: 0) iteration_find_node Iteration.Find {}\n    list_get_at_node.index -> iteration_find_node.index\n    iteration_find_node.items -> list_get_at_node.list\n\n    instance(x: 200, y: 0) math_add_node Math.Add {}\n    instance(x: 300, y: 0) list_get_at_node2 List.GetAt {}\n    list_get_at_node2.index -> math_add_node.first\n    math_add_node.second -> iteration_find_node.item\n    math_add_node.result -> list_get_at_node2.list\n\n    instance(x: 400, y: 0) logic_not_equal_node Logic.NotEqual {}\n    iteration_find_node.item -> logic_not_equal_node.left\n    list_get_at_node2.list -> logic_not_equal_node.right\n\n    instance(x: 500, y: 0) std_if_node Std.If {}\n    logic_not_equal_node.result -> std_if_node.input\n    math_add_node.result -> std_if_node.then\n    iteration_find_node.item -> std_if_node.else\n\n    instance(x: 600, y: 0) list_length_node List.Length {}\n    list_length_node.list -> iteration_find_node.items\n    list_length_node.length -> list_get_at_node.index\n\n    instance(x: 700, y: 0) math_sub_node Math.Sub {}\n    list_length_node.length -> math_sub_node.first\n    iteration_find_node.index -> math_sub_node.second\n    math_sub_node.result -> list_get_at_node2.list",
                "List.GetAt -> Iteration.Find.handler\nMath.Add.first <- 1\nMath.Add.second <- List.GetAt.index\nLogic.Equal.left <- Math.Add.result\nLogic.Equal.right <- List.GetAt.item\nIteration.Find.items <- input_list\nIteration.Find.predicate <- Logic.Equal\nStd.If.input <- Iteration.Find.found\nStd.If.then -> output\nList.GetAt.list <- input_list\nList.GetAt.index <- 0\nMath.Add.result -> Std.If.value",
                "List.FirstItem {\n  items: List.GenerateRange { from: 1, to: 10000 }\n}\n-> Iteration.Find {\n  handler: func(item, index) {\n    Logic.NotEqual {\n      left: item,\n      right: List.GetAt {\n        list: input_list,\n        index: index - 1\n      }\n    }\n  }\n}\n-> output",
                "List.GetAt -> Iteration.Find.handler\n            instance(x: 0, y: 0) List.GenerateRange {}\n            instance(x: 100, y: 100) Std.IfExpression {}\n            instance(x: 200, y: 200) Iteration.Find {}\n            instance(x: 300, y: 300) Math.Add {}\n            instance(x: 400, y: 400) List.GetAt {}\n            List.GenerateRange.from -> 1\n            List.GenerateRange.to -> List.Length\n            Std.IfExpression.expression -> \"it + 1\"\n            Iteration.Find.items -> List.GenerateRange\n            Iteration.Find.predicate -> Std.IfExpression\n            Math.Add.first -> List.GetAt\n            Math.Add.second -> 1\n            List.GetAt.list -> input_list\n            List.GetAt.index -> 0\n            List.Length.list -> input_list",
                "List.GetAt {\n  list: input_list\n  index: 0\n} -> first_item\n\nMath.Sub {\n  first: index\n  second: first_item\n} -> diff\n\nStd.If {\n  input: diff\n  then: {\n    Math.Add {\n      first: first_item\n      second: 1\n    } -> result\n  }\n  else: {\n    Iteration.Find {\n      items: input_list\n      predicate: {\n        item: it\n        index: idx\n        Logic.Not {\n          List.Contains {\n            list: input_list\n            item: Math.Add { first: item; second: 1 }\n          }\n        }\n      }\n    } -> found_item\n    Math.Add {\n      first: found_item\n      second: 1\n    } -> result\n  }\n}",
                "List.GetAt -> Iteration.Find.handler\n    instance(x: 0, y: 0) list_get_at_node List.GetAt {}\n    instance(x: 100, y: 0) iteration_find_node Iteration.Find {}\n    list_get_at_node.index -> iteration_find_node.index\n    iteration_find_node.items -> list_get_at_node.list\n\n    instance(x: 200, y: 0) math_add_node Math.Add {}\n    instance(x: 300, y: 0) list_get_at_node_2 List.GetAt {}\n    math_add_node.first -> list_get_at_node_2.index\n    list_get_at_node_2.list -> iteration_find_node.items\n\n    instance(x: 400, y: 0) logic_not_equal_node Logic.NotEqual {}\n    iteration_find_node.item -> logic_not_equal_node.left\n    math_add_node.result -> logic_not_equal_node.right\n\n    instance(x: 500, y: 0) iteration_reduce_node Iteration.Reduce {}\n    logic_not_equal_node.result -> iteration_reduce_node.handler\n    list_get_at_node_2.index -> iteration_reduce_node.context\n    iteration_find_node.items -> iteration_reduce_node.item\n\n    instance(x: 600, y: 0) math_add_node_2 Math.Add {}\n    iteration_reduce_node.accumulated -> math_add_node_2.first\n    iteration_reduce_node.value -> math_add_node_2.second\n\n    instance(x: 700, y: 0) list_length_node List.Length {}\n    list_length_node.list -> iteration_find_node.items\n\n    instance(x: 800, y: 0) std_if_node Std.If {}\n    logic_not_equal_node.result -> std_if_node.input\n    math_add_node_2.result -> std_if_node.then\n    list_length_node.length -> std_if_node.else",
                "List.FirstItem {\n  item: List.GetAt { index: 0, list: input_list } \n} -> Iteration.Find {\n  predicate: func(x) { Math.Sub { first: x, second: List.GetAt { index: x - 1, list: input_list } }.result != 1 },\n  items: List.GenerateRange { from: 1, to: List.Length { list: input_list }.length + 1 }\n} -> output",
                "List.FirstItem {\n  items: input_list\n} first_item_node\n\nMath.Add {\n  first: first_item_node.item\n  second: 0\n} expected_num_node\n\nIteration.Find {\n  items: input_list\n  predicate: func(x) {\n    Logic.NotEqual {\n      left: x\n      right: expected_num_node.result\n    }\n  }\n} find_node\n\nStd.If {\n  input: find_node.found\n  then: {\n    Math.Add {\n      first: expected_num_node.result\n      second: 1\n    }\n  }\n  else: {\n    Iteration.Map {\n      items: input_list\n      handler: func(x, index) {\n        Math.Add {\n          first: x\n          second: 1\n        }\n      }\n    } map_node\n\n    Iteration.Find {\n      items: map_node.output_list\n      predicate: func(x) {\n        Logic.Not {\n          List.Contains {\n            item: x\n            list: input_list\n          }\n        }\n      }\n    } find_missing_node\n\n    find_missing_node.item\n  }\n}"
            ],
            "31": [
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\nStrings_Replace_3.output -> output",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput_string -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\noutput_string <- Strings_Replace_3.output",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\nStrings_Replace_3.output -> output",
                "instance(x: 100, y: 100) StringsReplace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) StringsReplace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) StringsReplace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> StringsReplace_1.input\n\" \" -> StringsReplace_1.search\n\":\" -> StringsReplace_1.replace\n\nStringsReplace_1.output -> StringsReplace_2.input\n\",\" -> StringsReplace_2.search\n\":\" -> StringsReplace_2.replace\n\nStringsReplace_2.output -> StringsReplace_3.input\n\".\" -> StringsReplace_3.search\n\":\" -> StringsReplace_3.replace\n\nStringsReplace_3.output -> output",
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 110, y: 130) replace_6c2f3e root.Std_k98ojb.Strings.Replace {}\ninstance(x: 110, y: 200) replace_9d8f1a root.Std_k98ojb.Strings.Replace {}\ninstance(x: 110, y: 270) replace_a6e912 root.Std_k98ojb.Strings.Replace {}\n\n\"in\" -> replace_6c2f3e.input\n\" \" -> replace_6c2f3e.search\n\":\" -> replace_6c2f3e.replace\n\nreplace_6c2f3e.output -> replace_9d8f1a.input\n\",\" -> replace_9d8f1a.search\n\":\" -> replace_9d8f1a.replace\n\nreplace_9d8f1a.output -> replace_a6e912.input\n\".\" -> replace_a6e912.search\n\":\" -> replace_a6e912.replace\n\nreplace_a6e912.output -> out",
                "instance(x: 100, y: 100) StringsReplace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) StringsReplace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) StringsReplace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> StringsReplace_1.input\n\" \" -> StringsReplace_1.search\n\":\" -> StringsReplace_1.replace\n\nStringsReplace_1.output -> StringsReplace_2.input\n\",\" -> StringsReplace_2.search\n\":\" -> StringsReplace_2.replace\n\nStringsReplace_2.output -> StringsReplace_3.input\n\".\" -> StringsReplace_3.search\n\":\" -> StringsReplace_3.replace\n\nStringsReplace_3.output -> output",
                "instance(x: 100, y: 100) StringsReplace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) StringsReplace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) StringsReplace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> StringsReplace_1.input\n\" \" -> StringsReplace_1.search\n\":\" -> StringsReplace_1.replace\n\nStringsReplace_1.output -> StringsReplace_2.input\n\",\" -> StringsReplace_2.search\n\":\" -> StringsReplace_2.replace\n\nStringsReplace_2.output -> StringsReplace_3.input\n\".\" -> StringsReplace_3.search\n\":\" -> StringsReplace_3.replace\n\nStringsReplace_3.output -> output"
            ],
            "33": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) firstitem_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> firstitem_038fce.list\n        instance(x: 933, y: 25) filter_f11fda root.Std_k98ojb.Iteration.Filter {\n            handler: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) equal_e19a62 root.Std_k98ojb.Logic.Equal {}\n                firstitem_038fce.item -> equal_e19a62.left\n                element_5f51f7 -> equal_e19a62.right\n                equal_e19a62.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> filter_f11fda.items\n        instance(x: 1504, y: -400) if_07b8c7 root.Std_k98ojb.Std.If {}\n        filter_f11fda.output_list -> if_07b8c7.input\n        firstitem_038fce.item -> if_07b8c7.then\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        List.GenerateRange(0, List.Length(characters_6030c9.characters)) -> set_038fce.right\n        Iteration.Map(set_038fce.left, func() {\n            in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(String) out_d0fd24\n\n            instance(x: 106, y: 17) get_at_2f9d09 root.Std_k98ojb.List.GetAt {}\n            characters_6030c9.characters -> get_at_2f9d09.list\n            element_5f51f7 -> get_at_2f9d09.index\n            get_at_2f9d09.item -> out_d0fd24\n        }) -> equals_f11fda.left\n        List.GenerateRange(0, List.Length(characters_6030c9.characters), func() {\n            in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(String) out_d0fd24\n\n            instance(x: 106, y: 17) get_at_2f9d09 root.Std_k98ojb.List.GetAt {}\n            characters_6030c9.characters -> get_at_2f9d09.list\n            element_5f51f7 -> get_at_2f9d09.index\n            get_at_2f9d09.item -> out_d0fd24\n        }) -> equals_f11fda.right\n        equals_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) first_item_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> first_item_038fce.list\n        instance(x: 933, y: 25) all_same_f11fda root.Std_k98ojb.Iteration.Find {\n            predicate: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) not_equal_2f9d09 root.Std_k98ojb.Logic.NotEqual {}\n                element_5f51f7 -> not_equal_2f9d09.left\n                first_item_038fce.item -> not_equal_2f9d09.right\n                not_equal_2f9d09.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> all_same_f11fda.items\n        instance(x: 1504, y: -400) if_e19a62 root.Std_k98ojb.Std.If {}\n        all_same_f11fda.item -> if_e19a62.input\n        execute_27b8c3 -> if_e19a62.execute\n        if_e19a62.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        characters_6030c9.characters -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        instance(x: 1504, y: -400) list_9fba8c root.Std_k98ojb.List.Empty {}\n        list_9fba8c.list -> equals_f11fda.right\n        execute_27b8c3 -> characters_6030c9.execute\n        equals_f11fda.result -> out_f3db9f\n        equals_f11fda.result -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        List.GenerateRange(0, List.Length(characters_6030c9.characters)) -> set_038fce.right\n        Iteration.Map(set_038fce.left, func(in(x: 0, y: 0) property(String) item_d5a8b4, out(x: 100, y: 0) property(String) out_f2e7d1) {\n            out_f2e7d1 = item_d5a8b4\n        }) -> equals_f11fda.left\n        characters_6030c9.characters[0] -> equals_f11fda.right\n        equals_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) firstitem_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> firstitem_038fce.list\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        firstitem_038fce.item -> equals_f11fda.left\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        characters_6030c9.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> equals_f11fda.right\n        equals_f11fda.result -> for_8cb3f6.next\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        for_8cb3f6.done -> if_07b8c7.execute\n        equals_f11fda.result -> if_07b8c7.predicate\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1812, y: -319) and_80a119 root.Std_k98ojb.Logic.And {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> equals_f11fda.left\n        for_8cb3f6.item -> equals_f11fda.right\n        equals_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        List.GenerateRange(0, List.Length(characters_6030c9.characters)) -> set_038fce.right\n        Iteration.Map(characters_6030c9.characters, func() {\n            in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(String) out_d0fd24\n\n            instance(x: 106, y: 17) get_at_2f9d09 root.Std_k98ojb.List.GetAt {}\n            characters_6030c9.characters -> get_at_2f9d09.list\n            element_5f51f7 -> get_at_2f9d09.index\n            get_at_2f9d09.item -> out_d0fd24\n        }) -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        List.GenerateRange(0, 1) -> equals_f11fda.right\n        equals_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        characters_6030c9.characters -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        1 -> equals_f11fda.right\n        execute_27b8c3 -> characters_6030c9.execute\n        equals_f11fda.result -> out_f3db9f\n        equals_f11fda.result -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        characters_6030c9.characters -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        1 -> equals_f11fda.right\n        execute_27b8c3 -> equals_f11fda.execute\n        equals_f11fda.result -> out_f3db9f\n        equals_f11fda.done -> continue_8ba06b\n    }\n}"
            ],
            "37": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f4c0e5 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: lambda((x: Number) -> Boolean) { \n                Strings.IsNumeric(x.toString()) \n            }\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        \n        str_6b655b -> characters_f4c0e5.input\n        characters_f4c0e5.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_numeric_handler\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> characters_3d7de6.execute\n        characters_3d7de6.done -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is numeric.\") is_numeric_handler {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"item\") property(String) item_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) is_numeric_3d7de6 root.Std_k98ojb.Strings.IsNumeric {\n            input: item_6b655b\n        }\n        is_numeric_3d7de6.result -> output_732a8a\n        execute_cdac2a -> is_numeric_3d7de6.execute\n        is_numeric_3d7de6.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_numeric_handler\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> characters_3d7de6.execute\n        characters_3d7de6.done -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is numeric.\") is_numeric_handler {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"c\") property(String) c_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) is_numeric_3d7de6 root.Std_k98ojb.Strings.IsNumeric {\n            input: c_6b655b\n        }\n        is_numeric_3d7de6.result -> output_732a8a\n        execute_cdac2a -> is_numeric_3d7de6.execute\n        is_numeric_3d7de6.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_e3b4e2 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: lambda(item: \"char\", index: \"index\") -> item.match(/^\\d$/)\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        str_6b655b -> characters_e3b4e2.input\n        characters_e3b4e2.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: \"isNumeric\"\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n\n        str_6b655b -> characters_3d7de6.input\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_digit\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> characters_3d7de6.execute\n        characters_3d7de6.done -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is a digit.\") is_digit {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"c\") property(String) c_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) is_numeric_3d7de6 root.Std_k98ojb.Strings.IsNumeric {\n            input: c_6b655b\n        }\n        is_numeric_3d7de6.result -> output_732a8a\n        execute_cdac2a -> is_numeric_3d7de6.execute\n        is_numeric_3d7de6.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f5c1e3 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: \"Logic.And(Strings.IsNumeric(it), true)\"\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n\n        str_6b655b -> characters_f5c1e3.input\n        characters_f5c1e3.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_numeric_handler\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> characters_3d7de6.execute\n        characters_3d7de6.done -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is numeric.\") is_numeric_handler {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"c\") property(String) c_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) is_numeric_3d7de6 root.Std_k98ojb.Strings.IsNumeric {\n            input: c_6b655b\n        }\n        is_numeric_3d7de6.result -> output_732a8a\n        execute_cdac2a -> is_numeric_3d7de6.execute\n        is_numeric_3d7de6.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_numeric\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n\n        str_6b655b -> characters_3d7de6.input\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n\n        func(doc: \"checks if a character is numeric.\") is_numeric {\n            in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n            in(x: -436, y: -213, name: \"char\") property(String) char_6b655b\n\n            out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n            out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n            instance(x: 80, y: -417) is_numeric_3d7de6 root.Std_k98ojb.Strings.IsNumeric {}\n            char_6b655b -> is_numeric_3d7de6.input\n            is_numeric_3d7de6.result -> output_732a8a\n        }\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_e3b4e2 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_f0c Deb root.Iteration.Filter {\n            handler: isNumeric\n        }\n        instance(x: 97, y: -127) length_9a6d5f root.Std_k98ojb.List.Length {}\n\n        str_6b655b -> characters_e3b4e2.input\n        characters_e3b4e2.characters -> filter_f0c.items\n        filter_f0c.output_list -> length_9a6d5f.list\n        length_9a6d5f.length -> output_732a8a\n        execute_cdac2a -> characters_e3b4e2.execute\n        characters_e3b4e2.done -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is numeric.\") isNumeric {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"char\") property(String) char_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) isNumeric_e3b4e2 root.Std_k98ojb.Strings.IsNumeric {}\n\n        char_6b655b -> isNumeric_e3b4e2.input\n        isNumeric_e3b4e2.result -> output_732a8a\n        execute_cdac2a -> isNumeric_e3b4e2.execute\n        isNumeric_e3b4e2.done -> continue_d9efd7\n    }\n}"
            ],
            "38": [
                "instance(x: 100, y: 100) iteration_3c0f17 root.Iteration.Reduce {\n    handler: func(a: 0, b: 1) => Math.Pow(b, 4) + a,\n    items: List.GenerateRange(from: 1, to: n),\n    context: null\n}\ninstance(x: 200, y: 100) list_get_at_2f3d15 root.List.GetAt {\n    index: 0,\n    list: iteration_3c0f17.output_list\n}\ninstance(x: 300, y: 100) math_pow_f892a4 root.Math.Pow {\n    x: list_get_at_2f3d15.item,\n    y: 2\n}\ninstance(x: 400, y: 100) iteration_filter_dae1e6 root.Iteration.Filter {\n    handler: func(a: 0) => a % 2 == 1,\n    items: List.GenerateRange(from: 1, to: n)\n}\niteration_filter_dae1e6.output_list -> iteration_3c0f17.items",
                "instance(x: 100, y: 100) Std_For_1 root.Std.For {\n    items: List.GenerateRange(from: 1, to: n)\n}\ninstance(x: 200, y: 100) Math_Mul_2 root.Math.Mul {\n    first: Std_For_1.item\n    second: Std_For_1.item\n}\ninstance(x: 300, y: 100) Math_Mul_3 root.Math.Mul {\n    first: Math_Mul_2.result\n    second: Math_Mul_2.result\n}\ninstance(x: 400, y: 100) Math_Add_4 root.Math.Add {\n    first: sum\n    second: Math_Mul_3.result\n}\nStd_For_1.trigger -> Std_For_1.next\nMath_Mul_2.result -> Math_Mul_3.first\nMath_Mul_2.result -> Math_Mul_3.second\nMath_Mul_3.result -> Math_Add_4.second\nMath_Add_4.result -> sum",
                "instance(x: 24, y: 13) for_6a2e8f root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n)\n}\ninstance(x: 139, y: 14) math_expression_ecc3c5 root.Std_k98ojb.Math.Expression {\n    expression: \"(2*item-1)^4\"\n}\nfor_6a2e8f.item -> math_expression_ecc3c5.gen_0\ninstance(x: 262, y: 15) iteration_reduce_f46d95 root.Std_k98ojb.Iteration.Reduce {\n    handler: Std_k98ojb.Math.Add\n}\nmath_expression_ecc3c5.result -> iteration_reduce_f46d95.item\nfor_6a2e8f.on_item -> iteration_reduce_f46d95.trigger\niteration_reduce_f46d95.result -> sum",
                "instance(x: 100, y: 100) Std_For_1 root.Std.For {\n    trigger: true,\n    items: List.GenerateRange(from: 1, to: n),\n    reset: false\n}\ninstance(x: 200, y: 150) Math_Mul_2 root.Math.Mul {\n    first: Std_For_1.item,\n    second: Std_For_1.item\n}\ninstance(x: 250, y: 150) Math_Mul_3 root.Math.Mul {\n    first: Math_Mul_2.result,\n    second: Math_Mul_2.result\n}\ninstance(x: 300, y: 100) List_Add_4 root.List.Add {\n    list: sum_list,\n    item: Math_Mul_3.result\n}\nStd_For_1.on_item -> List_Add_4.trigger\nList_Add_4.listWithoutItem -> sum_list\nin(x: 50, y: 50, name: \"n\") property(Number) n\nout(x: 400, y: 100, name: \"sum\") property(List) sum_list",
                "instance(x: 23, y: -1) count_3a3116 root.Std_k98ojb.Std.Count {}\ninstance(x: 12, y: 136) for_2d6da6 root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116)\n}\ndata_instance(x: 330, y: 133) data_cde0dc  = 2\ninstance(x: 303, y: 2) mul_64046c root.Std_k98ojb.Math.Mul {}\ninstance(x: 118, y: -26) pow_9dcc3d root.Std_k98ojb.Math.Pow {\n    x: for_2d6da6.item,\n    y: data_cde0dc\n}\ninstance(x: 23, y: 200) add_f892a4 root.Std_k98ojb.Math.Add {}\nfor_2d6da6.on_item -> count_3a3116.count\ncount_3a3116.reset -> for_2d6da6.reset\npow_9dcc3d.result -> add_f892a4.first\nadd_f892a4.result -> sum_365f7b\nn_3a3116 -> for_2d6da6.trigger",
                "instance(x: 118, y: -26) iteration_9dcc3d root.Std_k98ojb.Iteration.Reduce {\n    instance(x: 23, y: -1) math_f892a4 root.Std_k98ojb.Math.Pow {}\n    data_instance(x: 330, y: 133) data_cde0dc  = 4\n    iteration_9dcc3d.handler = math_f892a4\n    math_f892a4.first = iteration_9dcc3d.item\n    math_f892a4.second = data_cde0dc\n    instance(x: 303, y: 2) add_64046c root.Std_k98ojb.Math.Add {}\n    iteration_9dcc3d.handler = add_64046c\n    add_64046c.first = iteration_9dcc3d.accumulated\n    add_64046c.second = math_f892a4.result\n    instance(x: 12, y: 136) list_generate_2d6da6 root.Std_k98ojb.List.GenerateRange {\n        data_instance(x: 1, y: -56) data_n_3a3116 \n        data_instance(x: 330, y: 133) data_cde0dc  = 2\n        list_generate_2d6da6.from = data_n_3a3116\n        list_generate_2d6da6.to = Std_k98ojb.Math.Mul(data_n_3a3116, data_cde0dc)\n        iteration_9dcc3d.items = list_generate_2d6da6.result\n    }\n    out(x: 571, y: 7) property(Number) sum \n    iteration_9dcc3d.result -> sum",
                "instance(x: 100, y: 100) iteration_reduce_6c95e7 root.Std_k98ojb.Iteration.Reduce {\n    handler: \"Math.Pow\"\n}\ndata_instance(x: 200, y: 150) data_4f2c11 = 4\ndata_instance(x: 250, y: 150) data_f5a201 = 2\ninstance(x: 300, y: 100) iteration_map_72e8d3 root.Std_k98ojb.Iteration.Map {\n    handler: \"Math.Mul\"\n}\ninstance(x: 350, y: 100) list_generate_range_e48c1f root.Std_k98ojb.List.GenerateRange {\n    from: 0\n    to: \"n\"\n}\ndata_instance(x: 400, y: 150) data_9e2a4d = 1\ninstance(x: 450, y: 100) math_sub_f31c8a root.Std_k98ojb.Math.Sub {}\niteration_reduce_6c95e7.handler_input_0 -> iteration_map_72e8d3.handler_input_0\ndata_4f2c11 -> iteration_reduce_6c95e7.handler_input_1\niteration_map_72e8d3.result -> iteration_reduce_6c95e7.initial_value\nlist_generate_range_e48c1f.result -> iteration_map_72e8d3.items\nmath_sub_f31c8a.result -> iteration_map_72e8d3.handler_input_1\ndata_f5a201 -> math_sub_f31c8a.first\ndata_9e2a4d -> math_sub_f31c8a.second\nlist_generate_range_e48c1f.from -> data_9e2a4d\niteration_reduce_6c95e7.result -> output",
                "instance(x: 219, y: 55) Std_For_1 root.Std.For {\n    items: List.GenerateRange(from: 1, to: n)\n}\ninstance(x: 571, y: 7) Iteration_Reduce_2 root.Iteration.Reduce {\n    item: Std_For_1.item,\n    handler: Math.Pow\n}\ninstance(x: 23, y: -1) Math_Mul_3 root.Math.Mul {\n    first: 2 * Std_For_1.index - 1,\n    second: 2 * Std_For_1.index - 1\n}\ninstance(x: 12, y: 136) Math_Pow_4 root.Math.Pow {\n    x: Math_Mul_3.result,\n    y: 2\n}\nIteration_Reduce_2.handler: Math_Add\nStd_For_1.trigger: n\nIteration_Reduce_2.item: Math_Pow_4.result",
                "instance(x: 23, y: -1) count_2d6da6 root.Std_k98ojb.Std.Count {}\ninstance(x: 118, y: 25) for_9dcc3d root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116)\n}\ninstance(x: 303, y: 2) mul_f892a4 root.Std_k98ojb.Math.Mul {}\ninstance(x: 12, y: 136) pow_2d6da6 root.Std_k98ojb.Math.Pow {\n    x: for_9dcc3d.item,\n    y: 4\n}\ninstance(x: 330, y: 133) add_f892a4 root.Std_k98ojb.Math.Add {}\nadd_f892a4.first -> sum_365f7b\npow_2d6da6.result -> add_f892a4.second\nfor_9dcc3d.on_item -> count_2d6da6.count\ncount_2d6da6.reset -> for_9dcc3d.reset\nn_3a3116 -> for_9dcc3d.trigger\nsum_365f7b -> result",
                "instance(x: 23, y: -1) for_6a2e9c root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116 + 1)\n}\ninstance(x: 118, y: 133) mathpow_5f46d4 root.Std_k98ojb.Math.Pow {\n    x: Math.Mul(first: for_6a2e9c.item * 2 - 1, second: for_6a2e9c.item * 2 - 1).result\n    y: 2\n}\ninstance(x: 303, y: 2) sum_64046c root.Std_k98ojb.Math.Add {\n    first: mathpow_5f46d4.result\n    second: for_6a2e9c.index == 0 ? 0 : sum_64046c.result\n}\nfor_6a2e9c.on_item -> sum_64046c.trigger\nn_3a3116 -> for_6a2e9c.count\nsum_64046c.result -> result_f892a4"
            ],
            "46": [
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { \n    expression: \"6 * x^2\"\n}\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { expression: \"6 * x^2\" }\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { expression: \"6 * x^2\" }\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { \n    expression: \"6 * x^2\"\n}\nin(x: 0, y: 0, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) Math_Mul_6 root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_7 root.Math.Mul {}\n6 -> Math_Mul_6.first\ninstance(x: 0, y: 0) size_8 root.Std.Input {} -> Math_Mul_6.second\nMath_Mul_6.result -> Math_Mul_7.first\ninstance(x: 0, y: 50) size_9 root.Std.Input {} -> Math_Mul_7.second\nMath_Mul_7.result -> instance(x: 300, y: 100) surface_area_10 root.Std.Output {}",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { \n    expression: \"6 * x^2\"\n}\nin(x: 0, y: 0, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { expression: \"6 * x^2\" }\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { expression: \"6 * x^2\" }\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) Math_Mul_6f1c4d root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_351a75 root.Math.Mul {}\n6 -> Math_Mul_6f1c4d.first\ninstance(x: 0, y: 0) size_9e2e34 property(Number) \nsize_9e2e34 -> Math_Mul_6f1c4d.second\nsize_9e2e34 -> Math_Mul_351a75.first\nsize_9e2e34 -> Math_Mul_351a75.second\nMath_Mul_6f1c4d.result -> surface_area_c53f12 property(Number) \nMath_Mul_351a75.result -> Math_Mul_6f1c4d.second",
                "instance(x: 100, y: 100) Math_Mul_6 root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_7 root.Math.Mul {}\n6 -> Math_Mul_6.first\ninstance(x: 0, y: 0) size_8 root.Std.Input {} -> Math_Mul_6.second\nMath_Mul_6.result -> Math_Mul_7.first\ninstance(x: 0, y: 50) size_9 root.Std.Input {} -> Math_Mul_7.second\nMath_Mul_7.result -> root.surface_area"
            ],
            "19": [
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max {\n  items: input_list\n} max_node\n\nList.Min {\n  items: input_list\n} min_node\n\nMath.Sub {\n  first: max_node.max\n  second: min_node.min\n} sub_node\n\nsub_node.result -> output",
                "List.Max(max_list: items) max_node \nList.Min(min_list: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_list: items) max_node \nList.Min(min_list: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max {\n  items: input_list\n} max_node\n\nList.Min {\n  items: input_list\n} min_node\n\nMath.Sub {\n  first: max_node.max\n  second: min_node.min\n} sub_node\n\nsub_node.result -> output_diff",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max {\n  items: input_list\n} max_node\n\nList.Min {\n  items: input_list\n} min_node\n\nMath.Sub {\n  first: max_node.max\n  second: min_node.min\n} sub_node\n\nsub_node.result -> output",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_list: items) \nMath.Sub(first: max_result, second: min_result)\n\ninstance List.Min(min_list: items) \nout(x: 159, y: -219, name: \"difference\") property(Number) difference_ai\n\nList.Max(max_list: items) -> Math.Sub.first\nList.Min(min_list: items) -> Math.Sub.second\nMath.Sub.result -> difference_ai"
            ],
            "22": [
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}\ninput_number -> value\nresult -> left",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n        value: input_number\n        divisor: 2\n    }\n    instance(x: 200, y: 100) logic_equal Logic.Equal {\n        left: math_modulo.result\n        right: 0\n    }\n    logic_equal.result -> is_even",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n}\ninstance(x: 200, y: 100) logic_equal Logic.Equal {\n    left: math_modulo.result\n    right: 0\n}\n\nmath_modulo.value -> 10\nmath_modulo.divisor -> 2",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n}\ninstance(x: 200, y: 100) logic_equal Logic.Equal {\n    left: math_modulo.result\n    right: 0\n}\nin(x: 50, y: 100) property(Number) number \nnumber -> math_modulo.value\nmath_modulo.divisor: 2\nout(x: 300, y: 100) property(Boolean) is_even\nlogic_equal.result -> is_even",
                "instance(x: 100, y: 100) Math.Modulo {\n        value: input_number\n        divisor: 2\n    }\n    instance(x: 200, y: 100) Std.If {\n        input: Math.Modulo.result == 0\n    }",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n        value: input_number\n        divisor: 2\n    }\n    instance(x: 200, y: 100) logic_equal Logic.Equal {\n        left: math_modulo.result\n        right: 0\n    }\n    logic_equal.result -> is_even",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}\ninput_number -> value\nresult -> left",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n}\ninstance(x: 200, y: 100) logic_equal Logic.Equal {\n    left: math_modulo.result\n    right: 0\n}\n\nmath_modulo.value -> 10\nmath_modulo.divisor -> 2"
            ],
            "23": [
                "instance(x: 100, y: 100) iteration_find_5e3f1a root.Iteration.Find {}\niteration_find_5e3f1a.items = Strings.Characters(input).characters\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_f4c0d2\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_6a63e7\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Strings.Contains {}\n    strings_contains_1088d5.input = Strings.Slice(input, 0, List.GetAt(List.GenerateRange(0, List.Length(Strings.Characters(input).characters)), iteration_find_5e3f1a.index)).slice\n    char_f4c0d2 -> strings_contains_1088d5.contains\n    strings_contains_1088d5.result -> bool_6a63e7\n} -> iteration_find_5e3f1a.predicate\niteration_find_5e3f1a.item -> result",
                "instance(x: 100, y: 100) characters_9f6850 root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_6d05b0 root.Iteration.Find {}\ncharacters_9f6850.characters -> iteration_6d05b0.items\ninstance(x: 500, y: 150) seen_807ffd root.List.Empty {}\ninstance(x: 200, y: 250) contains_1088d5 root.List.Contains {}\niteration_6d05b0.item -> contains_1088d5.item\nseen_807ffd.list -> contains_1088d5.list\ncontains_1088d5.result -> iteration_6d05b0.predicate\ninstance(x: 200, y: 200) add_3bc2ae root.List.Add {}\niteration_6d05b0.item -> add_3bc2ae.item\nseen_807ffd.list -> add_3bc2ae.list\nadd_3bc2ae.listWithItem -> seen_807ffd.list\niteration_6d05b0.item -> iteration_6d05b0.result",
                "instance(x: 100, y: 100) characters_5f4c1a root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_7a8d95 root.Iteration.Find {}\ncharacters_5f4c1a.characters -> iteration_7a8d95.items\ninstance(x: 500, y: 150) seen_3b6e9c root.List.Empty {}\ninstance(x: 700, y: 200) contains_65c2f0 root.List.Contains {}\niteration_7a8d95.item -> contains_65c2f0.item\nseen_3b6e9c.list -> contains_65c2f0.list\nfunc() {\n    in(x: -113, y: 34, name: \"elem\") property(String) elem_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    contains_65c2f0.result -> bool_af09a7\n} -> iteration_7a8d95.predicate\ninstance(x: 900, y: 250) add_1e5b55 root.List.Add {}\nseen_3b6e9c.list -> add_1e5b55.list\niteration_7a8d95.item -> add_1e5b55.item\nadd_1e5b55.listWithItem -> seen_3b6e9c.list\niteration_7a8d95.item -> result",
                "instance(x: 100, y: 100) Std_For_1 root.Std.For {}\ninstance(x: 200, y: 150) List_Empty_2 root.List.Empty {}\ninstance(x: 300, y: 100) Strings_Characters_3 root.Strings.Characters {}\nStrings_Characters_3 -> Std_For_1.items\ninstance(x: 250, y: 250) Iteration_Find_4 root.Iteration.Find {}\ninstance(x: 400, y: 200) List_Add_5 root.List.Add {}\nList_Empty_2.list -> List_Add_5.list\nStd_For_1.item -> List_Add_5.item\nList_Add_5.listWithItem -> Iteration_Find_4.items\ninstance(x: 500, y: 250) Logic_NotEqual_6 root.Logic.NotEqual {}\ninstance(x: 450, y: 300) List_GetAt_7 root.List.GetAt {}\nIteration_Find_4.index -> List_GetAt_7.index\nList_Empty_2.list -> List_GetAt_7.list\nStd_For_1.item -> Logic_NotEqual_6.right\nList_GetAt_7.item -> Logic_NotEqual_6.left\nLogic_NotEqual_6.result -> Iteration_Find_4.predicate\nIteration_Find_4.item -> Std_For_1.next",
                "instance(x: 100, y: 100) characters_1 root.Std_k98ojb.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_2 root.Std_k98ojb.Iteration.Find {}\ncharacters_1.characters -> iteration_2.items\ninstance(x: 500, y: 150) contains_3 root.Std_k98ojb.List.Contains {}\niteration_2.item -> contains_3.item\nList.Slice { start: 0, end: iteration_2.index, list: characters_1.characters } -> contains_3.list\ncontains_3.result -> iteration_2.predicate\ninstance(x: 100, y: 300) input_4 property(String) {}\ninput_4 -> characters_1.input\niteration_2.item -> output",
                "instance(x: 100, y: 100) characters_4e2f1a root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_65c11b root.Iteration.Find {}\ncharacters_4e2f1a.characters -> iteration_65c11b.items\n\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n\n    instance(x: 89, y: 29) contains_1088d5 root.Strings.Contains {}\n    characters_4e2f1a.characters -> contains_1088d5.input\n    char_9f6850 -> contains_1088d5.contains\n    instance(x: 310, y: 35) notequal_807ffd root.Logic.NotEqual {}\n    1 -> notequal_807ffd.right\n    List.Length(List.Slice(characters_4e2f1a.characters, 0, characters_4e2f1a.characters.indexOf(char_9f6850))) -> notequal_807ffd.left\n    contains_1088d5.result -> bool_af09a7\n} -> iteration_65c11b.predicate\n\ninstance(x: 500, y: 100) result_f45a3e root.Std.If {}\niteration_65c11b.item -> result_f45a3e.input\nresult_f45a3e.value -> output",
                "instance(x: 100, y: 100) iteration_find_1 root.Iteration.Find {}\niteration_find_1.items = Strings.Characters(input_string).characters\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Strings.Contains {}\n    input_string -> strings_contains_1088d5.input\n    List.Slice(Strings.Characters(input_string).characters, 0, index - 1) -> strings_contains_1088d5.contains\n    char_9f6850 -> strings_contains_1088d5.contains\n    strings_contains_1088d5.result -> bool_af09a7\n} -> iteration_find_1.predicate\niteration_find_1.item -> first_repeated_character",
                "instance(x: 100, y: 100) characters_9f6850 root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_6d05b0 root.Iteration.Find {}\ncharacters_9f6850.characters -> iteration_6d05b0.items\ninstance(x: 500, y: 150) seen_807ffd root.List.Empty {}\ninstance(x: 200, y: 250) contains_1088d5 root.List.Contains {}\niteration_6d05b0.item -> contains_1088d5.item\nseen_807ffd.list -> contains_1088d5.list\ncontains_1088d5.result -> iteration_6d05b0.predicate\ninstance(x: 200, y: 200) add_3bc2ae root.List.Add {}\niteration_6d05b0.item -> add_3bc2ae.item\nseen_807ffd.list -> add_3bc2ae.list\nadd_3bc2ae.listWithItem -> seen_807ffd.list\niteration_6d05b0.item -> iteration_6d05b0.result",
                "instance(x: 100, y: 100) characters_6f2a7c root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_9e3b24 root.Iteration.Find {}\ncharacters_6f2a7c.characters -> iteration_9e3b24.items\ninstance(x: 500, y: 150) seen_f5a29d root.List.Empty {}\ninstance(x: 700, y: 200) contains_8d4c16 root.List.Contains {}\niteration_9e3b24.item -> contains_8d4c16.item\nseen_f5a29d.list -> contains_8d4c16.list\ncontains_8d4c16.result -> iteration_9e3b24.predicate\ninstance(x: 500, y: 250) add_ba95f1 root.List.Add {}\niteration_9e3b24.item -> add_ba95f1.item\nseen_f5a29d.list -> add_ba95f1.list\nadd_ba95f1.listWithItem -> seen_f5a29d.list\ninstance(x: 100, y: 50) input_7c2d9e root.Std.Input {}\ninput_7c2d9e.string -> characters_6f2a7c.input\niteration_9e3b24.item",
                "instance(x: 100, y: 100) Std_For_1 root.Std.For {}\ninstance(x: 200, y: 150) Strings_Characters_2 root.Strings.Characters {}\nStrings_Characters_2 -> Std_For_1.items\ninstance(x: 250, y: 200) Iteration_Find_3 root.Iteration.Find {}\nStd_For_1.on_item -> Iteration_Find_3.trigger\ninstance(x: 300, y: 250) List_GetAt_4 root.List.GetAt {}\nList_GetAt_4.index <- Std_For_1.index\nStrings_Characters_2.characters -> List_GetAt_4.list\ninstance(x: 350, y: 200) Logic_NotEqual_5 root.Logic.NotEqual {}\nList_GetAt_4.item -> Logic_NotEqual_5.left\nStd_For_1.item -> Logic_NotEqual_5.right\nLogic_NotEqual_5.result -> Iteration_Find_3.predicate\nIteration_Find_3.item -> Std_For_1.next"
            ],
            "35": [
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(input: items) -> sorted_items\nList.GetAt(index: 1, list: sorted_items) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(input: items) -> sorted_items\nList.GetAt(index: 1, list: sorted_items) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(input: list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest"
            ]
        }
    },
    {
        "experiment_name": "regular_similarity_1_shot",
        "best_params_optimization": "semantic",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": 50,
        "seed": 346,
        "n_generations_per_task": 10,
        "model": "llama3.3:70b-instruct-fp16",
        "largest_context": 3925,
        "task_candidates": {
            "7": [
                "instance(x: 100, y: 100) SetsIntersection_9f2e7a root.Sets.Intersection {}\nin(x: -200, y: 0, name: \"list1\") property(List) list1 -> SetsIntersection_9f2e7a.left\nin(x: 0, y: 0, name: \"list2\") property(List) list2 -> SetsIntersection_9f2e7a.right\n\ninstance(x: 300, y: 100) ListIsEmpty_e72c67 root.List.IsEmpty {}\nSetsIntersection_9f2e7a.intersect -> ListIsEmpty_e72c67.list\n\ninstance(x: 500, y: 100) LogicNot_71d8b5 root.Logic.Not {}\nListIsEmpty_e72c67.isEmpty -> LogicNot_71d8b5.input\nout(x: 700, y: 100, name: \"result\") property(Boolean) result <- LogicNot_71d8b5.output",
                "instance(x: 100, y: 100) SetsIntersection_5a4c2e root.Sets.Intersection {}\nin(x: -200, y: 0, name: \"list1\") property(List) list1 -> SetsIntersection_5a4c2e.left\nin(x: 0, y: 0, name: \"list2\") property(List) list2 -> SetsIntersection_5a4c2e.right\n\ninstance(x: 300, y: 100) ListIsEmpty_e8d95b root.List.IsEmpty {}\nSetsIntersection_5a4c2e.intersect -> ListIsEmpty_e8d95b.list\n\ninstance(x: 500, y: 100) LogicNot_dfcfab root.Logic.Not {}\nListIsEmpty_e8d95b.isEmpty -> LogicNot_dfcfab.input\nLogicNot_dfcfab.output -> out(x: 700, y: 0, name: \"result\") property(Boolean) result",
                "instance(x: 100, y: 100) List.Contains_8f4a23 root.Std_k98ojb.List.Contains {}\ninstance(x: 200, y: 100) Iteration.Map_f46a1d root.Std_k98ojb.Iteration.Map {}\nList.Contains_8f4a23.item -> Iteration.Map_f46a1d.handler\nin(x: 0, y: 0, name: \"list1\") property(List) list1_2e9c11\nin(x: 100, y: 0, name: \"list2\") property(List) list2_35a421\nlist2_35a421 -> Iteration.Map_f46a1d.items\nlist1_2e9c11 -> List.Contains_8f4a23.list\nout(x: 300, y: 100, name: \"result\") property(Boolean) result_6a5b4e\ninstance(x: 250, y: 150) Logic.Or_71f934 root.Std_k98ojb.Logic.Or {}\nIteration.Map_f46a1d.output_list -> Logic.Or_71f934.left\nLogic.Or_71f934.result -> result_6a5b4e",
                "instance(x: 100, y: 100) List.Contains_1d86d4 root.Std_k98ojb.List.Contains {}\ninstance(x: 200, y: 100) Iteration.Map_f46a1e root.Std_k98ojb.Iteration.Map {}\nList.Contains_1d86d4.item -> Iteration.Map_f46a1e.handler\nin(x: 0, y: 0, name: \"list1\") property(List) list1_e81f6c\nin(x: 100, y: 0, name: \"list2\") property(List) list2_48b5d3\nlist1_e81f6c -> Iteration.Map_f46a1e.items\ninstance(x: 300, y: 100) Logic.Or_dfafe4 root.Std_k98ojb.Logic.Or {}\nIteration.Map_f46a1e.output_list -> Logic.Or_dfafe4.left\nLogic.Or_dfafe4.result -> out(x: 400, y: 100, name: \"result\") property(Boolean) result_48c9f7\nlist2_48b5d3 -> List.Contains_1d86d4.list",
                "instance(x: 100, y: 100) sets_intersection_1 root.Sets.Intersection {}\ninstance(x: 200, y: 100) logic_not_equal_2 root.Logic.NotEqual {}\ninstance(x: 300, y: 100) list_empty_3 root.List.Empty {}\n\nin(x: 0, y: 0, name: \"list1\") property(List) list1\nin(x: 50, y: 0, name: \"list2\") property(List) list2\n\nout(x: 400, y: 100, name: \"result\") property(Bool) result\n\nlist1 -> sets_intersection_1.left\nlist2 -> sets_intersection_1.right\nsets_intersection_1.intersect -> logic_not_equal_2.left\nlist_empty_3.list -> logic_not_equal_2.right\nlogic_not_equal_2.result -> result",
                "instance(x: 100, y: 100) list1_2a87d4 root.Std_k98ojb.List.Flatten {}\nin(x: -200, y: 0, name: \"list1\") property(List) list1 -> list1_2a87d4.list\n\ninstance(x: 300, y: 100) list2_e4e8c5 root.Std_k98ojb.List.Flatten {}\nin(x: -100, y: 0, name: \"list2\") property(List) list2 -> list2_e4e8c5.list\n\ninstance(x: 200, y: 200) intersection_48a1f3 root.Sets.Intersection {}\nlist1_2a87d4.flattened_list -> intersection_48a1f3.left\nlist2_e4e8c5.flattened_list -> intersection_48a1f3.right\n\ninstance(x: 400, y: 200) is_not_empty_d7d9e6 root.List.NotEmpty {}\nintersection_48a1f3.intersect -> is_not_empty_d7d9e6.list\nout(x: 500, y: 0, name: \"result\") property(Boolean) result <- is_not_empty_d7d9e6.isNotEmpty",
                "instance(x: 100, y: 100) list1_9f2c11 root.Std_k98ojb.List.Empty {}\ninstance(x: 200, y: 100) list2_35a411 root.Std_k98ojb.List.Empty {}\n\nfunc() has_common_element {\n    in(x: -173, y: -13, name: \"list1\") property(List) list1_f846b\n    in(x: -181, y: -13, name: \"list2\") property(List) list2_c62075\n\n    out(x: 300, y: -110, name: \"result\") property(Boolean) result_0d40f1\n\n    instance(x: 150, y: 50) intersection_d8e4b3 root.Sets.Intersection {}\n    list1_f846b -> intersection_d8e4b3.left\n    list2_c62075 -> intersection_d8e4b3.right\n\n    instance(x: 250, y: 50) is_not_empty_5f4c11 root.Std_k98ojb.List.NotEmpty {}\n    intersection_d8e4b3.intersect -> is_not_empty_5f4c11.list\n    is_not_empty_5f4c11.isNotEmpty -> result_0d40f1\n}\n\ninstance(x: 100, y: 200) has_common_element_35a411 root.main.has_common_element {}\nlist1_9f2c11.list -> has_common_element_35a411.list1_f846b\nlist2_35a411.list -> has_common_element_35a411.list2_c62075",
                "instance(x: 100, y: 100) list1_1f846b root.Std_k98ojb.List.Empty {}\ninstance(x: 200, y: 100) list2_c62075 root.Std_k98ojb.List.Empty {}\n\ninstance(x: 150, y: 150) intersection_201051 root.Sets.Intersection {}\nlist1_1f846b -> intersection_201051.left\nlist2_c62075 -> intersection_201051.right\n\ninstance(x: 250, y: 200) not_empty_4e8c54 root.Std_k98ojb.List.NotEmpty {}\nintersection_201051.intersect -> not_empty_4e8c54.list",
                "instance(x: 100, y: 100) sets_intersection_5f4a3d root.Sets.Intersection {}\ninstance(x: 200, y: 100) list1_e48a92 property(List) \ninstance(x: 300, y: 100) list2_48c206 property(List) \nlist1_e48a92 -> sets_intersection_5f4a3d.left\nlist2_48c206 -> sets_intersection_5f4a3d.right\ninstance(x: 400, y: 100) logic_not_f5e9b8 root.Logic.Not {}\ninstance(x: 500, y: 100) list_is_empty_e4a209 root.List.IsEmpty {}\nsets_intersection_5f4a3d.intersect -> list_is_empty_e4a209.list\nlist_is_empty_e4a209.isEmpty -> logic_not_f5e9b8.input",
                "instance(x: 100, y: 100) Sets.Intersection_7d4c11 root.Std_k98ojb.Sets.Intersection {}\nin(x: -173, y: -181, name: \"list1\") property(List) list1 -> Sets.Intersection_7d4c11.left\nin(x: -181, y: -13, name: \"list2\") property(List) list2 -> Sets.Intersection_7d4c11.right\ninstance(x: 300, y: 100) List.IsEmpty_f0f6e3 root.Std_k98ojb.List.IsEmpty {}\nSets.Intersection_7d4c11.intersect -> List.IsEmpty_f0f6e3.list\ninstance(x: 500, y: 100) Logic.Not_d5a1e2 root.Std_k98ojb.Logic.Not {}\nList.IsEmpty_f0f6e3.isEmpty -> Logic.Not_d5a1e2.input\nout(x: 700, y: 100, name: \"result\") property(Boolean) result <- Logic.Not_d5a1e2.output"
            ],
            "11": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e65f11 root.Std_k98ojb.List.Sort {}\n        instance(x: 375, y: -207, name: \"check for consecutive numbers\") reduce_2c0e7a root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e65f11.list\n        sort_e65f11.sorted_list -> reduce_2c0e7a.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_f4851d\n            in(x: -23, y: 79, name: \"current\") property(Number) current_d8b4f5\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_2c0e7a\n\n            instance(x: 226, y: 56) substract_e3d9a1 root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_f4851d root.Std_k98ojb.Logic.Equal {}\n            instance(x: 246, y: -209, name: \"get previous number\") get_at_7c95e2 root.Std_k98ojb.List.GetAt {}\n            reduce_2c0e7a.index -> get_at_7c95e2.index\n            sort_e65f11.sorted_list -> get_at_7c95e2.list\n            1 -> substract_e3d9a1.first\n            get_at_7c95e2.item -> substract_e3d9a1.second\n            current_d8b4f5 -> equal_f4851d.right\n            substract_e3d9a1.result -> equal_f4851d.left\n            acc_f4851d -> output_2c0e7a\n            equal_f4851d.result -> output_2c0e7a\n        } -> reduce_2c0e7a.handler\n        true -> reduce_2c0e7a.initial_value\n        reduce_2c0e7a.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_2e6a5c root.Std_k98ojb.List.Sort {}\n        instance(x: 375, y: -207, name: \"check each pair of numbers\") iteration_32727d root.Std_k98ojb.Iteration.Filter {}\n        list_07cae4 -> sort_2e6a5c.list\n        sort_2e6a5c.sorted_list -> iteration_32727d.items\n\n        func() {\n            in(x: -30, y: -25, name: \"current\") property(Number) current_f47b31\n            in(x: -23, y: 79, name: \"index\") property(Number) index_769593\n            in(x: -10, y: 133, name: \"context\") property(List) context_45a613\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) get_at_c76d2b root.Std_k98ojb.List.GetAt {}\n            instance(x: 463, y: 51) sub_7836b4 root.Std_k98ojb.Math.Sub {}\n            instance(x: 631, y: 53) not_equal_dfdfe5 root.Std_k98ojb.Logic.NotEqual {}\n            context_45a613 -> get_at_c76d2b.list\n            index_769593 -> get_at_c76d2b.index\n            current_f47b31 -> sub_7836b4.first\n            1 -> sub_7836b4.second\n            get_at_c76d2b.item -> not_equal_dfdfe5.left\n            sub_7836b4.result -> not_equal_dfdfe5.right\n            not_equal_dfdfe5.result -> output_efbc78\n        } -> iteration_32727d.handler\n\n        instance(x: 847, y: -203) not_75283f root.Std_k98ojb.Logic.Not {}\n        iteration_32727d.output_list -> not_75283f.input\n        not_75283f.result -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_f6c1a3 root.Std_k98ojb.List.Sort {}\n        instance(x: 375, y: -207, name: \"check if all numbers are consecutive\") reduce_9e7f4d root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_f6c1a3.list\n        sort_f6c1a3.sorted_list -> reduce_9e7f4d.items\n\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_e8a2b5\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n            in(x: -16, y: 121, name: \"index\") property(Number) index_f41c1e\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) subtract_76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) not_equal_c1a93 root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 631, y: -14) and_dae5c6 root.Std_k98ojb.Logic.And {}\n            index_f41c1e -> subtract_76d2b.first\n            current_769593 -> subtract_76d2b.second\n            acc_e8a2b5 -> and_dae5c6.left\n            not_equal_c1a93.result -> and_dae5c6.right\n            1 -> subtract_76d2b.second\n            not_equal_c1a93.left -> subtract_76d2b.result\n            0 -> not_equal_c1a93.right\n            and_dae5c6.result -> output_efbc78\n        } -> reduce_9e7f4d.handler\n        true -> reduce_9e7f4d.initial_value\n        reduce_9e7f4d.result -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e4f5a2 root.Std_k98ojb.List.Sort {}\n        instance(x: 382, y: -207, name: \"check if all numbers are consecutive\") reduce_32727d root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e4f5a2.list\n        sort_e4f5a2.sorted_list -> reduce_32727d.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_170471\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) subtract_c76d2b root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_7836b4 root.Std_k98ojb.Logic.Equal {}\n            instance(x: 656, y: 55) and_42e8a5 root.Std_k98ojb.Logic.And {}\n            1 -> subtract_c76d2b.first\n            current_769593 -> subtract_c76d2b.second\n            acc_170471 -> and_42e8a5.left\n            equal_7836b4.result -> and_42e8a5.right\n            and_42e8a5.result -> output_efbc78\n            subtract_c76d2b.result -> equal_7836b4.left\n            0 -> equal_7836b4.right\n        } -> reduce_32727d.handler\n        true -> reduce_32727d.initial_value\n        reduce_32727d.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -145) sort_e64c11 root.Std_k98ojb.List.Sort {}\n        instance(x: 381, y: -141) all_c7e1a5 root.Std_k98ojb.Iteration.Filter {}\n        list_07cae4 -> sort_e64c11.list\n        sort_e64c11.sorted_list -> all_c7e1a5.items\n        func() {\n            in(x: -30, y: -25, name: \"current\") property(Number) _index_170471\n            in(x: -23, y: 79, name: \"_index\") property(Number) _index_769593\n            in(x: -17, y: 123, name: \"context\") property(List) context_8c9d6f\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) get_at_f2e1b7 root.Std_k98ojb.List.GetAt {}\n            instance(x: 463, y: 51) equal_7836b4 root.Std_k98ojb.Logic.Equal {}\n            context_8c9d6f -> get_at_f2e1b7.list\n            _index_769593 -> get_at_f2e1b7.index\n            get_at_f2e1b7.item -> equal_7836b4.left\n            _index_769593 -> equal_7836b4.right\n            equal_7836b4.result -> output_efbc78\n        } -> all_c7e1a5.handler\n        true -> all_c7e1a5.context\n        all_c7e1a5.output_list -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e64f51 root.Std_k98ojb.List.Sort {}\n        instance(x: 355, y: -207, name: \"check for consecutive numbers\") reduce_f46a32 root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e64f51.list\n        sort_e64f51.sorted_list -> reduce_f46a32.items\n\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_170471\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n            in(x: -10, y: 121, name: \"index\") property(Number) index_3f4e1a\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) get_at_e8c7b9 root.Std_k98ojb.List.GetAt {}\n            instance(x: 463, y: 51) substract_7836b4 root.Std_k98ojb.Math.Sub {}\n            instance(x: 631, y: 49) not_equal_dfd371 root.Std_k98ojb.Logic.NotEqual {}\n            list_07cae4 -> get_at_e8c7b9.list\n            index_3f4e1a -> get_at_e8c7b9.index\n            substract_7836b4.result -> not_equal_dfd371.left\n            1 -> substract_7836b4.second\n            current_769593 -> substract_7836b4.first\n            get_at_e8c7b9.item -> acc_170471\n            not_equal_dfd371.result -> output_efbc78\n        } -> reduce_f46a32.handler\n        true -> reduce_f46a32.initial_value\n        reduce_f46a32.output -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_e6f5c3 root.Std_k98ojb.List.Sort {}\n        instance(x: 434, y: -203, name: \"check for consecutive numbers\") reduce_34a79e root.Std_k98ojb.Iteration.Reduce {}\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_e9f2c4\n            in(x: -23, y: 79, name: \"current\") property(Number) current_170471\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) sub_ba9e2d root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) equal_7836b4 root.Std_k98ojb.Logic.Equal {}\n            1 -> sub_ba9e2d.second\n            acc_e9f2c4 -> equal_7836b4.left\n            equal_7836b4.result -> output_efbc78\n            sub_ba9e2d.result -> equal_7836b4.right\n            current_170471 -> sub_ba9e2d.first\n        } -> reduce_34a79e.handler\n        sort_e6f5c3.sorted_list -> reduce_34a79e.items\n        true -> reduce_34a79e.initial_value\n        reduce_34a79e.result -> output_8d07dc\n        list_07cae4 -> sort_e6f5c3.list\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_f6c1a3 root.Std_k98ojb.List.Sort {}\n        instance(x: 391, y: -207, name: \"check for consecutive numbers\") reduce_4f5e2d root.Std_k98ojb.Iteration.Reduce {}\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_ea6c1a\n            in(x: -23, y: 79, name: \"current\") property(Number) current_170471\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) substract_e4e2a3 root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) not_equal_7836b4 root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 656, y: 46) and_dfa7c9 root.Std_k98ojb.Logic.And {}\n            1 -> substract_e4e2a3.second\n            current_170471 -> substract_e4e2a3.first\n            not_equal_7836b4.result -> and_dfa7c9.right\n            acc_ea6c1a -> and_dfa7c9.left\n            and_dfa7c9.result -> output_efbc78\n            substract_e4e2a3.result -> not_equal_7836b4.left\n            0 -> not_equal_7836b4.right\n        } -> reduce_4f5e2d.handler\n        true -> reduce_4f5e2d.initial_value\n        sort_f6c1a3.sorted_list -> reduce_4f5e2d.items\n        reduce_4f5e2d.result -> output_8d07dc\n        list_07cae4 -> sort_f6c1a3.list\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -163) sort_e3b7a2 root.Std_k98ojb.List.Sort {}\n        instance(x: 434, y: -155) reduce_0f5c4e root.Std_k98ojb.Iteration.Reduce {}\n        list_07cae4 -> sort_e3b7a2.list\n        sort_e3b7a2.sorted_list -> reduce_0f5c4e.items\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_f8d9c1\n            in(x: -23, y: 79, name: \"current\") property(Number) current_e55a93\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_4f2e7b\n\n            instance(x: 226, y: 56) subtract_dfd8c9 root.Std_k98ojb.Math.Sub {}\n            instance(x: 463, y: 51) not_equal_f0a5d1 root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 373, y: -13) and_35e3f4 root.Std_k98ojb.Logic.And {}\n            1 -> subtract_dfd8c9.second\n            current_e55a93 -> subtract_dfd8c9.first\n            not_equal_f0a5d1.left -> subtract_dfd8c9.result\n            acc_f8d9c1 -> and_35e3f4.left\n            not_equal_f0a5d1.result -> and_35e3f4.right\n            and_35e3f4.result -> output_4f2e7b\n            true -> not_equal_f0a5d1.right\n        } -> reduce_0f5c4e.handler\n        reduce_0f5c4e.result -> output_8d07dc\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\n        out(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n\n        instance(x: 105, y: -205, name: \"sort the list\") sort_f5e6a2 root.Std_k98ojb.List.Sort {}\n        instance(x: 375, y: -207, name: \"check for consecutive numbers\") reduce_d91c11 root.Std_k98ojb.Iteration.Reduce {}\n        func() {\n            in(x: -30, y: -25, name: \"acc\") property(Bool) acc_170471\n            in(x: -23, y: 79, name: \"current\") property(Number) current_769593\n            in(x: -15, y: 131, name: \"index\") property(Number) index_e5a4b1\n\n            out(x: 705, y: 49, name: \"output\") property(Bool) output_efbc78\n\n            instance(x: 226, y: 56) get_at_8e2f51 root.Std_k98ojb.List.GetAt {}\n            instance(x: 463, y: 51) subtract_e53a3d root.Std_k98ojb.Math.Sub {}\n            instance(x: 631, y: 55) not_equal_c9e5c4 root.Std_k98ojb.Logic.NotEqual {}\n            sort_f5e6a2.sorted_list -> get_at_8e2f51.list\n            index_e5a4b1 -> get_at_8e2f51.index\n            current_769593 -> subtract_e53a3d.first\n            get_at_8e2f51.item -> subtract_e53a3d.second\n            1 -> subtract_e53a3d.second\n            not_equal_c9e5c4.result -> output_efbc78\n            subtract_e53a3d.result -> not_equal_c9e5c4.left\n            0 -> not_equal_c9e5c4.right\n            acc_170471 -> output_efbc78\n        } -> reduce_d91c11.handler\n        sort_f5e6a2.sorted_list -> reduce_d91c11.items\n        true -> reduce_d91c11.initial_value\n        reduce_d91c11.result -> output_8d07dc\n        list_07cae4 -> sort_f5e6a2.list\n    }\n}"
            ],
            "17": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -515, y: 100, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && main_list_slice == sublist\"\n        }\n        for_d26972.item -> ifexpression_875761.gen_0\n        for_d26973.index -> ifexpression_875761.gen_1\n        sublist_ec88cd -> ifexpression_875761.gen_2\n        main_list_ec88cd -> for_d26972.items\n        for_d26972.done -> continue_a96db6\n        for_d26972.onItem -> for_d26973.reset\n        for_d26973.item -> ifexpression_875761.execute\n        for_d26973.done -> ifexpression_875761.else\n        ifexpression_875761.then -> output_5bbcd7\n        ifexpression_875761.value -> output_5bbcd7\n        execute_90aaec -> for_d26972.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 30, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) if_875761 root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26972.items\n        main_list_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.done -> if_875761.input\n        for_d26972.onItem -> for_d26973.reset\n        for_d26973.done -> for_d26972.next\n        if_875761.then -> output_5bbcd7\n        if_875761.else -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a specified list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) if_8d9f65 root.Std_k98ojb.Std.If {}\n\n        sublist_ec88cd -> for_d26972.items\n        main_list_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26973.reset\n        for_d26973.onItem -> for_d26972.reset\n        for_d26972.done -> if_8d9f65.execute\n        for_d26972.item -> if_8d9f65.value\n        for_d26973.item -> if_8d9f65.input\n        if_8d9f65.then -> output_5bbcd7\n        if_8d9f65.else -> continue_a96db6\n        for_d26972.done -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 5) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && main_list_slice == sublist\"\n        }\n        for_d26972.item -> ifexpression_875761.gen_0\n        for_d26973.index -> ifexpression_875761.gen_1\n        sublist_ec88cd -> ifexpression_875761.gen_2\n        main_list_ec88cd -> ifexpression_875761.gen_3\n        ifexpression_875761.value -> output_5bbcd7\n        ifexpression_875761.then -> continue_a96db6\n        ifexpression_875761.else -> for_d26972.reset\n        execute_90aaec -> for_d26972.execute\n        for_d26972.onItem -> for_d26973.execute\n        for_d26973.done -> ifexpression_875761.execute\n        main_list_ec88cd -> for_d26972.items\n        sublist_ec88cd -> for_d26973.items\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 80, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1000, y: 150) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && main_list_slice == sublist\"\n        }\n        for_d26972.item -> ifexpression_875761.gen_1\n        for_d26973.index -> ifexpression_875761.gen_0\n        for_d26972.onItem -> ifexpression_875761.execute\n        for_d26972.done -> continue_a96db6\n        ifexpression_875761.then -> output_5bbcd7\n        ifexpression_875761.else -> continue_a96db6\n        main_list_ec88cd -> for_d26972.items\n        sublist_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26972.reset\n        for_d26973.done -> for_d26972.next\n        for_d26972.index -> ifexpression_875761.main_list_index\n        List.Length(sublist_ec88cd) -> ifexpression_875761.sublist_length\n        List.Length(main_list_ec88cd) -> ifexpression_875761.main_list_length\n        List.Slice(main_list_ec88cd, for_d26972.index, for_d26972.index + List.Length(sublist_ec88cd)) -> ifexpression_875761.main_list_slice\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 30, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 30) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && all(sublist == main_list_slice)\"\n        }\n        for_d26972.item -> ifexpression_875761.gen_0\n        for_d26973.index -> ifexpression_875761.gen_1\n        main_list_ec88cd -> for_d26972.items\n        sublist_ec88cd -> for_d26973.items\n        for_d26972.onItem -> for_d26973.reset\n        for_d26972.item -> ifexpression_875761.main_list_index\n        for_d26973.done -> ifexpression_875761.execute\n        ifexpression_875761.value -> output_5bbcd7\n        ifexpression_875761.then -> continue_a96db6\n        execute_90aaec -> for_d26972.reset\n        for_d26972.done -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 80, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1020, y: 30) ifexpression_875761 root.Std_k98ojb.Std.IfExpression {\n            expression: \"main_list_index + sublist_length <= main_list_length && main_list_slice == sublist\"\n        }\n        for_d26972.item -> ifexpression_875761.gen_2\n        for_d26972.index -> ifexpression_875761.gen_0\n        for_d26973.done -> ifexpression_875761.execute\n        for_d26972.onItem -> for_d26973.reset\n        main_list_ec88cd -> for_d26972.items\n        sublist_ec88cd -> for_d26973.items\n        for_d26972.index -> ifexpression_875761.gen_1\n        ifexpression_875761.then -> output_5bbcd7\n        ifexpression_875761.else -> continue_a96db6\n        execute_90aaec -> for_d26972.trigger\n        instance(x: 1120, y: -10) list_slice_e3fba4 root.Std_k98ojb.List.Slice {\n            start: for_d26972.index,\n            end: for_d26972.index + List.Length(sublist_ec88cd)\n        }\n        instance(x: 930, y: 50) list_length_29e1c6 root.Std_k98ojb.List.Length {}\n        main_list_ec88cd -> list_length_29e1c6.list\n        list_slice_e3fba4.slice -> ifexpression_875761.gen_3\n        sublist_ec88cd -> ifexpression_875761.gen_4\n        list_length_29e1c6.length -> ifexpression_875761.gen_5\n        for_d26973.done -> ifexpression_875761.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 70, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1002, y: 30) if_875761 root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.items\n        sublist_ec88cd -> for_d26973.items\n        main_list_ec88cd -> for_d26972.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.onItem -> if_875761.input\n        for_d26973.done -> if_875761.input\n        if_875761.then -> output_5bbcd7\n        if_875761.else -> continue_a96db6\n        for_d26972.done -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1020, y: 30) if_875761 root.Std_k98ojb.Std.If {}\n\n        sublist_ec88cd -> for_d26972.items\n        main_list_ec88cd -> for_d26973.items\n        execute_90aaec -> for_d26973.reset\n        for_d26973.onItem -> for_d26972.reset\n        for_d26972.item -> if_875761.value\n        for_d26973.item -> if_875761.then_value\n        if_875761.execute -> for_d26972.trigger\n        for_d26972.done -> if_875761.else_trigger\n        if_875761.then_trigger -> output_5bbcd7\n        if_875761.else_trigger -> continue_a96db6\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is a sublist of another list.\") issublist {\n        in(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n        in(x: -485, y: 30, name: \"main_list\") property(List) main_list_ec88cd\n        in(x: -505, y: 90, name: \"sublist\") property(List) sublist_ec88cd\n\n        out(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n        out(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n\n        instance(x: 752, y: 93) for_d26972 root.Std_k98ojb.Std.For {}\n        instance(x: 321, y: -20) for_d26973 root.Std_k98ojb.Std.For {}\n        instance(x: 1021, y: 5) if_875761 root.Std_k98ojb.Std.If {}\n\n        for_d26972.item -> for_d26973.reset\n        sublist_ec88cd -> for_d26973.items\n        main_list_ec88cd -> for_d26972.items\n        execute_90aaec -> for_d26972.trigger\n        for_d26972.onItem -> if_875761.input\n        for_d26973.done -> if_875761.then\n        for_d26972.item -> for_d26973.reset\n        for_d26973.onItem -> continue_a96db6\n        if_875761.else -> output_5bbcd7\n        if_875761.value -> output_5bbcd7\n    }\n}"
            ],
            "27": [
                "List.GetAt {\n  items: input_list\n  index: 0\n} -> first_item\n\nMath.Sub {\n  first: Math.Add { first: first_item; second: 1 }\n  second: 1\n} -> expected_first\n\nIteration.Find {\n  items: input_list\n  predicate: func(x) {\n    Logic.NotEqual {\n      left: x\n      right: expected_first\n    }\n  }\n} -> found\n\nStd.If {\n  input: found.item\n  then: Math.Add { first: found.index; second: 1 }\n  else: List.Length { list: input_list }\n} -> result",
                "List.GetAt {\n  list: input_list\n  index: 0\n} -> first_item\n\nMath.Sub {\n  first: item\n  second: 1\n} -> expected_first\n\nStd.IfExpression {\n  expression: \"expected_first == first_item ? true : false\"\n} -> is_sequence_start\n\nStd.If {\n  input: is_sequence_start\n  then: find_missing_number\n  else: return_first_item_minus_one\n}\n\nfind_missing_number {\n  Iteration.Find {\n    items: input_list\n    predicate: is_missing\n  } -> missing_item\n}\n\nis_missing {\n  List.GetAt {\n    list: input_list\n    index: index\n  } -> current_item\n\n  Math.Add {\n    first: previous_item\n    second: 1\n  } -> expected_item\n\n  Logic.NotEqual {\n    left: current_item\n    right: expected_item\n  }\n}\n\nreturn_first_item_minus_one {\n  Math.Sub {\n    first: first_item\n    second: 1\n  }\n}",
                "List.GetAt -> Iteration.Find.handler\nList.Length -> Std.Count.count\nStd.Count.reset -> null\nIteration.Find.items -> List.GenerateRange.from_to\nList.GenerateRange.to -> Math.Add.result\nMath.Add.first -> List.Length.length\nMath.Add.second -> 1\nList.GenerateRange.from -> 1\nIteration.Find.predicate -> Logic.Not.result\nLogic.Not.input -> Logic.Equal.result\nLogic.Equal.left -> Iteration.Find.item\nLogic.Equal.right -> List.GetAt.result\nList.GetAt.list -> input_list\nList.GetAt.index -> Iteration.Find.index",
                "List.GetAt -> Iteration.Find.handler\n            instance(x: 426, y: -303) list_get_at_node root.Std_k98ojb.List.GetAt {}\n            instance(x: 426, y: -219) iteration_find_node root.Iteration.Find {}\n            list_get_at_node.index -> iteration_find_node.index\n            iteration_find_node.item -> min_ai\n            \n            instance(x: 159, y: -303) math_add_node root.Math.Add {}\n            math_add_node.first -> iteration_find_node.index\n            math_add_node.second -> 1\n            math_add_node.result -> list_get_at_node.index\n\n            instance(x: 426, y: -426) list_length_node root.Std_k98ojb.List.Length {}\n            list_length_node.list -> items_ai\n            list_length_node.length -> iteration_find_node.index\n            \n            instance(x: 159, y: -426) logic_not_node root.Logic.Not {}\n            iteration_find_node.found -> logic_not_node.input\n            logic_not_node.output -> min_ai",
                "List.GetAt {\n  list: input_list\n  index: 0\n} -> first_item\n\nMath.Sub {\n  first: List.Length { list: input_list }.result\n  second: 1\n} -> expected_length\n\nIteration.Find {\n  items: input_list\n  predicate: func(item, index) {\n    Math.NotEqual {\n      left: item\n      right: index + 1\n    }\n  }\n} -> smallest_missing_item\n\nStd.If {\n  input: Logic.Not { value: smallest_missing_item.item == null }\n  then: smallest_missing_item.item\n  else: expected_length\n} -> result",
                "List.FirstItem {\n  item: List.GetAt { index: 0, list: input_list } \n} -> first_item\n\nMath.Sub {\n  first: List.Length { list: input_list },\n  second: 1\n} -> length_minus_one\n\nIteration.Find {\n  items: input_list,\n  predicate: func(x) {\n    Math.GreaterThan {\n      left: x,\n      right: first_item + length_minus_one\n    }\n  }\n} -> found_item\n\nStd.IfExpression {\n  expression: \"found_item == null ? first_item : first_item\"\n} -> result_if_null\n\nMath.Add {\n  first: first_item,\n  second: 1\n} -> plus_one\n\nStd.IfExpression {\n  expression: \"found_item != null && found_item - first_item > 1 ? first_item + 1 : result_if_null\"\n} -> smallest_missing_number",
                "List.FirstItem {\n  item: List.GetAt { index: 0, list: input_list } \n} -> first_item\n\nMath.Sub {\n  first: List.Length { list: input_list },\n  second: 1\n} -> list_length_minus_one\n\nIteration.Find {\n  items: input_list,\n  predicate: func(x) {\n    Math.NotEqual {\n      left: x,\n      right: List.GetAt { index: x - first_item, list: input_list }\n    }\n  }\n} -> smallest_missing_number",
                "List.FirstItem {\n  items: input_list\n} first_item_node\n\nMath.Add {\n  first: first_item_node.item\n  second: 0\n} expected_num_node\n\nIteration.Find {\n  items: input_list\n  predicate: func(x) {\n    Logic.NotEqual {\n      left: x\n      right: expected_num_node.result\n    }\n  }\n} find_node\n\nStd.If {\n  input: find_node.found\n  then: Math.Add {\n    first: expected_num_node.result\n    second: 0\n  }\n  else: Iteration.Map {\n    items: input_list\n    handler: func(x, index) {\n      Math.Add {\n        first: x\n        second: 1\n      }\n    }\n  }\n} result_node",
                "List.GetAt {\n  items: input_list\n  index: 0\n} -> first_item\n\nMath.Sub {\n  first: List.Length { items: input_list }.length\n  second: 1\n} -> expected_length\n\nIteration.Find {\n  items: input_list\n  predicate: func(item, index) {\n    Math.NotEqual {\n      left: item\n      right: index + 1\n    }\n  }\n} -> result\n\nStd.If {\n  input: Logic.Not { input: result.item == null }\n  then: result.item\n  else: expected_length\n} -> smallest_missing_number",
                "List.GetAt -> Iteration.Find.handler\n    instance(x: 100, y: 100) list_node List.GenerateRange { from: 1, to: 10 }\n    instance(x: 200, y: 100) iteration_find_node Iteration.Find {\n        items: list_node.range,\n        handler: func(it) { return it != list_node.range[list_node.range.indexOf(it)] }\n    }\n    instance(x: 300, y: 100) math_add_node Math.Add {\n        first: iteration_find_node.item,\n        second: 1\n    }\n    instance(x: 400, y: 100) logic_not_node Logic.Not { left: iteration_find_node.found }\n    instance(x: 500, y: 100) std_if_node Std.If { input: logic_not_node.result, then: math_add_node.result, else: iteration_find_node.item }"
            ],
            "31": [
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 100, y: 100) StringsReplace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) StringsReplace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) StringsReplace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> StringsReplace_1.input\n\" \" -> StringsReplace_1.search\n\":\" -> StringsReplace_1.replace\n\nStringsReplace_1.output -> StringsReplace_2.input\n\",\" -> StringsReplace_2.search\n\":\" -> StringsReplace_2.replace\n\nStringsReplace_2.output -> StringsReplace_3.input\n\".\" -> StringsReplace_3.search\n\":\" -> StringsReplace_3.replace\n\nStringsReplace_3.output -> output",
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 110, y: 130) replace_6c1e21 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 110, y: 200) replace_6c1e22 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 110, y: 270) replace_6c1e23 root.Std_k98ojb.Strings.Replace {}\n\n\" \" -> replace_6c1e21.search\n\",\" -> replace_6c1e22.search\n\".\" -> replace_6c1e23.search\n\":\" -> replace_6c1e21.replace\n\":\" -> replace_6c1e22.replace\n\":\" -> replace_6c1e23.replace\n\ninstance(x: 340, y: 130) input_0 root.Std_k98ojb.Property {}\ninput_0 -> replace_6c1e21.input\nreplace_6c1e21.output -> replace_6c1e22.input\nreplace_6c1e22.output -> replace_6c1e23.input\n\ninstance(x: 570, y: 270) output_0 root.Std_k98ojb.Property {}\nreplace_6c1e23.output -> output_0",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput_string -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\nStrings_Replace_3.output -> output_string",
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 100, y: 100) StringsReplace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) StringsReplace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) StringsReplace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> StringsReplace_1.input\n\" \" -> StringsReplace_1.search\n\":\" -> StringsReplace_1.replace\n\nStringsReplace_1.output -> StringsReplace_2.input\n\",\" -> StringsReplace_2.search\n\":\" -> StringsReplace_2.replace\n\nStringsReplace_2.output -> StringsReplace_3.input\n\".\" -> StringsReplace_3.search\n\":\" -> StringsReplace_3.replace\n\nStringsReplace_3.output -> output",
                "instance(x: 100, y: 100) replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput -> replace_1.input\n\" \" -> replace_1.search\n\":\" -> replace_1.replace\n\nreplace_1.output -> replace_2.input\n\",\" -> replace_2.search\n\":\" -> replace_2.replace\n\nreplace_2.output -> replace_3.input\n\".\" -> replace_3.search\n\":\" -> replace_3.replace\n\nreplace_3.output -> output",
                "instance(x: 100, y: 100) Strings_Replace_1 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 200, y: 100) Strings_Replace_2 root.Std_k98ojb.Strings.Replace {}\ninstance(x: 300, y: 100) Strings_Replace_3 root.Std_k98ojb.Strings.Replace {}\n\ninput_string -> Strings_Replace_1.input\n\" \" -> Strings_Replace_1.search\n\":\" -> Strings_Replace_1.replace\n\nStrings_Replace_1.output -> Strings_Replace_2.input\n\",\" -> Strings_Replace_2.search\n\":\" -> Strings_Replace_2.replace\n\nStrings_Replace_2.output -> Strings_Replace_3.input\n\".\" -> Strings_Replace_3.search\n\":\" -> Strings_Replace_3.replace\n\noutput_string <- Strings_Replace_3.output"
            ],
            "33": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) firstitem_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> firstitem_038fce.list\n        instance(x: 933, y: 25) filter_f11fda root.Std_k98ojb.Iteration.Filter {\n            handler: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) equal_e19a62 root.Std_k98ojb.Logic.Equal {}\n                firstitem_038fce.item -> equal_e19a62.left\n                element_5f51f7 -> equal_e19a62.right\n                equal_e19a62.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> filter_f11fda.items\n        instance(x: 1504, y: -400) if_07b8c7 root.Std_k98ojb.Std.If {}\n        filter_f11fda.output_list -> if_07b8c7.input\n        firstitem_038fce.item -> if_07b8c7.then\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) first_item_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> first_item_038fce.list\n        instance(x: 933, y: 25) all_same_f11fda root.Std_k98ojb.Iteration.Find {\n            predicate: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) not_equal_2f9d09 root.Std_k98ojb.Logic.NotEqual {}\n                element_5f51f7 -> not_equal_2f9d09.left\n                first_item_038fce.item -> not_equal_2f9d09.right\n                not_equal_2f9d09.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> all_same_f11fda.items\n        instance(x: 1504, y: -400) if_e19a62 root.Std_k98ojb.Std.If {}\n        all_same_f11fda.item -> if_e19a62.input\n        execute_27b8c3 -> if_e19a62.execute\n        if_e19a62.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) firstitem_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> firstitem_038fce.list\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        firstitem_038fce.item -> equals_f11fda.left\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        characters_6030c9.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> equals_f11fda.right\n        equals_f11fda.result -> for_8cb3f6.next\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        for_8cb3f6.done -> if_07b8c7.execute\n        equals_f11fda.result -> if_07b8c7.predicate\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equal_f11fda root.Std_k98ojb.Logic.Equal {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1812, y: -319) and_80a119 root.Std_k98ojb.Logic.And {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_f11fda.left\n        for_8cb3f6.item -> equal_f11fda.right\n        equal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        List.GetAt(characters_6030c9.characters, 0) -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        List.GetAt(characters_6030c9.characters, 0) -> equals_f11fda.right\n        equals_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) first_item_038fce root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> first_item_038fce.list\n        instance(x: 933, y: 25) all_same_f11fda root.Std_k98ojb.Iteration.Find {\n            predicate: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) not_equal_f9d09 root.Std_k98ojb.Logic.NotEqual {}\n                first_item_038fce.item -> not_equal_f9d09.left\n                element_5f51f7 -> not_equal_f9d09.right\n                not_equal_f9d09.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> all_same_f11fda.items\n        instance(x: 1504, y: -400) if_e19a62 root.Std_k98ojb.Std.If {}\n        all_same_f11fda.item -> if_e19a62.input\n        execute_27b8c3 -> if_e19a62.execute\n        if_e19a62.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        input_f5c03d -> characters_6030c9.input\n        instance(x: 591, y: 74) first_item_e11fda root.Std_k98ojb.List.FirstItem {}\n        characters_6030c9.characters -> first_item_e11fda.list\n        instance(x: 933, y: 25) all_same_f11fda root.Std_k98ojb.Iteration.Find {\n            predicate: func() {\n                in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n                out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n                instance(x: 106, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n                first_item_e11fda.item -> equal_2f9d09.left\n                element_5f51f7 -> equal_2f9d09.right\n                equal_2f9d09.result -> out_d0fd24\n            }\n        }\n        characters_6030c9.characters -> all_same_f11fda.items\n        instance(x: 1504, y: -400) if_e19a62 root.Std_k98ojb.Std.If {}\n        all_same_f11fda.item -> if_e19a62.input\n        first_item_e11fda.item -> if_e19a62.then_value\n        null -> if_e19a62.else_value\n        if_e19a62.value -> out_f3db9f\n        execute_27b8c3 -> all_same_f11fda.execute\n        all_same_f11fda.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        characters_6030c9.characters -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        characters_6030c9.characters -> equals_f11fda.right\n        execute_27b8c3 -> equals_f11fda.execute\n        equals_f11fda.result -> out_f3db9f\n        equals_f11fda.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equal_f11fda root.Std_k98ojb.Logic.Equal {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1812, y: -319) and_80a119 root.Std_k98ojb.Logic.And {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_f11fda.left\n        for_8cb3f6.item -> equal_f11fda.right\n        equal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters are same or not.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) set_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 933, y: 25) equals_f11fda root.Std_k98ojb.Logic.Equal {}\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> set_038fce.left\n        characters_6030c9.characters -> set_038fce.right\n        set_038fce.intersect -> equals_f11fda.left\n        instance(x: 1504, y: -400) list_9fba8c root.Std_k98ojb.List.Empty {}\n        list_9fba8c.list -> equals_f11fda.right\n        execute_27b8c3 -> characters_6030c9.execute\n        equals_f11fda.result -> out_f3db9f\n        equals_f11fda.result -> continue_8ba06b\n    }\n}"
            ],
            "37": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f4c0e5 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: lambda((x: Number) -> Boolean) { \n                Strings.IsNumeric(x.toString()) \n            }\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        \n        str_6b655b -> characters_f4c0e5.input\n        characters_f4c0e5.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f5c1e2 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: lambda((x: Number), (y: String)) -> Boolean { \n                return root.Std_k98ojb.Strings.IsNumeric(y)\n            }\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        \n        str_6b655b -> characters_f5c1e2.input\n        characters_f5c1e2.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_e4f2e5 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: \"isNumeric\"\n        }\n        s_6b655b -> characters_e4f2e5.input\n        characters_e4f2e5.characters -> filter_96023e.items\n        instance(x: 656, y: -330) length_88bb8a root.Std_k98ojb.List.Length {}\n        filter_96023e.output_list -> length_88bb8a.list\n        length_88bb8a.length -> output_732a8a\n        execute_cdac2a -> characters_e4f2e5.execute\n        characters_e4f2e5.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_digit\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> characters_3d7de6.execute\n        characters_3d7de6.done -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is a digit.\") is_digit {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"c\") property(String) c_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) is_numeric_3d7de6 root.Std_k98ojb.Strings.IsNumeric {\n            input: c_6b655b\n        }\n        is_numeric_3d7de6.result -> output_732a8a\n        execute_cdac2a -> is_numeric_3d7de6.execute\n        is_numeric_3d7de6.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f5c531 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_e4e2f9 root.Iteration.Filter {\n            handler: is_numeric_handler_afe3d1\n        }\n        instance(x: 656, y: -330) length_88bb8a root.Std_k98ojb.List.Length {\n        }\n        characters_f5c531.characters -> filter_e4e2f9.items\n        filter_e4e2f9.output_list -> length_88bb8a.list\n        length_88bb8a.length -> output_732a8a\n        execute_cdac2a -> characters_f5c531.execute\n        characters_f5c531.done -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is numeric.\") is_numeric_handler {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"c\") property(String) c_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) is_numeric_f5c531 root.Std_k98ojb.Strings.IsNumeric {\n            input: c_6b655b\n        }\n        is_numeric_f5c531.result -> output_732a8a\n        execute_cdac2a -> is_numeric_f5c531.execute\n        is_numeric_f5c531.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: lambda(it: String) -> Boolean { \n                Strings.IsNumeric(it) \n            }\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n        \n        str_6b655b -> characters_3d7de6.input\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_3d7de6 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_numeric\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n\n        str_6b655b -> characters_3d7de6.input\n        characters_3d7de6.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n\n        func(doc: \"checks if a character is numeric.\") is_numeric {\n            in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n            in(x: -436, y: -213, name: \"char\") property(String) char_6b655b\n\n            out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n            out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n            instance(x: 80, y: -417) is_numeric_3d7de6 root.Std_k98ojb.Strings.IsNumeric {}\n            char_6b655b -> is_numeric_3d7de6.input\n            is_numeric_3d7de6.result -> output_732a8a\n            execute_cdac2a -> continue_d9efd7\n        }\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_e3f4e2 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_f1c0d9 root.Iteration.Filter {\n            handler: \"Logic.And(Strings.IsNumeric(it), true)\"\n        }\n        instance(x: 656, y: -330) length_2eef3a root.Std_k98ojb.List.Length {}\n        \n        str_6b655b -> characters_e3f4e2.input\n        characters_e3f4e2.characters -> filter_f1c0d9.items\n        filter_f1c0d9.output_list -> length_2eef3a.list\n        length_2eef3a.length -> output_732a8a\n        execute_cdac2a -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"s\") property(String) s_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_f4e2d5 root.Std_k98ojb.Strings.Characters {\n            input: s_6b655b\n        }\n        instance(x: 395, y: -378) filter_e960f3 root.Iteration.Filter {\n            handler: is_numeric_8a42c9\n        }\n        instance(x: 97, y: -127) length_2e0d1c root.Std_k98ojb.List.Length {\n            list: filter_e960f3.output_list\n        }\n        instance(x: 656, y: -330) is_numeric_8a42c9 root.Std_k98ojb.Strings.IsNumeric {}\n        characters_f4e2d5.characters -> filter_e960f3.items\n        filter_e960f3.handler_input -> is_numeric_8a42c9.input\n        length_2e0d1c.length -> output_732a8a\n        execute_cdac2a -> characters_f4e2d5.execute\n        characters_f4e2d5.done -> continue_d9efd7\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main { \n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"str\") property(String) str_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n\n        instance(x: 80, y: -417) characters_e4e0c2 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 395, y: -378) filter_96023e root.Iteration.Filter {\n            handler: is_numeric_handler\n        }\n        instance(x: 97, y: -127) length_adfa16 root.Std_k98ojb.List.Length {}\n\n        str_6b655b -> characters_e4e0c2.input\n        characters_e4e0c2.characters -> filter_96023e.items\n        filter_96023e.output_list -> length_adfa16.list\n        length_adfa16.length -> output_732a8a\n        execute_cdac2a -> characters_e4e0c2.execute\n        characters_e4e0c2.done -> continue_d9efd7\n    }\n\n    func(doc: \"checks if a character is numeric.\") is_numeric_handler {\n        in(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n        in(x: -436, y: -213, name: \"item\") property(String) item_6b655b\n\n        out(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n        out(x: 1169, y: -269, name: \"output\") property(Boolean) output_732a8a\n\n        instance(x: 80, y: -417) is_numeric_e4e0c2 root.Std_k98ojb.Strings.IsNumeric {}\n\n        item_6b655b -> is_numeric_e4e0c2.input\n        is_numeric_e4e0c2.result -> output_732a8a\n        execute_cdac2a -> is_numeric_e4e0c2.execute\n        is_numeric_e4e0c2.done -> continue_d9efd7\n    }\n}"
            ],
            "38": [
                "instance(x: 100, y: 100) iteration_3c0f17 root.Iteration.Reduce {\n    handler: func(a: 0, b: 1) => Math.Pow(b, 4) + a,\n    items: List.GenerateRange(from: 1, to: n),\n    context: null\n}\ninstance(x: 200, y: 100) list_get_at_2f3d15 root.List.GetAt {\n    index: 0,\n    list: iteration_3c0f17.output_list\n}\ninstance(x: 300, y: 100) math_pow_f892a4 root.Math.Pow {\n    x: list_get_at_2f3d15.item,\n    y: 2\n}\ninstance(x: 400, y: 100) iteration_filter_dae1e6 root.Iteration.Filter {\n    handler: func(a: 0) => a % 2 == 1,\n    items: List.GenerateRange(from: 1, to: n)\n}\niteration_filter_dae1e6.output_list -> iteration_3c0f17.items",
                "instance(x: 100, y: 100) iteration_reduce_5b8e24 root.Std_k98ojb.Iteration.Reduce {\n    handler: func(a, b) => a + b * b * b * b,\n    items: instance(x: 50, y: 50) list_generate_range_f4a6c1 root.Std_k98ojb.List.GenerateRange {\n        from: 0,\n        to: instance(x: 0, y: 0) math_mul_73e91d root.Std_k98ojb.Math.Mul {\n            first: instance(x: -50, y: 0) n_3a3116 property(Number),\n            second: 2\n        }\n    }\n}\ninstance(x: 150, y: 100) math_pow_9f4c8e root.Std_k98ojb.Math.Pow {\n    x: instance(x: 120, y: 50) list_get_at_51a0d5 root.Std_k98ojb.List.GetAt {\n        index: 1,\n        list: iteration_reduce_5b8e24.items\n    },\n    y: 4\n}\niteration_reduce_5b8e24.handler.context -> math_pow_9f4c8e.x\nmath_pow_9f4c8e.result -> iteration_reduce_5b8e24.handler",
                "instance(x: 114, y: 136) iteration_9f2e4a root.Iteration.Reduce {\n    instance(x: 23, y: 82) mathpow_f892a4 root.Math.Pow {}\n    data_instance(x: 330, y: 133) data_cde0dc  = 4\n    mathpow_f892a4.y -> data_cde0dc\n    iteration_9f2e4a.handler -> mathpow_f892a4.x\n    instance(x: 12, y: 136) listgenerate_a5d6c3 root.List.GenerateRange {\n        data_instance(x: 1, y: -17) data_365f7b  = 1\n        data_instance(x: 303, y: 2) data_beb846  = 2\n        iteration_9f2e4a.items -> listgenerate_a5d6c3.to\n        listgenerate_a5d6c3.from -> data_365f7b\n        listgenerate_a5d6c3.to -> data_beb846\n    }\n    instance(x: 118, y: -26) iterationmap_f1a4e9 root.Iteration.Map {\n        iterationmap_f1a4e9.items -> iteration_9f2e4a.output_list\n        mathpow_f892a4.result -> iterationmap_f1a4e9.handler\n        instance(x: 212, y: -115) multiply_8d5b7c root.Math.Mul {\n            data_instance(x: 2, y: 52) data_a6d3f4  = 2\n            iterationmap_f1a4e9.index -> multiply_8d5b7c.first\n            data_a6d3f4 -> multiply_8d5b7c.second\n        }\n        multiply_8d5b7c.result -> mathpow_f892a4.x\n    }\n    instance(x: 405, y: -17) input_n root.Std_k98ojb.Std.If {\n        data_instance(x: 1, y: -17) data_365f7b  = 0\n        iteration_9f2e4a.initial -> data_365f7b\n    }\n}",
                "instance(x: 114, y: 123) for_5c4e9a root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n)\n}\ninstance(x: 246, y: 146) math_pow_f9f6d3 root.Std_k98ojb.Math.Pow {\n    x: Math.Mul(first: for_5c4e9a.item, second: for_5c4e9a.item).result\n    y: 4\n}\ninstance(x: 373, y: 128) iteration_reduce_2d6f1a root.Std_k98ojb.Iteration.Reduce {\n    items: List.GenerateRange(from: 1, to: n)\n    handler: math_pow_f9f6d3.result\n}",
                "instance(x: 131, y: 120) iteration_reduce_7c95e5 root.Std_k98ojb.Iteration.Reduce {\n    handler: {\n        instance(x: 0, y: 0) math_pow_f47f64 root.Std_k98ojb.Math.Pow {\n            x: \"acc\"\n            y: 4\n        }\n        instance(x: 100, y: 0) math_add_31a404 root.Std_k98ojb.Math.Add {\n            first: \"math_pow_f47f64.result\"\n            second: \"it\"\n        }\n        math_add_31a404.result -> \"acc\"\n    }\n}\ninstance(x: 256, y: 137) iteration_map_8d9e1c root.Std_k98ojb.Iteration.Map {\n    handler: {\n        instance(x: 0, y: 0) math_mul_f892a4 root.Std_k98ojb.Math.Mul {\n            first: \"it\"\n            second: 2\n        }\n        instance(x: 100, y: 0) math_sub_64046c root.Std_k98ojb.Math.Sub {\n            first: \"math_mul_f892a4.result\"\n            second: 1\n        }\n        math_sub_64046c.result -> \"result\"\n    }\n}\ninstance(x: 131, y: 50) list_generate_range_e49f65 root.Std_k98ojb.List.GenerateRange {\n    from: 1\n    to: \"n\"\n}\nlist_generate_range_e49f65.list -> iteration_map_8d9e1c.items\niteration_map_8d9e1c.output_list -> iteration_reduce_7c95e5.items\ninstance(x: 256, y: 20) in_n_3a3116 root.Std_k98ojb.property.Number {\n    name: \"n\"\n}\nin_n_3a3116 -> list_generate_range_e49f65.n\niteration_reduce_7c95e5.result -> out_sum_365f7b",
                "instance(x: 23, y: -1) count_6c2e95 root.Std_k98ojb.Std.Count {}\ninstance(x: 118, y: 25) for_4d8f3a root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116)\n}\ninstance(x: 12, y: 136) math_expression_f47c67 root.Std_k98ojb.Math.Expression {\n    expression: \"(2*item-1)^4\"\n}\nfor_4d8f3a.on_item -> math_expression_f47c67.a\nmath_expression_f47c67.result -> sum_365f7b\ninstance(x: 571, y: 7) sum_365f7b root.Std_k98ojb.Math.Add {\n    first: 0\n}\nin(x: 219, y: 55, name: \"n\") property(Number) n_3a3116",
                "instance(x: 23, y: -1) Std_For_1 root.Std.For {\n    trigger: null,\n    reset: null,\n    items: null,\n    next: null\n}\ninstance(x: 118, y: 133) Math_Pow_2 root.Math.Pow {\n    x: null,\n    y: 4\n}\ninstance(x: 12, y: 136) Math_Mul_3 root.Math.Mul {\n    first: null,\n    second: 2\n}\ninstance(x: 303, y: 2) Std_Count_4 root.Std.Count {\n    reset: null,\n    count: null\n}\ninstance(x: 330, y: 133) Math_Add_5 root.Math.Add {\n    first: null,\n    second: null\n}\nStd_For_1.on_item -> Math_Mul_3.first\nStd_For_1.index -> Math_Mul_3.first\nMath_Mul_3.result -> Math_Pow_2.x\nMath_Pow_2.result -> Math_Add_5.second\nStd_Count_4.count -> Std_For_1.next\nMath_Add_5.result -> sum",
                "instance(x: 23, y: -1) for_8f2e32 root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116 + 1)\n}\ninstance(x: 118, y: 136) mathpow_f47c12 root.Std_k98ojb.Math.Pow {\n    x: for_8f2e32.item\n    y: 4\n}\ninstance(x: 303, y: 2) sum_64046c root.Std_k98ojb.Math.Add {\n    first: sum_365f7b\n    second: mathpow_f47c12.result\n}\nfor_8f2e32.on_item -> for_8f2e32.next\nn_3a3116 -> for_8f2e32.trigger\nmathpow_f47c12.result -> sum_64046c.second\nsum_64046c.result -> sum_365f7b",
                "instance(x: 155, y: 117) Std_For_8e2a05 root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n_3a3116 + 1)\n}\ninstance(x: 262, y: 130) Math_Mul_ecc9c7 root.Std_k98ojb.Math.Mul {}\ninstance(x: 155, y: 200) Math_Pow_51f444 root.Std_k98ojb.Math.Pow {\n    x: Std_For_8e2a05.item * 2 - 1\n    y: 4\n}\ninstance(x: 262, y: 270) Math_Add_5c9d44 root.Std_k98ojb.Math.Add {}\ninstance(x: 369, y: 200) sum_365f7b root.main.sum {\n    trigger: Std_For_8e2a05.done\n}\nStd_For_8e2a05.on_item -> Math_Pow_51f444\nMath_Pow_51f444.result -> Math_Add_5c9d44.first\nMath_Add_5c9d44.second -> sum_365f7b\nMath_Add_5c9d44.result -> sum_365f7b\ninstance(x: 23, y: -1) n_3a3116 root.main.n {\n    trigger: main.start\n}\nn_3a3116 -> Std_For_8e2a05.trigger",
                "instance(x: 100, y: 100) Std_For_1 root.Std_k98ojb.Std.For {\n    items: List.GenerateRange(from: 1, to: n)\n}\ninstance(x: 200, y: 100) Math_Mul_2 root.Std_k98ojb.Math.Mul {\n    first: Std_For_1.item\n    second: Std_For_1.item\n}\ninstance(x: 300, y: 100) Math_Mul_3 root.Std_k98ojb.Math.Mul {\n    first: Math_Mul_2.result\n    second: Math_Mul_2.result\n}\ninstance(x: 400, y: 100) Iteration_Reduce_4 root.Std_k98ojb.Iteration.Reduce {\n    items: List.GenerateRange(from: 1, to: n)\n    handler: Math_Mul_3\n}\ninstance(x: 500, y: 100) Math_Sub_5 root.Std_k98ojb.Math.Sub {\n    first: Iteration_Reduce_4.result\n    second: 1\n}\ninstance(x: 600, y: 100) Math_Mul_6 root.Std_k98ojb.Math.Mul {\n    first: Math_Sub_5.result\n    second: Math_Sub_5.result\n}"
            ],
            "46": [
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { \n    expression: \"6 * x^2\"\n}\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) math_expression_2f4a21 root.Std.Math.Expression {}\n6 -> math_expression_2f4a21.expression\ninstance(x: 200, y: 100) side_length_e352fa property(Number) \nside_length_e352fa -> math_expression_2f4a21.a\nside_length_e352fa -> math_expression_2f4a21.b\nmath_expression_2f4a21.result -> surface_area_9d8c51\ninstance(x: 300, y: 100) surface_area_9d8c51 property(Number)",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { \n    expression: \"6 * x^2\"\n}\nin(x: 0, y: 0, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { \n    expression: \"6 * x^2\"\n}\nin(x: 0, y: 0, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { expression: \"6 * x^2\" }\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) Math_Mul_6f1c4d root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_268c91 root.Math.Mul {}\n6 -> Math_Mul_6f1c4d.first\ninstance(x: 0, y: 0) size_ecc449 property(Number) \nsize_ecc449 -> Math_Mul_6f1c4d.second\nMath_Mul_6f1c4d.result -> Math_Mul_268c91.first\nsize_ecc449 -> Math_Mul_268c91.second\nMath_Mul_268c91.result",
                "instance(x: 100, y: 100) Math_Mul_6f2c1d root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_31fc29 root.Math.Mul {}\n6 -> Math_Mul_6f2c1d.first\nin(x: 0, y: 0, name: \"side\") property(Number) side_9e2b5a -> Math_Mul_6f2c1d.second\nside_9e2b5a -> Math_Mul_31fc29.first\nside_9e2b5a -> Math_Mul_31fc29.second\nMath_Mul_6f2c1d.result -> Math_Mul_31fc29.second\nout(x: 300, y: 100, name: \"surface_area\") property(Number) surface_area_71f44e\nMath_Mul_31fc29.result -> surface_area_71f44e",
                "instance(x: 100, y: 100) Math_Mul_6 root.Math.Mul {}\ninstance(x: 200, y: 100) Math_Mul_7 root.Math.Mul {}\n6 -> Math_Mul_6.first\ninstance(x: 0, y: 0) size_8 root.Std.Input { name: \"size\" }\nsize_8.value -> Math_Mul_6.second\nMath_Mul_6.result -> Math_Mul_7.first\nsize_8.value -> Math_Mul_7.second\nMath_Mul_7.result -> root.output",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { \n    expression: \"6 * x^2\"\n}\nin(x: 0, y: 0, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result",
                "instance(x: 100, y: 100) math_expression_1 root.Std.Math.Expression { expression: \"6 * x^2\" }\nin(x: 50, y: 150, name: \"size\") property(Number) size -> math_expression_1.x\nout(x: 200, y: 100, name: \"surface_area\") property(Number) surface_area <- math_expression_1.result"
            ],
            "19": [
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_list: items) \nList.Min(min_list: items) \nMath.Sub(result: max_list.result - min_list.result)",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max {\n  items: input_list\n} max_node\n\nList.Min {\n  items: input_list\n} min_node\n\nMath.Sub {\n  first: max_node.max\n  second: min_node.min\n} sub_node\n\nsub_node.result -> output",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_input: items) max_node \nList.Min(min_input: items) min_node \nMath.Sub(first: max_node.max, second: min_node.min) sub_node",
                "List.Max(max_list: items) \nList.Min(min_list: items) \nMath.Sub(result: max_list.result - min_list.result)",
                "List.Max {\n  items: input_list\n} max_node\n\nList.Min {\n  items: input_list\n} min_node\n\nMath.Sub {\n  first: max_node.max\n  second: min_node.min\n} sub_node\n\nsub_node.result -> output_diff",
                "List.Max(max_list: items) max_node\nList.Min(min_list: items) min_node\nMath.Sub(first: max_node.max, second: min_node.min) sub_node\nsub_node.result -> result"
            ],
            "22": [
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}\ninput_number -> value\nresult -> left",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n}\ninstance(x: 200, y: 100) logic_equal Logic.Equal {\n    left: math_modulo.result\n    right: 0\n}\n\nmath_modulo.value -> 10\nmath_modulo.divisor -> 2",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}\ninput_number -> value\nresult -> left",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n        value: input_number\n        divisor: 2\n    }\n    instance(x: 200, y: 100) logic_equal Logic.Equal {\n        left: math_modulo.result\n        right: 0\n    }\n    logic_equal.result -> is_even",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}\ninput_number -> value\nresult -> left",
                "instance(x: 100, y: 100) Math.Modulo {\n    value: input_number\n    divisor: 2\n}\ninstance(x: 200, y: 100) Logic.Equal {\n    left: result\n    right: 0\n}",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n}\ninstance(x: 200, y: 100) logic_equal Logic.Equal {\n    left: math_modulo.result\n    right: 0\n}\n\nmath_modulo.value -> 10\nmath_modulo.divisor -> 2",
                "instance(x: 100, y: 100) Math.Modulo {\n        value: input_number\n        divisor: 2\n    }\n    instance(x: 200, y: 100) Std.If {\n        input: Math.Modulo.result == 0\n    }",
                "instance(x: 100, y: 100) math_modulo Math.Modulo {\n}\ninstance(x: 200, y: 100) logic_equal Logic.Equal {\n    left: math_modulo.result\n    right: 0\n}\nmath_modulo.value -> 2\nmath_modulo.divisor -> input_number"
            ],
            "23": [
                "instance(x: 100, y: 100) iteration_find_5e3f1a root.Iteration.Find {}\niteration_find_5e3f1a.items = Strings.Characters(input).characters\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_f4c0d2\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_6a63e7\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Strings.Contains {}\n    strings_contains_1088d5.input = Strings.Slice(input, 0, List.GetAt(List.GenerateRange(0, List.Length(Strings.Characters(input).characters)), iteration_find_5e3f1a.index)).slice\n    char_f4c0d2 -> strings_contains_1088d5.contains\n    strings_contains_1088d5.result -> bool_6a63e7\n} -> iteration_find_5e3f1a.predicate\niteration_find_5e3f1a.item -> result",
                "instance(x: 100, y: 100) first_repeated_5f4c2a root.Std_k98ojb.Iteration.Find {}\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Std_k98ojb.Strings.Contains {}\n    in(x: -200, y: -100, name: \"input\") property(String) input_abed4a\n    strings_contains_1088d5.input -> input_abed4a\n    char_9f6850 -> strings_contains_1088d5.contains\n    strings_contains_1088d5.result -> bool_af09a7\n} -> first_repeated_5f4c2a.predicate\n\ninstance(x: 300, y: 100) strings_characters_857e1b root.Std_k98ojb.Strings.Characters {}\nin(x: -200, y: -100, name: \"input\") property(String) input_abed4a\nstrings_characters_857e1b.input -> input_abed4a\nstrings_characters_857e1b.characters -> first_repeated_5f4c2a.items\n\nout(x: 500, y: 100, name: \"char\") property(String) char_3bc2ae\nfirst_repeated_5f4c2a.item -> char_3bc2ae",
                "instance(x: 100, y: 100) Std_For_9f6850 root.Std.For {}\ninstance(x: 300, y: 100) List_Empty_f4e2a5 root.List.Empty {}\ninstance(x: 500, y: 100) Iteration_Find_1088d5 root.Iteration.Find {}\nStd_For_9f6850.items -> List_Empty_f4e2a5.list\nList_Empty_f4e2a5.list -> Iteration_Find_1088d5.items\ninstance(x: 700, y: 100) Strings_Characters_3bc2ae root.Strings.Characters {}\nStrings_Characters_3bc2ae.characters -> Std_For_9f6850.items\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) List_Contains_ba8e1d root.List.Contains {}\n    char_9f6850 -> List_Contains_ba8e1d.item\n    List_Empty_f4e2a5.list -> List_Contains_ba8e1d.list\n    List_Contains_ba8e1d.result -> bool_af09a7\n} -> Iteration_Find_1088d5.predicate\ninstance(x: 100, y: 300) List_Add_c5f964 root.List.Add {}\nStd_For_9f6850.item -> List_Add_c5f964.item\nList_Empty_f4e2a5.list -> List_Add_c5f964.list\nList_Add_c5f964.listWithItem -> List_Empty_f4e2a5.list\nIteration_Find_1088d5.item -> Std_For_9f6850.next",
                "instance(x: 100, y: 100) characters_4a2b1c root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_5f6g7h root.Iteration.Find {}\ncharacters_4a2b1c.characters -> iteration_5f6g7h.items\ninstance(x: 500, y: 150) seen_8d9e0f root.List.Empty {}\ninstance(x: 700, y: 200) contains_1a2b3c root.List.Contains {}\niteration_5f6g7h.item -> contains_1a2b3c.item\nseen_8d9e0f.list -> contains_1a2b3c.list\ncontains_1a2b3c.result -> iteration_5f6g7h.predicate\ninstance(x: 500, y: 250) add_6f7g8h root.List.Add {}\nseen_8d9e0f.list -> add_6f7g8h.list\niteration_5f6g7h.item -> add_6f7g8h.item\nadd_6f7g8h.listWithItem -> seen_8d9e0f.list\ninstance(x: 100, y: 50) input_f4a2b1 root.Std.Input {}\ninput_f4a2b1.string -> characters_4a2b1c.input\niteration_5f6g7h.item",
                "instance(x: 100, y: 100) iteration_find_1 root.Iteration.Find {}\niteration_find_1.items = Strings.Characters(input).characters\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_f3a8e9\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Strings.Contains {}\n    Strings.Slice(input, 0, List.GetAt(List.Length(Strings.Characters(input).characters), iteration_find_1.index)).slice -> strings_contains_1088d5.input\n    char_f3a8e9 -> strings_contains_1088d5.contains\n    strings_contains_1088d5.result -> bool_af09a7\n} -> iteration_find_1.predicate\niteration_find_1.item -> result",
                "instance(x: 100, y: 100) characters_8f5a2e root.Strings.Characters {}\ninstance(x: 300, y: 100) iteration_4b5c1d root.Iteration.Find {}\ncharacters_8f5a2e.characters -> iteration_4b5c1d.items\ninstance(x: 500, y: 150) seen_9e2c81 root.List.Empty {}\ninstance(x: 700, y: 200) contains_4a8d92 root.List.Contains {}\niteration_4b5c1d.item -> contains_4a8d92.item\nseen_9e2c81.list -> contains_4a8d92.list\ninstance(x: 500, y: 250) add_7d4f21 root.List.Add {}\nseen_9e2c81.list -> add_7d4f21.list\niteration_4b5c1d.item -> add_7d4f21.item\nadd_7d4f21.listWithItem -> seen_9e2c81.list\ninstance(x: 300, y: 250) check_3a1e9c root.Std.If {}\ncontains_4a8d92.result -> check_3a1e9c.input\niteration_4b5c1d.item -> check_3a1e9c.then\ncheck_3a1e9c.else -> iteration_4b5c1d.next\nfunc() {\n    in(x: -100, y: 50, name: \"char\") property(String) char_f47a32\n    out(x: 200, y: 0, name: \"bool\") property(Bool) bool_8e3c51\n    instance(x: 0, y: 0) contains_2d6f11 root.List.Contains {}\n    seen_9e2c81.list -> contains_2d6f11.list\n    char_f47a32 -> contains_2d6f11.item\n    contains_2d6f11.result -> bool_8e3c51\n} -> iteration_4b5c1d.predicate\ninstance(x: 100, y: 50) input_7a3219 root.Strings.Characters {}\ninput_7a3219.input -> characters_8f5a2e.input\niteration_4b5c1d.item -> output",
                "instance(x: 100, y: 100) iteration_find_1 root.Iteration.Find {}\niteration_find_1.items = Strings.Characters(input_string).characters\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Strings.Contains {}\n    input_string -> strings_contains_1088d5.input\n    Strings.Slice(input_string, 0, List.GetAt(Strings.Characters(input_string).characters, iteration_find_1.index - 1)).slice -> strings_contains_1088d5.contains\n    char_9f6850 -> strings_contains_1088d5.contains\n    strings_contains_1088d5.result -> bool_af09a7\n} -> iteration_find_1.predicate\niteration_find_1.item -> first_repeated_character",
                "instance(x: 100, y: 100) Std_For_1 root.Std.For {}\ninstance(x: 200, y: 150) Strings_Characters_2 root.Strings.Characters {}\nStrings_Characters_2 -> Std_For_1.items\ninstance(x: 250, y: 200) Iteration_Find_3 root.Iteration.Find {}\nStd_For_1.on_item -> Iteration_Find_3.trigger\ninstance(x: 300, y: 250) List_GetAt_4 root.List.GetAt {}\nList_GetAt_4.index <- Std_For_1.index\nStrings_Characters_2.characters -> List_GetAt_4.list\ninstance(x: 350, y: 200) Logic_NotEqual_5 root.Logic.NotEqual {}\nList_GetAt_4.item -> Logic_NotEqual_5.left\nStd_For_1.item -> Logic_NotEqual_5.right\nLogic_NotEqual_5.result -> Iteration_Find_3.predicate\nIteration_Find_3.item -> Std_For_1.next",
                "instance(x: 100, y: 100) iteration_find_5b6a17 root.Iteration.Find {}\niteration_find_5b6a17.items = List.Characters(input_string)\nfunc() {\n    in(x: -113, y: 34, name: \"char\") property(String) char_9f6850\n    out(x: 515, y: 44, name: \"bool\") property(Bool) bool_af09a7\n    instance(x: 89, y: 29) strings_contains_1088d5 root.Strings.Contains {}\n    strings_contains_1088d5.input = List.Slice(List.Characters(input_string), 0, iteration_find_5b6a17.index)\n    strings_contains_1088d5.contains = char_9f6850\n    strings_contains_1088d5.result -> bool_af09a7\n} -> iteration_find_5b6a17.predicate\niteration_find_5b6a17.item -> first_repeated_character",
                "instance(x: 100, y: 100) Std_For_1 root.Std.For {}\ninstance(x: 200, y: 150) List_Empty_2 root.List.Empty {}\ninstance(x: 300, y: 150) Iteration_Find_3 root.Iteration.Find {}\ninstance(x: 400, y: 200) Logic_NotEqual_4 root.Logic.NotEqual {}\ninstance(x: 500, y: 250) Strings_Characters_5 root.Strings.Characters {}\n\nStrings_Characters_5 -> Std_For_1.items\nList_Empty_2 -> Iteration_Find_3.items\n\nfunc() {\n    in(x: -100, y: 0, name: \"char\") property(String) char_6\n\n    out(x: 100, y: 0, name: \"bool\") property(Bool) bool_7\n\n    instance(x: 0, y: 50) List_Contains_8 root.List.Contains {}\n    char_6 -> List_Contains_8.item\n    Iteration_Find_3.items -> List_Contains_8.list\n    List_Contains_8.result -> bool_7\n} -> Iteration_Find_3.predicate\n\ninstance(x: 600, y: 300) Logic_Not_9 root.Logic.Not {}\nLogic_Not_9 -> Std_For_1.reset\nIteration_Find_3.item -> Logic_Not_9.input"
            ],
            "35": [
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(input: items) -> sorted_items\nList.GetAt(index: 1, list: sorted_items) -> second_smallest",
                "List.Sort(input: list) -> sorted_list \nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(input: list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(input: list) -> sorted_list \nList.GetAt(index: 1, list: sorted_list) -> second_smallest",
                "List.Sort(items: input_list) -> sorted_list\nList.GetAt(index: 1, list: sorted_list) -> second_smallest"
            ]
        }
    }
]