[
    {
        "prompts": [
            "Create a flow to find whether a number is divisible by 11.",
            "The flow should create a user-defined function. The body of the function contains one input property of type Number, one 'Data Object' node with number 11, one 'Math Modulo', one 'Math Expression' and one output property of type Bool.\n The arrows are connected as follows: The input property, called n, is connected with arrows to the value propery of the 'Math Modulo' node. The Data Object with number 11 is connected with arrowes to the divisor property og 'Math modulo'. The result output property of the 'Math modulo' node is connected with arrows to the 'Math Expression' node, which contains the expression (n == 0). The result of this 'Math Expression' node is a Bool which is connected with arrows to the output property, that return the Bool from the function. The user-defined function is then created within the main module.",
            "This created user-defined function should then be tested in a seperate module called tests, within the main module. Since the user-defined function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers. "
        ],
        "task_id": 3,
        "specification": {
            "function_signature": "func(doc: \"finds whether a number is divisible by 11.\") is_diff {\n  in(x: 5.110832031250027, y: -25.33331298828125, name: \"n\") property(Number) n_27f29c\n\n  out(x: 668.1112060546875, y: 2.11114501953125, name: \"output\") property(Bool) output_f2630f\n}",
            "preconditions": "- There are no preconditions, the method will always work for any integer input.",
            "postconditions": "- The result is true if the input number is divisible by 11\n- The result is false if the input number is not divisible by 11"
        },
        "MBPP_task_id": 77,
        "library_functions": [
            "Math.Expression",
            "Math.Modulo"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property",
            "Data Object"
        ],
        "textual_instance_types": [
            "instance",
            "data_instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "test_list": [
                "assert is_Diff (12345) == False",
                "assert is_Diff(1212112) == True",
                "assert is_Diff(1212) == False"
            ]
        }
    },
    {
        "prompts": [
            "create a flow find the dissimilar elements in the given two lists.",
            "The flow should create the built-in function node from the std library, called 'Sets Difference' node, should be used. The node should be created in the main module.",
            "The 'Sets Difference' node should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 18,
        "specification": {
            "function_signature": "",
            "preconditions": "- Both input arrays should be non-null",
            "postconditions": "- The result array should contain all elements from both input arrays that are not present in the other array\n- The result array should not contain any duplicate elements\n- The order of elements in the result array does not matter"
        },
        "MBPP_task_id": 579,
        "library_functions": [
            "Sets.Difference"
        ],
        "visual_node_types": [
            "Function"
        ],
        "textual_instance_types": [
            "instance"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert find_dissimilar([3, 4, 5, 6], [5, 7, 4, 10]) == [3, 6, 7, 10]",
                "assert find_dissimilar([1, 2, 3, 4], [7, 2, 3, 9]) == [1, 4, 7, 9]",
                "assert find_dissimilar([21, 11, 25, 26], [26, 34, 21, 36]) == [11,25,34,36]"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the difference of the first even and first odd number of a given list.",
            "The flow should create a user-defined function called 'diff_even_odd'. The body of the function contains one input property of type 'List', named 'list'. It also includes the following nodes: one 'Query Filter' node to filter out even numbers from 'list', resulting in 'Even list'; one 'List FirstItem' node to extract the first even number from 'Even list'; another 'Query Filter' node to filter out odd numbers from 'list', resulting in 'Odd list'; another 'List FirstItem' node to extract the first odd number from 'Odd list'; and one 'Math Sub' node to calculate the difference between the first even number and the first odd number. Lastly, it includes an output property named 'difference' of type 'Number'.\n\nArrows are connected as follows: The input property 'list' is connected to both 'Query Filter' nodes. The first 'Query Filter' node uses the condition 'it % 2 == 0' to get the even numbers, and its 'result' is connected to the first 'List FirstItem' node to get 'first_even'. The second 'Query Filter' node uses the condition 'it % 2 != 0' to get the odd numbers, and its 'result' is connected to the second 'List FirstItem' node to get 'first_odd'. The 'item' outputs from both 'List FirstItem' nodes are connected to the 'first' and 'second' inputs of the 'Math Sub' node, respectively. The 'result' output from the 'Math Sub' node is connected to the output property 'difference'.\n\nThe user-defined function is then created within the main module.",
            "The created user-defined function 'diff_even_odd' should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 20,
        "specification": {
            "function_signature": "func(doc: \"finds the difference of the first even and first odd number of a given list.\") diff_even_odd {\n  in(x: -569.8980486478499, y: 438.54324938452424, name: \"list\") property(List) list_542a51\n\n  out(x: 443.494835164272, y: 427.164433987646, name: \"difference\") property(Number) difference_57c890\n}",
            "preconditions": "- The array should not be empty\n- The array should contain at least one even and one odd number",
            "postconditions": "- The difference is the first even number minus the first odd number in the array"
        },
        "MBPP_task_id": 594,
        "library_functions": [
            "Query.Filter",
            "List.FirstItem",
            "Math.Sub"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
                "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
                "assert diff_even_odd([1,5,7,9,10])==9"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to check whether all the characters are same or not.",
            "",
            ""
        ],
        "task_id": 33,
        "specification": {
            "function_signature": "func(doc: \"Checks whether all the characters are same or not.\") all_Characters_Same {\n    in(x: -862.8, y: 188.15, name: \"string\") property(String) string_db4ddf\n    in(x: -878.5714285714289, y: 9.999999999999986, name: \"execute\") trigger() execute_f1c7e0\n\n    out(x: 588, y: 123, name: \"continue\") trigger() continue_67430e\n    out(x: 600, y: 270, name: \"output\") property(Bool) output_e9fa68\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- If the result is true, all characters in the input string are the same\n- If the result is false, there is at least one character in the input string that is different from the others"
        },
        "MBPP_task_id": 741,
        "library_functions": [
            "Strings.Characters",
            "Strings.ToLower",
            "List.FirstItem",
            "Std.For",
            "Logic.Equal",
            "Std.If"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert all_Characters_Same(\"python\") == False",
                "assert all_Characters_Same(\"aaa\") == True",
                "assert all_Characters_Same(\"data\") == False"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the second smallest number in a list.",
            "",
            ""
        ],
        "task_id": 35,
        "specification": {
            "function_signature": "func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n    in(x: -52, y: 85, name: \"list\") property(List) list_56d273\n    in(x: -244.31168019522795, y: -39.62516833200653, name: \"execute\") trigger() execute_c23a43\n\n    out(x: 1025.337586584032, y: 145.87386073641994, name: \"continue\") trigger() continue_642adb\n    out(x: 1026.50455705432, y: 287.7087130878599, name: \"output\") property(Any) output_ad16ae\n}",
            "preconditions": "- The input array should not be null\n- The input array should have at least two elements",
            "postconditions": "- The returned value should be the second-smallest number in the input array\n- The input array remains unchanged"
        },
        "MBPP_task_id": 755,
        "library_functions": [
            "List.Sort",
            "List.GetAt",
            "List.Length",
            "Std.IfExpression",
            "Sets.Intersection"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Setter",
            "Getter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
                "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
                "assert second_smallest([2,2])==None"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the sum of fourth power of first n odd natural numbers.",
            "",
            ""
        ],
        "task_id": 38,
        "specification": {
            "function_signature": "func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") odd_num_sum {\n    in(x: -243, y: 86.5, name: \"n\") property(Number) n_0c0609\n\n    out(x: 1090, y: 53, name: \"sum\") property(Number) sum_2ad0d5\n}",
            "preconditions": "- n should be a non-negative integer",
            "postconditions": "- The sum should be the sum of the fourth power of the first n odd natural numbers"
        },
        "MBPP_task_id": 770,
        "library_functions": [
            "List.GenerateRange",
            "Iteration.Reduce",
            "Math.Mul",
            "Math.Sub",
            "Math.Expression",
            "Math.Add"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "test_list": [
                "assert odd_num_sum(2) == 82",
                "assert odd_num_sum(3) == 707",
                "assert odd_num_sum(4) == 3108"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to check if the given integer is a prime number.",
            "",
            ""
        ],
        "task_id": 48,
        "specification": {
            "method_signature": "func(doc: \"check if the given integer is a prime number.\") num_prime {\nin(x: -167, y: 27.5, name: \"num\") property(Number) num_5c0677\nin(x: -112, y: -216, name: \"execute\") trigger() execute_b7b391\n out(x: 1016, y: -26.5, name: \"output\") property(Bool) output_c457b3\n out(x: 1211, y: -110, name: \"continue\") trigger() continue_9a54bb",
            "preconditions": "- n should be greater than or equal to 2",
            "postconditions": "- If the result is true, then n is a prime number\n- If the result is false, then n is not a prime number"
        },
        "MBPP_task_id": 605,
        "library_functions": [
            "Std.IfExpression",
            "Std.For",
            "Math.Modulo",
            "Math.Div",
            "Math.Add",
            "List.GenerateRange",
            "Std.If",
            "Logic.Equal"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Setter",
            "Getter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "test_list": [
                "assert prime_num(13)==True",
                "assert prime_num(7)==True",
                "assert prime_num(-1010)==False"
            ]
        }
    }
]