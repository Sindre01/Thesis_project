[
    {
        "prompts": [
            "Write a function to find the index of the first occurrence of a given number in a sorted array.",
            "",
            ""
        ],
        "task_id": 32,
        "specification": {
            "function_signature": "method FindFirstOccurrence(arr: array<int>, target: int) returns (index: int)",
            "preconditions": "- The input array is sorted in non-decreasing order",
            "postconditions": "- If the target is found, the returned index should be the first occurrence of the target in the array\n- If the target is not found, the returned index should be -1\n- The input array remains unchanged"
        },
        "MBPP_task_id": 733,
        "library_functions": [
            "Std.For",
            "Std.If",
            "Logic.Equal"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Getter",
            "Setter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "getter",
            "setter"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
                "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
                "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the last digit of a given number.",
            "The flow should create a 'Math Modulo' node which uses 10 as divisor and the given number as value. The node should be created in the main module.",
            "The 'Math Modulo' node should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 9,
        "specification": {
            "function_signature": "",
            "preconditions": "- n should be a non-negative integer",
            "postconditions": "- The returned digit d should be between 0 and 9\n- d should be the last digit of the input number n"
        },
        "MBPP_task_id": 435,
        "library_functions": [
            "Math.Modulo"
        ],
        "visual_node_types": [
            "Function"
        ],
        "textual_instance_types": [
            "instance"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert last_Digit(123) == 3",
                "assert last_Digit(25) == 5",
                "assert last_Digit(30) == 0"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow that finds the minimum of two numbers.",
            "",
            ""
        ],
        "task_id": 45,
        "specification": {
            "method_signature": " func(doc: \"finds the minimum of two numbers\") Min {\n in() property(Number) a_9f7759 \n in() property(Number) b_f9110a\n in() trigger() execute_12bf99",
            "preconditions": "- There are no preconditions, the method will always work.",
            "postconditions": "- The minValue is either a or b\n- The minValue is less than or equal to both a and b"
        },
        "MBPP_task_id": 404,
        "library_functions": [
            "Std.IfExpression"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Getter",
            "Setter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "test_list": [
                "assert min(1,2) == 1",
                "assert min(-5,-4) == -5",
                "assert min(0,0) == 0"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the surface area of a cube of a given size.",
            "",
            ""
        ],
        "task_id": 46,
        "specification": {
            "method_signature": "func(doc: \"find the surface area of a cube of a given size.\") CubeSurfaceArea { \n in(x: -56, y: -44.5, name: \"size\") property(Number) size_49c776\n out(x: 582, y: -80.5, name: \"Area\") property(Number) Area_a3e36f",
            "preconditions": "- The size of the cube should be greater than 0",
            "postconditions": "- The surface area of the cube is calculated correctly"
        },
        "MBPP_task_id": 441,
        "library_functions": [
            "Math.Mul"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "test_list": [
                "assert CubeSurfaceArea(5)==150",
                "assert CubeSurfaceArea(3)==54",
                "assert CubeSurfaceArea(10)==600"
            ]
        }
    },
    {
        "prompts": [
            "create a flow find the dissimilar elements in the given two lists.",
            "The flow should create the built-in function node from the std library, called 'Sets Difference' node, should be used. The node should be created in the main module.",
            "The 'Sets Difference' node should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 18,
        "specification": {
            "function_signature": "",
            "preconditions": "- Both input arrays should be non-null",
            "postconditions": "- The result array should contain all elements from both input arrays that are not present in the other array\n- The result array should not contain any duplicate elements\n- The order of elements in the result array does not matter"
        },
        "MBPP_task_id": 579,
        "library_functions": [
            "Sets.Difference"
        ],
        "visual_node_types": [
            "Function"
        ],
        "textual_instance_types": [
            "instance"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert find_dissimilar([3, 4, 5, 6], [5, 7, 4, 10]) == [3, 6, 7, 10]",
                "assert find_dissimilar([1, 2, 3, 4], [7, 2, 3, 9]) == [1, 4, 7, 9]",
                "assert find_dissimilar([21, 11, 25, 26], [26, 34, 21, 36]) == [11,25,34,36]"
            ]
        }
    }
]