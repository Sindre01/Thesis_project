%import common.WS
%import common.CNAME
%ignore WS

// TERMINALS: Basic building blocks of the language
LEFT_PAREN: "("
RIGHT_PAREN: ")"
LEFT_CURL: "{"
RIGHT_CURL: "}"
LEFT_SQUARE: "["
RIGHT_SQUARE: "]"

ARROW_OP: "->"
EQ: "="
LT: "<"
GT: ">"
MINUS: "-"
COMMA: ","
COLON: ":"
DOT: "."
DOUBLE_BACKTICK: "``"

BACKTICKS_LANG: "```midio"
BACKTICKS: "```"

VALUE_BOOL.1: "true" | "false"
VALUE_NUMBER: /-?\d+(\.\d+)?/
VALUE_STRING: "\"" /([^"\\]|\\.)*/ "\""

// // IDENTIFIERS and LITERALS

// For available argument names (reserved words)
AVAILABLE_ARGS: /%%AVAILABLE_ARGS%%/ //Input, execute etc
AVAILABLE_NODES: /%%AVAILABLE_NODES%%/ // For function node names available for the instance keyword (paths) e.g. "root.math.modulo"

// Your general identifier rule that uses both:
UNDERSCORE_WORD: /[a-zA-Z_][a-zA-Z0-9_]*_[a-zA-Z0-9_]*/
IDENTIFIER: UNDERSCORE_WORD | AVAILABLE_ARGS

VERBATIM_IDENT: "``" /[^`]*/ "``"
?name: VERBATIM_IDENT | IDENTIFIER

// VALUES
literal_value: VALUE_BOOL
             | VALUE_NUMBER
             | VALUE_STRING
             | value_list
             | value_object

value_object_field: name COLON literal_value
value_object: LEFT_CURL [value_object_field (COMMA value_object_field)* [COMMA]] RIGHT_CURL
value_list: LEFT_SQUARE [ref_or_literal (COMMA ref_or_literal)* [COMMA]] RIGHT_SQUARE

// ATTRIBUTES
attribute: name COLON literal_value
attributes: LEFT_PAREN [attribute (COMMA attribute)* [COMMA]] RIGHT_PAREN

// GENERICS and TYPES
generic_args: LT [type_expr (COMMA type_expr)*] GT
item_path: name (DOT name)* | AVAILABLE_NODES
type_ref: item_path [generic_args]
ref_or_literal: item_path | literal_value
type_literal_or_ref: literal_value | type_ref

type_expr: type_literal_or_ref ("or" type_literal_or_ref)*

property_type: LEFT_PAREN [type_expr] RIGHT_PAREN

// CONSUMPTION and TRIGGER
consumption: ("produces" | "consumes" | "borrows") COLON type_expr
trigger_consumption: LEFT_PAREN [consumption (COMMA consumption)* [COMMA]] RIGHT_PAREN

// PROPERTIES and PARAMETERS
input_property: "in" attributes? "property" property_type? name
output_property: "out" attributes? "property" property_type? name
input_trigger: "in" attributes? "trigger" trigger_consumption? name
output_trigger: "out" attributes? "trigger" trigger_consumption? name

property: input_property
        | output_property
        | input_trigger
        | output_trigger

parameter: "parameter" attributes? name
generic_params: LT [name (COMMA name)*] GT
item_name: name [generic_params]

// INSTANCES and FIELD ACCESS
instance: "instance" attributes? name type_ref value_object
data_instance: "data_instance" attributes? name EQ literal_value
setter: "setter" attributes? name EQ IDENTIFIER
getter: "getter" attributes? name EQ IDENTIFIER
comment_instance: "comment" attributes? name VALUE_STRING
?field_access_item: VALUE_NUMBER | name

field_access: field_access_item (DOT field_access_item)+
waypoint_instance: "waypoint" attributes? name [EQ field_access]

any_instance: instance
            | data_instance
            | setter
            | getter
            | waypoint_instance
            | comment_instance

// ARROWS
arrow_source: item_path
            | literal_value
            | inline_func

arrow_target: item_path
arrow: arrow_source ARROW_OP arrow_target

// FUNCTION and EVENT BODIES
func_body: (property | parameter | any_instance | arrow)*
func: ["extern"] "func" attributes? item_name LEFT_CURL func_body RIGHT_CURL
inline_func: "func" attributes? item_name? LEFT_CURL func_body RIGHT_CURL

event_body: (property | parameter)*
event: ["extern"] "event" attributes? item_name LEFT_CURL func_body RIGHT_CURL

// TYPE DECLARATION
type_decl: "type" item_name type_expr

// MODULE
module_body: (func | event | type_decl | module | any_instance | arrow)*
module: "module" attributes? name LEFT_CURL module_body RIGHT_CURL

// TOP-LEVEL ITEMS
import_stmt: "import" LEFT_PAREN VALUE_STRING COMMA name RIGHT_PAREN
top_level_item: import_stmt | module
file: top_level_item*

// for markdown code block
fenced_code_block: (BACKTICKS_LANG | BACKTICKS) file BACKTICKS

start: (fenced_code_block | file)
