import("std", Std_k98ojb)
import("http", Http_q7o96c)

module() main { 
    func(doc: "finds the first repeated character in a given string.") first_repeated_char {
        in(x: -20, y: -110, name: "execute") trigger() execute_97d5d5
        in(x: -216, y: 83, name: "string") property(String) string_71a657

        out(x: 1545, y: 186, name: "continue") trigger() continue_1914e0
        out(x: 904, y: 359, name: "char") property(Any) char_f2523c

        instance(x: 526, y: 135) add_073b72 root.Std_k98ojb.Math.Add {}
        instance(x: 1080, y: 45) if_204695 root.Std_k98ojb.Std.If {}
        instance(x: 710, y: 0) slice_1801cb root.Std_k98ojb.List.Slice {}
        instance(x: 0, y: 79) characters_e4ab8f root.Std_k98ojb.Strings.Characters {}
        instance(x: 295, y: 125) for_245354 root.Std_k98ojb.Std.For {}
        instance(x: 903, y: 143) contains_10d4db root.Std_k98ojb.List.Contains {}
        setter(x: 256, y: -169, name: "setter_a862c0") setter_a862c0 = first
        setter(x: 1302, y: -10, name: "setter_28b12a") setter_28b12a = first
        getter(x: 571, y: 314.25, name: "getter_d16e69") getter_d16e69 = first
        characters_e4ab8f.characters -> for_245354.items
        characters_e4ab8f.characters -> slice_1801cb.list
        for_245354.index -> add_073b72.first
        slice_1801cb.slice -> contains_10d4db.list
        add_073b72.result -> slice_1801cb.start
        contains_10d4db.is_contained -> if_204695.predicate
        for_245354.onItem -> if_204695.execute
        1 -> add_073b72.second
        -1 -> slice_1801cb.end
        string_71a657 -> characters_e4ab8f.input
        for_245354.item -> contains_10d4db.item
        if_204695.else -> for_245354.next
        for_245354.done -> continue_1914e0
        execute_97d5d5 -> setter_a862c0.execute
        setter_a862c0.continue -> for_245354.reset
        getter_d16e69.value -> char_f2523c
        if_204695.then -> setter_28b12a.execute
        setter_28b12a.continue -> continue_1914e0
        for_245354.item -> setter_28b12a.new_value
    }

    module(doc: "Contains three different tests for the 'first_repeated_char' function node") tests {
        instance(x: -900, y: 177) first_566408 root.main.first_repeated_char {}
        instance(x: -978, y: -82) test_81b8b4 root.Std_k98ojb.Testing.Test {
            name: "Test first_repeated_char"
        }
        instance(x: -570, y: 115) assertequal_ed5c8b root.Std_k98ojb.Testing.AssertEqual {}
        instance(x: -347, y: 120) first_5ce37b root.main.first_repeated_char {}
        instance(x: -50, y: 99) assertequal_ad10b9 root.Std_k98ojb.Testing.AssertEqual {}
        instance(x: 215, y: 104) first_d938f8 root.main.first_repeated_char {}
        instance(x: 512, y: 83) assertequal_7b8338 root.Std_k98ojb.Testing.AssertEqual {}
        first_566408.continue_1914e0 -> assertequal_ed5c8b.execute
        first_566408.char_f2523c -> assertequal_ed5c8b.actual
        test_81b8b4.onRun -> first_566408.execute_97d5d5
        assertequal_ed5c8b.continue -> first_5ce37b.execute_97d5d5
        first_5ce37b.continue_1914e0 -> assertequal_ad10b9.execute
        first_5ce37b.char_f2523c -> assertequal_ad10b9.actual
        assertequal_ad10b9.continue -> first_d938f8.execute_97d5d5
        first_d938f8.continue_1914e0 -> assertequal_7b8338.execute
        first_d938f8.char_f2523c -> assertequal_7b8338.expect
        "abcabc" -> first_566408.string_71a657
        "a" -> assertequal_ed5c8b.expect
        "abc" -> first_5ce37b.string_71a657
        null -> assertequal_ad10b9.expect
        "123123" -> first_d938f8.string_71a657
        "1" -> assertequal_7b8338.actual


    }

    instance(x: 1692, y: 462) first_repeated_char_f35a43 root.main.first_repeated_char {}


}