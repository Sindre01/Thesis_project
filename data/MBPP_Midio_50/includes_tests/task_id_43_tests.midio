import("std", Std_k98ojb)
import("http", Http_q7o96c)

module() main { 
     func(doc: "Finds the first odd number in a given list of numbers.") first_odd {
        in(x: -284, y: -0, name: "list") property(List) list_abed4a

        out(x: 593, y: -1, name: "number") property(Number) number_3bc2ae

        instance(x: 0, y: 0) find_6d05b0 root.Std_k98ojb.Iteration.Find {}
        func() {
            in(x: -113, y: 34, name: "elem") property(Number) elem_9f6850

            out(x: 515, y: 44, name: "bool") property(Bool) bool_af09a7

            instance(x: 89, y: 29) modulo_1088d5 root.Std_k98ojb.Math.Modulo {}
            instance(x: 310, y: 35) notequal_807ffd root.Std_k98ojb.Logic.NotEqual {}
            0 -> notequal_807ffd.right
            modulo_1088d5.result -> notequal_807ffd.left
            2 -> modulo_1088d5.divisor
            elem_9f6850 -> modulo_1088d5.value
            notequal_807ffd.result -> bool_af09a7
        } -> find_6d05b0.predicate
        list_abed4a -> find_6d05b0.items
        find_6d05b0.item -> number_3bc2ae
    }

    module(doc: "Contains three different tests for the 'first_odd' function node") tests {
        instance(x: -52, y: 102) test_8ce9f5 root.Std_k98ojb.Testing.Test {
            name: "Test first_odd"
        }
        instance(x: 18, y: 373) first_odd_ccc6e2 root.main.first_odd {}
        instance(x: 316, y: 368) first_odd_e83288 root.main.first_odd {}
        instance(x: 615, y: 360) first_odd_f20d2f root.main.first_odd {}
        instance(x: 16, y: 214) assertequal_dc4cb5 root.Std_k98ojb.Testing.AssertEqual {}
        instance(x: 317, y: 216) assertequal_64ba41 root.Std_k98ojb.Testing.AssertEqual {}
        instance(x: 618, y: 213) assertequal_40a497 root.Std_k98ojb.Testing.AssertEqual {}
        data_instance(x: 7, y: 492) data_f4fbec  = [1, 3, 5]
        data_instance(x: 334, y: 489) data_ebe713  = [2, 4, 1, 3]
        data_instance(x: 615, y: 490) data_3f89d2  = [8, 9, 1]
        first_odd_ccc6e2.number_3bc2ae -> assertequal_dc4cb5.actual
        first_odd_e83288.number_3bc2ae -> assertequal_64ba41.actual
        first_odd_f20d2f.number_3bc2ae -> assertequal_40a497.actual
        9 -> assertequal_40a497.expect
        1 -> assertequal_64ba41.expect
        1 -> assertequal_dc4cb5.expect
        data_ebe713 -> first_odd_e83288.list_abed4a
        data_f4fbec -> first_odd_ccc6e2.list_abed4a
        data_3f89d2 -> first_odd_f20d2f.list_abed4a
        test_8ce9f5.onRun -> assertequal_dc4cb5.execute
        assertequal_dc4cb5.continue -> assertequal_64ba41.execute
        assertequal_64ba41.continue -> assertequal_40a497.execute


    }

    instance(x: -55, y: 529) first_odd_2c856f root.main.first_odd {}
}