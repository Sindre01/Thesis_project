[
    {
        "MBPP_task_id": "472",
        "task_id": "11",
        "task": "Create a function to check whether the given list contains consecutive numbers or not.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"check whether the given list contains consecutive numbers or not.\") check_consecutive {\n        in(x: -425, y: 209, name: \"list\") property(List) list_faf6c2\n\n        out(x: 866, y: 132, name: \"output\") property(Bool) output_a2b59d\n\n        instance(x: 5, y: 346) max_a8e56c root.Std_k98ojb.List.Max {}\n        instance(x: -6, y: 129) sort_a49ae4 root.Std_k98ojb.List.Sort {}\n        instance(x: 0, y: 242) min_18909a root.Std_k98ojb.List.Min {}\n        instance(x: 532, y: 135) expression_b5dba9 root.Std_k98ojb.Math.Expression {\n            expression: \"list1 == list2\"\n        }\n        instance(x: 251, y: 257) generaterange_82d404 root.Std_k98ojb.List.GenerateRange {}\n        sort_a49ae4.sorted_list -> expression_b5dba9.gen_0\n        min_18909a.min -> generaterange_82d404.from\n        max_a8e56c.max -> generaterange_82d404.to\n        generaterange_82d404.list -> expression_b5dba9.gen_1\n        expression_b5dba9.result -> output_a2b59d\n        list_faf6c2 -> sort_a49ae4.list\n        list_faf6c2 -> min_18909a.items\n        list_faf6c2 -> max_a8e56c.items\n    }\n\n    \n\n    instance(x: 203, y: -192) check_consecutive_24d4b5 root.main.check_consecutive {}\n\n\n}",
        "external_functions": "List.Sort, List.Min, List.Max, List.GenerateRange, Math.Expression",
        "tests": {
            "test_cases": [
                {
                    "input": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "expected_output": true
                },
                {
                    "input": [
                        1,
                        2,
                        3,
                        5,
                        6
                    ],
                    "expected_output": false
                },
                {
                    "input": [
                        1,
                        2,
                        1
                    ],
                    "expected_output": false
                }
            ]
        },
        "function_signature": "func(doc: \"check whether the given list contains consecutive numbers or not.\") check_consecutive {\n\tin(x: -425, y: 209, name: \"list\") property(List) list_faf6c2\n\tout(x: 866, y: 132, name: \"output\") property(Bool) output_a2b59d\n}",
        "preconditions": "- There are no preconditions, the method will always work. Arrays can be empty or non-empty.",
        "postconditions": "- If the array contains consecutive numbers, the result is true\n- If the array does not contain consecutive numbers, the result is false",
        "flow_description": "The flow should create a user-defined function. The body of the function contains one input property of type any, one 'List Sort' node, one 'List Min' node, one 'List Max' node, one 'List GenerateRange' node, one 'Math Expression' node with the expression 'list1 == list2', and in this case one output property 'result' of type Bool. \n The arrows are connected as follows: The input property, called list, is connected with arrows to the 'List Sort', 'List Min', and 'List Max' nodes. The sorted list output of the 'List Sort' node is connected with arrows to the first input (list1) of the 'Math Expression' node. The outputs of the 'List.Min' and 'List.Max' nodes are connected with arrows to the from and to inputs of the 'List GenerateRange' node, respectively. The generated range output of the 'List GenerateRange' node is connected with arrows to the second input (list2) of the 'Math Expression' node. The result output of the 'Math Expression' node is then connected with arrows to the output property, called output, of the user-defined function. The user-defined function is then created within the main module"
    },
    {
        "MBPP_task_id": "576",
        "task_id": "17",
        "task": "Create a function to check whether a list is a sublist of another list.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list is sublist of another or not.\") is_Sub_Array {\n        in(x: -2030, y: 959, name: \"main_list\") property(List) main_list_25f077\n        in(x: -2032, y: 1297, name: \"sub_list\") property(List) sub_list_f9cb80\n        in(x: -1875, y: 677, name: \"execute\") trigger() execute_68160a\n\n        out(x: -243, y: 1021, name: \"continue\") trigger() continue_d72620\n        out(x: -239, y: 1163, name: \"output\") property(Bool) output_ebc87c\n\n        instance(x: -1782, y: 1082) length_12a4a0 root.Std_k98ojb.List.Length {}\n        instance(x: -1275, y: 1052) count_e53297 root.Std_k98ojb.Std.Count {}\n        instance(x: -1595, y: 1148) expression_c84155 root.Std_k98ojb.Math.Expression {\n            expression: \"n - m + 1\"\n        }\n        instance(x: -1783, y: 1237) length_4fed60 root.Std_k98ojb.List.Length {}\n        instance(x: -548, y: 923) if_f81713 root.Std_k98ojb.Std.If {}\n        instance(x: -764, y: 1191) equal_010c84 root.Std_k98ojb.Logic.Equal {}\n        instance(x: -964, y: 1120) slice_cda647 root.Std_k98ojb.List.Slice {}\n        instance(x: -1040, y: 898) add_a3f57f root.Std_k98ojb.Math.Add {}\n        length_12a4a0.length -> expression_c84155.gen_0\n        length_4fed60.length -> expression_c84155.gen_1\n        expression_c84155.result -> count_e53297.iterations\n        count_e53297.interation -> slice_cda647.start\n        count_e53297.interation -> add_a3f57f.first\n        length_12a4a0.length -> add_a3f57f.second\n        add_a3f57f.result -> slice_cda647.end\n        slice_cda647.slice -> equal_010c84.left\n        equal_010c84.result -> if_f81713.predicate\n        count_e53297.onCount -> if_f81713.execute\n        main_list_25f077 -> length_12a4a0.list\n        sub_list_f9cb80 -> length_4fed60.list\n        sub_list_f9cb80 -> equal_010c84.right\n        main_list_25f077 -> slice_cda647.list\n        if_f81713.then -> continue_d72620\n        count_e53297.done -> continue_d72620\n        if_f81713.else -> count_e53297.count\n        execute_68160a -> count_e53297.reset\n        if_f81713.value -> output_ebc87c\n    }\n\n    \n\n    instance(x: 57, y: -40) is_sub_array_f8f3ba root.main.is_Sub_Array {}\n}",
        "external_functions": "List.Length, Std.Count, Math.Expression, List.Slice, Logic.Equal, Std.If, Math.Add",
        "tests": {
            "test_cases": [
                {
                    "input": [
                        [
                            1,
                            4,
                            3,
                            5
                        ],
                        [
                            1,
                            2
                        ]
                    ],
                    "expected_output": false
                },
                {
                    "input": [
                        [
                            1,
                            2,
                            1
                        ],
                        [
                            1,
                            2,
                            1
                        ]
                    ],
                    "expected_output": true
                },
                {
                    "input": [
                        [
                            1,
                            0,
                            2,
                            2
                        ],
                        [
                            2,
                            2,
                            0
                        ]
                    ],
                    "expected_output": false
                }
            ]
        },
        "function_signature": "func(doc: \"Checks whether a list is sublist of another or not.\") is_Sub_Array {\n\tin(x: -2030, y: 959, name: \"main_list\") property(List) main_list_25f077\n\tin(x: -2032, y: 1297, name: \"sub_list\") property(List) sub_list_f9cb80\n\tin(x: -1875, y: 677, name: \"execute\") trigger() execute_68160a\n\tout(x: -243, y: 1021, name: \"continue\") trigger() continue_d72620\n\tout(x: -239, y: 1163, name: \"output\") property(Bool) output_ebc87c\n}",
        "preconditions": "- Both `main_list` and `sub_list` are not null.",
        "postconditions": "- The output is `True` if `sub_list` is a sublist of `main_list`.\n- The output is `False` if `sub_list` is not a sublist of `main_list`.",
        "flow_description": "The flow should create a user-defined function, called 'is_Sub_Array'. The body of the function contains three input properties: an input trigger named 'execute', and two input properties of type 'List', named 'main_list' and 'sub_list'. It also includes the following nodes: two 'List Length' nodes to obtain the lengths of 'main_list' and 'sub_list', respectively; one 'Math Expression' node to calculate the number of iterations using the expression 'n - m + 1', where 'n' is the length of 'main_list' and 'm' is the length of 'sub_list'; one 'Std Count' node to iterate over the possible starting indices in 'main_list'; one 'List Slice' node to extract a sublist from 'main_list', starting at the current index and ending at 'current_index + m'; one 'Logic Equal' node to compare the sliced sublist with 'sub_list'; and one 'Std If' node to control the flow based on whether a match is found. Lastly, it includes an output property named 'output' of type 'Bool' and an output trigger named 'continue'.\n\nArrows are connected as follows: The input trigger 'execute' is connected to the 'Std Count' node's 'reset' input. The 'Std Count' node's 'iterations' property is set using the result from the 'Math Expression' node, which calculates 'n - m + 1' using the lengths obtained from the two 'List Length' nodes. Inside the loop, the 'Std Count' node's 'iteration' output is connected to the 'start' input of the 'List Slice' node, and also to a 'Math Add' node along with 'm' to calculate the 'end' index for slicing. The 'List Slice' node extracts a sublist from 'main_list' using the 'start' and 'end' indices. The sliced sublist is then connected to the 'left' input of the 'Logic Equal' node, while 'sub_list' is connected to the 'right' input. The result from the 'Logic Equal' node is connected to the predicate of the 'Std If' node.\n\nIf the predicate evaluates to 'true' (the sublists are equal), the flow proceeds to set the output property 'output' to 'True' and triggers the output trigger 'continue', effectively ending the function execution. If the predicate evaluates to 'false', the flow proceeds to the 'count' input of the 'Std Count' node to continue with the next iteration. If the 'Std Count' node completes all iterations without finding a match (indicated by the 'done' output), the function sets the output property 'output' to 'False' and triggers the output trigger 'continue'.\n\nThe user-defined function is then created within the main module."
    },
    {
        "MBPP_task_id": "627",
        "task_id": "27",
        "task": "Create a function to find the smallest missing number from a sorted list of natural numbers.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_First_Missing {\n        in(x: -113, y: 62, name: \"list\") property(List) list_24e9a6\n        in(x: 483, y: -328, name: \"execute\") trigger() execute_fa8807\n\n        out(x: 1453, y: 319, name: \"output\") property(Number) output_25655e\n        out(x: 1491, y: -61, name: \"continue\") trigger() continue_aedf0f\n\n        instance(x: 49, y: -95) lastitem_02a3c2 root.Std_k98ojb.List.LastItem {}\n        instance(x: 268, y: -121) generaterange_578305 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 297, y: 38) difference_988da1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 697, y: 100) firstitem_5ed176 root.Std_k98ojb.List.FirstItem {}\n        instance(x: 776, y: -147) if_f43197 root.Std_k98ojb.Std.If {}\n        setter(x: 1081, y: -194, name: \"setter_8cdd78\") setter_8cdd78 = firstMissing\n        setter(x: 1081, y: 53, name: \"setter_9055a9\") setter_9055a9 = firstMissing\n        getter(x: 1086, y: 278, name: \"getter_4e1d42\") getter_4e1d42 = firstMissing\n        instance(x: 841, y: -275) add_9e1a23 root.Std_k98ojb.Math.Add {}\n        instance(x: 557, y: -118) isempty_a948ab root.Std_k98ojb.List.IsEmpty {}\n        list_24e9a6 -> lastitem_02a3c2.list\n        lastitem_02a3c2.item -> generaterange_578305.to\n        0 -> generaterange_578305.from\n        generaterange_578305.list -> difference_988da1.left\n        list_24e9a6 -> difference_988da1.right\n        difference_988da1.difference -> firstitem_5ed176.list\n        if_f43197.then -> setter_8cdd78.execute\n        if_f43197.else -> setter_9055a9.execute\n        execute_fa8807 -> if_f43197.execute\n        getter_4e1d42.value -> output_25655e\n        firstitem_5ed176.item -> setter_9055a9.new_value\n        setter_8cdd78.continue -> continue_aedf0f\n        setter_9055a9.continue -> continue_aedf0f\n        lastitem_02a3c2.item -> add_9e1a23.first\n        1 -> add_9e1a23.second\n        add_9e1a23.result -> setter_8cdd78.new_value\n        difference_988da1.difference -> isempty_a948ab.list\n        isempty_a948ab.isEmpty -> if_f43197.predicate\n    }\n\n    \n\n    instance(x: -234, y: 114) find_first_missing_870d80 root.main.find_First_Missing {}\n\n}",
        "external_functions": "List.LastItem, List.GenerateRange, List.FirstItem, Sets.Difference, Std.If, Math.Add, List.IsEmpty",
        "tests": {
            "test_cases": [
                {
                    "input": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "expected_output": 4
                },
                {
                    "input": [
                        0,
                        1,
                        2,
                        6,
                        9
                    ],
                    "expected_output": 3
                },
                {
                    "input": [
                        2,
                        3,
                        5,
                        8,
                        9
                    ],
                    "expected_output": 0
                }
            ]
        },
        "function_signature": "func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_First_Missing {\n\tin(x: -113, y: 62, name: \"list\") property(List) list_24e9a6\n\tin(x: 483, y: -328, name: \"execute\") trigger() execute_fa8807\n\tout(x: 1453, y: 319, name: \"output\") property(Number) output_25655e\n\tout(x: 1491, y: -61, name: \"continue\") trigger() continue_aedf0f\n}",
        "preconditions": "- The input sequence should be sorted in non-decreasing order\n- The input sequence should only contain natural numbers (including 0)",
        "postconditions": "- The returned value should be the smallest natural number not present in the input sequence",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "732",
        "task_id": "31",
        "task": "Create a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Replace all occurrences of spaces, commas, or dots with a colon.\") replace_specialchar {\n        in(x: -230, y: 0, name: \"input\") property(String) input_0\n\n        out(x: 776, y: 0, name: \"output\") property(String) output_0\n\n        instance(x: 546, y: 0) replace_306f69 root.Std_k98ojb.Strings.Replace {}\n        instance(x: 0, y: 1) replace_ed0af2 root.Std_k98ojb.Strings.Replace {}\n        instance(x: 305, y: 0) replace_371e46 root.Std_k98ojb.Strings.Replace {}\n        replace_ed0af2.output -> replace_371e46.input\n        replace_371e46.output -> replace_306f69.input\n        \" \" -> replace_ed0af2.search\n        \",\" -> replace_371e46.search\n        \":\" -> replace_ed0af2.replace\n        \":\" -> replace_371e46.replace\n        \" \" -> replace_ed0af2.search\n        \".\" -> replace_306f69.search\n        \":\" -> replace_306f69.replace\n        input_0 -> replace_ed0af2.input\n        replace_306f69.output -> output_0\n    }\n\n    \n\n    instance(x: 175, y: -25) replace_specialchar_695b5e root.main.replace_specialchar {}\n}",
        "external_functions": "Strings.Replace",
        "tests": {
            "test_cases": []
        },
        "function_signature": "func(doc: \"Replace all occurrences of spaces, commas, or dots with a colon.\") replace_specialchar {\n\tin(x: -230, y: 0, name: \"input\") property(String) input_0\n\tout(x: 776, y: 0, name: \"output\") property(String) output_0\n}",
        "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
        "postconditions": "- The length of the returning string must be the same as the length of the input string\n- All occurrences of spaces, commas, or dots in the input string are replaced with colons in the output string\n- All other characters are unchanged",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "741",
        "task_id": "33",
        "task": "Create a function to check whether all the characters are same or not.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether all the characters are same or not.\") all_Characters_Same {\n        in(x: -862, y: 188, name: \"string\") property(String) string_db4ddf\n        in(x: -878, y: 9, name: \"execute\") trigger() execute_f1c7e0\n\n        out(x: 588, y: 123, name: \"continue\") trigger() continue_67430e\n        out(x: 600, y: 270, name: \"output\") property(Bool) output_e9fa68\n\n        instance(x: -483, y: 192) characters_97fc24 root.Std_k98ojb.Strings.Characters {}\n        instance(x: -704, y: 191) tolower_0caf71 root.Std_k98ojb.Strings.ToLower {}\n        instance(x: -178, y: 331) firstitem_532c77 root.Std_k98ojb.List.FirstItem {}\n        instance(x: -181, y: 102) for_942609 root.Std_k98ojb.Std.For {}\n        instance(x: 50, y: 183) equal_e1ecef root.Std_k98ojb.Logic.Equal {}\n        instance(x: 258, y: 107) if_75369f root.Std_k98ojb.Std.If {}\n        tolower_0caf71.output -> characters_97fc24.input\n        string_db4ddf -> tolower_0caf71.input\n        characters_97fc24.characters -> firstitem_532c77.list\n        characters_97fc24.characters -> for_942609.items\n        for_942609.item -> equal_e1ecef.left\n        firstitem_532c77.item -> equal_e1ecef.right\n        equal_e1ecef.result -> if_75369f.predicate\n        for_942609.onItem -> if_75369f.execute\n        if_75369f.then -> for_942609.next\n        if_75369f.else -> continue_67430e\n        for_942609.done -> continue_67430e\n        if_75369f.value -> output_e9fa68\n        execute_f1c7e0 -> for_942609.reset\n    }\n\n    \n\n    instance(x: -192, y: 139) all_characters_same_935476 root.main.all_Characters_Same {}\n}",
        "external_functions": "Strings.Characters, Strings.ToLower, List.FirstItem, Std.For, Logic.Equal, Std.If",
        "tests": {
            "test_cases": [
                {
                    "input": "python",
                    "expected_output": false
                },
                {
                    "input": "aaa",
                    "expected_output": true
                },
                {
                    "input": "data",
                    "expected_output": false
                }
            ]
        },
        "function_signature": "func(doc: \"Checks whether all the characters are same or not.\") all_Characters_Same {\n\tin(x: -862, y: 188, name: \"string\") property(String) string_db4ddf\n\tin(x: -878, y: 9, name: \"execute\") trigger() execute_f1c7e0\n\tout(x: 588, y: 123, name: \"continue\") trigger() continue_67430e\n\tout(x: 600, y: 270, name: \"output\") property(Bool) output_e9fa68\n}",
        "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
        "postconditions": "- If the result is true, all characters in the input string are the same\n- If the result is false, there is at least one character in the input string that is different from the others",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "764",
        "task_id": "37",
        "task": "Create a function to count number of digits in a given string.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Counts number of digits in a given string.\") number_ctr {\n        in(x: -240, y: 69, name: \"string\") property(String) string_668bd2\n\n        out(x: 929, y: 58, name: \"count\") property(Number) count_1f468d\n\n        instance(x: -61, y: 62) characters_7942d4 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 177, y: 66) filter_c1bb22 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 723, y: 62) length_8815e6 root.Std_k98ojb.List.Length {}\n        string_668bd2 -> characters_7942d4.input\n        length_8815e6.length -> count_1f468d\n        func() {\n            in(x: -272, y: -48, name: \"current\") property(Number) current_86a8fb\n\n            out(x: 405, y: -52, name: \"output\") property(Bool) output_8ba733\n\n            instance(x: 24, y: -54, stableId: \"dnbuj51ajiozratdcge1fc3s\") isnumeric_9cb360 root.Std_k98ojb.Strings.IsNumeric {}\n            current_86a8fb -> isnumeric_9cb360.input\n            isnumeric_9cb360.isNumeric -> output_8ba733\n        } -> filter_c1bb22.handler\n        filter_c1bb22.output_list -> length_8815e6.list\n        characters_7942d4.characters -> filter_c1bb22.items\n    }\n\n    \n\n    instance(x: 14, y: -52) number_ctr_407e1b root.main.number_ctr {}\n\n}",
        "external_functions": "Strings.Characters, Iteration.Filter, List.Length, Strings.IsNumeric",
        "tests": {
            "test_cases": [
                {
                    "input": "program2bedone",
                    "expected_output": 1
                },
                {
                    "input": "3wonders",
                    "expected_output": 1
                },
                {
                    "input": "123",
                    "expected_output": 3
                },
                {
                    "input": "3wond-1ers2",
                    "expected_output": 3
                }
            ]
        },
        "function_signature": "func(doc: \"Counts number of digits in a given string.\") number_ctr {\n\tin(x: -240, y: 69, name: \"string\") property(String) string_668bd2\n\tout(x: 929, y: 58, name: \"count\") property(Number) count_1f468d\n}",
        "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
        "postconditions": "- The count should be non-negative\n- The count should be equal to the number of digits in the input string",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "441",
        "task_id": "46",
        "task": "Create a function to find the surface area of a cube of a given size.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the surface area of a cube of a given size.\") CubeSurfaceArea {\n            in(x: -56, y: -44, name: \"size\") property(Number) size_49c776\n\n            out(x: 582, y: -80, name: \"Area\") property(Number) Area_a3e36f\n\n            instance(x: 159, y: -44) mul_b6493a root.Std_k98ojb.Math.Mul {}\n            instance(x: 394, y: -170) mul_a368ef root.Std_k98ojb.Math.Mul {}\n            size_49c776 -> mul_b6493a.first\n            6 -> mul_b6493a.second\n            size_49c776 -> mul_a368ef.first\n            mul_b6493a.result -> mul_a368ef.second\n            mul_a368ef.result -> Area_a3e36f\n        }\n\n        \n\n        instance(x: -140, y: 184) cubesurfacearea_5b796d root.main.CubeSurfaceArea {}\n}",
        "external_functions": "Math.Mul",
        "tests": {
            "test_cases": [
                {
                    "input": 5,
                    "expected_output": 150
                },
                {
                    "input": 3,
                    "expected_output": 54
                },
                {
                    "input": 10,
                    "expected_output": 600
                }
            ]
        },
        "function_signature": "func(doc: \"find the surface area of a cube of a given size.\") CubeSurfaceArea {\n\tin(x: -56, y: -44, name: \"size\") property(Number) size_49c776\n\tout(x: 582, y: -80, name: \"Area\") property(Number) Area_a3e36f\n}",
        "preconditions": "- The size of the cube should be greater than 0",
        "postconditions": "- The surface area of the cube is calculated correctly",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "755",
        "task_id": "35",
        "task": "Create a function to find the second smallest number in a list.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: -52, y: 85, name: \"list\") property(List) list_56d273\n        in(x: -244, y: -39, name: \"execute\") trigger() execute_c23a43\n\n        out(x: 1025, y: 145, name: \"continue\") trigger() continue_642adb\n        out(x: 1026, y: 287, name: \"output\") property(Any) output_ad16ae\n\n        instance(x: 205, y: -205) sort_8b352b root.Std_k98ojb.List.Sort {}\n        instance(x: 391, y: 123) ifexpression_ef9cde root.Std_k98ojb.Std.IfExpression {\n            expression: \"n >= 2\"\n        }\n        instance(x: 164, y: 148) length_f23345 root.Std_k98ojb.List.Length {}\n        instance(x: 516, y: -8) getat_a71550 root.Std_k98ojb.List.GetAt {}\n        setter(x: 12, y: -81, name: \"setter_445dfe\") setter_445dfe = secondSmallest\n        setter(x: 757, y: 6, name: \"setter_a82658\") setter_a82658 = secondSmallest\n        getter(x: 762, y: 243, name: \"getter_4c77cf\") getter_4c77cf = secondSmallest\n        instance(x: 420, y: -216, name: \"unique list\") intersection_9b398b root.Std_k98ojb.Sets.Intersection {}\n        list_56d273 -> sort_8b352b.list\n        list_56d273 -> length_f23345.list\n        length_f23345.length -> ifexpression_ef9cde.gen_0\n        1 -> getat_a71550.index\n        setter_445dfe.continue -> ifexpression_ef9cde.execute\n        ifexpression_ef9cde.then -> setter_a82658.execute\n        getat_a71550.itemAtIndex -> setter_a82658.new_value\n        setter_a82658.continue -> continue_642adb\n        getter_4c77cf.value -> output_ad16ae\n        execute_c23a43 -> setter_445dfe.execute\n        ifexpression_ef9cde.else -> continue_642adb\n        intersection_9b398b.intersection -> getat_a71550.list\n        sort_8b352b.sorted_list -> intersection_9b398b.left\n        sort_8b352b.sorted_list -> intersection_9b398b.right\n    }\n\n    \n\n    instance(x: 49, y: 32) second_smallest_814eea root.main.second_smallest {}\n\n}",
        "external_functions": "List.Sort, List.GetAt, List.Length, Std.IfExpression, Sets.Intersection",
        "tests": {
            "test_cases": []
        },
        "function_signature": "func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n\tin(x: -52, y: 85, name: \"list\") property(List) list_56d273\n\tin(x: -244, y: -39, name: \"execute\") trigger() execute_c23a43\n\tout(x: 1025, y: 145, name: \"continue\") trigger() continue_642adb\n\tout(x: 1026, y: 287, name: \"output\") property(Any) output_ad16ae\n}",
        "preconditions": "- The input array should not be null\n- The input array should have at least two elements",
        "postconditions": "- The returned value should be the second-smallest number in the input array\n- The input array remains unchanged",
        "flow_description": "N/A"
    }
]