[
    {
        "MBPP_task_id": "62",
        "task_id": "2",
        "task": "Create a function to find the smallest number in a list.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds the smallest number in a list.\") smallest_num {\n        in(x: -426, y: -248, name: \"items\") property(List) items_ai\n        out(x: 159, y: -219, name: \"min\") property(Number) min_ai\n\n        instance(x: 426, y: -303) list_min_node root.Std_k98ojb.List.Min {}\n        items_ai -> list_min_node.items\n        list_min_node.min -> min_ai\n    }\n\n    \n    instance(x: 426, y: -303) smallest_num_node root.main.smallest_num {}\n\n    \n}",
        "external_functions": "List.Min",
        "python_tests": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        10,
                        20,
                        1,
                        45,
                        99
                    ],
                    "expected_output": 1
                },
                {
                    "input": [
                        1,
                        2,
                        3
                    ],
                    "expected_output": 1
                },
                {
                    "input": [
                        45,
                        46,
                        50,
                        60
                    ],
                    "expected_output": 45
                }
            ]
        },
        "function_signature": "func(doc: \"finds the smallest number in a list.\") smallest_num {\n\tin(x: -426, y: -248, name: \"items\") property(List) items_ai\n\tout(x: 159, y: -219, name: \"min\") property(Number) min_ai\n}",
        "preconditions": "- The input array should not be empty",
        "postconditions": "- The returned value should be the smallest number in the input array",
        "flow_description": "The flow should create the built-in function node from the std library, called 'List.Min' node, should be used. The node should be created inside a function, with proper name."
    },
    {
        "MBPP_task_id": "101",
        "task_id": "4",
        "task": "Create a function to find the kth element in the given array using 1-based indexing.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds the kth element in the given array using 1-based indexing.\") kth_element {\n        in(x: -286, y: -119, name: \"execute\") trigger() execute_1e159f\n        in(x: 153, y: 446, name: \"list\") property(List) list_b5d10a\n        in(x: -289, y: 126, name: \"k\") property(Number) k_1e19fb\n\n        out(x: 844, y: 53, name: \"continue\") trigger() continue_c95bcb\n        out(x: 692, y: 553, name: \"element\") property(Number) element_fd7945\n\n        instance(x: 406, y: 546) getat_8eae56 root.Std_k98ojb.List.GetAt {}\n        instance(x: 215, y: 100) ifexpression_a2fa90 root.Std_k98ojb.Std.IfExpression {\n            expression: \"a == 0\"\n        }\n        instance(x: 196, y: 256) sub_9ff257 root.Std_k98ojb.Math.Sub {}\n        setter(x: -37, y: -48, name: \"setter_d09207\") setter_d09207 = local_k\n        getter(x: -130, y: 211, name: \"getter_7f13b7\") getter_7f13b7 = local_k\n        getter(x: 118, y: 540, name: \"getter_44a047\") getter_44a047 = local_k\n        setter(x: 491, y: 194, name: \"setter_29a5c8\") setter_29a5c8 = local_k\n        list_b5d10a -> getat_8eae56.list\n        1 -> sub_9ff257.second\n        execute_1e159f -> setter_d09207.execute\n        k_1e19fb -> setter_d09207.new_value\n        setter_d09207.continue -> ifexpression_a2fa90.execute\n        getter_7f13b7.value -> sub_9ff257.first\n        ifexpression_a2fa90.then -> continue_c95bcb\n        getter_44a047.value -> getat_8eae56.index\n        getat_8eae56.itemAtIndex -> element_fd7945\n        ifexpression_a2fa90.else -> setter_29a5c8.execute\n        sub_9ff257.result -> setter_29a5c8.new_value\n        k_1e19fb -> ifexpression_a2fa90.gen_0\n        setter_29a5c8.continue -> continue_c95bcb\n    }\n\n    \n\n    instance(x: -97, y: -68) kth_element_49c6ac root.main.kth_element {}\n}",
        "external_functions": "List.GetAt, Math.Sub, Std.IfExpression",
        "python_tests": [
            "assert kth_element([12,3,5,7,19], 2) == 3",
            "assert kth_element([17,24,8,23], 3) == 8",
            "assert kth_element([16,21,25,36,4], 4) == 36"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        [
                            12,
                            3,
                            5,
                            7,
                            19
                        ],
                        2
                    ],
                    "expected_output": 3
                },
                {
                    "input": [
                        [
                            17,
                            24,
                            8,
                            23
                        ],
                        3
                    ],
                    "expected_output": 8
                },
                {
                    "input": [
                        [
                            16,
                            21,
                            25,
                            36,
                            4
                        ],
                        4
                    ],
                    "expected_output": 36
                }
            ]
        },
        "function_signature": "func(doc: \"finds the kth element in the given array using 1-based indexing.\") kth_element {\n\tin(x: -286, y: -119, name: \"execute\") trigger() execute_1e159f\n\tin(x: 153, y: 446, name: \"list\") property(List) list_b5d10a\n\tin(x: -289, y: 126, name: \"k\") property(Number) k_1e19fb\n\tout(x: 844, y: 53, name: \"continue\") trigger() continue_c95bcb\n\tout(x: 692, y: 553, name: \"element\") property(Number) element_fd7945\n}",
        "preconditions": "- index should be between 1 and the length of the list (inclusive)",
        "postconditions": "- The result should be the kth element of the input list.",
        "flow_description": "The flow should create a user-defined function called 'kth_element' with three inputs: an 'execute' trigger, 'list' of type List, and 'k' of type Number. The function should have two outputs: a 'continue' trigger and 'element' of type Number, which is the kth element in the provided list. Inside the function, a local variable is used to store the state of the input property 'k'. This variable is called 'local_k' and is set at the beginning of the flow using the setter node to the value of the input property of 'k'. Then an 'IfExpression' node is used to check if 'k' is equal to 0. If 'k' is 0, trigger the 'continue' output immediately. Otherwise, it gets the 'local_k' variable using a getter node and adjusts for zero-based indexing by using 'Math Sub' to subract 1, and assign this result back to 'local_k', using the setter node. Then, use a 'List GetAt' node to retrieve the element at the updated index from 'list'. The getter node is used for getting the value of the local variable 'local_k'. The retrieved element should be output through the 'element' property. Connect the nodes appropriately: the 'execute' trigger starts the flow and sends the flow of execution to the setter node. The setter node uses input property 'k' and therefore an arrow is created between them. The setter node then sends the flow of execution to the 'Std IfExpression' node, which also takes in the input property 'k'. The node's output trigger 'then' is connected with the output trigger 'continue' of the flow, and the output trigger 'else' is connected to another setter node. The setter node's input property 'new value' is connected to the output property 'result' of the 'Math Sub' node. Lastly, the input propery 'list' and the getter node is connected to the input properties 'list' and 'index' of the 'List GetAt' node. The outpur property 'itemAtIndex' of this node is then connected to the output property 'element' of the user-defined function, which returns the number."
    },
    {
        "MBPP_task_id": "227",
        "task_id": "6",
        "task": "Create a function to find the minimum of three numbers.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds the minimum of three numbers.\") min_of_three {\n        in(x: -903, y: -379, name: \"a\") property(Number) a_f37c19\n        in(x: -908, y: -241, name: \"b\") property(Number) b_ca79ac\n        in(x: -907, y: -94, name: \"c\") property(Number) c_a89f71\n\n        out(x: -78, y: -306, name: \"min\") property(Number) smallest_8713cf\n\n        data_instance(x: -609, y: -363) data_9a9c70  = [a, b, c]\n        instance(x: -341, y: -301) min_c3e343 root.Std_k98ojb.List.Min {}\n        a_f37c19 -> data_9a9c70.a\n        b_ca79ac -> data_9a9c70.b\n        c_a89f71 -> data_9a9c70.c\n        data_9a9c70 -> min_c3e343.items\n        min_c3e343.min -> smallest_8713cf\n    }\n    \n\n    instance(x: 322, y: 568) min_of_three_cee202 root.main.min_of_three {}\n}",
        "external_functions": "Math.Min",
        "python_tests": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        10,
                        20,
                        0
                    ],
                    "expected_output": 0
                },
                {
                    "input": [
                        19,
                        15,
                        18
                    ],
                    "expected_output": 15
                }
            ]
        },
        "function_signature": "func(doc: \"finds the minimum of three numbers.\") min_of_three {\n\tin(x: -903, y: -379, name: \"a\") property(Number) a_f37c19\n\tin(x: -908, y: -241, name: \"b\") property(Number) b_ca79ac\n\tin(x: -907, y: -94, name: \"c\") property(Number) c_a89f71\n\tout(x: -78, y: -306, name: \"min\") property(Number) smallest_8713cf\n}",
        "preconditions": "- There are no preconditions, the method will always work.",
        "postconditions": "- The returned value is the minimum of the three input numbers\n- The returned value is less than or equal to all input numbers",
        "flow_description": "The flow should create a user-defined function. The function should contain three input properties of type Number, one Data Object list of the input properties, one 'Math Min' node and one output property of type Number.\n The arrows are connected as follows: The input properties are connected with arrows to the Data Obejct to create list and this list is further conencted to the property of the 'Math Min' node. The result of the 'Math Min' node is connected with arrows to the output property, that return the Number from the function. The user-defined function is then created within the main module."
    },
    {
        "MBPP_task_id": "435",
        "task_id": "9",
        "task": "Create a function to find the last digit of a given number.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the last digit of a given number.\") last_digit{\n        in(x: 0, y: 0, name: \"value\") property(Number) value_ai\n        out(x: 39, y: 0, name: \"result\") property(Number) result_ai\n\n        instance(x: 15, y: 0) math_modulo_node root.Std_k98ojb.Math.Modulo {}\n        value_ai -> math_modulo_node.value\n        10 -> math_modulo_node.divisor\n        math_modulo_node.result -> result_ai\n   }\n    \n\n    instance(x: 264, y: -464, name: \"last_Digit\") last_091f94 root.main.last_digit {}\n}",
        "external_functions": "Math.Modulo",
        "python_tests": [
            "assert last_digit(123) == 3",
            "assert last_digit(25) == 5",
            "assert last_digit(30) == 0"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": 123,
                    "expected_output": 3
                },
                {
                    "input": 25,
                    "expected_output": 5
                },
                {
                    "input": 30,
                    "expected_output": 0
                }
            ]
        },
        "function_signature": "func(doc: \"find the last digit of a given number.\") last_digit{\n\tin(x: 0, y: 0, name: \"value\") property(Number) value_ai\n\tout(x: 39, y: 0, name: \"result\") property(Number) result_ai\n}",
        "preconditions": "- n should be a non-negative integer",
        "postconditions": "- The returned digit d should be between 0 and 9\n- d should be the last digit of the input number n",
        "flow_description": ""
    },
    {
        "MBPP_task_id": "610",
        "task_id": "24",
        "task": "Create a function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n   func(doc: \"takes a list and returns a list with the same elements, but the k'th element removed.\") remove_kth_element {\n        in(x: -172, y: 18, name: \"k\") property(Number) k_94ca93\n        in(x: -156, y: -121, name: \"list\") property(List) list_aa3106\n\n        out(x: 505, y: -50, name: \"newList\") property(List) newList_20b99a\n\n        instance(x: 221, y: -48, name: \"remove_kth_element\") remove_06d2e5 root.Std_k98ojb.List.Remove {}\n        instance(x: -11, y: 9) sub_4aeea6 root.Std_k98ojb.Math.Sub {}\n        k_94ca93 -> sub_4aeea6.first\n        1 -> sub_4aeea6.second\n        sub_4aeea6.result -> remove_06d2e5.index\n        list_aa3106 -> remove_06d2e5.list\n        remove_06d2e5.listWithoutItem -> newList_20b99a\n    }\n\n    \n\n    instance(x: -138, y: -63) remove_kth_element_aad0c2 root.main.remove_kth_element {}\n\n\n}",
        "external_functions": "List.Remove, Math.Sub",
        "python_tests": [
            "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
            "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
            "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        [
                            1,
                            1,
                            2,
                            3,
                            4,
                            4,
                            5,
                            1
                        ],
                        3
                    ],
                    "expected_output": [
                        1,
                        1,
                        3,
                        4,
                        4,
                        5,
                        1
                    ]
                },
                {
                    "input": [
                        [
                            0,
                            0,
                            1,
                            2,
                            3,
                            4,
                            4,
                            5,
                            6,
                            6,
                            6,
                            7,
                            8,
                            9,
                            4,
                            4
                        ],
                        4
                    ],
                    "expected_output": [
                        0,
                        0,
                        1,
                        3,
                        4,
                        4,
                        5,
                        6,
                        6,
                        6,
                        7,
                        8,
                        9,
                        4,
                        4
                    ]
                },
                {
                    "input": [
                        [
                            10,
                            10,
                            15,
                            19,
                            18,
                            18,
                            17,
                            26,
                            26,
                            17,
                            18,
                            10
                        ],
                        5
                    ],
                    "expected_output": [
                        10,
                        10,
                        15,
                        19,
                        18,
                        17,
                        26,
                        26,
                        17,
                        18,
                        10
                    ]
                }
            ]
        },
        "function_signature": "func(doc: \"takes a list and returns a list with the same elements, but the k'th element removed.\") remove_kth_element {\n\tin(x: -172, y: 18, name: \"k\") property(Number) k_94ca93\n\tin(x: -156, y: -121, name: \"list\") property(List) list_aa3106\n\tout(x: 505, y: -50, name: \"newList\") property(List) newList_20b99a\n}",
        "preconditions": "- k should be between 0 and the length of the array",
        "postconditions": "- The length of the returning array must be one less than the length of the input array\n- All elements before the k'th element in the input array should be the same in the output array\n- All elements after the k'th element in the input array should be shifted by one position in the output array",
        "flow_description": "The flow should create a user-defined function called 'remove_kth_element'. The body of the function contains two input properties: an input property of type Number, named 'k', and an input property of type List, named 'list'. It also includes one output property of type List, named 'newList'. The function should have the following nodes: a 'List Remove' node to remove the k'th element from the list, and a 'Math Sub' node to calculate the index of the k'th element.\n Connect the nodes as follows: the input property 'k' is connected to the 'List Remove' node's 'index' input. The input property 'list' is connected to the 'List Remove' node's 'list' input. The result of the 'List Remove' node is connected to the 'newList' output property. The user-defined function is then created within the main module."
    },
    {
        "MBPP_task_id": "629",
        "task_id": "28",
        "task": "Create a function to find even numbers from a list of numbers.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n\n    func(doc:\"find even numbers from a list of numbers.\") Split {\n        in(x: -531, y: 2, name: \"list\") property(List) list_ai\n        out(x: 340, y: 77, name: \"output\") property(List) output_ai\n        instance(x: 772, y: 76) filter_7b3b7b root.Std_k98ojb.Query.Filter {\n            where: \"it % 2 == 0\"\n        }\n        list_ai -> filter_7b3b7b.list\n        filter_7b3b7b.result -> output_ai\n    }\n    \n\n    instance(x: -34, y: 127) split_node root.main.Split {}\n\n}",
        "external_functions": "Query.Filter",
        "python_tests": [
            "assert Split([1,2,3,4,5]) == [2,4]",
            "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
            "assert Split ([8,12,15,19]) == [8,12]"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "expected_output": [
                        2,
                        4
                    ]
                },
                {
                    "input": [
                        4,
                        5,
                        6,
                        7,
                        8,
                        0,
                        1
                    ],
                    "expected_output": [
                        4,
                        6,
                        8,
                        0
                    ]
                }
            ]
        },
        "function_signature": "func(doc:\"find even numbers from a list of numbers.\") Split {\n\tin(x: -531, y: 2, name: \"list\") property(List) list_ai\n\tout(x: 340, y: 77, name: \"output\") property(List) output_ai\n}",
        "preconditions": "- There are no preconditions, the method will always work. Arrays can be empty but not null.",
        "postconditions": "- All elements in the output array are even\n- All even elements in the input array are present in the output array\n- The order of elements in the output array is the same as in the input array",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "632",
        "task_id": "29",
        "task": "Create a function to move all zeroes to the end of the given list.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    \n    func(doc: \"Moves all zeroes to the end of the given list.\") move_zero {\n        in(x: -199, y: -152, name: \"execute\") trigger() execute_1ddb9f\n        in(x: -174, y: 160, name: \"list\") property(List) list_0c1a77\n\n        out(x: 838, y: 168, name: \"output\") property(List) data_0_0\n        out(x: 817, y: 39, name: \"continue\") trigger() continue_a7f942\n\n        instance(x: 294, y: -19) for_9ab286 root.Std_k98ojb.Std.For {}\n        instance(x: 557, y: 167) concat_9b38cc root.Std_k98ojb.List.Concat {}\n        setter(x: 6, y: -64, name: \"setter_8c6eda\") setter_8c6eda = zeroList\n        instance(x: 554, y: -99) ifexpression_5c4634 root.Std_k98ojb.Std.IfExpression {\n            expression: \"item == 0\"\n        }\n        setter(x: 825, y: -223, name: \"setter_95dd4c\") setter_95dd4c = zeroList\n        getter(x: 252, y: -246, name: \"getter_e808a2\") getter_e808a2 = zeroList\n        getter(x: 313, y: 269, name: \"getter_c18a69\") getter_c18a69 = zeroList\n        instance(x: -200, y: 39) empty_ea3a3a root.Std_k98ojb.List.Empty {}\n        instance(x: 562, y: -203) add_14921d root.Std_k98ojb.List.Add {}\n        instance(x: 300, y: 168) filter_875ddb root.Std_k98ojb.Query.Filter {\n            where: \"it != 0\"\n        }\n        setter_8c6eda.continue -> for_9ab286.reset\n        execute_1ddb9f -> setter_8c6eda.execute\n        for_9ab286.onItem -> ifexpression_5c4634.execute\n        for_9ab286.item -> ifexpression_5c4634.gen_0\n        ifexpression_5c4634.then -> setter_95dd4c.execute\n        ifexpression_5c4634.else -> for_9ab286.next\n        setter_95dd4c.continue -> for_9ab286.next\n        list_0c1a77 -> for_9ab286.items\n        concat_9b38cc.result -> data_0_0\n        empty_ea3a3a.list -> setter_8c6eda.new_value\n        0 -> add_14921d.item\n        add_14921d.listWithItem -> setter_95dd4c.new_value\n        for_9ab286.done -> continue_a7f942\n        getter_c18a69.value -> concat_9b38cc.right\n        filter_875ddb.result -> concat_9b38cc.left\n        list_0c1a77 -> filter_875ddb.list\n        getter_e808a2.value -> add_14921d.list\n    }\n\n    \n\n    instance(x: -242, y: -31) move_zero_def9ac root.main.move_zero {}\n}",
        "external_functions": "Std.For, List.Concat, Std.IfExpression, List.Empty, List.Add, Query.Filter",
        "python_tests": [
            "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
            "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
            "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        1,
                        0,
                        2,
                        0,
                        3,
                        4
                    ],
                    "expected_output": [
                        1,
                        2,
                        3,
                        4,
                        0,
                        0
                    ]
                },
                {
                    "input": [
                        2,
                        3,
                        2,
                        0,
                        0,
                        4,
                        0,
                        5,
                        0
                    ],
                    "expected_output": [
                        2,
                        3,
                        2,
                        4,
                        5,
                        0,
                        0,
                        0,
                        0
                    ]
                },
                {
                    "input": [
                        0,
                        1,
                        0,
                        1,
                        1
                    ],
                    "expected_output": [
                        1,
                        1,
                        1,
                        0,
                        0
                    ]
                }
            ]
        },
        "function_signature": "func(doc: \"Moves all zeroes to the end of the given list.\") move_zero {\n\tin(x: -199, y: -152, name: \"execute\") trigger() execute_1ddb9f\n\tin(x: -174, y: 160, name: \"list\") property(List) list_0c1a77\n\tout(x: 838, y: 168, name: \"output\") property(List) data_0_0\n\tout(x: 817, y: 39, name: \"continue\") trigger() continue_a7f942\n}",
        "preconditions": "- There are no preconditions, the method will always work.",
        "postconditions": "- The length of the output array must be the same as the length of the input array\n- All zeroes in the input array are at the end of the output array\n- The relative order of the non-zero elements should be the same as in the input array\n- The number of zeroes in the input and output arrays should be the same",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "760",
        "task_id": "36",
        "task": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"Checks whether a list of numbers contains only one distinct element or not.\") unique_Element {\n        in(x: -285, y: -86, name: \"list\") property(List) list_3af6ba\n\n        out(x: 557, y: -97, name: \"output\") property(Bool) output_c7097f\n\n        instance(x: -92, y: -97) intersection_c7c7e6 root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 146, y: -96) length_8166b0 root.Std_k98ojb.List.Length {}\n        instance(x: 360, y: -95) equal_f89569 root.Std_k98ojb.Logic.Equal {}\n        list_3af6ba -> intersection_c7c7e6.left\n        intersection_c7c7e6.intersection -> length_8166b0.list\n        list_3af6ba -> intersection_c7c7e6.right\n        length_8166b0.length -> equal_f89569.left\n        1 -> equal_f89569.right\n        equal_f89569.result -> output_c7097f\n    }\n\n    \n\n    instance(x: -84, y: 59) unique_element_ac7dfb root.main.unique_Element {}\n\n}",
        "external_functions": "Sets.Intersection, List.Length, Logic.Equal",
        "python_tests": [
            "assert unique_Element([1,1,1]) == True",
            "assert unique_Element([1,2,1,2]) == False",
            "assert unique_Element([1,2,3,4,5]) == False"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        1,
                        1,
                        1
                    ],
                    "expected_output": true
                },
                {
                    "input": [
                        1,
                        2,
                        1,
                        2
                    ],
                    "expected_output": false
                },
                {
                    "input": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "expected_output": false
                }
            ]
        },
        "function_signature": "func(doc: \"Checks whether a list of numbers contains only one distinct element or not.\") unique_Element {\n\tin(x: -285, y: -86, name: \"list\") property(List) list_3af6ba\n\tout(x: 557, y: -97, name: \"output\") property(Bool) output_c7097f\n}",
        "preconditions": "- The input array should not be null",
        "postconditions": "- If the method returns true, all elements in the array are equal\n- If the method returns false, there are at least two distinct elements in the array",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "404",
        "task_id": "45",
        "task": "Create a function that finds the minimum of two numbers.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds the minimum of two numbers\") Min {\n        in(x: -281, y: -193, name: \"a\") property(Number) a_9f7759\n        in(x: -272, y: 17, name: \"b\") property(Number) b_f9110a\n        in(x: -450, y: -114, name: \"execute\") trigger() execute_12bf99\n\n        out(x: 46, y: 158, name: \"min\") property(Number) min_b2508f\n        out(x: 512, y: -114, name: \"continue\") trigger() continue_685c8f\n\n        instance(x: -105, y: -110) ifexpression_e38995 root.Std_k98ojb.Std.IfExpression {\n            expression: \"a < b\"\n        }\n        getter(x: -144, y: 112, name: \"getter_9cceb3\") getter_9cceb3 = min\n        setter(x: 116, y: -268, name: \"setter_1cedb2\") setter_1cedb2 = min\n        setter(x: 118, y: -56, name: \"setter_37db7f\") setter_37db7f = min\n        a_9f7759 -> ifexpression_e38995.gen_0\n        b_f9110a -> ifexpression_e38995.gen_1\n        getter_9cceb3.value -> min_b2508f\n        ifexpression_e38995.then -> setter_1cedb2.execute\n        a_9f7759 -> setter_1cedb2.new_value\n        b_f9110a -> setter_37db7f.new_value\n        ifexpression_e38995.else -> setter_37db7f.execute\n        execute_12bf99 -> ifexpression_e38995.execute\n        setter_1cedb2.continue -> continue_685c8f\n        setter_37db7f.continue -> continue_685c8f\n    }\n\n    \n\n    instance(x: -174, y: -63) Min_d6e930 root.main.Min {}\n}",
        "external_functions": "Std.IfExpression",
        "python_tests": [
            "assert Min(1,2) == 1",
            "assert Min(-5,-4) == -5",
            "assert Min(0,0) == 0"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        1,
                        2
                    ],
                    "expected_output": 1
                },
                {
                    "input": [
                        0,
                        0
                    ],
                    "expected_output": 0
                }
            ]
        },
        "function_signature": "func(doc: \"finds the minimum of two numbers\") Min {\n\tin(x: -281, y: -193, name: \"a\") property(Number) a_9f7759\n\tin(x: -272, y: 17, name: \"b\") property(Number) b_f9110a\n\tin(x: -450, y: -114, name: \"execute\") trigger() execute_12bf99\n\tout(x: 46, y: 158, name: \"min\") property(Number) min_b2508f\n\tout(x: 512, y: -114, name: \"continue\") trigger() continue_685c8f\n}",
        "preconditions": "- There are no preconditions, the method will always work.",
        "postconditions": "- The minValue is either a or b\n- The minValue is less than or equal to both a and b",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "625",
        "task_id": "49",
        "task": "Create a function to interchange the first and last element in a given list.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n  func(doc: \"interchange the first and last element in a given list.\") swap_list {\n        in(x: -1489, y: -536, name: \"list\") property(List) list_752c60\n\n        out(x: -189, y: -620, name: \"output\") property(List) output_195363\n\n        instance(x: -1049, y: -375) firstitem_9b1bc3 root.Std_k98ojb.List.FirstItem {}\n        instance(x: -1059, y: -696) lastitem_d831ca root.Std_k98ojb.List.LastItem {}\n        data_instance(x: -753, y: -588) data_cc1b1b  = [first, middle, last]\n        instance(x: -432, y: -620) flatten_c31c7c root.Std_k98ojb.List.Flatten {}\n        instance(x: -978, y: -566) slice_3f3ee6 root.Std_k98ojb.List.Slice {}\n        instance(x: -1405, y: -438) length_4b8927 root.Std_k98ojb.List.Length {}\n        instance(x: -1191, y: -492) sub_f133b2 root.Std_k98ojb.Math.Sub {}\n        list_752c60 -> lastitem_d831ca.list\n        list_752c60 -> firstitem_9b1bc3.list\n        data_cc1b1b -> flatten_c31c7c.items\n        firstitem_9b1bc3.item -> data_cc1b1b.last\n        lastitem_d831ca.item -> data_cc1b1b.first\n        list_752c60 -> slice_3f3ee6.list\n        1 -> slice_3f3ee6.start\n        slice_3f3ee6.slice -> data_cc1b1b.middle\n        flatten_c31c7c.flattened -> output_195363\n        list_752c60 -> length_4b8927.list\n        length_4b8927.length -> sub_f133b2.first\n        1 -> sub_f133b2.second\n        sub_f133b2.result -> slice_3f3ee6.end\n    }\n\n    \n\n    instance(x: 101, y: -67) swap_list_496e5e root.main.swap_list {}\n}",
        "external_functions": "List.FirstItem, List.LastItem, List.Flatten, List.Slice, List.Length, Math.Sub",
        "python_tests": [
            "assert swap_list([1,2,3]) == [3,2,1]",
            "assert swap_list([1,2,3,4,4]) == [4,2,3,4,1]",
            "assert swap_list([4,5,6]) == [6,5,4]"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        1,
                        2,
                        3
                    ],
                    "expected_output": [
                        3,
                        2,
                        1
                    ]
                },
                {
                    "input": [
                        1,
                        2,
                        3,
                        4,
                        4
                    ],
                    "expected_output": [
                        4,
                        2,
                        3,
                        4,
                        1
                    ]
                },
                {
                    "input": [
                        4,
                        5,
                        6
                    ],
                    "expected_output": [
                        6,
                        5,
                        4
                    ]
                }
            ]
        },
        "function_signature": "func(doc: \"interchange the first and last element in a given list.\") swap_list {\n\tin(x: -1489, y: -536, name: \"list\") property(List) list_752c60\n\tout(x: -189, y: -620, name: \"output\") property(List) output_195363\n}",
        "preconditions": "- The array should not be empty",
        "postconditions": "- The first element of the input array should be the last element of the modified array\n- The last element of the input array should be the first element of the modified array\n- All other elements remain unchanged",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "803",
        "task_id": "50",
        "task": "Create a function to check whether the given number is a perfect square or not.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given number is a perfect square or not.\") is_perfect_square {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1812, y: -319) and_80a119 root.Std_k98ojb.Logic.And {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(n % i == 0)\"\n        }\n        instance(x: 1496, y: -187) expression_9fba8c root.Std_k98ojb.Math.Expression {\n            expression: \"(n / i == i)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        1 -> generaterange_038fce.from\n        input_f5c03d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n            element_5f51f7 -> mul_2f9d09.first\n            element_5f51f7 -> mul_2f9d09.second\n            mul_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> for_8cb3f6.items\n        for_8cb3f6.item -> lessthanorequal_f11fda.left\n        input_f5c03d -> lessthanorequal_f11fda.right\n        lessthanorequal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        expression_b720d7.result -> and_80a119.left\n        expression_9fba8c.result -> and_80a119.right\n        and_80a119.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n        for_8cb3f6.index -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> expression_b720d7.gen_1\n        add_b4554f.result -> expression_9fba8c.gen_1\n        input_f5c03d -> expression_9fba8c.gen_0\n        input_f5c03d -> expression_b720d7.gen_0\n        if_07b8c7.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_e19a62.else -> for_8cb3f6.next\n    }\n\n    \n\n    instance(x: -189, y: 222) is_perfect_square_f0be66 root.main.is_perfect_square {}\n}",
        "external_functions": "Iteration.Map, List.GenerateRange, Math.LessThanOrEqual, Std.For, Logic.And, Std.If, Math.Expression, Math.Add, Math.Mul",
        "python_tests": [
            "assert is_perfect_square(10) == False",
            "assert is_perfect_square(36) == True",
            "assert is_perfect_square(14) == False"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": 10,
                    "expected_output": false
                },
                {
                    "input": 36,
                    "expected_output": true
                },
                {
                    "input": 14,
                    "expected_output": false
                }
            ]
        },
        "function_signature": "func(doc: \"checks whether the given number is a perfect square or not.\") is_perfect_square {\n\tin(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n\tin(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\tout(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n\tout(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n}",
        "preconditions": "- n should be non-negative",
        "postconditions": "- If the result is true, there exists an integer i such that i * i == n\n- If the result is false, there is no integer i such that i * i == n",
        "flow_description": "N/A"
    },
    {
        "MBPP_task_id": "127",
        "task_id": "5",
        "task": "Create a function to multiply two numbers.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n   func(doc: \"multiply two numbers\") multiply_int{\n        in(x: 0, y: 0, name: \"x\") property(Number) x_ai\n        in(x: 0, y: 0, name: \"y\") property(Number) y_ai\n        out(x: 0, y: 0, name: \"result\") property(Number) result_ai\n\n        instance(x: 0, y: 0) math_expr_node root.Std_k98ojb.Math.Expression {\n            expression: \"x * y\"\n        }\n        x_ai -> math_expr_node.gen_0\n        y_ai -> math_expr_node.gen_1\n        math_expr_node.result -> result_ai\n   }\n   \n\n    instance(x: -85, y: -46, name: \"multiply_int\") expression_3e25a9 root.main.multiply_int {}\n}",
        "external_functions": "Math.Expression",
        "python_tests": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        10,
                        20
                    ],
                    "expected_output": 200
                },
                {
                    "input": [
                        5,
                        10
                    ],
                    "expected_output": 50
                },
                {
                    "input": [
                        4,
                        8
                    ],
                    "expected_output": 32
                }
            ]
        },
        "function_signature": "func(doc: \"multiply two numbers\") multiply_int{\n\tin(x: 0, y: 0, name: \"x\") property(Number) x_ai\n\tin(x: 0, y: 0, name: \"y\") property(Number) y_ai\n\tout(x: 0, y: 0, name: \"result\") property(Number) result_ai\n}",
        "preconditions": "- There are no preconditions, the method will always work.",
        "postconditions": "- The result should be the product of the two input integers",
        "flow_description": "The flow should create the built-in function node from the std library, called 'Math.Expression' node, should be used. The node should be created inside a function, with proper name."
    },
    {
        "MBPP_task_id": "594",
        "task_id": "20",
        "task": "Create a function to find the difference of the first even and first odd number of a given list.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds the difference of the first even and first odd number of a given list.\") diff_even_odd {\n        in(x: -569, y: 438, name: \"list\") property(List) list_542a51\n\n        out(x: 443, y: 427, name: \"difference\") property(Number) difference_57c890\n\n        instance(x: -319, y: 358, name: \"Even list\") filter_f3b46d root.Std_k98ojb.Query.Filter {\n            where: \"it % 2 == 0\"\n        }\n        instance(x: -49, y: 372) firstitem_870503 root.Std_k98ojb.List.FirstItem {}\n        instance(x: -318, y: 521, name: \"Odd list\") filter_4d4556 root.Std_k98ojb.Query.Filter {\n            where: \"it % 2 != 0\"\n        }\n        instance(x: -48, y: 517) firstitem_3078c6 root.Std_k98ojb.List.FirstItem {}\n        instance(x: 188, y: 425) sub_852f2e root.Std_k98ojb.Math.Sub {}\n        list_542a51 -> filter_f3b46d.list\n        filter_f3b46d.result -> firstitem_870503.list\n        list_542a51 -> filter_4d4556.list\n        filter_4d4556.result -> firstitem_3078c6.list\n        firstitem_870503.item -> sub_852f2e.first\n        firstitem_3078c6.item -> sub_852f2e.second\n        sub_852f2e.result -> difference_57c890\n    }\n\n    \n\n    instance(x: -67, y: -37) diff_even_odd_f21f44 root.main.diff_even_odd {}\n}",
        "external_functions": "Query.Filter, List.FirstItem, Math.Sub",
        "python_tests": [
            "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
            "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
            "assert diff_even_odd([1,5,7,9,10])==9"
        ],
        "tests": {
            "test_cases": [
                {
                    "input": [
                        1,
                        3,
                        5,
                        7,
                        4,
                        1,
                        6,
                        8
                    ],
                    "expected_output": 3
                },
                {
                    "input": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "expected_output": 1
                },
                {
                    "input": [
                        1,
                        5,
                        7,
                        9,
                        10
                    ],
                    "expected_output": 9
                }
            ]
        },
        "function_signature": "func(doc: \"finds the difference of the first even and first odd number of a given list.\") diff_even_odd {\n\tin(x: -569, y: 438, name: \"list\") property(List) list_542a51\n\tout(x: 443, y: 427, name: \"difference\") property(Number) difference_57c890\n}",
        "preconditions": "- The array should not be empty\n- The array should contain at least one even and one odd number",
        "postconditions": "- The difference is the first even number minus the first odd number in the array",
        "flow_description": "The flow should create a user-defined function called 'diff_even_odd'. The body of the function contains one input property of type 'List', named 'list'. It also includes the following nodes: one 'Query Filter' node to filter out even numbers from 'list', resulting in 'Even list'; one 'List FirstItem' node to extract the first even number from 'Even list'; another 'Query Filter' node to filter out odd numbers from 'list', resulting in 'Odd list'; another 'List FirstItem' node to extract the first odd number from 'Odd list'; and one 'Math Sub' node to calculate the difference between the first even number and the first odd number. Lastly, it includes an output property named 'difference' of type 'Number'.\n\nArrows are connected as follows: The input property 'list' is connected to both 'Query Filter' nodes. The first 'Query Filter' node uses the condition 'it % 2 == 0' to get the even numbers, and its 'result' is connected to the first 'List FirstItem' node to get 'first_even'. The second 'Query Filter' node uses the condition 'it % 2 != 0' to get the odd numbers, and its 'result' is connected to the second 'List FirstItem' node to get 'first_odd'. The 'item' outputs from both 'List FirstItem' nodes are connected to the 'first' and 'second' inputs of the 'Math Sub' node, respectively. The 'result' output from the 'Math Sub' node is connected to the output property 'difference'.\n\nThe user-defined function is then created within the main module."
    },
    {
        "MBPP_task_id": "599",
        "task_id": "21",
        "task": "Create a function to find sum and average of first n natural numbers.",
        "response": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"find sum and average of first n natural numbers.\") sum_average {\n        in(x: -343, y: -287, name: \"n\") property(Number) n_c88d35\n\n        out(x: 756, y: -371, name: \"output\") property(Any) output_ebef81\n\n        data_instance(x: 394, y: -339) data_3c713b  = [sum, average]\n        instance(x: 46, y: -383, name: \"sum\") expression_634b7e root.Std_k98ojb.Math.Expression {\n            expression: \"n * (n+1)/2\"\n        }\n        instance(x: 62, y: -226, name: \"average\") div_2d44da root.Std_k98ojb.Math.Div {}\n        data_3c713b -> output_ebef81\n        n_c88d35 -> expression_634b7e.gen_0\n        expression_634b7e.result -> data_3c713b.sum\n        expression_634b7e.result -> div_2d44da.first\n        div_2d44da.result -> data_3c713b.average\n        n_c88d35 -> div_2d44da.second\n    }\n\n    \n\n    instance(x: -81, y: 159) sum_average_f15bad root.main.sum_average {}\n}",
        "external_functions": "Math.Expression, Math.Div",
        "python_tests": [
            "assert sum_average(10)==(55, 5.5)",
            "assert sum_average(15)==(120, 8.0)",
            "assert sum_average(20)==(210, 10.5)"
        ],
        "tests": {
            "test_cases": []
        },
        "function_signature": "func(doc: \"find sum and average of first n natural numbers.\") sum_average {\n\tin(x: -343, y: -287, name: \"n\") property(Number) n_c88d35\n\tout(x: 756, y: -371, name: \"output\") property(Any) output_ebef81\n}",
        "preconditions": "- n should be a positive integer",
        "postconditions": "- sum should be the sum of the first n natural numbers\n- average should be the average of the first n natural numbers",
        "flow_description": "The flow should create a user-defined function called 'sum_average'. The body of the function contains one input property of type 'Number', named 'n'. It also includes the following nodes: one 'Math Expression' node to calculate the sum of the first n natural numbers using the formula 'n * (n + 1) / 2', and one 'Math Div' node to calculate the average by dividing the sum by 'n'. Lastly, it includes an output property named 'output' of type 'Any'.\n\nArrows are connected as follows: The input property 'n' is connected to the 'Math Expression' node's 'gen_0' input. The result of the 'Math Expression' node is connected to the 'first' input of the 'Math Div' node and to a data instance for storing the sum. The input property 'n' is also connected to the 'second' input of the 'Math Div' node. The result of the 'Math Div' node is connected to the data instance for storing the average. The data instance containing the sum and average is then connected to the output property 'output'. The user-defined function is then created within the main module."
    }
]