[
    {
        "prompts": [
            "Create a function that takes two lists and returns true if they have at least one common element.",
            "The created user-defined function should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 7,
        "specification": {
            "function_signature": "func(doc: \"takes two lists and returns true if they have at least one common element.\") common_element {\n\tin(x: -337, y: -126, name: \"list1\") property(List) list1_016b2e\n\tin(x: -331, y: 30, name: \"list2\") property(List) list2_c8f404\n\tout(x: 441, y: -72, name: \"output\") property(Bool) output_879de6\n}",
            "preconditions": "- Both arrays should be non-null",
            "postconditions": "- If the method returns true, there exists at least one common element between the two arrays\n- If the method returns false, there are no common elements between the two arrays"
        },
        "MBPP_task_id": 431,
        "external_functions": [
            "root.std.Sets.Intersection",
            "root.std.List.NotEmpty"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
                "assert common_element([1,2,3,4,5], [6,7,8,9])==False",
                "assert common_element(['a','b','c'], ['d','b','e'])==True"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            [
                                5,
                                6,
                                7,
                                8,
                                9
                            ]
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            [
                                6,
                                7,
                                8,
                                9
                            ]
                        ],
                        "expected_output": false
                    },
                    {
                        "input": [
                            [
                                "a",
                                "b",
                                "c"
                            ],
                            [
                                "d",
                                "b",
                                "e"
                            ]
                        ],
                        "expected_output": true
                    }
                ]
            }
        },
        "flow_description": "The flow should create a user-defined function. The function should contain two input properties of type List, one 'List Intersection' node, one 'List Not Empty' node and one output property of type Bool.\n The arrows are connected as follows: The input properties are connected with arrows to the 'List Intersection' node. The result of the 'List Intersection' node is connected with arrows to the 'List not empty' node property, which is then connected with arrows to the output property, that return the Bool from the function. The user-defined function is then created within the main module."
    },
    {
        "prompts": [
            "Create a function to check whether the given list contains consecutive numbers or not.",
            "The created user-defined function should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 11,
        "specification": {
            "function_signature": "func(doc: \"check whether the given list contains consecutive numbers or not.\") check_consecutive {\n\tin(x: -425, y: 209, name: \"list\") property(List) list_faf6c2\n\tout(x: 866, y: 132, name: \"output\") property(Bool) output_a2b59d\n}",
            "preconditions": "- There are no preconditions, the method will always work. Arrays can be empty or non-empty.",
            "postconditions": "- If the array contains consecutive numbers, the result is true\n- If the array does not contain consecutive numbers, the result is false"
        },
        "MBPP_task_id": 472,
        "external_functions": [
            "root.std.List.Sort",
            "root.std.List.Min",
            "root.std.List.Max",
            "root.std.List.GenerateRange",
            "root.std.Math.Expression"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert check_consecutive([1,2,3,4,5]) == True",
                "assert check_consecutive([1,2,3,5,6]) == False",
                "assert check_consecutive([1,2,1]) == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            1,
                            2,
                            3,
                            5,
                            6
                        ],
                        "expected_output": false
                    },
                    {
                        "input": [
                            1,
                            2,
                            1
                        ],
                        "expected_output": false
                    }
                ]
            }
        },
        "flow_description": "The flow should create a user-defined function. The body of the function contains one input property of type any, one 'List Sort' node, one 'List Min' node, one 'List Max' node, one 'List GenerateRange' node, one 'Math Expression' node with the expression 'list1 == list2', and in this case one output property 'result' of type Bool. \n The arrows are connected as follows: The input property, called list, is connected with arrows to the 'List Sort', 'List Min', and 'List Max' nodes. The sorted list output of the 'List Sort' node is connected with arrows to the first input (list1) of the 'Math Expression' node. The outputs of the 'List.Min' and 'List.Max' nodes are connected with arrows to the from and to inputs of the 'List GenerateRange' node, respectively. The generated range output of the 'List GenerateRange' node is connected with arrows to the second input (list2) of the 'Math Expression' node. The result output of the 'Math Expression' node is then connected with arrows to the output property, called output, of the user-defined function. The user-defined function is then created within the main module"
    },
    {
        "prompts": [
            "Create a function to check whether a list is a sublist of another list.",
            "The created user-defined function 'is_Sub_Array' should then be tested inside a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers."
        ],
        "task_id": 17,
        "specification": {
            "function_signature": "func(doc: \"Checks whether a list is sublist of another or not.\") is_Sub_Array {\n\tin(x: -2030, y: 959, name: \"main_list\") property(List) main_list_25f077\n\tin(x: -2032, y: 1297, name: \"sub_list\") property(List) sub_list_f9cb80\n\tin(x: -1875, y: 677, name: \"execute\") trigger() execute_68160a\n\tout(x: -243, y: 1021, name: \"continue\") trigger() continue_d72620\n\tout(x: -239, y: 1163, name: \"output\") property(Bool) output_ebc87c\n}",
            "preconditions": "- Both `main_list` and `sub_list` are not null.",
            "postconditions": "- The output is `True` if `sub_list` is a sublist of `main_list`.\n- The output is `False` if `sub_list` is not a sublist of `main_list`."
        },
        "MBPP_task_id": 576,
        "external_functions": [
            "root.std.List.Length",
            "root.std.Std.Count",
            "root.std.Math.Expression",
            "root.std.List.Slice",
            "root.std.Logic.Equal",
            "root.std.Std.If",
            "root.std.Math.Add"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert is_Sub_Array([1,4,3,5],[1,2]) == False",
                "assert is_Sub_Array([1,2,1],[1,2,1]) == True",
                "assert is_Sub_Array([1,0,2,2],[2,2,0]) == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                1,
                                4,
                                3,
                                5
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "expected_output": false
                    },
                    {
                        "input": [
                            [
                                1,
                                2,
                                1
                            ],
                            [
                                1,
                                2,
                                1
                            ]
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            [
                                1,
                                0,
                                2,
                                2
                            ],
                            [
                                2,
                                2,
                                0
                            ]
                        ],
                        "expected_output": false
                    }
                ]
            }
        },
        "flow_description": "The flow should create a user-defined function, called 'is_Sub_Array'. The body of the function contains three input properties: an input trigger named 'execute', and two input properties of type 'List', named 'main_list' and 'sub_list'. It also includes the following nodes: two 'List Length' nodes to obtain the lengths of 'main_list' and 'sub_list', respectively; one 'Math Expression' node to calculate the number of iterations using the expression 'n - m + 1', where 'n' is the length of 'main_list' and 'm' is the length of 'sub_list'; one 'Std Count' node to iterate over the possible starting indices in 'main_list'; one 'List Slice' node to extract a sublist from 'main_list', starting at the current index and ending at 'current_index + m'; one 'Logic Equal' node to compare the sliced sublist with 'sub_list'; and one 'Std If' node to control the flow based on whether a match is found. Lastly, it includes an output property named 'output' of type 'Bool' and an output trigger named 'continue'.\n\nArrows are connected as follows: The input trigger 'execute' is connected to the 'Std Count' node's 'reset' input. The 'Std Count' node's 'iterations' property is set using the result from the 'Math Expression' node, which calculates 'n - m + 1' using the lengths obtained from the two 'List Length' nodes. Inside the loop, the 'Std Count' node's 'iteration' output is connected to the 'start' input of the 'List Slice' node, and also to a 'Math Add' node along with 'm' to calculate the 'end' index for slicing. The 'List Slice' node extracts a sublist from 'main_list' using the 'start' and 'end' indices. The sliced sublist is then connected to the 'left' input of the 'Logic Equal' node, while 'sub_list' is connected to the 'right' input. The result from the 'Logic Equal' node is connected to the predicate of the 'Std If' node.\n\nIf the predicate evaluates to 'true' (the sublists are equal), the flow proceeds to set the output property 'output' to 'True' and triggers the output trigger 'continue', effectively ending the function execution. If the predicate evaluates to 'false', the flow proceeds to the 'count' input of the 'Std Count' node to continue with the next iteration. If the 'Std Count' node completes all iterations without finding a match (indicated by the 'done' output), the function sets the output property 'output' to 'False' and triggers the output trigger 'continue'.\n\nThe user-defined function is then created within the main module."
    },
    {
        "prompts": [
            "Create a function to find the smallest missing number from a sorted list of natural numbers.",
            "N/A"
        ],
        "task_id": 27,
        "specification": {
            "function_signature": "func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_First_Missing {\n\tin(x: -113, y: 62, name: \"list\") property(List) list_24e9a6\n\tin(x: 483, y: -328, name: \"execute\") trigger() execute_fa8807\n\tout(x: 1453, y: 319, name: \"output\") property(Number) output_25655e\n\tout(x: 1491, y: -61, name: \"continue\") trigger() continue_aedf0f\n}",
            "preconditions": "- The input sequence should be sorted in non-decreasing order\n- The input sequence should only contain natural numbers (including 0)",
            "postconditions": "- The returned value should be the smallest natural number not present in the input sequence"
        },
        "MBPP_task_id": 627,
        "external_functions": [
            "root.std.List.LastItem",
            "root.std.List.GenerateRange",
            "root.std.List.FirstItem",
            "root.std.Sets.Difference",
            "root.std.Std.If",
            "root.std.Math.Add",
            "root.std.List.IsEmpty"
        ],
        "visual_node_types": [
            "Function",
            "Getter",
            "Setter",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "getter",
            "setter",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert find_First_Missing([0,1,2,3]) == 4",
                "assert find_First_Missing([0,1,2,6,9]) == 3",
                "assert find_First_Missing([2,3,5,8,9]) == 0"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "expected_output": 4
                    },
                    {
                        "input": [
                            0,
                            1,
                            2,
                            6,
                            9
                        ],
                        "expected_output": 3
                    },
                    {
                        "input": [
                            2,
                            3,
                            5,
                            8,
                            9
                        ],
                        "expected_output": 0
                    }
                ]
            }
        },
        "flow_description": "N/A"
    },
    {
        "prompts": [
            "Create a function to replace all occurrences of spaces, commas, or dots with a colon.",
            "N/A"
        ],
        "task_id": 31,
        "specification": {
            "function_signature": "func(doc: \"Replace all occurrences of spaces, commas, or dots with a colon.\") replace_specialchar {\n\tin(x: -230, y: 0, name: \"input\") property(String) input_0\n\tout(x: 776, y: 0, name: \"output\") property(String) output_0\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- The length of the returning string must be the same as the length of the input string\n- All occurrences of spaces, commas, or dots in the input string are replaced with colons in the output string\n- All other characters are unchanged"
        },
        "MBPP_task_id": 732,
        "external_functions": [
            "root.std.Strings.Replace"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
                "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
                "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
            ],
            "tests": {
                "test_cases": []
            }
        },
        "flow_description": "N/A"
    },
    {
        "prompts": [
            "Create a function to check whether all the characters are same or not.",
            "N/A"
        ],
        "task_id": 33,
        "specification": {
            "function_signature": "func(doc: \"Checks whether all the characters are same or not.\") all_Characters_Same {\n\tin(x: -862, y: 188, name: \"string\") property(String) string_db4ddf\n\tin(x: -878, y: 9, name: \"execute\") trigger() execute_f1c7e0\n\tout(x: 588, y: 123, name: \"continue\") trigger() continue_67430e\n\tout(x: 600, y: 270, name: \"output\") property(Bool) output_e9fa68\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- If the result is true, all characters in the input string are the same\n- If the result is false, there is at least one character in the input string that is different from the others"
        },
        "MBPP_task_id": 741,
        "external_functions": [
            "root.std.Strings.Characters",
            "root.std.Strings.ToLower",
            "root.std.List.FirstItem",
            "root.std.Std.For",
            "root.std.Logic.Equal",
            "root.std.Std.If"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert all_Characters_Same(\"python\") == False",
                "assert all_Characters_Same(\"aaa\") == True",
                "assert all_Characters_Same(\"data\") == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": "python",
                        "expected_output": false
                    },
                    {
                        "input": "aaa",
                        "expected_output": true
                    },
                    {
                        "input": "data",
                        "expected_output": false
                    }
                ]
            }
        },
        "flow_description": "N/A"
    },
    {
        "prompts": [
            "Create a function to count number of digits in a given string.",
            "N/A"
        ],
        "task_id": 37,
        "specification": {
            "function_signature": "func(doc: \"Counts number of digits in a given string.\") number_ctr {\n\tin(x: -240, y: 69, name: \"string\") property(String) string_668bd2\n\tout(x: 929, y: 58, name: \"count\") property(Number) count_1f468d\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- The count should be non-negative\n- The count should be equal to the number of digits in the input string"
        },
        "MBPP_task_id": 764,
        "external_functions": [
            "root.std.Strings.Characters",
            "root.std.Iteration.Filter",
            "root.std.List.Length",
            "root.std.Strings.IsNumeric"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert number_ctr('program2bedone') == 1",
                "assert number_ctr('3wonders') == 1",
                "assert number_ctr('123') == 3",
                "assert number_ctr('3wond-1ers2') == 3"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": "program2bedone",
                        "expected_output": 1
                    },
                    {
                        "input": "3wonders",
                        "expected_output": 1
                    },
                    {
                        "input": "123",
                        "expected_output": 3
                    },
                    {
                        "input": "3wond-1ers2",
                        "expected_output": 3
                    }
                ]
            }
        },
        "flow_description": "N/A"
    },
    {
        "prompts": [
            "Create a function to find the sum of fourth power of first n odd natural numbers.",
            "N/A"
        ],
        "task_id": 38,
        "specification": {
            "function_signature": "func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") odd_num_sum {\n\tin(x: -243, y: 86, name: \"n\") property(Number) n_0c0609\n\tout(x: 1090, y: 53, name: \"sum\") property(Number) sum_2ad0d5\n}",
            "preconditions": "- n should be a non-negative integer",
            "postconditions": "- The sum should be the sum of the fourth power of the first n odd natural numbers"
        },
        "MBPP_task_id": 770,
        "external_functions": [
            "root.std.List.GenerateRange",
            "root.std.Iteration.Reduce",
            "root.std.Math.Mul",
            "root.std.Math.Sub",
            "root.std.Math.Expression",
            "root.std.Math.Add"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert odd_num_sum(2) == 82",
                "assert odd_num_sum(3) == 707",
                "assert odd_num_sum(4) == 3108"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 2,
                        "expected_output": 82
                    },
                    {
                        "input": 3,
                        "expected_output": 707
                    },
                    {
                        "input": 4,
                        "expected_output": 3108
                    }
                ]
            }
        },
        "flow_description": "N/A"
    },
    {
        "prompts": [
            "Create a function to find the surface area of a cube of a given size.",
            "N/A"
        ],
        "task_id": 46,
        "specification": {
            "function_signature": "func(doc: \"find the surface area of a cube of a given size.\") CubeSurfaceArea {\n\tin(x: -56, y: -44, name: \"size\") property(Number) size_49c776\n\tout(x: 582, y: -80, name: \"Area\") property(Number) Area_a3e36f\n}",
            "preconditions": "- The size of the cube should be greater than 0",
            "postconditions": "- The surface area of the cube is calculated correctly"
        },
        "MBPP_task_id": 441,
        "external_functions": [
            "root.std.Math.Mul"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert CubeSurfaceArea(5)==150",
                "assert CubeSurfaceArea(3)==54",
                "assert CubeSurfaceArea(10)==600"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 5,
                        "expected_output": 150
                    },
                    {
                        "input": 3,
                        "expected_output": 54
                    },
                    {
                        "input": 10,
                        "expected_output": 600
                    }
                ]
            }
        },
        "flow_description": "N/A"
    },
    {
        "prompts": [
            "Create a function to find the difference between largest and smallest value in a given list.",
            "The created user-defined function 'big_diff' should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 19,
        "specification": {
            "function_signature": "func(doc: \"finds the difference between largest and smallest value in a given list.\") big_diff {\n\tin(x: -266, y: 82, name: \"list\") property(List) list_9abc1d\n\tout(x: 533, y: 70, name: \"difference\") property(Number) difference_27806e\n}",
            "preconditions": "- The input array should not be empty",
            "postconditions": "- The difference between the largest and smallest value in the input array is returned"
        },
        "MBPP_task_id": 588,
        "external_functions": [
            "root.std.List.Max",
            "root.std.List.Min",
            "root.std.Math.Sub"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Function",
                "Data Object",
                "Event"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert big_diff([1,2,3,4]) == 3",
                "assert big_diff([4,5,12]) == 8",
                "assert big_diff([9,2,3]) == 7"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "expected_output": 3
                    },
                    {
                        "input": [
                            4,
                            5,
                            12
                        ],
                        "expected_output": 8
                    },
                    {
                        "input": [
                            9,
                            2,
                            3
                        ],
                        "expected_output": 7
                    }
                ]
            }
        },
        "flow_description": "The flow should create a user-defined function, called 'big_diff'. The body of the function contains one input property: an input property of type 'List', named 'list'. It also includes the following nodes: one 'List Max' node to find the largest value in the list, one 'List Min' node to find the smallest value in the list, and one 'Math Sub' node to calculate the difference between the maximum and minimum values. Lastly, it includes an output property named 'difference' of type 'Number'.\n\nArrows are connected as follows: The input property 'list' is connected to both the 'List Max' node and the 'List Min' node. The 'max' output from the 'List Max' node is connected to the 'first' input of the 'Math Sub' node. The 'min' output from the 'List Min' node is connected to the 'second' input of the 'Math Sub' node. The 'result' output from the 'Math Sub' node is connected to the output property 'difference'.\n\nThe user-defined function is then created within the main module."
    },
    {
        "prompts": [
            "Create a function to check whether the given number is even or not.",
            "The created user-defined function 'is_Even' should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 22,
        "specification": {
            "function_signature": "func(doc: \"checks whether the given number is even or not.\") is_Even {\n\tin(x: -389, y: -3, name: \"num\") property(Number) num_1a1743\n\tout(x: 197, y: -8, name: \"output\") property(Bool) output_4ff980\n}",
            "preconditions": "- There are no preconditions, the method will always work for any integer.",
            "postconditions": "- If the input number is even, the result is true\n- If the input number is odd, the result is false"
        },
        "MBPP_task_id": 600,
        "external_functions": [
            "root.std.Math.Modulo",
            "root.std.Logic.Equal"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Function",
                "Event"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert is_Even(1) == False",
                "assert is_Even(2) == True",
                "assert is_Even(3) == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 1,
                        "expected_output": false
                    },
                    {
                        "input": 2,
                        "expected_output": true
                    },
                    {
                        "input": 3,
                        "expected_output": false
                    }
                ]
            }
        },
        "flow_description": "The flow should create a user-defined function called 'is_Even'. The body of the function contains one input property of type 'Number', named 'num'. It also includes the following nodes: one 'Math Modulo' node to calculate the remainder when 'num' is divided by 2, and one 'Logic Equal' node to check if the remainder is equal to 0. Lastly, it includes an output property named 'output' of type 'Bool'.\n\nArrows are connected as follows: The input property 'num' is connected to the 'Math Modulo' node's 'value' input. The constant value 2 is connected to the 'Math Modulo' node's 'divisor' input. The 'result' output from the 'Math Modulo' node is connected to the 'left' input of the 'Logic Equal' node. The constant value 0 is connected to the 'right' input of the 'Logic Equal' node. The 'result' output from the 'Logic Equal' node is connected to the output property 'output'. The user-defined function is then created within the main module."
    },
    {
        "prompts": [
            "Create a function to find the first repeated character in a given string.",
            "The created user-defined function 'first_repeated_char' should then be tested inside a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers."
        ],
        "task_id": 23,
        "specification": {
            "function_signature": "func(doc: \"finds the first repeated character in a given string.\") first_repeated_char {\n\tin(x: -20, y: -110, name: \"execute\") trigger() execute_97d5d5\n\tin(x: -216, y: 83, name: \"string\") property(String) string_71a657\n\tout(x: 1545, y: 186, name: \"continue\") trigger() continue_1914e0\n\tout(x: 904, y: 359, name: \"char\") property(Any) char_f2523c\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- If returns char, then returned char is the first repeated character in the input string\n- If returns null, then there are no repeated characters in the input string"
        },
        "MBPP_task_id": 602,
        "external_functions": [
            "root.std.Strings.Characters",
            "root.std.Std.For",
            "root.std.List.Slice",
            "root.std.List.Contains",
            "root.std.Std.If",
            "root.std.Math.Add"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Setter",
            "Getter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert first_repeated_char(\"abcabc\") == \"a\"",
                "assert first_repeated_char(\"abc\") == null",
                "assert first_repeated_char(\"123123\") == \"1\""
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": "abcabc",
                        "expected_output": "a"
                    },
                    {
                        "input": "123123",
                        "expected_output": "1"
                    }
                ]
            }
        },
        "flow_description": "The flow should create a user-defined function called 'first_repeated_char'. The body of the function contains one input property of type String, named 'string', and one output property of type Any, named 'char'. It also includes one input trigger named 'execute' and one output trigger named 'continue'. Inside the function, use a 'Characters' node to convert the input string into a list of characters, a 'For' node to iterate over each character, and a 'Slice' node to manage portions of the list as needed. Additionally, include a 'List Contains' node to check for repeated characters and an 'If' node to handle the logic. Getter and Setter nodes are used for storing the fist char in local varibale, named 'first'. Connect the nodes appropriately: the input trigger 'execute' is connected to a Setter node, which sets the value of 'first' to null. Then this Setter is connected to the 'For' node to start the iteration. The 'Characters' node outputs to the 'For' node's items input. Within the loop, each character is sent to the 'List Contains' node to check for repetition in a the rest of the list. The 'List contains' node does also use the 'Math Add' and 'Slice' node to get the rest of the list. The result of 'List Contains' is connected to the 'If' node's predicate. If a repetition is found, use a 'Setter' node to set the output property 'char' with the repeated character and trigger 'continue'. If no repetition is found, continue the loop. After the loop completes without finding any repeats, the local variabel 'first' remains null and is then outputed though 'char'. The user-defined function is then created within the main module."
    },
    {
        "prompts": [
            "Create a function to find the second smallest number in a list.",
            "N/A"
        ],
        "task_id": 35,
        "specification": {
            "function_signature": "func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n\tin(x: -52, y: 85, name: \"list\") property(List) list_56d273\n\tin(x: -244, y: -39, name: \"execute\") trigger() execute_c23a43\n\tout(x: 1025, y: 145, name: \"continue\") trigger() continue_642adb\n\tout(x: 1026, y: 287, name: \"output\") property(Any) output_ad16ae\n}",
            "preconditions": "- The input array should not be null\n- The input array should have at least two elements",
            "postconditions": "- The returned value should be the second-smallest number in the input array\n- The input array remains unchanged"
        },
        "MBPP_task_id": 755,
        "external_functions": [
            "root.std.List.Sort",
            "root.std.List.GetAt",
            "root.std.List.Length",
            "root.std.Std.IfExpression",
            "root.std.Sets.Intersection"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Setter",
            "Getter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
                "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
                "assert second_smallest([2,2])==None"
            ],
            "tests": {
                "test_cases": []
            }
        },
        "flow_description": "N/A"
    }
]