[
    {
        "prompts": [
            "Create a function to find the smallest number in a list.",
            "The flow should create the built-in function node from the std library, called 'List.Min' node, should be used. The node should be created inside a function, with proper name.",
            "The built-in function 'List Min' should then be tested within a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers. "
        ],
        "task_id": 2,
        "specification": {
            "function_signature": "func(doc: \"finds the smallest number in a list.\") smallest_num {\n\tin(x: -426, y: -248, name: \"items\") property(List) items_ai\n\tout(x: 159, y: -219, name: \"min\") property(Number) min_ai\n}",
            "preconditions": "- The input array should not be empty",
            "postconditions": "- The returned value should be the smallest number in the input array"
        },
        "MBPP_task_id": 62,
        "textual_instance_types": [
            "instance"
        ],
        "external_functions": [
            "root.std.List.Min"
        ],
        "visual_node_types": [
            "Function"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert smallest_num([10, 20, 1, 45, 99]) == 1",
                "assert smallest_num([1, 2, 3]) == 1",
                "assert smallest_num([45, 46, 50, 60]) == 45"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            10,
                            20,
                            1,
                            45,
                            99
                        ],
                        "expected_output": 1
                    },
                    {
                        "input": [
                            1,
                            2,
                            3
                        ],
                        "expected_output": 1
                    },
                    {
                        "input": [
                            45,
                            46,
                            50,
                            60
                        ],
                        "expected_output": 45
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the kth element in the given array using 1-based indexing.",
            "The flow should create a user-defined function called 'kth_element' with three inputs: an 'execute' trigger, 'list' of type List, and 'k' of type Number. The function should have two outputs: a 'continue' trigger and 'element' of type Number, which is the kth element in the provided list. Inside the function, a local variable is used to store the state of the input property 'k'. This variable is called 'local_k' and is set at the beginning of the flow using the setter node to the value of the input property of 'k'. Then an 'IfExpression' node is used to check if 'k' is equal to 0. If 'k' is 0, trigger the 'continue' output immediately. Otherwise, it gets the 'local_k' variable using a getter node and adjusts for zero-based indexing by using 'Math Sub' to subract 1, and assign this result back to 'local_k', using the setter node. Then, use a 'List GetAt' node to retrieve the element at the updated index from 'list'. The getter node is used for getting the value of the local variable 'local_k'. The retrieved element should be output through the 'element' property. Connect the nodes appropriately: the 'execute' trigger starts the flow and sends the flow of execution to the setter node. The setter node uses input property 'k' and therefore an arrow is created between them. The setter node then sends the flow of execution to the 'Std IfExpression' node, which also takes in the input property 'k'. The node's output trigger 'then' is connected with the output trigger 'continue' of the flow, and the output trigger 'else' is connected to another setter node. The setter node's input property 'new value' is connected to the output property 'result' of the 'Math Sub' node. Lastly, the input propery 'list' and the getter node is connected to the input properties 'list' and 'index' of the 'List GetAt' node. The outpur property 'itemAtIndex' of this node is then connected to the output property 'element' of the user-defined function, which returns the number.",
            "This created user-defined function should then be tested in a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers.  "
        ],
        "task_id": 4,
        "specification": {
            "function_signature": "func(doc: \"finds the kth element in the given array using 1-based indexing.\") kth_element {\n\tin(x: -286, y: -119, name: \"execute\") trigger() execute_1e159f\n\tin(x: 153, y: 446, name: \"list\") property(List) list_b5d10a\n\tin(x: -289, y: 126, name: \"k\") property(Number) k_1e19fb\n\tout(x: 844, y: 53, name: \"continue\") trigger() continue_c95bcb\n\tout(x: 692, y: 553, name: \"element\") property(Number) element_fd7945\n}",
            "preconditions": "- index should be between 1 and the length of the list (inclusive)",
            "postconditions": "- The result should be the kth element of the input list."
        },
        "MBPP_task_id": 101,
        "external_functions": [
            "root.std.List.GetAt",
            "root.std.Math.Sub",
            "root.std.Std.IfExpression"
        ],
        "visual_node_types": [
            "Function",
            "Setter",
            "Getter",
            "Data Object",
            "Output Property",
            "Input Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "data_instance",
            "setter",
            "getter",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert kth_element([12,3,5,7,19], 2) == 3",
                "assert kth_element([17,24,8,23], 3) == 8",
                "assert kth_element([16,21,25,36,4], 4) == 36"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                12,
                                3,
                                5,
                                7,
                                19
                            ],
                            2
                        ],
                        "expected_output": 3
                    },
                    {
                        "input": [
                            [
                                17,
                                24,
                                8,
                                23
                            ],
                            3
                        ],
                        "expected_output": 8
                    },
                    {
                        "input": [
                            [
                                16,
                                21,
                                25,
                                36,
                                4
                            ],
                            4
                        ],
                        "expected_output": 36
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the minimum of three numbers.",
            "The flow should create a user-defined function. The function should contain three input properties of type Number, one Data Object list of the input properties, one 'Math Min' node and one output property of type Number.\n The arrows are connected as follows: The input properties are connected with arrows to the Data Obejct to create list and this list is further conencted to the property of the 'Math Min' node. The result of the 'Math Min' node is connected with arrows to the output property, that return the Number from the function. The user-defined function is then created within the main module.",
            "The created user-defined function should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 6,
        "specification": {
            "function_signature": "func(doc: \"finds the minimum of three numbers.\") min_of_three {\n\tin(x: -903, y: -379, name: \"a\") property(Number) a_f37c19\n\tin(x: -908, y: -241, name: \"b\") property(Number) b_ca79ac\n\tin(x: -907, y: -94, name: \"c\") property(Number) c_a89f71\n\tout(x: -78, y: -306, name: \"min\") property(Number) smallest_8713cf\n}",
            "preconditions": "- There are no preconditions, the method will always work.",
            "postconditions": "- The returned value is the minimum of the three input numbers\n- The returned value is less than or equal to all input numbers"
        },
        "MBPP_task_id": 227,
        "external_functions": [
            "root.std.Math.Min"
        ],
        "visual_node_types": [
            "Function",
            "Data Object",
            "Output Property",
            "Input Property"
        ],
        "textual_instance_types": [
            "instance",
            "data_instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert min_of_three(10,20,0)==0",
                "assert min_of_three(19,15,18)==15",
                "assert min_of_three(-10,-20,-30)==-30"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            10,
                            20,
                            0
                        ],
                        "expected_output": 0
                    },
                    {
                        "input": [
                            19,
                            15,
                            18
                        ],
                        "expected_output": 15
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function that takes two lists and returns true if they have at least one common element.",
            "The flow should create a user-defined function. The function should contain two input properties of type List, one 'List Intersection' node, one 'List Not Empty' node and one output property of type Bool.\n The arrows are connected as follows: The input properties are connected with arrows to the 'List Intersection' node. The result of the 'List Intersection' node is connected with arrows to the 'List not empty' node property, which is then connected with arrows to the output property, that return the Bool from the function. The user-defined function is then created within the main module.",
            "The created user-defined function should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 7,
        "specification": {
            "function_signature": "func(doc: \"takes two lists and returns true if they have at least one common element.\") common_element {\n\tin(x: -337, y: -126, name: \"list1\") property(List) list1_016b2e\n\tin(x: -331, y: 30, name: \"list2\") property(List) list2_c8f404\n\tout(x: 441, y: -72, name: \"output\") property(Bool) output_879de6\n}",
            "preconditions": "- Both arrays should be non-null",
            "postconditions": "- If the method returns true, there exists at least one common element between the two arrays\n- If the method returns false, there are no common elements between the two arrays"
        },
        "MBPP_task_id": 431,
        "external_functions": [
            "root.std.Sets.Intersection",
            "root.std.List.NotEmpty"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
                "assert common_element([1,2,3,4,5], [6,7,8,9])==False",
                "assert common_element(['a','b','c'], ['d','b','e'])==True"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            [
                                5,
                                6,
                                7,
                                8,
                                9
                            ]
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            [
                                6,
                                7,
                                8,
                                9
                            ]
                        ],
                        "expected_output": false
                    },
                    {
                        "input": [
                            [
                                "a",
                                "b",
                                "c"
                            ],
                            [
                                "d",
                                "b",
                                "e"
                            ]
                        ],
                        "expected_output": true
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to check whether the entered number is greater than the elements of the given array.",
            "The flow should create a user-defined function. The body of the function contains two input properties of type Number and List, one 'List Object' node with number 11, one 'Math GreaterThan' and one output property of type Bool.\n The arrows are connected as follows: The input property, called list, is connected with arrows to the list property of the 'List Lenght' node. The output property of 'List Lenght' node, named lenght, is connected with arrows to the input property, named right, of the 'Math GreaterThan' node. The other input property to the user-defnied function is named n and is conencted to the other input property, named left, of the 'Math GreaterThan' node. The output property of the 'Math GreaterThan' node is returned to the output property of the user-defined function, that return this Bool value from the function. The user-defined function is then created within the main module.",
            "The created user-defined function should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 8,
        "specification": {
            "function_signature": "func(doc: \"check whether the entered number is greater than the elements of the given array.\") check_greater {\n\tin(x: -33, y: -26, name: \"n\") property(Number) n_a6cea7\n\tin(x: -294, y: 155, name: \"list\") property(Any) list_0b075e\n\tout(x: 546, y: 63, name: \"output\") property(Bool) output_b1d7f8\n}",
            "preconditions": "- The array should not be null",
            "postconditions": "- If the result is true, then n is greater than all elements in the array\n- If the result is false, then there exists at least one element in the array that is greater than or equal to n"
        },
        "MBPP_task_id": 433,
        "external_functions": [
            "root.std.List.Length",
            "root.std.Math.GreaterThan"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert check_greater([1, 2, 3, 4, 5], 4) == False",
                "assert check_greater([2, 3, 4, 5, 6], 8) == True",
                "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            4
                        ],
                        "expected_output": false
                    },
                    {
                        "input": [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            8
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            [
                                9,
                                7,
                                4,
                                8,
                                6,
                                1
                            ],
                            11
                        ],
                        "expected_output": true
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the last digit of a given number.",
            "",
            "The 'Math Modulo' node should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 9,
        "specification": {
            "function_signature": "func(doc: \"find the last digit of a given number.\") last_digit{\n\tin(x: 0, y: 0, name: \"value\") property(Number) value_ai\n\tout(x: 39, y: 0, name: \"result\") property(Number) result_ai\n}",
            "preconditions": "- n should be a non-negative integer",
            "postconditions": "- The returned digit d should be between 0 and 9\n- d should be the last digit of the input number n"
        },
        "MBPP_task_id": 435,
        "external_functions": [
            "root.std.Math.Modulo"
        ],
        "visual_node_types": [
            "Function"
        ],
        "textual_instance_types": [
            "instance"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert last_digit(123) == 3",
                "assert last_digit(25) == 5",
                "assert last_digit(30) == 0"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 123,
                        "expected_output": 3
                    },
                    {
                        "input": 25,
                        "expected_output": 5
                    },
                    {
                        "input": 30,
                        "expected_output": 0
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function that matches a word containing 'z'.",
            "The flow should create a user-defined function. The body of the function contains one input property of type String, one 'Strings ToLower' node, one 'Strings Contains' node with the input property, named 'contains', set to z in lower case and one output property of type Bool.\n The arrows are connected as follows: The input property, called string, is connected with arrows to the input propery of the 'String ToLower' node. The output property, called output, of the 'Strings ToLower' node is then connected with arrows to the input property, named input, of the 'Strings Contains' node. The output property, named result, of the 'Strings contains' node is then connected with arrows to the output property, named result, of the user-defined function. The user-defined function is then created within the main module.",
            "The created user-defined function should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 10,
        "specification": {
            "function_signature": "func(doc: \"matches a word containing 'z'.\") text_match_wordz {\n\tin(x: -230, y: 0, name: \"string\") property(String) input_0\n\tout(x: 530, y: -2, name: \"result\") property(Bool) result_0\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- The result is true if the input string contains the character 'z' or 'Z'\n- The result is false if the input string does not contain the character 'z' or 'Z'"
        },
        "MBPP_task_id": 454,
        "external_functions": [
            "root.std.Strings.ToLower",
            "root.std.Strings.Contains"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertFalse",
                "root.std.Testing.AssertTrue"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert text_match_wordz(\"pythonz.\")==True",
                "assert text_match_wordz(\"xyz.\")==True",
                "assert text_match_wordz(\"  lang  .\")==False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": "pythonz.",
                        "expected_output": true
                    },
                    {
                        "input": "xyz.",
                        "expected_output": true
                    },
                    {
                        "input": "  lang  .",
                        "expected_output": false
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to check whether the given list contains consecutive numbers or not.",
            "The flow should create a user-defined function. The body of the function contains one input property of type any, one 'List Sort' node, one 'List Min' node, one 'List Max' node, one 'List GenerateRange' node, one 'Math Expression' node with the expression 'list1 == list2', and in this case one output property 'result' of type Bool. \n The arrows are connected as follows: The input property, called list, is connected with arrows to the 'List Sort', 'List Min', and 'List Max' nodes. The sorted list output of the 'List Sort' node is connected with arrows to the first input (list1) of the 'Math Expression' node. The outputs of the 'List.Min' and 'List.Max' nodes are connected with arrows to the from and to inputs of the 'List GenerateRange' node, respectively. The generated range output of the 'List GenerateRange' node is connected with arrows to the second input (list2) of the 'Math Expression' node. The result output of the 'Math Expression' node is then connected with arrows to the output property, called output, of the user-defined function. The user-defined function is then created within the main module",
            "The created user-defined function should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 11,
        "specification": {
            "function_signature": "func(doc: \"check whether the given list contains consecutive numbers or not.\") check_consecutive {\n\tin(x: -425, y: 209, name: \"list\") property(List) list_faf6c2\n\tout(x: 866, y: 132, name: \"output\") property(Bool) output_a2b59d\n}",
            "preconditions": "- There are no preconditions, the method will always work. Arrays can be empty or non-empty.",
            "postconditions": "- If the array contains consecutive numbers, the result is true\n- If the array does not contain consecutive numbers, the result is false"
        },
        "MBPP_task_id": 472,
        "external_functions": [
            "root.std.List.Sort",
            "root.std.List.Min",
            "root.std.List.Max",
            "root.std.List.GenerateRange",
            "root.std.Math.Expression"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert check_consecutive([1,2,3,4,5]) == True",
                "assert check_consecutive([1,2,3,5,6]) == False",
                "assert check_consecutive([1,2,1]) == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            1,
                            2,
                            3,
                            5,
                            6
                        ],
                        "expected_output": false
                    },
                    {
                        "input": [
                            1,
                            2,
                            1
                        ],
                        "expected_output": false
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to get the sum of the digits of a non-negative integer.",
            "The flow should create a user-defined function, called sum_digits. The body of the function contains one input property of type Number, called 'n', and one input trigger, called 'execute'. It also includes the following node: one 'Math Floor' node, one 'Math Modulo' node with the divisor set to 10, one 'Math Division' node with the divisor set to 10, one 'Math Addition' node, one 'Std IfExpression' node, local variable creation with the getter and setter nodes, and the current sum_digits function node to be able to do recursive calls. Lastly, it includes an output property of type number and an output trigger, called 'continue'.\n The arrows are connected as follows:  The input property, called n, is connected with arrows to the input property of the 'Math Floor' node. The output property of the 'Math Floor' node, called 'output', is connected with three arrows to the input properties of 'Std IfExpression', 'Math Div' and 'Math Modulo'. The input trigger, called 'execute' is conencted with an arrow to the setter node, which sets the value of a variable sum to the number 0. Then, the flow of execution is futher sent to the 'Std IfExpression' node, which evaluates if 'n <= 0'. If true, then the flow of execution is sent to the output trigger, called 'continue'. If false, the the flow of execution is sent to the current sum_digits node which starts a recursive call, with the input property 'n' set to the result of the 'Math Div' node, which divides n (after going through 'Math Floor') with 10. After the recursive calls, the flow of execution is sent to a setter node, which sets the variable 'sum' to the value of 'Math Add', which add the output of 'sum_digits' and the 'Math Modulo' node with divisor 10. After the varible 'sum' have been set by the setter node, the flow of execution is sent to the ouput trigger 'continue'. At the end of the main flow and all the recursive calls, the output property is returned by connecting it to a 'getter' node, which gets the value of the variable 'sum'. The user-defined function is then created within the main module.",
            "The created user-defined function should then be tested inside a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers. "
        ],
        "task_id": 14,
        "specification": {
            "function_signature": "func(doc: \"gets the sum of the digits of a non-negative integer.\") sum_digits {\n\tin(x: -450, y: -421, name: \"execute\") trigger() execute_cdac2a\n\tin(x: -436, y: -213, name: \"n\") property(Number) n_6b655b\n\tout(x: 1146, y: -647, name: \"continue\") trigger() continue_d9efd7\n\tout(x: 1169, y: -269, name: \"output\") property(Number) output_732a8a\n}",
            "preconditions": "- n should be a non-negative integer",
            "postconditions": "- The sum of the digits of the input integer is returned\n- The sum is non-negative"
        },
        "MBPP_task_id": 566,
        "external_functions": [
            "root.std.Math.Floor",
            "root.std.Math.Modulo",
            "root.std.Math.Div",
            "root.std.Math.Add",
            "root.std.Std.IfExpression"
        ],
        "visual_node_types": [
            "Function",
            "Setter",
            "Getter",
            "Output Property",
            "Input Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert sum_digits(345)==12",
                "assert sum_digits(12)==3",
                "assert sum_digits(97)==16"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 345,
                        "expected_output": 12
                    },
                    {
                        "input": 12,
                        "expected_output": 3
                    },
                    {
                        "input": 97,
                        "expected_output": 16
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to check whether a specified list is sorted or not.",
            "The flow should create a user-defined function, called 'issort_list'. The body of the function contains one input property of type List, named 'list' and one input trigger, named 'execute'. It also includes the following nodes: one 'List GetAt' node, one 'Std For' node, one 'Std IfExpression' node, and getter and setter nodes for storing a local varibale named 'previous'. Lastly, it includes an output variable named 'output' and an output trigger named 'continue'.\n Arrows are connected as follows: The input trigger, named 'list', is conencted to the input property 'list' of the 'List GetAt' and the input property 'items' of the 'Std For' node. The 'List GetAt' node gets the items at index zero and the output property, named 'itemAtIndex' is connected to a setter node, which sets the a variable named 'previous'. The input trigger named 'execute' of this user-defined function is connected to the setter node, so that the node is set at the start of the execution flow. After this, the flow of execution is sent to the 'Std For' node, which loops through the 'items' property, which is set to the input property 'list' of this user-defined function. In each iteration, the flow of execution is sent through an 'Std IfExpression' node. This node takes in 'index', 'current' item in the loop and the 'previous' variable, which is stored in the local variable 'previous' and provided by a getter node. The 'Std IfExpression' node checks if index is zero or previous is lower or equal to the previous item, by using this expression 'index == 0 || previous <= current'. If it evaluates to true, the flow of execution is first sent through a setter node, which sets the variable 'previous' to the 'item' provided by 'Std For'. Then the flow of execution is sent back to the input trigger 'next' of the 'Std For' node, which triggers usage of the next item in the list. However, if the 'Std IfExpression' in the for loop evalutes to true, the flow of execution is sent to the output trigger, named 'continue', which exits the for loops. Regardless of outcome, the output property of the user-defined function, is set value of the 'Std IfExpression'.  Then the 'Std For' node loops through the provided  The user-defined function is then created within the main module.",
            "The created user-defined function 'issort_list' should then be tested inside a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers. "
        ],
        "task_id": 15,
        "specification": {
            "function_signature": "func(doc: \"Checks whether a specified list is sorted or not.\") issort_list {\n\tin(x: -465, y: -235, name: \"execute\") trigger() execute_90aaec\n\tin(x: -485, y: 30, name: \"list\") property(List) list_ec88cd\n\tout(x: 1227, y: 5, name: \"continue\") trigger() continue_a96db6\n\tout(x: 1218, y: 147, name: \"output\") property(Bool) output_5bbcd7\n}",
            "preconditions": "- There are no preconditions, the method will always work. Arrays can be empty or have any length.",
            "postconditions": "- If the method returns true, the array is sorted in non-decreasing order\n- If the method returns false, the array is not sorted in non-decreasing order"
        },
        "MBPP_task_id": 567,
        "external_functions": [
            "root.std.List.GetAt",
            "root.std.Std.For",
            "root.std.Std.IfExpression"
        ],
        "visual_node_types": [
            "Function",
            "Setter",
            "Getter",
            "Output Property",
            "Input Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "setter",
            "getter",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
                "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
                "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            2,
                            4,
                            6,
                            8,
                            10,
                            12,
                            14,
                            16,
                            17
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            1,
                            2,
                            4,
                            6,
                            8,
                            10,
                            12,
                            14,
                            20,
                            17
                        ],
                        "expected_output": false
                    },
                    {
                        "input": [
                            1,
                            2,
                            4,
                            6,
                            8,
                            10,
                            15,
                            14,
                            20
                        ],
                        "expected_output": false
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to check whether a list is a sublist of another list.",
            "The flow should create a user-defined function, called 'is_Sub_Array'. The body of the function contains three input properties: an input trigger named 'execute', and two input properties of type 'List', named 'main_list' and 'sub_list'. It also includes the following nodes: two 'List Length' nodes to obtain the lengths of 'main_list' and 'sub_list', respectively; one 'Math Expression' node to calculate the number of iterations using the expression 'n - m + 1', where 'n' is the length of 'main_list' and 'm' is the length of 'sub_list'; one 'Std Count' node to iterate over the possible starting indices in 'main_list'; one 'List Slice' node to extract a sublist from 'main_list', starting at the current index and ending at 'current_index + m'; one 'Logic Equal' node to compare the sliced sublist with 'sub_list'; and one 'Std If' node to control the flow based on whether a match is found. Lastly, it includes an output property named 'output' of type 'Bool' and an output trigger named 'continue'.\n\nArrows are connected as follows: The input trigger 'execute' is connected to the 'Std Count' node's 'reset' input. The 'Std Count' node's 'iterations' property is set using the result from the 'Math Expression' node, which calculates 'n - m + 1' using the lengths obtained from the two 'List Length' nodes. Inside the loop, the 'Std Count' node's 'iteration' output is connected to the 'start' input of the 'List Slice' node, and also to a 'Math Add' node along with 'm' to calculate the 'end' index for slicing. The 'List Slice' node extracts a sublist from 'main_list' using the 'start' and 'end' indices. The sliced sublist is then connected to the 'left' input of the 'Logic Equal' node, while 'sub_list' is connected to the 'right' input. The result from the 'Logic Equal' node is connected to the predicate of the 'Std If' node.\n\nIf the predicate evaluates to 'true' (the sublists are equal), the flow proceeds to set the output property 'output' to 'True' and triggers the output trigger 'continue', effectively ending the function execution. If the predicate evaluates to 'false', the flow proceeds to the 'count' input of the 'Std Count' node to continue with the next iteration. If the 'Std Count' node completes all iterations without finding a match (indicated by the 'done' output), the function sets the output property 'output' to 'False' and triggers the output trigger 'continue'.\n\nThe user-defined function is then created within the main module.",
            "The created user-defined function 'is_Sub_Array' should then be tested inside a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers."
        ],
        "task_id": 17,
        "specification": {
            "function_signature": "func(doc: \"Checks whether a list is sublist of another or not.\") is_Sub_Array {\n\tin(x: -2030, y: 959, name: \"main_list\") property(List) main_list_25f077\n\tin(x: -2032, y: 1297, name: \"sub_list\") property(List) sub_list_f9cb80\n\tin(x: -1875, y: 677, name: \"execute\") trigger() execute_68160a\n\tout(x: -243, y: 1021, name: \"continue\") trigger() continue_d72620\n\tout(x: -239, y: 1163, name: \"output\") property(Bool) output_ebc87c\n}",
            "preconditions": "- Both `main_list` and `sub_list` are not null.",
            "postconditions": "- The output is `True` if `sub_list` is a sublist of `main_list`.\n- The output is `False` if `sub_list` is not a sublist of `main_list`."
        },
        "MBPP_task_id": 576,
        "external_functions": [
            "root.std.List.Length",
            "root.std.Std.Count",
            "root.std.Math.Expression",
            "root.std.List.Slice",
            "root.std.Logic.Equal",
            "root.std.Std.If",
            "root.std.Math.Add"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert is_Sub_Array([1,4,3,5],[1,2]) == False",
                "assert is_Sub_Array([1,2,1],[1,2,1]) == True",
                "assert is_Sub_Array([1,0,2,2],[2,2,0]) == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                1,
                                4,
                                3,
                                5
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "expected_output": false
                    },
                    {
                        "input": [
                            [
                                1,
                                2,
                                1
                            ],
                            [
                                1,
                                2,
                                1
                            ]
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            [
                                1,
                                0,
                                2,
                                2
                            ],
                            [
                                2,
                                2,
                                0
                            ]
                        ],
                        "expected_output": false
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function which takes a list and returns a list with the same elements, but the k'th element removed.",
            "The flow should create a user-defined function called 'remove_kth_element'. The body of the function contains two input properties: an input property of type Number, named 'k', and an input property of type List, named 'list'. It also includes one output property of type List, named 'newList'. The function should have the following nodes: a 'List Remove' node to remove the k'th element from the list, and a 'Math Sub' node to calculate the index of the k'th element.\n Connect the nodes as follows: the input property 'k' is connected to the 'List Remove' node's 'index' input. The input property 'list' is connected to the 'List Remove' node's 'list' input. The result of the 'List Remove' node is connected to the 'newList' output property. The user-defined function is then created within the main module.",
            "The created user-defined functions should then be tested inside a seperate module called tests, within the main module.  Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 24,
        "specification": {
            "function_signature": "func(doc: \"takes a list and returns a list with the same elements, but the k'th element removed.\") remove_kth_element {\n\tin(x: -172, y: 18, name: \"k\") property(Number) k_94ca93\n\tin(x: -156, y: -121, name: \"list\") property(List) list_aa3106\n\tout(x: 505, y: -50, name: \"newList\") property(List) newList_20b99a\n}",
            "preconditions": "- k should be between 0 and the length of the array",
            "postconditions": "- The length of the returning array must be one less than the length of the input array\n- All elements before the k'th element in the input array should be the same in the output array\n- All elements after the k'th element in the input array should be shifted by one position in the output array"
        },
        "MBPP_task_id": 610,
        "external_functions": [
            "root.std.List.Remove",
            "root.std.Math.Sub"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
                "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
                "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                1,
                                1,
                                2,
                                3,
                                4,
                                4,
                                5,
                                1
                            ],
                            3
                        ],
                        "expected_output": [
                            1,
                            1,
                            3,
                            4,
                            4,
                            5,
                            1
                        ]
                    },
                    {
                        "input": [
                            [
                                0,
                                0,
                                1,
                                2,
                                3,
                                4,
                                4,
                                5,
                                6,
                                6,
                                6,
                                7,
                                8,
                                9,
                                4,
                                4
                            ],
                            4
                        ],
                        "expected_output": [
                            0,
                            0,
                            1,
                            3,
                            4,
                            4,
                            5,
                            6,
                            6,
                            6,
                            7,
                            8,
                            9,
                            4,
                            4
                        ]
                    },
                    {
                        "input": [
                            [
                                10,
                                10,
                                15,
                                19,
                                18,
                                18,
                                17,
                                26,
                                26,
                                17,
                                18,
                                10
                            ],
                            5
                        ],
                        "expected_output": [
                            10,
                            10,
                            15,
                            19,
                            18,
                            17,
                            26,
                            26,
                            17,
                            18,
                            10
                        ]
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function which takes two lists of the same length and performs the element wise modulo.",
            "The flow should create a user-defined function called 'list_modulo'. The body of the function contains two input properties of type List, named 'list1' and 'list2', and one output property of type List, named 'newList'. The function should have the following nodes: a 'Iteration Zip' node to iterate over the two lists simultaneously and merge each element together with a provided handler anonymous function, that contains a 'Math Modulo' node to calculate the modulo of each pair of elements.\n Connect the nodes as follows: the input property 'list1' is connected to the 'Iteration Zip' node's 'left' input data. The input property 'list2' is connected to the 'Iteration Zip' node's 'right' input data. The zipped result of the 'Iteration Zip' node is connected to output data property 'newList'. The anonymous function inside 'iteration zip' have two input elements and one output elements, which takes the modulo of each element in the list. The user-defined function is then created within the main module.",
            "The created user-defined functions should then be tested inside a seperate module called tests, within the main module.  Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 25,
        "specification": {
            "function_signature": "func(doc: \"Takes two lists of the same length and performs the element wise modulo.\") list_modulo {\n\tin(x: -173, y: -154, name: \"list1\") property(List) list1_1f846b\n\tin(x: -181, y: -13, name: \"list2\") property(List) list2_c62075\n\tout(x: 784, y: -110, name: \"newList\") property(List) list_0d40f1\n}",
            "preconditions": "- Both arrays should be non-null\n- Both arrays should have the same length\n- All elements in the second array (b) should be non-zero",
            "postconditions": "- The length of the result array should be the same as the length of the input arrays\n- Each element in the result array should be the modulo of the corresponding elements in the input arrays"
        },
        "MBPP_task_id": 616,
        "external_functions": [
            "root.std.Math.Modulo",
            "root.std.Iteration.Zip"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert list_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
                "assert list_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
                "assert list_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
            ],
            "tests": {
                "test_cases": []
            }
        }
    },
    {
        "prompts": [
            "Create a function to convert a given string to uppercase.",
            "The flow should create the built-in function node from the std library, called 'Strings.ToUpper' node, should be used. The node should be created in a function with proper name.",
            "The created user-defined function should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 26,
        "specification": {
            "function_signature": "func(doc: \"convert a given string to uppercase.\") ToUpper {\n\tin(x: -531, y: 2, name: \"input\") property(String) input_ai\n\tout(x: 340, y: 77, name: \"output\") property(String) output_ai\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- The length of the returning string must be the same as the length of the input string\n- All lowercase characters of the input string are uppercase in the output string\n- All other characters are unchanged"
        },
        "MBPP_task_id": 624,
        "external_functions": [
            "root.std.Strings.ToUpper"
        ],
        "visual_node_types": [
            "Function"
        ],
        "textual_instance_types": [
            "instance"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert ToUpper(\"person\") ==\"PERSON\"",
                "assert ToUpper(\"final\") == \"FINAL\"",
                "assert ToUpper(\"Valid\") == \"VALID\""
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": "person",
                        "expected_output": "PERSON"
                    },
                    {
                        "input": "final",
                        "expected_output": "FINAL"
                    },
                    {
                        "input": "Valid",
                        "expected_output": "VALID"
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the smallest missing number from a sorted list of natural numbers.",
            "N/A",
            "N/A"
        ],
        "task_id": 27,
        "specification": {
            "function_signature": "func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_First_Missing {\n\tin(x: -113, y: 62, name: \"list\") property(List) list_24e9a6\n\tin(x: 483, y: -328, name: \"execute\") trigger() execute_fa8807\n\tout(x: 1453, y: 319, name: \"output\") property(Number) output_25655e\n\tout(x: 1491, y: -61, name: \"continue\") trigger() continue_aedf0f\n}",
            "preconditions": "- The input sequence should be sorted in non-decreasing order\n- The input sequence should only contain natural numbers (including 0)",
            "postconditions": "- The returned value should be the smallest natural number not present in the input sequence"
        },
        "MBPP_task_id": 627,
        "external_functions": [
            "root.std.List.LastItem",
            "root.std.List.GenerateRange",
            "root.std.List.FirstItem",
            "root.std.Sets.Difference",
            "root.std.Std.If",
            "root.std.Math.Add",
            "root.std.List.IsEmpty"
        ],
        "visual_node_types": [
            "Function",
            "Getter",
            "Setter",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "getter",
            "setter",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert find_First_Missing([0,1,2,3]) == 4",
                "assert find_First_Missing([0,1,2,6,9]) == 3",
                "assert find_First_Missing([2,3,5,8,9]) == 0"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "expected_output": 4
                    },
                    {
                        "input": [
                            0,
                            1,
                            2,
                            6,
                            9
                        ],
                        "expected_output": 3
                    },
                    {
                        "input": [
                            2,
                            3,
                            5,
                            8,
                            9
                        ],
                        "expected_output": 0
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find even numbers from a list of numbers.",
            "N/A",
            "N/A"
        ],
        "task_id": 28,
        "specification": {
            "function_signature": "func(doc:\"find even numbers from a list of numbers.\") Split {\n\tin(x: -531, y: 2, name: \"list\") property(List) list_ai\n\tout(x: 340, y: 77, name: \"output\") property(List) output_ai\n}",
            "preconditions": "- There are no preconditions, the method will always work. Arrays can be empty but not null.",
            "postconditions": "- All elements in the output array are even\n- All even elements in the input array are present in the output array\n- The order of elements in the output array is the same as in the input array"
        },
        "MBPP_task_id": 629,
        "external_functions": [
            "root.std.Query.Filter"
        ],
        "visual_node_types": [
            "Function"
        ],
        "textual_instance_types": [
            "instance"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert Split([1,2,3,4,5]) == [2,4]",
                "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
                "assert Split ([8,12,15,19]) == [8,12]"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        "expected_output": [
                            2,
                            4
                        ]
                    },
                    {
                        "input": [
                            4,
                            5,
                            6,
                            7,
                            8,
                            0,
                            1
                        ],
                        "expected_output": [
                            4,
                            6,
                            8,
                            0
                        ]
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to move all zeroes to the end of the given list.",
            "N/A",
            "N/A"
        ],
        "task_id": 29,
        "specification": {
            "function_signature": "func(doc: \"Moves all zeroes to the end of the given list.\") move_zero {\n\tin(x: -199, y: -152, name: \"execute\") trigger() execute_1ddb9f\n\tin(x: -174, y: 160, name: \"list\") property(List) list_0c1a77\n\tout(x: 838, y: 168, name: \"output\") property(List) data_0_0\n\tout(x: 817, y: 39, name: \"continue\") trigger() continue_a7f942\n}",
            "preconditions": "- There are no preconditions, the method will always work.",
            "postconditions": "- The length of the output array must be the same as the length of the input array\n- All zeroes in the input array are at the end of the output array\n- The relative order of the non-zero elements should be the same as in the input array\n- The number of zeroes in the input and output arrays should be the same"
        },
        "MBPP_task_id": 632,
        "external_functions": [
            "root.std.Std.For",
            "root.std.List.Concat",
            "root.std.Std.IfExpression",
            "root.std.List.Empty",
            "root.std.List.Add",
            "root.std.Query.Filter"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Setter",
            "Getter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
                "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
                "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            0,
                            2,
                            0,
                            3,
                            4
                        ],
                        "expected_output": [
                            1,
                            2,
                            3,
                            4,
                            0,
                            0
                        ]
                    },
                    {
                        "input": [
                            2,
                            3,
                            2,
                            0,
                            0,
                            4,
                            0,
                            5,
                            0
                        ],
                        "expected_output": [
                            2,
                            3,
                            2,
                            4,
                            5,
                            0,
                            0,
                            0,
                            0
                        ]
                    },
                    {
                        "input": [
                            0,
                            1,
                            0,
                            1,
                            1
                        ],
                        "expected_output": [
                            1,
                            1,
                            1,
                            0,
                            0
                        ]
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to reverse an array upto a given position.",
            "N/A",
            "N/A"
        ],
        "task_id": 30,
        "specification": {
            "function_signature": "func(doc: \"Reverse an list upto a given position.\") reverse_Array_Upto_K {\n\tin(x: -227, y: 44, name: \"list\") property(List) list_f1bb24\n\tin(x: -223, y: 164, name: \"k\") property(Number) k_cf24dd\n\tout(x: 744, y: 146, name: \"output\") property(List) output_c4a1a8\n}",
            "preconditions": "- k should be between 0 and the length of the array",
            "postconditions": "- The input array is modified\n- The values of the array up to k are reversed\n- The values of the array after k remain unchanged"
        },
        "MBPP_task_id": 644,
        "external_functions": [
            "root.std.List.Reversed",
            "root.std.List.Concat",
            "root.std.List.Slice"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
                "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
                "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            4
                        ],
                        "expected_output": [
                            4,
                            3,
                            2,
                            1,
                            5,
                            6
                        ]
                    },
                    {
                        "input": [
                            [
                                4,
                                5,
                                6,
                                7
                            ],
                            2
                        ],
                        "expected_output": [
                            5,
                            4,
                            6,
                            7
                        ]
                    },
                    {
                        "input": [
                            [
                                9,
                                8,
                                7,
                                6,
                                5
                            ],
                            3
                        ],
                        "expected_output": [
                            7,
                            8,
                            9,
                            6,
                            5
                        ]
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to replace all occurrences of spaces, commas, or dots with a colon.",
            "N/A",
            "N/A"
        ],
        "task_id": 31,
        "specification": {
            "function_signature": "func(doc: \"Replace all occurrences of spaces, commas, or dots with a colon.\") replace_specialchar {\n\tin(x: -230, y: 0, name: \"input\") property(String) input_0\n\tout(x: 776, y: 0, name: \"output\") property(String) output_0\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- The length of the returning string must be the same as the length of the input string\n- All occurrences of spaces, commas, or dots in the input string are replaced with colons in the output string\n- All other characters are unchanged"
        },
        "MBPP_task_id": 732,
        "external_functions": [
            "root.std.Strings.Replace"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
                "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
                "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
            ],
            "tests": {
                "test_cases": []
            }
        }
    },
    {
        "prompts": [
            "Write a function to find the index of the first occurrence of a given number in a sorted array.",
            "N/A",
            "N/A"
        ],
        "task_id": 32,
        "specification": {
            "function_signature": "func(doc: \"Finds the index of the first occurrence of a given number in a sorted array.\") find_first_occurrence {\n\tin(x: 5, y: 218, name: \"list\") property(List) list_d128d8\n\tin(x: -252, y: -11, name: \"execute\") trigger() execute_467172\n\tin(x: 349, y: -105, name: \"target\") property(Number) target_fbe60e\n\tout(x: 1217, y: 29, name: \"continue\") trigger() continue_075eef\n\tout(x: 966, y: 219, name: \"output\") property(Number) output_3ae271\n}",
            "preconditions": "- The input array is sorted in non-decreasing order",
            "postconditions": "- If the target is found, the returned index should be the first occurrence of the target in the array\n- If the target is not found, the returned index should be -1\n- The input array remains unchanged"
        },
        "MBPP_task_id": 733,
        "external_functions": [
            "root.std.Std.For",
            "root.std.Std.If",
            "root.std.Logic.Equal"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Getter",
            "Setter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "getter",
            "setter"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
                "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
                "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                2,
                                5,
                                5,
                                5,
                                6,
                                6,
                                8,
                                9,
                                9,
                                9
                            ],
                            5
                        ],
                        "expected_output": 1
                    },
                    {
                        "input": [
                            [
                                2,
                                3,
                                5,
                                5,
                                6,
                                6,
                                8,
                                9,
                                9,
                                9
                            ],
                            5
                        ],
                        "expected_output": 2
                    },
                    {
                        "input": [
                            [
                                2,
                                4,
                                1,
                                5,
                                6,
                                6,
                                8,
                                9,
                                9,
                                9
                            ],
                            6
                        ],
                        "expected_output": 4
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to check whether all the characters are same or not.",
            "N/A",
            "N/A"
        ],
        "task_id": 33,
        "specification": {
            "function_signature": "func(doc: \"Checks whether all the characters are same or not.\") all_Characters_Same {\n\tin(x: -862, y: 188, name: \"string\") property(String) string_db4ddf\n\tin(x: -878, y: 9, name: \"execute\") trigger() execute_f1c7e0\n\tout(x: 588, y: 123, name: \"continue\") trigger() continue_67430e\n\tout(x: 600, y: 270, name: \"output\") property(Bool) output_e9fa68\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- If the result is true, all characters in the input string are the same\n- If the result is false, there is at least one character in the input string that is different from the others"
        },
        "MBPP_task_id": 741,
        "external_functions": [
            "root.std.Strings.Characters",
            "root.std.Strings.ToLower",
            "root.std.List.FirstItem",
            "root.std.Std.For",
            "root.std.Logic.Equal",
            "root.std.Std.If"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert all_Characters_Same(\"python\") == False",
                "assert all_Characters_Same(\"aaa\") == True",
                "assert all_Characters_Same(\"data\") == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": "python",
                        "expected_output": false
                    },
                    {
                        "input": "aaa",
                        "expected_output": true
                    },
                    {
                        "input": "data",
                        "expected_output": false
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Write a python function to check whether a list of numbers contains only one distinct element or not.",
            "N/A",
            "N/A"
        ],
        "task_id": 36,
        "specification": {
            "function_signature": "func(doc: \"Checks whether a list of numbers contains only one distinct element or not.\") unique_Element {\n\tin(x: -285, y: -86, name: \"list\") property(List) list_3af6ba\n\tout(x: 557, y: -97, name: \"output\") property(Bool) output_c7097f\n}",
            "preconditions": "- The input array should not be null",
            "postconditions": "- If the method returns true, all elements in the array are equal\n- If the method returns false, there are at least two distinct elements in the array"
        },
        "MBPP_task_id": 760,
        "external_functions": [
            "root.std.Sets.Intersection",
            "root.std.List.Length",
            "root.std.Logic.Equal"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert unique_Element([1,1,1]) == True",
                "assert unique_Element([1,2,1,2]) == False",
                "assert unique_Element([1,2,3,4,5]) == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            1,
                            1
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            1,
                            2,
                            1,
                            2
                        ],
                        "expected_output": false
                    },
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        "expected_output": false
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to count number of digits in a given string.",
            "N/A",
            "N/A"
        ],
        "task_id": 37,
        "specification": {
            "function_signature": "func(doc: \"Counts number of digits in a given string.\") number_ctr {\n\tin(x: -240, y: 69, name: \"string\") property(String) string_668bd2\n\tout(x: 929, y: 58, name: \"count\") property(Number) count_1f468d\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- The count should be non-negative\n- The count should be equal to the number of digits in the input string"
        },
        "MBPP_task_id": 764,
        "external_functions": [
            "root.std.Strings.Characters",
            "root.std.Iteration.Filter",
            "root.std.List.Length",
            "root.std.Strings.IsNumeric"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert number_ctr('program2bedone') == 1",
                "assert number_ctr('3wonders') == 1",
                "assert number_ctr('123') == 3",
                "assert number_ctr('3wond-1ers2') == 3"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": "program2bedone",
                        "expected_output": 1
                    },
                    {
                        "input": "3wonders",
                        "expected_output": 1
                    },
                    {
                        "input": "123",
                        "expected_output": 3
                    },
                    {
                        "input": "3wond-1ers2",
                        "expected_output": 3
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the sum of fourth power of first n odd natural numbers.",
            "N/A",
            "N/A"
        ],
        "task_id": 38,
        "specification": {
            "function_signature": "func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") odd_num_sum {\n\tin(x: -243, y: 86, name: \"n\") property(Number) n_0c0609\n\tout(x: 1090, y: 53, name: \"sum\") property(Number) sum_2ad0d5\n}",
            "preconditions": "- n should be a non-negative integer",
            "postconditions": "- The sum should be the sum of the fourth power of the first n odd natural numbers"
        },
        "MBPP_task_id": 770,
        "external_functions": [
            "root.std.List.GenerateRange",
            "root.std.Iteration.Reduce",
            "root.std.Math.Mul",
            "root.std.Math.Sub",
            "root.std.Math.Expression",
            "root.std.Math.Add"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert odd_num_sum(2) == 82",
                "assert odd_num_sum(3) == 707",
                "assert odd_num_sum(4) == 3108"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 2,
                        "expected_output": 82
                    },
                    {
                        "input": 3,
                        "expected_output": 707
                    },
                    {
                        "input": 4,
                        "expected_output": 3108
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to check whether every odd index contains odd numbers of a given list.",
            "N/A",
            "N/A"
        ],
        "task_id": 39,
        "specification": {
            "function_signature": "func(doc: \"Checks whether every odd index contains odd numbers of a given list.\") odd_position {\n\tin(x: -527, y: -214, name: \"list\") property(List) list_07cae4\n\tout(x: 1269, y: -209, name: \"output\") property(Bool) output_8d07dc\n}",
            "preconditions": "- There are no preconditions, the method will always work.",
            "postconditions": "- The result is true if every odd index contains an odd number\n- The result is false otherwise"
        },
        "MBPP_task_id": 775,
        "external_functions": [
            "root.std.Iteration.Filter",
            "root.std.Iteration.Map",
            "root.std.List.Contains",
            "root.std.Logic.Not",
            "root.std.Math.Modulo",
            "root.std.Logic.NotEqual"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert odd_position([2,1,4,3,6,7,6,3]) == True",
                "assert odd_position([4,1,2]) == True",
                "assert odd_position([1,2,3]) == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            2,
                            1,
                            4,
                            3,
                            6,
                            7,
                            6,
                            3
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            4,
                            1,
                            2
                        ],
                        "expected_output": true
                    },
                    {
                        "input": [
                            1,
                            2,
                            3
                        ],
                        "expected_output": false
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the first odd number in a given list of numbers.",
            "N/A",
            "N/A"
        ],
        "task_id": 43,
        "specification": {
            "function_signature": "func(doc: \"Finds the first odd number in a given list of numbers.\") first_odd {\n\tin(x: -284, y: -0, name: \"list\") property(List) list_abed4a\n\tout(x: 593, y: -1, name: \"number\") property(Number) number_3bc2ae\n}",
            "preconditions": "- The input array should not be null",
            "postconditions": "- If found is true, then the value at index is odd\n- If found is false, then there are no odd numbers in the array\n- If there are multiple odd numbers, the index should be the smallest index with an odd number"
        },
        "MBPP_task_id": 807,
        "external_functions": [
            "root.std.Iteration.Find",
            "root.std.Math.Modulo",
            "root.std.Logic.NotEqual"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert first_odd([1,3,5]) == 1",
                "assert first_odd([2,4,1,3]) == 1",
                "assert first_odd ([8,9,1]) == 9"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            3,
                            5
                        ],
                        "expected_output": 1
                    },
                    {
                        "input": [
                            2,
                            4,
                            1,
                            3
                        ],
                        "expected_output": 1
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "N/A",
            "N/A"
        ],
        "task_id": 44,
        "specification": {
            "function_signature": "func(doc: \"Takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\") square_sum {\n\tin(x: -219, y: 55, name: \"n\") property(Number) n_3a3116\n\tout(x: 571, y: 7, name: \"sum\") property(Number) sum_365f7b\n}",
            "preconditions": "- n should be non-negative",
            "postconditions": "- The sum of the squares of the first n odd natural numbers is returned"
        },
        "MBPP_task_id": 267,
        "external_functions": [
            "root.std.Math.Mul",
            "root.std.Math.Expression",
            "root.std.Math.Div"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Data Object"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "data_instance"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert square_sum(2) == 10",
                "assert square_sum(3) == 35",
                "assert square_sum(4) == 84"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 2,
                        "expected_output": 10
                    },
                    {
                        "input": 3,
                        "expected_output": 35
                    },
                    {
                        "input": 4,
                        "expected_output": 84
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function that finds the minimum of two numbers.",
            "N/A",
            "N/A"
        ],
        "task_id": 45,
        "specification": {
            "function_signature": "func(doc: \"finds the minimum of two numbers\") Min {\n\tin(x: -281, y: -193, name: \"a\") property(Number) a_9f7759\n\tin(x: -272, y: 17, name: \"b\") property(Number) b_f9110a\n\tin(x: -450, y: -114, name: \"execute\") trigger() execute_12bf99\n\tout(x: 46, y: 158, name: \"min\") property(Number) min_b2508f\n\tout(x: 512, y: -114, name: \"continue\") trigger() continue_685c8f\n}",
            "preconditions": "- There are no preconditions, the method will always work.",
            "postconditions": "- The minValue is either a or b\n- The minValue is less than or equal to both a and b"
        },
        "MBPP_task_id": 404,
        "external_functions": [
            "root.std.Std.IfExpression"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Getter",
            "Setter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert Min(1,2) == 1",
                "assert Min(-5,-4) == -5",
                "assert Min(0,0) == 0"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            2
                        ],
                        "expected_output": 1
                    },
                    {
                        "input": [
                            0,
                            0
                        ],
                        "expected_output": 0
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the surface area of a cube of a given size.",
            "N/A",
            "N/A"
        ],
        "task_id": 46,
        "specification": {
            "function_signature": "func(doc: \"find the surface area of a cube of a given size.\") CubeSurfaceArea {\n\tin(x: -56, y: -44, name: \"size\") property(Number) size_49c776\n\tout(x: 582, y: -80, name: \"Area\") property(Number) Area_a3e36f\n}",
            "preconditions": "- The size of the cube should be greater than 0",
            "postconditions": "- The surface area of the cube is calculated correctly"
        },
        "MBPP_task_id": 441,
        "external_functions": [
            "root.std.Math.Mul"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert CubeSurfaceArea(5)==150",
                "assert CubeSurfaceArea(3)==54",
                "assert CubeSurfaceArea(10)==600"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 5,
                        "expected_output": 150
                    },
                    {
                        "input": 3,
                        "expected_output": 54
                    },
                    {
                        "input": 10,
                        "expected_output": 600
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find cubes of individual elements in a list.",
            "N/A",
            "N/A"
        ],
        "task_id": 47,
        "specification": {
            "function_signature": "func(doc: \"find cubes of individual elements in a list.\") cube_nums {\n\tin(x: -122, y: -81, name: \"list\") property(List) list_63c248\n\tout(x: 656, y: -68, name: \"result\") property(List) result_cbb7bd\n}",
            "preconditions": "- There are no preconditions, the method will always work. Arrays can be empty or non-empty.",
            "postconditions": "- The length of the output array must be the same as the length of the input array\n- Each element in the output array is the cube of the corresponding element in the input array"
        },
        "MBPP_task_id": 447,
        "external_functions": [
            "root.std.Math.Pow",
            "root.std.Iteration.Map"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
                "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
                "assert cube_nums([12,15])==([1728, 3375])"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        "expected_output": [
                            1,
                            8,
                            27,
                            64,
                            125,
                            216,
                            343,
                            512,
                            729,
                            1000
                        ]
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to interchange the first and last element in a given list.",
            "N/A",
            "N/A"
        ],
        "task_id": 49,
        "specification": {
            "function_signature": "func(doc: \"interchange the first and last element in a given list.\") swap_list {\n\tin(x: -1489, y: -536, name: \"list\") property(List) list_752c60\n\tout(x: -189, y: -620, name: \"output\") property(List) output_195363\n}",
            "preconditions": "- The array should not be empty",
            "postconditions": "- The first element of the input array should be the last element of the modified array\n- The last element of the input array should be the first element of the modified array\n- All other elements remain unchanged"
        },
        "MBPP_task_id": 625,
        "external_functions": [
            "root.std.List.FirstItem",
            "root.std.List.LastItem",
            "root.std.List.Flatten",
            "root.std.List.Slice",
            "root.std.List.Length",
            "root.std.Math.Sub"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Data Object"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "data_instance"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert swap_list([1,2,3]) == [3,2,1]",
                "assert swap_list([1,2,3,4,4]) == [4,2,3,4,1]",
                "assert swap_list([4,5,6]) == [6,5,4]"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            2,
                            3
                        ],
                        "expected_output": [
                            3,
                            2,
                            1
                        ]
                    },
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4,
                            4
                        ],
                        "expected_output": [
                            4,
                            2,
                            3,
                            4,
                            1
                        ]
                    },
                    {
                        "input": [
                            4,
                            5,
                            6
                        ],
                        "expected_output": [
                            6,
                            5,
                            4
                        ]
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to check whether the given number is a perfect square or not.",
            "N/A",
            "N/A"
        ],
        "task_id": 50,
        "specification": {
            "function_signature": "func(doc: \"checks whether the given number is a perfect square or not.\") is_perfect_square {\n\tin(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n\tin(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\tout(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n\tout(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n}",
            "preconditions": "- n should be non-negative",
            "postconditions": "- If the result is true, there exists an integer i such that i * i == n\n- If the result is false, there is no integer i such that i * i == n"
        },
        "MBPP_task_id": 803,
        "external_functions": [
            "root.std.Iteration.Map",
            "root.std.List.GenerateRange",
            "root.std.Math.LessThanOrEqual",
            "root.std.Std.For",
            "root.std.Logic.And",
            "root.std.Std.If",
            "root.std.Math.Expression",
            "root.std.Math.Add",
            "root.std.Math.Mul"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert is_perfect_square(10) == False",
                "assert is_perfect_square(36) == True",
                "assert is_perfect_square(14) == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 10,
                        "expected_output": false
                    },
                    {
                        "input": 36,
                        "expected_output": true
                    },
                    {
                        "input": 14,
                        "expected_output": false
                    }
                ]
            }
        }
    }
]