[
    {
        "type": "function",
        "function_name": "Std.If",
        "module_path": "Std",
        "doc": "If `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.",
        "body": "extern func(doc: \"If `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.\") If {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"input\") property(Bool) predicate\n\n        out(x: 0, y: 0, name: \"then\") trigger() then\n\n        out(x: 0, y: 0, name: \"else\") trigger() else\n\n        out(x: 0, y: 0, name: \"value\") property(Bool) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.IfExpression",
        "module_path": "Std",
        "doc": "IfExpression is a function that allows you to create a conditional expression using a simple expression language provided through the `expression` parameter. Example: `a > b ? a : b` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `value` output.",
        "body": "extern func(doc: \"IfExpression is a function that allows you to create a conditional expression using a simple expression language provided through the `expression` parameter. Example: `a > b ? a : b` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `value` output.\") IfExpression {\n\n        parameter(\n\n            compilerPlugin: \"Expression\",\n\n            defaultValue: \"\",\n\n        ) expression\n\n\n\n        in trigger execute\n\n        out trigger then\n\n        out trigger else\n\n        out property(Bool) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.For",
        "module_path": "Std",
        "doc": "For is a loop construct that can be used to iterate over a list of items. The `trigger` input is used to start the loop, the `reset` input is used to reset the loop, and the `next` input is used to move to the next item in the list. The `items` input is used to provide the list of items to iterate over. The `on item` output trigger is used to signal that an item has been processed, the `done` output trigger is used to signal that the loop has finished, the `item` output property is used to provide the current item, and the `index` output property is used to provide the current index.",
        "body": "extern func(doc: \"For is a loop construct that can be used to iterate over a list of items. The `trigger` input is used to start the loop, the `reset` input is used to reset the loop, and the `next` input is used to move to the next item in the list. The `items` input is used to provide the list of items to iterate over. The `on item` output trigger is used to signal that an item has been processed, the `done` output trigger is used to signal that the loop has finished, the `item` output property is used to provide the current item, and the `index` output property is used to provide the current index.\") For {\n\n        in trigger() reset\n\n        in trigger(consumes: Number) next\n\n        in property(List) items\n\n        out(name: \"on item\") trigger(produces: Number) onItem\n\n        out trigger done\n\n        out property(Any) item\n\n        out property(Number) index\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Strings.Characters",
        "module_path": "Strings",
        "doc": "Returns a list of characters in `input`, though the output 'characters' list.",
        "body": "extern func(doc: \"Returns a list of characters in `input`, though the output 'characters' list.\") Characters {\n\n        in property(String) input\n\n        out property(List) characters\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.GetAt",
        "module_path": "List",
        "doc": "Gets the item at `index` from `list`, returning Null if the index is out of bounds.",
        "body": "extern func(doc: \"Gets the item at `index` from `list`, returning Null if the index is out of bounds.\") GetAt {\n\n        in(x: 0, y: 0, name: \"list\") property(List) list\n\n        in(x: 0, y: 0, name: \"index\") property(Number) index\n\n        out(x: 0, y: 0, name: \"itemAtIndex\") property(Any) itemAtIndex\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Length",
        "module_path": "List",
        "doc": "Returns the number of items in `list`.",
        "body": "extern func(doc: \"Returns the number of items in `list`.\") Length {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"length\") property length\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Contains",
        "module_path": "List",
        "doc": "Returns true if `item` is contained in `list`.",
        "body": "extern func(doc: \"Returns true if `item` is contained in `list`.\") Contains {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in(x: 0, y: 0, name: \"item\") property(Any) item\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) is_contained\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Sort",
        "module_path": "List",
        "doc": "Returns a sorted version of `list`",
        "body": "extern func(doc: \"Returns a sorted version of `list`\") Sort {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"sorted list\") property sorted_list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Max",
        "module_path": "List",
        "doc": "Finds the largest item in a list of numbers",
        "body": "extern func(doc: \"Finds the largest item in a list of numbers\") Max {\n\n        in(x: 0, y: 0, name: \"items\") property(List) items\n\n        out property(Number) max\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Min",
        "module_path": "List",
        "doc": "Finds the smallest item in a list of numbers",
        "body": "extern func(doc: \"Finds the smallest item in a list of numbers\") Min {\n\n        in(x: 0, y: 0, name: \"items\") property(List) items\n\n        out property(Number) min\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Slice",
        "module_path": "List",
        "doc": "Gets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1",
        "body": "extern func(doc: \"Gets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1\") Slice {\n\n        in(x: 0, y: 0, name: \"items\") property(List) list\n\n        in property(Number) start\n\n        in property(Number) end\n\n        out property(List) slice\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.FirstItem",
        "module_path": "List",
        "doc": "Returns the first item in 'list', through the `item` output.",
        "body": "extern func(doc: \"Returns the first item in 'list', through the `item` output.\") FirstItem {\n\n        in property(List) list\n\n        out property(Any) item\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Query.Filter",
        "module_path": "Query",
        "doc": "Filters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.",
        "body": "extern func(doc: \"Filters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.\") Filter {\n\n          parameter(defaultValue: \"it < 10\") where\n\n          in property(List) list\n\n          out property(List) result\n\n      }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.Find",
        "module_path": "Iteration",
        "doc": "Finds an item in the list `items` that satisfies the `predicate` function, and returns the item through the `item` output.",
        "body": "extern func(doc: \"Finds an item in the list `items` that satisfies the `predicate` function, and returns the item through the `item` output.\") Find {\n\n        in property(List) items\n\n        in property predicate\n\n        in property context\n\n        out property item\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Add",
        "module_path": "Math",
        "doc": "Adds `first` and `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Adds `first` and `second` making the result avilable on the `result` output.\") Add {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Sub",
        "module_path": "Math",
        "doc": "Subtracts `first` and `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Subtracts `first` and `second` making the result avilable on the `result` output.\") Sub {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Mul",
        "module_path": "Math",
        "doc": "Multiplies `first` and `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Multiplies `first` and `second` making the result avilable on the `result` output.\") Mul {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Div",
        "module_path": "Math",
        "doc": "Divides `first` by `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Divides `first` by `second` making the result avilable on the `result` output.\") Div {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Expression",
        "module_path": "Math",
        "doc": "Creates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.",
        "body": "extern func(doc: \"Creates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.\") Expression {\n\n        parameter(\n\n            compilerPlugin: \"Expression\",\n\n            defaultValue: \"\",\n\n            aiSystemPrompt: \"You will generate math expressions based on a user prompt. The expression you generate will consist only of the following operators:\n\n                            - + (plus)\n\n                            - - (minus)\n\n                            - * (multiply)\n\n                            - / (divide)\n\n                            - % (modulo)\n\n\n\n                            Inputs that must be provided by the user are represented by valid C identifiers, and should prefer to be as short as possible, without confusing the user about what the input represents.\n\n\n\n                            Here are a few examples:\n\n\n\n                            Prompt: Calcualte the average of three number\n\n                            Response: (a + b + c) / 3\n\n\n\n                            Prompt: Calculate the area of a circle of radius r\n\n                            Response: 3.14 * r * r\n\n\n\n                            Prompt: Calculate the area of a rectangle\n\n                            Response: a * b\n\n                            \",\n\n        ) expression\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Modulo",
        "module_path": "Math",
        "doc": "Calculates the modulo of `value` and `divisor`, and returns the modulo through the `result` output.",
        "body": "extern func(doc: \"Calculates the modulo of `value` and `divisor`, and returns the modulo through the `result` output.\") Modulo {\n\n        in(x: 0, y: 0, name: \"value\") property value\n\n        in(x: 0, y: 0, name: \"divisor\") property divisor\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Logic.Equal",
        "module_path": "Logic",
        "doc": "Checks if `left` and `right` are equal by performing a deep scan of the objects.",
        "body": "extern func(doc: \"Checks if `left` and `right` are equal by performing a deep scan of the objects.\") Equal {\n\n        in(x: 0, y: 0, name: \"left\") property(Any) left\n\n        in(x: 0, y: 0, name: \"right\") property(Any) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Logic.NotEqual",
        "module_path": "Logic",
        "doc": "Checks if `left` and `right` are not equal by performing a deep scan of the objects.",
        "body": "extern func(doc: \"Checks if `left` and `right` are not equal by performing a deep scan of the objects.\") NotEqual {\n\n        in(x: 0, y: 0, name: \"left\") property(Any) left\n\n        in(x: 0, y: 0, name: \"right\") property(Any) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Sets.Intersection",
        "module_path": "Sets",
        "doc": "Returns the intersection of the two input lists, `left` and `right`, through the `intersect` output.",
        "body": "extern func(doc: \"Returns the intersection of the two input lists, `left` and `right`, through the `intersect` output.\") Intersection {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) intersect\n\n    }",
        "types": ""
    }
]