import("std", Std_k98ojb)
import("http", Http_q7o96c)

module() main { 
    func(doc: "Counts number of digits in a given string.") number_ctr {
        in(x: -240, y: 69.5, name: "string") property(String) string_668bd2

        out(x: 929, y: 58.5, name: "count") property(Number) count_1f468d

        instance(x: -61.200000000000045, y: 62.64999999999998) characters_7942d4 root.Std_k98ojb.Strings.Characters {}
        instance(x: 177, y: 66) filter_c1bb22 root.Std_k98ojb.Iteration.Filter {}
        instance(x: 723, y: 62) length_8815e6 root.Std_k98ojb.List.Length {}
        string_668bd2 -> characters_7942d4.input
        length_8815e6.length -> count_1f468d
        func() {
            in(x: -272, y: -48.5, name: "current") property(Number) current_86a8fb

            out(x: 405, y: -52, name: "output") property(Bool) output_8ba733

            instance(x: 24.5, y: -54.25, stableId: "dnbuj51ajiozratdcge1fc3s") isnumeric_9cb360 root.Std_k98ojb.Strings.IsNumeric {}
            current_86a8fb -> isnumeric_9cb360.input
            isnumeric_9cb360.isNumeric -> output_8ba733
        } -> filter_c1bb22.handler
        filter_c1bb22.output_list -> length_8815e6.list
        characters_7942d4.characters -> filter_c1bb22.items
    }

    module(doc: "Contains four different tests for the 'number_ctr' function node") tests {
        instance(x: -179, y: 98.5) test_c33bba root.Std_k98ojb.Testing.Test {
            name: "Test number_ctr"
        }
        instance(x: -144, y: 222) assertequal_4f78cc root.Std_k98ojb.Testing.AssertEqual {}
        instance(x: 127.5, y: 227.25) assertequal_f7f2ac root.Std_k98ojb.Testing.AssertEqual {}
        instance(x: 382.9, y: 214.8) assertequal_929321 root.Std_k98ojb.Testing.AssertEqual {}
        instance(x: -176.10000000000002, y: 365.8) number_ctr_990bed root.main.number_ctr {}
        instance(x: 102.89999999999998, y: 366.8) number_3b4311 root.main.number_ctr {}
        instance(x: 398.9, y: 358.8) number_3aec82 root.main.number_ctr {}
        instance(x: 645, y: 215.99999999999991) assertequal_e0d22d root.Std_k98ojb.Testing.AssertEqual {}
        instance(x: 661, y: 359.99999999999994) number_ceb5ff root.main.number_ctr {}
        test_c33bba.onRun -> assertequal_4f78cc.execute
        assertequal_4f78cc.continue -> assertequal_f7f2ac.execute
        assertequal_f7f2ac.continue -> assertequal_929321.execute
        number_ctr_990bed.count_1f468d -> assertequal_4f78cc.actual
        "program2bedone" -> number_ctr_990bed.string_668bd2
        1 -> assertequal_4f78cc.expect
        "3wonders" -> number_3b4311.string_668bd2
        "'123'" -> number_3aec82.string_668bd2
        number_3aec82.count_1f468d -> assertequal_929321.actual
        number_3b4311.count_1f468d -> assertequal_f7f2ac.actual
        number_ceb5ff.count_1f468d -> assertequal_e0d22d.actual
        "'3wond-1ers2'" -> number_ceb5ff.string_668bd2
        3 -> assertequal_e0d22d.expect
        3 -> assertequal_929321.expect
        1 -> assertequal_f7f2ac.expect
        assertequal_929321.continue -> assertequal_e0d22d.execute


    }

    instance(x: 14, y: -52) number_ctr_407e1b root.main.number_ctr {}

}