@midio_version("0.1.0")
@version("0.1.0")
import("std", Std_k98ojb)
import("http", Http_q7o96c)

module() main { 
    func(doc: "Finds the product of first even and odd number of a given list.") mul_even_odd {
        in(x: -277, y: 166.5, name: "list") property(List) list_09fcba

        out(x: 800, y: 145.5, name: "output") property(Number) output_edc2e3

        instance(x: 532, y: 147.5") mul_7e1ce0 root.Std_k98ojb.Math.Mul {}
        instance(x: -39, y: 26.725000000000023", name: "First even number") find_de624f root.Std_k98ojb.Iteration.Find {}
        instance(x: -39, y: 257.725", name: "First odd number") ``First even number_0b1361`` root.Std_k98ojb.Iteration.Find {}
        list_09fcba -> find_de624f.items
        func() {
            in(x: -192, y: 84.5, name: "current") property(Number) current_afd5b1

            out(x: 698, y: 85, name: "bool") property(Bool) bool_1eb6e9

            instance(x: 112, y: 80") modulo_45e806 root.Std_k98ojb.Math.Modulo {}
            instance(x: 415, y: 86") equal_a54bdc root.Std_k98ojb.Logic.Equal {}
            current_afd5b1 -> modulo_45e806.value
            2 -> modulo_45e806.divisor
            modulo_45e806.result -> equal_a54bdc.left
            0 -> equal_a54bdc.right
            equal_a54bdc.result -> bool_1eb6e9
        } -> find_de624f.predicate
        func() {
            in(x: -192, y: 84.5, name: "current") property(Number) current_afd5b1

            out(x: 698, y: 85, name: "bool") property(Bool) bool_1eb6e9

            instance(x: 112, y: 80") modulo_45e806 root.Std_k98ojb.Math.Modulo {}
            instance(x: 421, y: 79") notequal_148aeb root.Std_k98ojb.Logic.NotEqual {}
            current_afd5b1 -> modulo_45e806.value
            2 -> modulo_45e806.divisor
            modulo_45e806.result -> notequal_148aeb.left
            0 -> notequal_148aeb.right
            notequal_148aeb.result -> bool_1eb6e9
        } -> ``First even number_0b1361``.predicate
        list_09fcba -> ``First even number_0b1361``.items
        find_de624f.item -> mul_7e1ce0.first
        ``First even number_0b1361``.item -> mul_7e1ce0.second
        mul_7e1ce0.result -> output_edc2e3
    }


    instance(x: -291, y: 177.5") mul_even_odd_f53d27 root.main.mul_even_odd {}

}