[
    {
        "prompts": [
            "Create a function to multiply two numbers.",
            "The flow should create a 'Math Expression' node with the expression 'x * y' inside the main module",
            "The 'Math expression' node should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 5,
        "specification": {
            "function_signature": "",
            "preconditions": "- There are no preconditions, the method will always work.",
            "postconditions": "- The result should be the product of the two input integers"
        },
        "MBPP_task_id": 127,
        "external_functions": [
            "root.std.Math.Expression"
        ],
        "visual_node_types": [
            "Function"
        ],
        "textual_instance_types": [
            "instance"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert multiply_int(10,20)==200",
                "assert multiply_int(5,10)==50",
                "assert multiply_int(4,8)==32"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            10,
                            20
                        ],
                        "expected_output": 200
                    },
                    {
                        "input": [
                            5,
                            10
                        ],
                        "expected_output": 50
                    },
                    {
                        "input": [
                            4,
                            8
                        ],
                        "expected_output": 32
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the difference between largest and smallest value in a given list.",
            "The flow should create a user-defined function, called 'big_diff'. The body of the function contains one input property: an input property of type 'List', named 'list'. It also includes the following nodes: one 'List Max' node to find the largest value in the list, one 'List Min' node to find the smallest value in the list, and one 'Math Sub' node to calculate the difference between the maximum and minimum values. Lastly, it includes an output property named 'difference' of type 'Number'.\n\nArrows are connected as follows: The input property 'list' is connected to both the 'List Max' node and the 'List Min' node. The 'max' output from the 'List Max' node is connected to the 'first' input of the 'Math Sub' node. The 'min' output from the 'List Min' node is connected to the 'second' input of the 'Math Sub' node. The 'result' output from the 'Math Sub' node is connected to the output property 'difference'.\n\nThe user-defined function is then created within the main module.",
            "The created user-defined function 'big_diff' should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 19,
        "specification": {
            "function_signature": "func(doc: \"finds the difference between largest and smallest value in a given list.\") big_diff {\n  in(x: -266.0, y: 82.0, name: \"list\") property(List) list_9abc1d\n\n  out(x: 533.0, y: 70.0, name: \"difference\") property(Number) difference_27806e\n}",
            "preconditions": "- The input array should not be empty",
            "postconditions": "- The difference between the largest and smallest value in the input array is returned"
        },
        "MBPP_task_id": 588,
        "external_functions": [
            "root.std.List.Max",
            "root.std.List.Min",
            "root.std.Math.Sub"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Function",
                "Data Object",
                "Event"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert big_diff([1,2,3,4]) == 3",
                "assert big_diff([4,5,12]) == 8",
                "assert big_diff([9,2,3]) == 7"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "expected_output": 3
                    },
                    {
                        "input": [
                            4,
                            5,
                            12
                        ],
                        "expected_output": 8
                    },
                    {
                        "input": [
                            9,
                            2,
                            3
                        ],
                        "expected_output": 7
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the difference of the first even and first odd number of a given list.",
            "The flow should create a user-defined function called 'diff_even_odd'. The body of the function contains one input property of type 'List', named 'list'. It also includes the following nodes: one 'Query Filter' node to filter out even numbers from 'list', resulting in 'Even list'; one 'List FirstItem' node to extract the first even number from 'Even list'; another 'Query Filter' node to filter out odd numbers from 'list', resulting in 'Odd list'; another 'List FirstItem' node to extract the first odd number from 'Odd list'; and one 'Math Sub' node to calculate the difference between the first even number and the first odd number. Lastly, it includes an output property named 'difference' of type 'Number'.\n\nArrows are connected as follows: The input property 'list' is connected to both 'Query Filter' nodes. The first 'Query Filter' node uses the condition 'it % 2 == 0' to get the even numbers, and its 'result' is connected to the first 'List FirstItem' node to get 'first_even'. The second 'Query Filter' node uses the condition 'it % 2 != 0' to get the odd numbers, and its 'result' is connected to the second 'List FirstItem' node to get 'first_odd'. The 'item' outputs from both 'List FirstItem' nodes are connected to the 'first' and 'second' inputs of the 'Math Sub' node, respectively. The 'result' output from the 'Math Sub' node is connected to the output property 'difference'.\n\nThe user-defined function is then created within the main module.",
            "The created user-defined function 'diff_even_odd' should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 20,
        "specification": {
            "function_signature": "func(doc: \"finds the difference of the first even and first odd number of a given list.\") diff_even_odd {\n  in(x: -569.8980486478499, y: 438.54324938452424, name: \"list\") property(List) list_542a51\n\n  out(x: 443.494835164272, y: 427.164433987646, name: \"difference\") property(Number) difference_57c890\n}",
            "preconditions": "- The array should not be empty\n- The array should contain at least one even and one odd number",
            "postconditions": "- The difference is the first even number minus the first odd number in the array"
        },
        "MBPP_task_id": 594,
        "external_functions": [
            "root.std.Query.Filter",
            "root.std.List.FirstItem",
            "root.std.Math.Sub"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
                "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
                "assert diff_even_odd([1,5,7,9,10])==9"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            3,
                            5,
                            7,
                            4,
                            1,
                            6,
                            8
                        ],
                        "expected_output": 3
                    },
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        "expected_output": 1
                    },
                    {
                        "input": [
                            1,
                            5,
                            7,
                            9,
                            10
                        ],
                        "expected_output": 9
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find sum and average of first n natural numbers.",
            "The flow should create a user-defined function called 'sum_average'. The body of the function contains one input property of type 'Number', named 'n'. It also includes the following nodes: one 'Math Expression' node to calculate the sum of the first n natural numbers using the formula 'n * (n + 1) / 2', and one 'Math Div' node to calculate the average by dividing the sum by 'n'. Lastly, it includes an output property named 'output' of type 'Any'.\n\nArrows are connected as follows: The input property 'n' is connected to the 'Math Expression' node's 'gen_0' input. The result of the 'Math Expression' node is connected to the 'first' input of the 'Math Div' node and to a data instance for storing the sum. The input property 'n' is also connected to the 'second' input of the 'Math Div' node. The result of the 'Math Div' node is connected to the data instance for storing the average. The data instance containing the sum and average is then connected to the output property 'output'. The user-defined function is then created within the main module.",
            "The created user-defined function 'sum_average' should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 21,
        "specification": {
            "function_signature": "func(doc: \"find sum and average of first n natural numbers.\") sum_average {\n  in(x: -343.0, y: -287.0, name: \"n\") property(Number) n_c88d35\n\n  out(x: 756.0, y: -371.0, name: \"output\") property(List) output_ebef81\n}",
            "preconditions": "- n should be a positive integer",
            "postconditions": "- sum should be the sum of the first n natural numbers\n- average should be the average of the first n natural numbers"
        },
        "MBPP_task_id": 599,
        "external_functions": [
            "root.std.Math.Expression",
            "root.std.Math.Div"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Data Object"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "data_instance"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Function",
                "Data Object",
                "Event"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert sum_average(10)==(55, 5.5)",
                "assert sum_average(15)==(120, 8.0)",
                "assert sum_average(20)==(210, 10.5)"
            ],
            "tests": {
                "test_cases": []
            }
        }
    },
    {
        "prompts": [
            "Create a function to check whether the given number is even or not.",
            "The flow should create a user-defined function called 'is_Even'. The body of the function contains one input property of type 'Number', named 'num'. It also includes the following nodes: one 'Math Modulo' node to calculate the remainder when 'num' is divided by 2, and one 'Logic Equal' node to check if the remainder is equal to 0. Lastly, it includes an output property named 'output' of type 'Bool'.\n\nArrows are connected as follows: The input property 'num' is connected to the 'Math Modulo' node's 'value' input. The constant value 2 is connected to the 'Math Modulo' node's 'divisor' input. The 'result' output from the 'Math Modulo' node is connected to the 'left' input of the 'Logic Equal' node. The constant value 0 is connected to the 'right' input of the 'Logic Equal' node. The 'result' output from the 'Logic Equal' node is connected to the output property 'output'. The user-defined function is then created within the main module.",
            "The created user-defined function 'is_Even' should then be tested inside a separate module called 'tests', within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 22,
        "specification": {
            "function_signature": "func(doc: \"checks whether the given number is even or not.\") is_Even {\n  in(x: -389.0, y: -3.0, name: \"num\") property(Number) num_1a1743\n\n  out(x: 197.0, y: -8.0, name: \"output\") property(Bool) output_4ff980\n}",
            "preconditions": "- There are no preconditions, the method will always work for any integer.",
            "postconditions": "- If the input number is even, the result is true\n- If the input number is odd, the result is false"
        },
        "MBPP_task_id": 600,
        "external_functions": [
            "root.std.Math.Modulo",
            "root.std.Logic.Equal"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Function",
                "Event"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert is_Even(1) == False",
                "assert is_Even(2) == True",
                "assert is_Even(3) == False"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": 1,
                        "expected_output": false
                    },
                    {
                        "input": 2,
                        "expected_output": true
                    },
                    {
                        "input": 3,
                        "expected_output": false
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the first repeated character in a given string.",
            "The flow should create a user-defined function called 'first_repeated_char'. The body of the function contains one input property of type String, named 'string', and one output property of type Any, named 'char'. It also includes one input trigger named 'execute' and one output trigger named 'continue'. Inside the function, use a 'Characters' node to convert the input string into a list of characters, a 'For' node to iterate over each character, and a 'Slice' node to manage portions of the list as needed. Additionally, include a 'List Contains' node to check for repeated characters and an 'If' node to handle the logic. Getter and Setter nodes are used for storing the fist char in local varibale, named 'first'. Connect the nodes appropriately: the input trigger 'execute' is connected to a Setter node, which sets the value of 'first' to null. Then this Setter is connected to the 'For' node to start the iteration. The 'Characters' node outputs to the 'For' node's items input. Within the loop, each character is sent to the 'List Contains' node to check for repetition in a the rest of the list. The 'List contains' node does also use the 'Math Add' and 'Slice' node to get the rest of the list. The result of 'List Contains' is connected to the 'If' node's predicate. If a repetition is found, use a 'Setter' node to set the output property 'char' with the repeated character and trigger 'continue'. If no repetition is found, continue the loop. After the loop completes without finding any repeats, the local variabel 'first' remains null and is then outputed though 'char'. The user-defined function is then created within the main module.",
            "The created user-defined function 'first_repeated_char' should then be tested inside a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers."
        ],
        "task_id": 23,
        "specification": {
            "function_signature": "func(doc: \"finds the first repeated character in a given string.\") first_repeated_char {\n  in(x: -20.83454868200644, y: -110.63145350145422, name: \"input\") property(String) input_71a657\n\n  out(x: 1545.4543910894802, y: 186.48226354870695, name: \"output\") property(Any) output_f2523c\n}",
            "preconditions": "- There are no preconditions, the method will always work. Strings and sequences are always not null.",
            "postconditions": "- If returns char, then returned char is the first repeated character in the input string\n- If returns null, then there are no repeated characters in the input string"
        },
        "MBPP_task_id": 602,
        "external_functions": [
            "root.std.Strings.Characters",
            "root.std.Std.For",
            "root.std.List.Slice",
            "root.std.List.Contains",
            "root.std.Std.If",
            "root.std.Math.Add"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Setter",
            "Getter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "python_tests": [
                "assert first_repeated_char(\"abcabc\") == \"a\"",
                "assert first_repeated_char(\"abc\") == null",
                "assert first_repeated_char(\"123123\") == \"1\""
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": "abcabc",
                        "expected_output": "a"
                    },
                    {
                        "input": "123123",
                        "expected_output": "1"
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the second smallest number in a list.",
            "N/A",
            "N/A"
        ],
        "task_id": 35,
        "specification": {
            "function_signature": "func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n    in(x: -52, y: 85, name: \"list\") property(List) list_56d273\n    in(x: -244.31168019522795, y: -39.62516833200653, name: \"execute\") trigger() execute_c23a43\n\n    out(x: 1025.337586584032, y: 145.87386073641994, name: \"continue\") trigger() continue_642adb\n    out(x: 1026.50455705432, y: 287.7087130878599, name: \"output\") property(Any) output_ad16ae\n}",
            "preconditions": "- The input array should not be null\n- The input array should have at least two elements",
            "postconditions": "- The returned value should be the second-smallest number in the input array\n- The input array remains unchanged"
        },
        "MBPP_task_id": 755,
        "external_functions": [
            "root.std.List.Sort",
            "root.std.List.GetAt",
            "root.std.List.Length",
            "root.std.Std.IfExpression",
            "root.std.Sets.Intersection"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Input Trigger",
            "Output Trigger",
            "Setter",
            "Getter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "setter",
            "getter"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
                "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
                "assert second_smallest([2,2])==None"
            ],
            "tests": {
                "test_cases": []
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the product of first even and odd number of a given list.",
            "N/A",
            "N/A"
        ],
        "task_id": 40,
        "specification": {
            "function_signature": "func(doc: \"Finds the product of first even and odd number of a given list.\") mul_even_odd {\n    in(x: -277, y: 166.5, name: \"list\") property(List) list_09fcba\n\n    out(x: 800, y: 145.5, name: \"output\") property(Number) output_edc2e3\n}",
            "preconditions": "- The list must have at least one even and one odd number",
            "postconditions": "- The product is the multiplication of the first even and first odd number found in the list"
        },
        "MBPP_task_id": 784,
        "external_functions": [
            "root.std.Math.Mul",
            "root.std.Iteration.Find",
            "root.std.Math.Modulo",
            "root.std.Logic.Equal",
            "root.std.Logic.NotEqual"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
                "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
                "assert mul_even_odd([1,5,7,9,10])==10"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            1,
                            3,
                            5,
                            7,
                            4,
                            1,
                            6,
                            8
                        ],
                        "expected_output": 4
                    },
                    {
                        "input": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        "expected_output": 2
                    },
                    {
                        "input": [
                            1,
                            5,
                            7,
                            9,
                            10
                        ],
                        "expected_output": 10
                    }
                ]
            }
        }
    },
    {
        "prompts": [
            "Create a function to find the last position of an element in a sorted array.",
            "N/A",
            "N/A"
        ],
        "task_id": 41,
        "specification": {
            "function_signature": "func(doc: \"Finds the last position of an element in a sorted array.\") last {\n    in(x: -231, y: -29, name: \"list\") property(List) list_2bbadf\n    in(x: -246, y: 105, name: \"elem\") property(Number) elem_94ca57\n}",
            "preconditions": "- The input array should be sorted in non-decreasing order",
            "postconditions": "- If the element is found, the returned position should be the last occurrence of the element in the array\n- If the element is not found, the returned position should be -1\n- The input array remains unchanged"
        },
        "MBPP_task_id": 793,
        "external_functions": [
            "root.std.Std.For",
            "root.std.Std.IfExpression"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Getter",
            "Setter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "getter",
            "setter"
        ],
        "testing": {
            "external_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "python_tests": [
                "assert last([1,2,3],1) == 0",
                "assert last([1,1,1,2,3,4],1) == 2",
                "assert last([2,3,2,3,6,8,9],3) == 3"
            ],
            "tests": {
                "test_cases": [
                    {
                        "input": [
                            [
                                1,
                                2,
                                3
                            ],
                            1
                        ],
                        "expected_output": 0
                    },
                    {
                        "input": [
                            [
                                1,
                                1,
                                1,
                                2,
                                3,
                                4
                            ],
                            1
                        ],
                        "expected_output": 2
                    },
                    {
                        "input": [
                            [
                                2,
                                3,
                                2,
                                3,
                                6,
                                8,
                                9
                            ],
                            3
                        ],
                        "expected_output": 3
                    }
                ]
            }
        }
    }
]