{"file": "README.md", "chunk_id": 0, "content": "# Midio  \nWelcome to the Midio documentation! Here, you can find information on how the Midio language and editor works, API documentation, and technical details of Midio's execution model.  \nIf you're looking to learn more about how to use the Midio editor, **the editor docs section** provides a comprehensive guide on all the features and tools available in the editor.  \nIf you're interested in learning about the structure of the Midio visual language and how it works, **the midio language section** contains detailed information on the syntax, semantics, and execution model of Midio.  \n**The API documentation section** provides documentation for all the functions and events available in Midio. This section is ideal for those who are looking to explore the full functionality of Midio and learn how to use its various functions in their projects.  \nIf you're interested in digging deeper into the technical details of Midio's architecture and execution model, **the technical section** provides detailed information on the underlying technology behind Midio.  \nIf you're having problems, visit the **troubleshooting section**, or send us a message and we'll try our best to help.  \nWe're constantly updating and improving our documentation, and we value your feedback. Please don't hesitate to get in touch with us. We'd love to hear from you!"}
{"file": "troubleshooting.md", "chunk_id": 0, "content": "# Troubleshooting  \nMidio is still in early development, and there will be bugs. Here is a list of known bugs, and some workarounds."}
{"file": "troubleshooting.md", "chunk_id": 1, "content": "## # Execution error: Failed to consume context  \nThis error can happen i you've put nodes which either consume or borrow from their execution context inside your own functions. Examples of functions like this include `Http.Response` and `Testing.Assert` . You can see what contexts a node requires by hovering its input trigger. See  for more information, and  for how you can make your own function use them. The quick fix is to add the EndpointContext to your functions input trigger consumes section."}
{"file": "troubleshooting.md", "chunk_id": 2, "content": "## Error notifications when trying to perform edits  \nThis might mean that the editor server or engine has crashed. Try refreshing the browser."}
{"file": "troubleshooting.md", "chunk_id": 3, "content": "## 502 when sending http request to the editor  \nThis can happen if the url is malformed, like for example of the port number is not in the right location. Make sure to put the port before the resource part of the url, for example: **https://\\<my-project>.midio.dev:\\<port-number>/some/resource**"}
{"file": "troubleshooting.md", "chunk_id": 4, "content": "## Internal error when trying to delete module with types which are referenced from other modules  \nThe compiler will fail if it is not able to resolve all types, and the editor won't save changes which causes the compiler to fail, which is why this notification will appear if you try to delete a module with a type which is in use by functions in another module. A work around until we streamline this case is to first change all uses of that type to another type first, and then try again."}
{"file": "SUMMARY.md", "chunk_id": 0, "content": "# Table of contents  \n## Welcome  \n*\n*\n*\n*\n*\n*\n*"}
{"file": "SUMMARY.md", "chunk_id": 1, "content": "## The Editor  \n*"}
{"file": "SUMMARY.md", "chunk_id": 2, "content": "## The Language  \n*\n*\n*\n*"}
{"file": "SUMMARY.md", "chunk_id": 3, "content": "## How to  \n*\n*\n*\n*\n*\n*"}
{"file": "SUMMARY.md", "chunk_id": 4, "content": "## Libraries  \n*\n*  \n***  \n*"}
{"file": "SUMMARY.md", "chunk_id": 5, "content": "## Internal  \n*"}
{"file": "http.md", "chunk_id": 0, "content": "#### Function 'Url.UrlEncodeFormData'\n\n**Inputs:**\n\n* **property** form\\_data: Any\n\n**Outputs:**\n\n* **property** encoded: String\n\n### Http"}
{"file": "http.md", "chunk_id": 1, "content": "#### Function 'Url.HttpResponse'\n\n**Inputs:**\n\n* **trigger** respond: Any\n* **property** body: Any\n* **property** headers: Any\n\n**Outputs:**\n\nResponds to an http request (`req`) provided by an `Http.HttpEndpoint` event using the provided `body`."}
{"file": "http.md", "chunk_id": 2, "content": "#### Function 'Url.FetchUrl'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** url: String\n* **property** response type: String\n* **property** headers: Any\n* **property** method: Any\n* **property** body: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** response: String\n* **property** status: Number\n* **trigger** onError: Any\n* **property** error: String\n\nPerforms a simple http/https request to the provided `url` and returns the `response` a string or a buffer depending on the value of `resopnseType`, which can be 'text' or 'buffer'."}
{"file": "http.md", "chunk_id": 3, "content": "#### Function 'Url.GetHttpQueryParam'\n\n**Inputs:**\n\n* **property** req: Any\n* **property** name: String\n\n**Outputs:**\n\n* **property** value: String\n\nReturns the query parameter `name` from a request (`req`) object."}
{"file": "http.md", "chunk_id": 4, "content": "#### Function 'Url.HttpListenRoute'\n\n**Inputs:**\n\n* **trigger** listen: Any\n* **property** path: Any\n* **property** method: Any\n\n**Outputs:**\n\n* **trigger** listening: Any\n* **trigger** onRequest: Any"}
{"file": "http.md", "chunk_id": 5, "content": "#### Event 'Url.HttpEndpoint'\n\n```\n#### Inputs:\n#### Outputs:\n- **trigger** onRequest: Any\n- **property** body: Any\n\n```\n\nListens for http requests on the provided `path` and `method`. `path` is an url of the form some/path/, which can be parameterized by :name for path items, and ?query\\_name\\&another\\_query\\_name for query values. Example: 'user/:name?email\\&joined\\_date' This creates `name`, `email` and `joined_date` output properties that one can use to get these values from the request. NOTE: All endpoints currently shares a single http server."}
{"file": "http.md", "chunk_id": 6, "content": "#### Event 'Url.HttpServer'\n\n```\n#### Inputs:\n#### Outputs:\n- **trigger** serverStarted: Any\n- **trigger** onRequest: Any\n- **property** url: String\n\n```"}
{"file": "std.md", "chunk_id": 0, "content": "#### Function 'Std.CallFunction'\n\n**Inputs:**\n\n* **property** targetInstance: Any\n* **property** inputs: Any\n\n**Outputs:**\n\n* **property** outputs: Any\n\nCalls the function of `targetInstance` using list of arguments supplied to `inputs`."}
{"file": "std.md", "chunk_id": 1, "content": "#### Function 'Std.OrElse'\n\n**Inputs:**\n\n* **property** first: Any\n* **property** second: Any\n\n**Outputs:**\n\n* **property** value: Any\n\nReturn `first` if it is not null, otherwise `second`."}
{"file": "std.md", "chunk_id": 2, "content": "#### Function 'Std.Switch'\n\n**Inputs:**\n\n* **trigger** onFirst: Any\n* **trigger** onSecond: Any\n* **property** first: Any\n* **property** second: Any\n\n**Outputs:**\n\n* **trigger** continueFirst: Any\n* **trigger** continueSecond: Any\n* **property** value: Any\n\nPropagates the first value if the first trigger is called, other wise propagates the second value."}
{"file": "std.md", "chunk_id": 3, "content": "#### Function 'Std.GenerateUuid'\n\n**Inputs:**\n\n* **trigger** execute: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** uuid: Any\n\nGenerates a uuid"}
{"file": "std.md", "chunk_id": 4, "content": "#### Function 'Std.Delay'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** delayFor: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n\nPauses execution for `delayFor` ms. All execution is blocked during this time."}
{"file": "std.md", "chunk_id": 5, "content": "#### Function 'Std.Relay'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** input: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** value: Any\n\nSimple makes the `input` value available on the `value` output to multiple consumers. Since this is an executable function, the input value will be cached, so `Relay` can be used for simple caching of expensive computations"}
{"file": "std.md", "chunk_id": 6, "content": "#### Function 'Std.Constant'\n\n**Inputs:**\n\n**Outputs:**\n\n* **property** value: Any\n\nMakes the `value` parameter available on the `value` output."}
{"file": "std.md", "chunk_id": 7, "content": "#### Function 'Std.Log'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** input: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n\nWrite `input` to the Log panel."}
{"file": "std.md", "chunk_id": 8, "content": "#### Function 'Std.ToString'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** output: String\n\nConverts any `input` type to a String."}
{"file": "std.md", "chunk_id": 9, "content": "#### Function 'Std.If'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** predicate: Bool\n\n**Outputs:**\n\n* **property** value: Any\n* **trigger** then: Any\n* **trigger** else: Any\n\nIf `predicate` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `predicate`."}
{"file": "std.md", "chunk_id": 10, "content": "#### Function 'Std.Choose'\n\n**Inputs:**\n\n* **property** predicate: Bool\n* **property** then: Any\n* **property** else: Any\n\n**Outputs:**\n\n* **property** value: Any\n\nIf `predicate` is true, the `value` output will have the value of `then`, otherwise, it will have the value of `else`."}
{"file": "std.md", "chunk_id": 11, "content": "#### Function 'Std.Match'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** value: Any\n\n**Outputs:**\n\n* **trigger** noMatch: Any\n\nSwitches on the values provided to the `cases` parameter, which accepts a list of values. For each value, an output trigger is created, which is triggered when the `value` property matches that list item."}
{"file": "std.md", "chunk_id": 12, "content": "#### Function 'Std.TypeOf'\n\n**Inputs:**\n\n* **property** value: Any\n\n**Outputs:**\n\n* **property** typeName: String\n\nReturns the type of `value` as a String."}
{"file": "std.md", "chunk_id": 13, "content": "#### Function 'Std.PWD'\n\n**Inputs:**\n\n**Outputs:**\n\n* **property** currentDirectory: String\n\nReturns the path of the working directory."}
{"file": "std.md", "chunk_id": 14, "content": "#### Function 'Std.IterRange'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** from: Any\n* **property** to: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **trigger** iteration: Any\n* **property** index: Any\n\nCreate a new process for each index in a range, executing the `onItem` trigger for each of them, with a corresponding `index`."}
{"file": "std.md", "chunk_id": 15, "content": "#### Function 'Std.IterList'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** list: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **trigger** onItem: Any\n* **property** item: Any\n\nCreate a new process for each item in a list, executing the `onItem` trigger for each of them, with a corresponding `item`."}
{"file": "std.md", "chunk_id": 16, "content": "#### Function 'Std.Fork'\n\n**Inputs:**\n\n* **trigger** execute: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **trigger** forked: Any\n\nForks to current process by copying its entire state. The current process continues through the `continue` output trigger, while the forked process continues throug the `forked` output trigger, but in a new process."}
{"file": "std.md", "chunk_id": 17, "content": "#### Function 'Std.ProcessId'\n\n**Inputs:**\n\n**Outputs:**\n\n* **property** pid: Any\n\nGets the process id of the executing process."}
{"file": "std.md", "chunk_id": 18, "content": "#### Function 'Std.Count'\n\n**Inputs:**\n\n* **trigger** reset: Any\n* **trigger** count: Any\n* **property** iterations: Number\n\n**Outputs:**\n\n* **trigger** onCount: Any\n* **trigger** done: Any\n* **property** interation: Number\n\nCount can be used to make sure a loop in a flow only runs for a certain number of iteartions. The `reset` input trigger resets the count, and the `count` trigger is used to increment it."}
{"file": "std.md", "chunk_id": 19, "content": "#### Function 'Std.For'\n\n**Inputs:**\n\n* **trigger** reset: Any\n* **trigger** next: Any\n* **property** items: List\n\n**Outputs:**\n\n* **trigger** onItem: Any\n* **trigger** done: Any\n* **property** item: Any\n* **property** index: Number"}
{"file": "std.md", "chunk_id": 20, "content": "#### Function 'Std.Stop'\n\n**Inputs:**\n\n* **trigger** stop: Any\n* **property** exit code: Number\n\n**Outputs:**"}
{"file": "std.md", "chunk_id": 21, "content": "#### Function 'Std.ProduceContext'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** contextValue: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n\nMakes the provided value available to the context of the `continue` trigger."}
{"file": "std.md", "chunk_id": 22, "content": "#### Function 'Std.ConsumeContext'\n\n**Inputs:**\n\n* **trigger** execute: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** value: Any\n\nConsumes the context of the `execute` trigger, and makes it available as an output through `value`."}
{"file": "std.md", "chunk_id": 23, "content": "#### Function 'Std.IsNumber'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** isNumber: Bool\n\nReturns true if the type of `input` is Number"}
{"file": "std.md", "chunk_id": 24, "content": "#### Function 'Std.IsBool'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** isBool: Bool\n\nReturns true if the type of `input` is Bool"}
{"file": "std.md", "chunk_id": 25, "content": "#### Function 'Std.IsString'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** isString: Bool\n\nReturns true if the type of `input` is String"}
{"file": "std.md", "chunk_id": 26, "content": "#### Function 'Std.IsNull'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** isNull: Bool\n\nReturns true if the type of `input` is Null"}
{"file": "std.md", "chunk_id": 27, "content": "#### Function 'Std.NotNull'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** notNull: Bool\n\nReturns true if the type of `input` is not Null"}
{"file": "std.md", "chunk_id": 28, "content": "#### Function 'Std.IsList'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** isList: Bool\n\nReturns true if the type of `input` is List"}
{"file": "std.md", "chunk_id": 29, "content": "#### Function 'Std.IsMap'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** isMap: Bool\n\nReturns true if the type of `input` is Map"}
{"file": "std.md", "chunk_id": 30, "content": "#### Function 'Std.IsBuffer'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** isBuffer: Bool\n\nReturns true if the type of `input` is Buffer"}
{"file": "std.md", "chunk_id": 31, "content": "#### Event 'Std.Start'\n\n```\n#### Inputs:\n#### Outputs:\n- **trigger** onStart: Any\n\n```\n\nAn event which is triggered as soon as the engine starts.\n\n### Validation"}
{"file": "std.md", "chunk_id": 32, "content": "#### Function 'Std.IsAssignableTo'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** input: Unknown\n\n**Outputs:**\n\n* **property** value: T\n* **trigger** yes: Any\n* **trigger** no: Any\n\nChecks whether `input` is assignable to type T"}
{"file": "std.md", "chunk_id": 33, "content": "#### Function 'Std.As'\n\n**Inputs:**\n\n* **property** input: Unknown\n\n**Outputs:**\n\n* **property** value: T\n\nAsserts that the value of `input` is of type T\n\n### Time"}
{"file": "std.md", "chunk_id": 34, "content": "#### Function 'Std.Now'\n\n**Inputs:**\n\n* **trigger** execute: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** time: Number\n\nGives the current time in nano seconds"}
{"file": "std.md", "chunk_id": 35, "content": "#### Function 'Std.Parse'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** date string: String\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** time: Any\n\nParses an RFC 3339 and ISO 8601 date and time string such as 1996-12-19T16:39:57-08:00."}
{"file": "std.md", "chunk_id": 36, "content": "#### Function 'Std.Format'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** time: Number\n* **property** format: String\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** date string: String\n\nFormats a time value as a string using the given format string (as defined in https://docs.rs/chrono/latest/chrono/format/strftime/index.html)."}
{"file": "std.md", "chunk_id": 37, "content": "#### Function 'Std.AddSeconds'\n\n**Inputs:**\n\n* **property** time: Any\n* **property** seconds: Number\n\n**Outputs:**\n\n* **property** time: Any\n\nAdds the given amount of `seconds` to the provided `time` object"}
{"file": "std.md", "chunk_id": 38, "content": "#### Function 'Std.AddMinutes'\n\n**Inputs:**\n\n* **property** time: Any\n* **property** minutes: Number\n\n**Outputs:**\n\n* **property** time: Any\n\nAdds the given amount of `minutes` to the provided `time` object"}
{"file": "std.md", "chunk_id": 39, "content": "#### Function 'Std.AddHours'\n\n**Inputs:**\n\n* **property** time: Any\n* **property** hours: Number\n\n**Outputs:**\n\n* **property** time: Any\n\nAdds the given amount of `hours` to the provided `time` object"}
{"file": "std.md", "chunk_id": 40, "content": "#### Function 'Std.AddDays'\n\n**Inputs:**\n\n* **property** time: Any\n* **property** days: Number\n\n**Outputs:**\n\n* **property** time: Any\n\nAdds the given amount of `days` to the provided `time` object"}
{"file": "std.md", "chunk_id": 41, "content": "#### Function 'Std.AddWeeks'\n\n**Inputs:**\n\n* **property** time: Any\n* **property** weeks: Number\n\n**Outputs:**\n\n* **property** time: Any\n\nAdds the given amount of `weeks` to the provided `time` object\n\n### Strings"}
{"file": "std.md", "chunk_id": 42, "content": "#### Function 'Std.Concat'\n\n**Inputs:**\n\n* **property** left: String\n* **property** right: String\n\n**Outputs:**\n\n* **property** result: String\n\nConcatenates the values in `left` and `right` as strings, making it available on the `result` output."}
{"file": "std.md", "chunk_id": 43, "content": "#### Function 'Std.Template'\n\n**Inputs:**\n\n**Outputs:**\n\n* **property** output: String\n\nCreates a string template letting you replace \\{{input name\\}} with string content."}
{"file": "std.md", "chunk_id": 44, "content": "#### Function 'Std.Length'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** length: Number\n\nReturns the length of the string `input`."}
{"file": "std.md", "chunk_id": 45, "content": "#### Function 'Std.Substring'\n\n**Inputs:**\n\n* **property** input: String\n* **property** start: Number\n* **property** end: Number\n\n**Outputs:**\n\n* **property** substring: String\n\nReturns the substring of `input` starting at `start` and ending at `end`. If `end` is not provided, the substring will be from `start` to the end of the string."}
{"file": "std.md", "chunk_id": 46, "content": "#### Function 'Std.Replace'\n\n**Inputs:**\n\n* **property** input: String\n* **property** search: String\n* **property** replace: String\n\n**Outputs:**\n\n* **property** output: String\n\nReturns the string `input` with all occurrences of `search` replaced with `replace`."}
{"file": "std.md", "chunk_id": 47, "content": "#### Function 'Std.ToLower'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** output: String\n\nReturns the string `input` with all characters converted to lowercase."}
{"file": "std.md", "chunk_id": 48, "content": "#### Function 'Std.ToUpper'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** output: String\n\nReturns the string `input` with all characters converted to uppercase."}
{"file": "std.md", "chunk_id": 49, "content": "#### Function 'Std.IsLowerCase'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** output: String\n\nReturns true is all characters in `input` are lower case."}
{"file": "std.md", "chunk_id": 50, "content": "#### Function 'Std.IsUpperCase'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** output: String\n\nReturns true is all characters in `input` are upper case."}
{"file": "std.md", "chunk_id": 51, "content": "#### Function 'Std.Trim'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** trimmed: String\n\nReturns a trimmed version of `input` where leading an trailing whitespace is removed."}
{"file": "std.md", "chunk_id": 52, "content": "#### Function 'Std.Join'\n\n**Inputs:**\n\n* **property** string list: Any\n* **property** separator: String\n\n**Outputs:**\n\n* **property** result: String\n\nCombines each string in `string list` by placing `separator` between them."}
{"file": "std.md", "chunk_id": 53, "content": "#### Function 'Std.Split'\n\n**Inputs:**\n\n* **property** string: String\n* **property** splitOn: String\n\n**Outputs:**\n\n* **property** strings: List"}
{"file": "std.md", "chunk_id": 54, "content": "#### Function 'Std.IsNumeric'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** isNumeric: Bool"}
{"file": "std.md", "chunk_id": 55, "content": "#### Function 'Std.IsAlphabetic'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** isAlphanumeric: Bool"}
{"file": "std.md", "chunk_id": 56, "content": "#### Function 'Std.IsAlphaNumeric'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** isAlphaNumeric: Bool"}
{"file": "std.md", "chunk_id": 57, "content": "#### Function 'Std.IsWhitespace'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** isWhitespace: Bool"}
{"file": "std.md", "chunk_id": 58, "content": "#### Function 'Std.Reversed'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** reversed: String"}
{"file": "std.md", "chunk_id": 59, "content": "#### Function 'Std.MatchIndices'\n\n**Inputs:**\n\n* **property** input: String\n* **property** pattern: String\n\n**Outputs:**\n\n* **property** indicesOfMatches: List\n\nReturns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at."}
{"file": "std.md", "chunk_id": 60, "content": "#### Function 'Std.RightMatchIndices'\n\n**Inputs:**\n\n* **property** input: String\n* **property** pattern: String\n\n**Outputs:**\n\n* **property** indicesOfMatches: List\n\nReturns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at, yielded in reverse order."}
{"file": "std.md", "chunk_id": 61, "content": "#### Function 'Std.Characters'\n\n**Inputs:**\n\n* **property** input: String\n\n**Outputs:**\n\n* **property** characters: List\n\n### Testing"}
{"file": "std.md", "chunk_id": 62, "content": "#### Function 'Std.AssertEqual'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** expect: Any\n* **property** actual: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** result: Any\n\nAsserts that `expected` and `actual` are equal. The equality check is a deep check, where objects are traversed and matched against each other. `testId` identifies which test this assert is run under, and is provided by the `Testing.Test` event."}
{"file": "std.md", "chunk_id": 63, "content": "#### Function 'Std.AssertTrue'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** actual: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** result: Any"}
{"file": "std.md", "chunk_id": 64, "content": "#### Function 'Std.AssertFalse'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** actual: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** result: Any"}
{"file": "std.md", "chunk_id": 65, "content": "#### Function 'Std.Fail'\n\n**Inputs:**\n\n* **trigger** execute: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n\nCauses the test identified by `testId` to fail."}
{"file": "std.md", "chunk_id": 66, "content": "#### Event 'Std.Test'\n\n```\n#### Inputs:\n#### Outputs:\n- **trigger** onRun: Any\n\n```\n\nCreates a test, which can be run using the cli tool. `id` is used by `Testing.AssertEqual` to identify the running test.\n\n### Data"}
{"file": "std.md", "chunk_id": 67, "content": "#### Function 'Std.GetData'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** key: String\n\n**Outputs:**\n\n* **trigger** onData: Any\n* **trigger** keyNotFound: Any\n* **property** data: Any\n\nReturns the `data` stored under `key` if the key exists. If the key is present, the `onData` trigger is executed, otherwise the `keyNotFound` trigger is executed."}
{"file": "std.md", "chunk_id": 68, "content": "#### Function 'Std.SetData'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** key: String\n* **property** value: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** inserted\\_value: Any\n\nAssociates a `value` with a string `key`, and also passes on a copy of the inserted data through the `inserted_value` output."}
{"file": "std.md", "chunk_id": 69, "content": "#### Function 'Std.RemoveData'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** key: String\n\n**Outputs:**\n\n* **trigger** continue: Any\n\nRemoves the data at `key`"}
{"file": "std.md", "chunk_id": 70, "content": "#### Event 'Std.OnData'\n\n```\n#### Inputs:\n#### Outputs:\n- **trigger** onAdded: Any\n- **trigger** onRemoved: Any\n- **trigger** onUpdated: Any\n\n```\n\nAllows one to get an event whenever data on a `key` is added, removed or updated.\n\n### Json"}
{"file": "std.md", "chunk_id": 71, "content": "#### Function 'Std.ParseJson'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** string: String\n\n**Outputs:**\n\n* **trigger** onSuccess: Any\n* **property** value: Any\n* **trigger** onFailure: Any\n* **property** error: Any\n\nParses the json provided in the `string` property. The parsed `value` is available on success, and the `onSuccess` trigger is executed. If parsing fails, the `onFailure` trigger is executed, and the error is available on the `error` output."}
{"file": "std.md", "chunk_id": 72, "content": "#### Function 'Std.ToJson'\n\n**Inputs:**\n\n* **property** json: Any\n\n**Outputs:**\n\n* **property** string: String\n\nConverts any object on the `json` input to a String.\n\n### List"}
{"file": "std.md", "chunk_id": 73, "content": "#### Function 'Std.GetAt'\n\n**Inputs:**\n\n* **property** list: List\n* **property** index: Number\n\n**Outputs:**\n\n* **property** itemAtIndex: Any\n\nGets the item at `index` from `list`, returning Null if the index is out of bounds."}
{"file": "std.md", "chunk_id": 74, "content": "#### Function 'Std.SetAt'\n\n**Inputs:**\n\n* **property** list: List\n* **property** index: Number\n* **property** value: Number\n\n**Outputs:**\n\n* **property** updatedList: List\n\nSets the item at `index` of `list` to `value`"}
{"file": "std.md", "chunk_id": 75, "content": "#### Function 'Std.Add'\n\n**Inputs:**\n\n* **property** list: Any\n* **property** item: Any\n\n**Outputs:**\n\n* **property** listWithItem: Any\n\nAdds `item` to the `list` by creating a new list with the item added, available on the `listWithItem` output."}
{"file": "std.md", "chunk_id": 76, "content": "#### Function 'Std.Remove'\n\n**Inputs:**\n\n* **property** list: Any\n* **property** index: Any\n\n**Outputs:**\n\n* **property** listWithoutItem: Any\n* **property** removedItem: Any\n\nRemoves the item at `index` from `list` by creating a new list with the item removed, available on the `listWithoutItem` output."}
{"file": "std.md", "chunk_id": 77, "content": "#### Function 'Std.Length'\n\n**Inputs:**\n\n* **property** list: Any\n\n**Outputs:**\n\n* **property** length: Any\n\nReturns the number of items in `list`."}
{"file": "std.md", "chunk_id": 78, "content": "#### Function 'Std.Contains'\n\n**Inputs:**\n\n* **property** list: Any\n* **property** item: Any\n\n**Outputs:**\n\n* **property** is\\_contained: Bool\n\n`is_contained` is true if `item` is contained in `list`."}
{"file": "std.md", "chunk_id": 79, "content": "#### Function 'Std.Sort'\n\n**Inputs:**\n\n* **property** list: Any\n\n**Outputs:**\n\n* **property** sorted\\_list: Any\n\nReturns a sorted version of `list`"}
{"file": "std.md", "chunk_id": 80, "content": "#### Function 'Std.GenerateRange'\n\n**Inputs:**\n\n* **property** from: Any\n* **property** to: Any\n\n**Outputs:**\n\n* **property** list: Any\n\nA list containing number from `from` to `to`."}
{"file": "std.md", "chunk_id": 81, "content": "#### Function 'Std.Max'\n\n**Inputs:**\n\n* **property** items: List\n\n**Outputs:**\n\n* **property** max: Number\n\nFinds the largest item in a list of numbers"}
{"file": "std.md", "chunk_id": 82, "content": "#### Function 'Std.Min'\n\n**Inputs:**\n\n* **property** items: List\n\n**Outputs:**\n\n* **property** min: Number\n\nFinds the smallest item in a list of numbers"}
{"file": "std.md", "chunk_id": 83, "content": "#### Function 'Std.Slice'\n\n**Inputs:**\n\n* **property** items: List\n* **property** start: Number\n* **property** end: Number\n\n**Outputs:**\n\n* **property** slice: List\n\nGets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1"}
{"file": "std.md", "chunk_id": 84, "content": "#### Function 'Std.Reversed'\n\n**Inputs:**\n\n* **property** items: List\n\n**Outputs:**\n\n* **property** reversed: List\n\nReverses the order of the items in `list`"}
{"file": "std.md", "chunk_id": 85, "content": "#### Function 'Std.Chunks'\n\n**Inputs:**\n\n* **property** items: List\n* **property** chunk size: Number\n\n**Outputs:**\n\n* **property** chunks: List"}
{"file": "std.md", "chunk_id": 86, "content": "#### Function 'Std.FirstItem'\n\n**Inputs:**\n\n* **property** list: List\n\n**Outputs:**\n\n* **property** item: Any"}
{"file": "std.md", "chunk_id": 87, "content": "#### Function 'Std.LastItem'\n\n**Inputs:**\n\n* **property** list: List\n\n**Outputs:**\n\n* **property** item: Any"}
{"file": "std.md", "chunk_id": 88, "content": "#### Function 'Std.IsEmpty'\n\n**Inputs:**\n\n* **property** list: List\n\n**Outputs:**\n\n* **property** isEmpty: Bool"}
{"file": "std.md", "chunk_id": 89, "content": "#### Function 'Std.NotEmpty'\n\n**Inputs:**\n\n* **property** list: List\n\n**Outputs:**\n\n* **property** isEmpty: Bool"}
{"file": "std.md", "chunk_id": 90, "content": "#### Function 'Std.Flatten'\n\n**Inputs:**\n\n* **property** items: List\n\n**Outputs:**\n\n* **property** flattened: List\n\nConverts a list of lists into a flattened list."}
{"file": "std.md", "chunk_id": 91, "content": "#### Function 'Std.Concat'\n\n**Inputs:**\n\n* **property** left: List\n* **property** right: List\n\n**Outputs:**\n\n* **property** result: List\n\nConcatenates two lists\n\n### Structure"}
{"file": "std.md", "chunk_id": 92, "content": "#### Function 'Std.Get'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** record: Any\n* **property** path: String\n\n**Outputs:**\n\n* **trigger** onValue: Any\n* **property** value: Any\n* **trigger** onError: Any\n* **property** error: Any\n\nRetrieves the value located at a specified `path` within a `record`. The `path` is a string that represents keys and indices in a nested structure. Keys are denoted by strings, and indices by numbers. If the `path` is valid and the value exists, it triggers `onValue` with the result. If the `path` is invalid or the value does not exist, it triggers `onError`."}
{"file": "std.md", "chunk_id": 93, "content": "#### Function 'Std.Set'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** record: Any\n* **property** path: String\n* **property** value: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** record\\_with\\_value: Any\n\nUpdates the value at a given `path` within a `record`. The `path` is a string representing where the value should be set within the nested structure of the record. This function creates a new record with the updated value and outputs it as `record_with_value`. Strings in the `path` indicate keys, while numbers indicate indices.\n\n### Map"}
{"file": "std.md", "chunk_id": 94, "content": "#### Function 'Std.Get'\n\n**Inputs:**\n\n* **property** map: Any\n* **property** key: String\n\n**Outputs:**\n\n* **property** value: Any\n\nGets the `value` stored in `map` on `key`."}
{"file": "std.md", "chunk_id": 95, "content": "#### Function 'Std.Set'\n\n**Inputs:**\n\n* **property** map: Any\n* **property** key: String\n* **property** value: Any\n\n**Outputs:**\n\n* **property** map\\_with\\_value: Any\n\nSets the `value` on `key` of `map` by returning a new map with the value, available on the `map_with_value` output."}
{"file": "std.md", "chunk_id": 96, "content": "#### Function 'Std.Empty'\n\n**Inputs:**\n\n**Outputs:**\n\n* **property** new\\_map: Any\n\nReturns an empty map."}
{"file": "std.md", "chunk_id": 97, "content": "#### Function 'Std.ContainsKey'\n\n**Inputs:**\n\n* **property** map: Any\n* **property** key: String\n\n**Outputs:**\n\n* **property** is\\_contained: Bool\n\nChecks if `map` has a key `key`."}
{"file": "std.md", "chunk_id": 98, "content": "#### Function 'Std.Keys'\n\n**Inputs:**\n\n* **property** map: Any\n\n**Outputs:**\n\n* **property** keys: Any\n\nReturns a list of all the `keys` in `map`."}
{"file": "std.md", "chunk_id": 99, "content": "#### Function 'Std.Values'\n\n**Inputs:**\n\n* **property** map: Any\n\n**Outputs:**\n\n* **property** values: Any\n\nReturns a list of all the `values` in `map`."}
{"file": "std.md", "chunk_id": 100, "content": "#### Function 'Std.Entries'\n\n**Inputs:**\n\n* **property** map: Any\n\n**Outputs:**\n\n* **property** entries: Any\n\nReturns a list of all key-values pairs in `map` as a list of lists."}
{"file": "std.md", "chunk_id": 101, "content": "#### Function 'Std.WithFields'\n\n**Inputs:**\n\n* **property** map: Any\n* **property** fields: List\n\n**Outputs:**\n\n* **property** new map: Any\n\nReturns a new map with only the fields specified in the `fields` list."}
{"file": "std.md", "chunk_id": 102, "content": "#### Function 'Std.MapEntries'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** map: Any\n* **property** handler: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** output\\_list: Any\n\nCalls the given mapping function instance (`handler`) once for each key value pair in `map` returning a new list with the mapped values (`output_list`).\n\n### Iteration"}
{"file": "std.md", "chunk_id": 103, "content": "#### Function 'Std.ForEach'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** items: Any\n* **property** handler: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n\nCalls the given function instance (`handler`) once for each item in `items`"}
{"file": "std.md", "chunk_id": 104, "content": "#### Function 'Std.Map'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** items: Any\n* **property** handler: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** output\\_list: Any\n\nCalls the given function instance (`handler`) once for each item in `items` returning a new list with the mapped values (`output_list`)."}
{"file": "std.md", "chunk_id": 105, "content": "#### Function 'Std.Zip'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** left: List\n* **property** right: List\n* **property** handler: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** zipped: Any"}
{"file": "std.md", "chunk_id": 106, "content": "#### Function 'Std.Filter'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** items: Any\n* **property** handler: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** output\\_list: Any"}
{"file": "std.md", "chunk_id": 107, "content": "#### Function 'Std.Reduce'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** items: Any\n* **property** initialValue: Any\n* **property** reducer: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** output: Any\n\nReduces the list `item` using the provided reducer function, which is expected to accept two inputs, the first being the accumulated value, and the second the value being accumulated."}
{"file": "std.md", "chunk_id": 108, "content": "#### Function 'Std.Find'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** items: List\n* **property** predicate: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** item: Any\n\n### Math"}
{"file": "std.md", "chunk_id": 109, "content": "#### Function 'Std.Floor'\n\n**Inputs:**\n\n* **property** input: Any\n\n**Outputs:**\n\n* **property** output: Any\n\nReturns the largest integer less than or equal `input`"}
{"file": "std.md", "chunk_id": 110, "content": "#### Function 'Std.Add'\n\n**Inputs:**\n\n* **property** first: Number\n* **property** second: Number\n\n**Outputs:**\n\n* **property** result: Number\n\nAdds `first` and `second` making the result avilable on the `result` output."}
{"file": "std.md", "chunk_id": 111, "content": "#### Function 'Std.Sub'\n\n**Inputs:**\n\n* **property** first: Number\n* **property** second: Number\n\n**Outputs:**\n\n* **property** result: Number\n\nSubtracts `first` and `second` making the result avilable on the `result` output."}
{"file": "std.md", "chunk_id": 112, "content": "#### Function 'Std.Mul'\n\n**Inputs:**\n\n* **property** first: Number\n* **property** second: Number\n\n**Outputs:**\n\n* **property** result: Number\n\nMultiplies `first` and `second` making the result avilable on the `result` output."}
{"file": "std.md", "chunk_id": 113, "content": "#### Function 'Std.Div'\n\n**Inputs:**\n\n* **property** first: Number\n* **property** second: Number\n\n**Outputs:**\n\n* **property** result: Number\n\nDivides `first` by `second` making the result avilable on the `result` output."}
{"file": "std.md", "chunk_id": 114, "content": "#### Function 'Std.LessThan'\n\n**Inputs:**\n\n* **property** left: Number\n* **property** right: Number\n\n**Outputs:**\n\n* **property** result: Bool\n\nChecks is `left` less than `right`."}
{"file": "std.md", "chunk_id": 115, "content": "#### Function 'Std.GreaterThan'\n\n**Inputs:**\n\n* **property** left: Number\n* **property** right: Number\n\n**Outputs:**\n\n* **property** result: Bool\n\nChecks if `left` is greater than `right`"}
{"file": "std.md", "chunk_id": 116, "content": "#### Function 'Std.LessThanOrEqual'\n\n**Inputs:**\n\n* **property** left: Number\n* **property** right: Number\n\n**Outputs:**\n\n* **property** result: Bool"}
{"file": "std.md", "chunk_id": 117, "content": "#### Function 'Std.GreaterThanOrEqual'\n\n**Inputs:**\n\n* **property** left: Number\n* **property** right: Number\n\n**Outputs:**\n\n* **property** result: Bool"}
{"file": "std.md", "chunk_id": 118, "content": "#### Function 'Std.Expression'\n\n**Inputs:**\n\n**Outputs:**\n\n* **property** result: Any\n\nCreates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output."}
{"file": "std.md", "chunk_id": 119, "content": "#### Function 'Std.Abs'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the absolute value of `x`."}
{"file": "std.md", "chunk_id": 120, "content": "#### Function 'Std.Sin'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the sine of `x` (in radians)."}
{"file": "std.md", "chunk_id": 121, "content": "#### Function 'Std.Cos'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the cosine of `x` (in radians)."}
{"file": "std.md", "chunk_id": 122, "content": "#### Function 'Std.Tan'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the tangent of `x` (in radians)."}
{"file": "std.md", "chunk_id": 123, "content": "#### Function 'Std.Asin'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the arcsine of `x` (in radians)."}
{"file": "std.md", "chunk_id": 124, "content": "#### Function 'Std.Acos'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the arccosine of `x` (in radians)."}
{"file": "std.md", "chunk_id": 125, "content": "#### Function 'Std.Atan'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the arctangent of `x` (in radians)."}
{"file": "std.md", "chunk_id": 126, "content": "#### Function 'Std.Exp'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the natural exponential function of `x`."}
{"file": "std.md", "chunk_id": 127, "content": "#### Function 'Std.Log'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the natural logarithm (base e) of `x`."}
{"file": "std.md", "chunk_id": 128, "content": "#### Function 'Std.Log10'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the base-10 logarithm of `x`."}
{"file": "std.md", "chunk_id": 129, "content": "#### Function 'Std.Pow'\n\n**Inputs:**\n\n* **property** x: Any\n* **property** y: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns `x` raised to the power of `y`."}
{"file": "std.md", "chunk_id": 130, "content": "#### Function 'Std.Sqrt'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the positive square root of `x`."}
{"file": "std.md", "chunk_id": 131, "content": "#### Function 'Std.Cbrt'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the cube root of `x`."}
{"file": "std.md", "chunk_id": 132, "content": "#### Function 'Std.NthRoot'\n\n**Inputs:**\n\n* **property** x: Any\n* **property** n: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the `n`th root of `x`."}
{"file": "std.md", "chunk_id": 133, "content": "#### Function 'Std.Ceil'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the smallest integer greater than or equal to `x`."}
{"file": "std.md", "chunk_id": 134, "content": "#### Function 'Std.Modulo'\n\n**Inputs:**\n\n* **property** value: Any\n* **property** divisor: Any\n\n**Outputs:**\n\n* **property** result: Any"}
{"file": "std.md", "chunk_id": 135, "content": "#### Function 'Std.Round'\n\n**Inputs:**\n\n* **property** x: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nRounds `x` to the nearest integer."}
{"file": "std.md", "chunk_id": 136, "content": "#### Function 'Std.RoundTo'\n\n**Inputs:**\n\n* **property** x: Any\n* **property** decimals: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nRounds `x` to `decimals` decimal places."}
{"file": "std.md", "chunk_id": 137, "content": "#### Function 'Std.Min'\n\n**Inputs:**\n\n* **property** values: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the smallest of the input numbers."}
{"file": "std.md", "chunk_id": 138, "content": "#### Function 'Std.Max'\n\n**Inputs:**\n\n* **property** values: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nReturns the largest of the input numbers."}
{"file": "std.md", "chunk_id": 139, "content": "#### Function 'Std.Max2'\n\n**Inputs:**\n\n* **property** left: Number\n* **property** right: Number\n\n**Outputs:**\n\n* **property** max: Number\n\nFinds the largest of two numbers"}
{"file": "std.md", "chunk_id": 140, "content": "#### Function 'Std.Min2'\n\n**Inputs:**\n\n* **property** left: Number\n* **property** right: Number\n\n**Outputs:**\n\n* **property** min: Number\n\nFinds the smallest of two numbers"}
{"file": "std.md", "chunk_id": 141, "content": "#### Function 'Std.Random'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** from: Any\n* **property** to: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** value: Any\n\nCreates a random `value` from `from` to `to` each time the function is `execute`d."}
{"file": "std.md", "chunk_id": 142, "content": "#### Function 'Std.NumberFromString'\n\n**Inputs:**\n\n* **property** string: Any\n\n**Outputs:**\n\n* **property** result: Any\n\nConverts `string` to a number. If the string is not convertible to a number, Null is returned.\n\n### Logic"}
{"file": "std.md", "chunk_id": 143, "content": "#### Function 'Std.Equal'\n\n**Inputs:**\n\n* **property** left: Any\n* **property** right: Any\n\n**Outputs:**\n\n* **property** result: Bool\n\nChecks if `left` and `right` are equal by performing a deep scan of the objects."}
{"file": "std.md", "chunk_id": 144, "content": "#### Function 'Std.NotEqual'\n\n**Inputs:**\n\n* **property** left: Any\n* **property** right: Any\n\n**Outputs:**\n\n* **property** result: Bool\n\nChecks if `left` and `right` are not equal by performing a deep scan of the objects."}
{"file": "std.md", "chunk_id": 145, "content": "#### Function 'Std.Not'\n\n**Inputs:**\n\n* **property** input: Bool\n\n**Outputs:**\n\n* **property** result: Bool\n\nThe logic not operator"}
{"file": "std.md", "chunk_id": 146, "content": "#### Function 'Std.Or'\n\n**Inputs:**\n\n* **property** left: Bool\n* **property** right: Bool\n\n**Outputs:**\n\n* **property** result: Bool\n\nThe logic or operator"}
{"file": "std.md", "chunk_id": 147, "content": "#### Function 'Std.And'\n\n**Inputs:**\n\n* **property** left: Bool\n* **property** right: Bool\n\n**Outputs:**\n\n* **property** result: Bool\n\nThe logic and operator\n\n### Scheduling"}
{"file": "std.md", "chunk_id": 148, "content": "#### Event 'Std.Timer'\n\n```\n#### Inputs:\n#### Outputs:\n- **trigger** onTick: Any\n\n```\n\nExecutes the `onTick` trigger every `intervalMs` millli seconds.\n\n### Net"}
{"file": "std.md", "chunk_id": 149, "content": "#### Function 'Std.TcpSend'\n\n**Inputs:**\n\n* **trigger** send: Any\n* **property** connection: Any\n* **property** line: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n\nSends the provided `line` as a tcp messages to the target of `connection`."}
{"file": "std.md", "chunk_id": 150, "content": "#### Function 'Std.TcpListen'\n\n**Inputs:**\n\n* **trigger** listen: Any\n* **property** address: Any\n* **property** port: Any\n\n**Outputs:**\n\n* **trigger** listening: Any\n* **trigger** onConnection: Any\n* **property** stream: Any"}
{"file": "std.md", "chunk_id": 151, "content": "#### Function 'Std.TcpReadLine'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** stream: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** line: Any"}
{"file": "std.md", "chunk_id": 152, "content": "#### Event 'Std.TcpStream'\n\n```\n#### Inputs:\n#### Outputs:\n- **trigger** onLine: Any\n- **property** connection: Any\n- **property** line: Any\n\n```\n\nListens for tcp messages by binding a tcp listener to the provided `address`:`port`. The `onLine` trigger is executed for each `line` received on `connection`.\n\n### Image"}
{"file": "std.md", "chunk_id": 153, "content": "#### Function 'Std.FromFile'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** file: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nReads the contents of `file` and interprets it as an `image`. The supported image formats can be found here (https://docs.rs/image/latest/image/codecs/index.html#supported-formats)"}
{"file": "std.md", "chunk_id": 154, "content": "#### Function 'Std.FromBuffer'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nConverts the `buffer` to an `image`"}
{"file": "std.md", "chunk_id": 155, "content": "#### Function 'Std.ToBuffer'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** buffer: Any\n\nConverts the `image` to a `buffer`"}
{"file": "std.md", "chunk_id": 156, "content": "#### Function 'Std.BoxFilter'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n* **property** kernel: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nApplies a 3x3 box filter on the image using the provided `kernel`, which expected a flattened 3x3 list of numbers (9 numbers)."}
{"file": "std.md", "chunk_id": 157, "content": "#### Function 'Std.Blend'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image1: Any\n* **property** image2: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** result: Any\n\nBlends two images together"}
{"file": "std.md", "chunk_id": 158, "content": "#### Function 'Std.Resize'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n* **property** width: Any\n* **property** height: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** resized\\_image: Any\n\nResizes the `image` to `width` and `height`, making the result available on the `resized_image` output."}
{"file": "std.md", "chunk_id": 159, "content": "#### Function 'Std.SaveToFile'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n* **property** path: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n\nSaves the provided `image` content to a file named `path`, using the file name as an indication of which encoding to use."}
{"file": "std.md", "chunk_id": 160, "content": "#### Function 'Std.Blur'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n* **property** amount: Any\n\n**Outputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n\nBlurs the `image` by `amount`. NOTE: This function can become slow when using large values for `amount`. This should be fixed in the future."}
{"file": "std.md", "chunk_id": 161, "content": "#### Function 'Std.Grayscale'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nConverts `image` to grayscale."}
{"file": "std.md", "chunk_id": 162, "content": "#### Function 'Std.Brighten'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n* **property** amount: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nBrightens `image` by `amount`."}
{"file": "std.md", "chunk_id": 163, "content": "#### Function 'Std.Contrast'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n* **property** amount: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nIncreases the contrast of `image` by `amount`."}
{"file": "std.md", "chunk_id": 164, "content": "#### Function 'Std.FlipHorizontal'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nFlips `image` horizontally."}
{"file": "std.md", "chunk_id": 165, "content": "#### Function 'Std.FlipVertical'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nFlips `image` vertically."}
{"file": "std.md", "chunk_id": 166, "content": "#### Function 'Std.Rotate90'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nRotates `image` by 90 degress clockwise."}
{"file": "std.md", "chunk_id": 167, "content": "#### Function 'Std.Rotate180'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nRotates `image` by 180 degress."}
{"file": "std.md", "chunk_id": 168, "content": "#### Function 'Std.Rotate270'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nRotates `image` by 270 degress clockwise."}
{"file": "std.md", "chunk_id": 169, "content": "#### Function 'Std.Threshold'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n* **property** threshold: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** image: Any\n\nThreshold `image` by `threshold`."}
{"file": "std.md", "chunk_id": 170, "content": "#### Function 'Std.Base64Encode'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** image: Any\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** value: Any\n\nBase64 encodes `image` into a string.\n\n### File"}
{"file": "std.md", "chunk_id": 171, "content": "#### Function 'Std.ReadAll'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** path: String\n\n**Outputs:**\n\n* **trigger** onDone: Any\n* **property** content: String\n* **trigger** onError: Any\n* **property** error: String\n\nReads the entire contents of the file at `path` and returns the contents in the `content` output."}
{"file": "std.md", "chunk_id": 172, "content": "#### Function 'Std.ReadAllToBuffer'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** path: String\n\n**Outputs:**\n\n* **trigger** onDone: Any\n* **property** content: Buffer\n* **trigger** onError: Any\n* **property** error: String\n\nReads the entire contents of the file at `path` and returns the contents in the `content` output."}
{"file": "std.md", "chunk_id": 173, "content": "#### Function 'Std.WriteFile'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** path: String\n* **property** content: String\n\n**Outputs:**\n\n* **trigger** onDone: Any\n* **trigger** onError: Any\n* **property** error: String"}
{"file": "std.md", "chunk_id": 174, "content": "#### Function 'Std.ListDirectory'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** path: String\n\n**Outputs:**\n\n* **trigger** onDone: Any\n* **property** files: List\n* **trigger** onError: Any\n* **property** error: String"}
{"file": "std.md", "chunk_id": 175, "content": "#### Function 'Std.CreateDirectory'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** path: String\n\n**Outputs:**\n\n* **trigger** onDone: Any\n* **trigger** onError: Any\n* **property** error: String"}
{"file": "std.md", "chunk_id": 176, "content": "#### Function 'Std.RemoveFile'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** path: String\n\n**Outputs:**\n\n* **trigger** onDone: Any\n* **trigger** onError: Any\n* **property** error: String\n\n### Env"}
{"file": "std.md", "chunk_id": 177, "content": "#### Function 'Std.GetEnvironmentVariable'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** variable\\_name: String\n\n**Outputs:**\n\n* **trigger** onVariable: Any\n* **property** value: String\n* **trigger** onError: Any\n* **property** error: String"}
{"file": "std.md", "chunk_id": 178, "content": "#### Function 'Std.SetEnvironmentVariable'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** variable\\_name: String\n* **property** value: String\n\n**Outputs:**\n\n* **trigger** onSuccess: Any\n* **trigger** onError: Any\n* **property** error: String\n\n### Buffer"}
{"file": "std.md", "chunk_id": 179, "content": "#### Function 'Std.FromString'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** string: String\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** buffer: Buffer"}
{"file": "std.md", "chunk_id": 180, "content": "#### Function 'Std.ReadU8'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 181, "content": "#### Function 'Std.ReadI8'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 182, "content": "#### Function 'Std.ReadU16BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 183, "content": "#### Function 'Std.ReadU16LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 184, "content": "#### Function 'Std.ReadU16NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 185, "content": "#### Function 'Std.ReadI16BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 186, "content": "#### Function 'Std.ReadI16LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 187, "content": "#### Function 'Std.ReadI16NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 188, "content": "#### Function 'Std.ReadU32BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 189, "content": "#### Function 'Std.ReadU32LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 190, "content": "#### Function 'Std.ReadU32NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 191, "content": "#### Function 'Std.ReadI32BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 192, "content": "#### Function 'Std.ReadI32LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 193, "content": "#### Function 'Std.ReadI32NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 194, "content": "#### Function 'Std.ReadU64BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 195, "content": "#### Function 'Std.ReadU64LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 196, "content": "#### Function 'Std.ReadU64NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 197, "content": "#### Function 'Std.ReadI64BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 198, "content": "#### Function 'Std.ReadI64LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 199, "content": "#### Function 'Std.ReadI64NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 200, "content": "#### Function 'Std.ReadF32BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 201, "content": "#### Function 'Std.ReadF32LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 202, "content": "#### Function 'Std.ReadF32NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 203, "content": "#### Function 'Std.ReadF64BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 204, "content": "#### Function 'Std.ReadF64LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 205, "content": "#### Function 'Std.ReadF64NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque\n* **property** output: Number"}
{"file": "std.md", "chunk_id": 206, "content": "#### Function 'Std.PutU8'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 207, "content": "#### Function 'Std.PutI8'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 208, "content": "#### Function 'Std.PutU16BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 209, "content": "#### Function 'Std.PutU16LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 210, "content": "#### Function 'Std.PutU16NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 211, "content": "#### Function 'Std.PutI16BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 212, "content": "#### Function 'Std.PutI16LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 213, "content": "#### Function 'Std.PutI16NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 214, "content": "#### Function 'Std.PutU32BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 215, "content": "#### Function 'Std.PutU32LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 216, "content": "#### Function 'Std.PutU32NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 217, "content": "#### Function 'Std.PutI32BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 218, "content": "#### Function 'Std.PutI32LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 219, "content": "#### Function 'Std.PutI32NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 220, "content": "#### Function 'Std.PutU64BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 221, "content": "#### Function 'Std.PutU64LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 222, "content": "#### Function 'Std.PutU64NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 223, "content": "#### Function 'Std.PutI64BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 224, "content": "#### Function 'Std.PutI64LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 225, "content": "#### Function 'Std.PutI64NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 226, "content": "#### Function 'Std.PutF32BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 227, "content": "#### Function 'Std.PutF32LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 228, "content": "#### Function 'Std.PutF32NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 229, "content": "#### Function 'Std.PutF64BE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 230, "content": "#### Function 'Std.PutF64LE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 231, "content": "#### Function 'Std.PutF64NE'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n* **property** value: Number\n\n**Outputs:**\n\n* **trigger** continue: Any\n* **property** cursor: Buffer or Opaque"}
{"file": "std.md", "chunk_id": 232, "content": "#### Function 'Std.EncodeUtf8'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** buffer: Buffer or Opaque\n\n**Outputs:**\n\n* **trigger** onSuccess: Any\n* **property** string: String\n* **trigger** onError: Any\n* **property** error: String\n\n### Sets"}
{"file": "std.md", "chunk_id": 233, "content": "#### Function 'Std.Intersection'\n\n**Inputs:**\n\n* **property** left: List\n* **property** right: List\n\n**Outputs:**\n\n* **property** intersection: List"}
{"file": "std.md", "chunk_id": 234, "content": "#### Function 'Std.Union'\n\n**Inputs:**\n\n* **property** left: List\n* **property** right: List\n\n**Outputs:**\n\n* **property** union: List"}
{"file": "std.md", "chunk_id": 235, "content": "#### Function 'Std.Difference'\n\n**Inputs:**\n\n* **property** left: List\n* **property** right: List\n\n**Outputs:**\n\n* **property** difference: List\n\n### Process"}
{"file": "std.md", "chunk_id": 236, "content": "#### Function 'Std.RunCommand'\n\n**Inputs:**\n\n* **trigger** execute: Any\n* **property** name: String\n* **property** args: List or Null\n* **property** env vars: Any\n* **property** cwd: String or Null\n\n**Outputs:**\n\n* **trigger** onDone: Any\n* **property** status: Number or Null\n* **property** stdout: String\n* **property** stderr: String\n* **trigger** onError: Any\n* **property** error: String"}
{"file": "writing-tests.md", "chunk_id": 0, "content": "# Writing tests  \n## Adding a new test  \nMidio comes with a simple interface for writing and running tests, found in the .  \nTo add a test, first add a `Testing.Test` event node, and give it a name.  \nIf you open the 'Services' panel and click the 'refresh services list' button, you will get a new item called 'Testing'. Click it to get an overview of all your tests, and buttons to execute them."}
{"file": "writing-tests.md", "chunk_id": 1, "content": "## Assertions  \nThe Testing module contains several functions which can be used to perform assertions during a test, like `Testing.AssertEqual`. These functions can only be used in the context of a test, and will report to the testing service whether they pass or fail.  \nYou can then click on the 'run all' button to run all tests, or the individual 'run' buttons to run a single test."}
{"file": "writing-tests.md", "chunk_id": 2, "content": "## Tips  \nClicking on a test in the services panel will make the editor jump directly to where that test is defined."}
{"file": "clean-up-node-graphs.md", "chunk_id": 0, "content": "# Clean up node graphs  \n## Aligning nodes  \nThe selected nodes can be aligned to the top, bottom, right or left by using the using `shift-wasd`  \n* `shift-w` - align top\n* `shift-s` - align bottom\n* `shift-a` - align left\n* `shift-d` - align right"}
{"file": "clean-up-node-graphs.md", "chunk_id": 1, "content": "## Distribute nodes  \nThe selected nodes can be distributed vertically or horizontally using `shift-qe`.  \n* `shift-q` - distribute horizontally\n* `shift-e` - distribute vertically"}
{"file": "clean-up-node-graphs.md", "chunk_id": 2, "content": "## Group nodes by converting them to a function  \nSelected nodes can be converted to a reusable function by right clicking one of the selected nodes and clicking 'Convert to function'. The nodes will then be moved to a function which you can give a name, and replaced by an instance of that function. Any arrows to and from those nodes will be automatically hooked up, and the behavior of your application stays the same."}
{"file": "loops.md", "chunk_id": 0, "content": "# Loops  \nImperative for loops are also possible in Midio, and is achieved by simply connecting nodes in a loop. To avoid infinite loops, there are a couple functions that are useful to know."}
{"file": "loops.md", "chunk_id": 1, "content": "## Count  \n`Std.Count` lets you execute code a set number of times, given by the `iterations` input. Start the loop by connecting to the `Std.Count` `reset` trigger. It wil trigger the `onCount` output trigger that number of times. Connect back from `onCount` throug whatever other nodes you want, to the `count` input trigger on `Std.Count`. This will trigger the next iteration. When all iterations are done, the `done` output trigger will be triggered."}
{"file": "loops.md", "chunk_id": 2, "content": "## For  \n`Std.For` works in the same way, but instead iterates over a list of items, providing an item and its index for each iteration."}
{"file": "map-filter-reduce.md", "chunk_id": 0, "content": "# Map, filter, reduce  \nThe functions in the `Iteration` module can be used for functional style transformation of data structures. `Iteration.Map` for example takes in a list, and a function handler, and applies the function to every item in the list, returning a new list of transformed values."}
{"file": "map-filter-reduce.md", "chunk_id": 1, "content": "## Anonymous functions  \nOne can assign an anonymous function to the handler property by right clicking it, and selecting 'Add inline function' from the context menu.  \nYou can then click the 'Edit function' button on the node to edit the function.  \nAdd an input property and output property and connect them with whatever logic you need.  \nYou can also add a single input and output trigger to the function if you need to use triggable functions."}
{"file": "convert-json-to-data-nodes.md", "chunk_id": 0, "content": "# Convert JSON to data nodes  \nJSON Can be pasted directly from the clipboard to create a data node by using keybindings `ctrl-v` after copying json into the system clipboard."}
{"file": "overview.md", "chunk_id": 0, "content": "# Overview  \n## Project overview  \nThe project overview panel lists all the module, function and type definitions in the current project. They can be clicked to navigate the node editor to edit that definition.  \nTo remove a definition, simply hover over the desired item, and a trash bin icon will appear. Click on this icon to delete the definition. Additionally, when hovering over module definitions, a plus icon will become visible. This icon allows you to add extra modules, types, or functions within the specified module.  \nRight click on an item to rename it."}
{"file": "overview.md", "chunk_id": 1, "content": "## Node editor  \nThe node editor is used to create and edit flows. The space bar can be used to bring up the **node palette**, which lets you search through all available nodes (functions and events), and place them on the canvas.  \nNodes can be connected together by clicking on one of their properties, which starts the creation of a new arrow."}
{"file": "overview.md", "chunk_id": 2, "content": "## Nodes  \nFunction instances that have input or output triggers also get a play-button in their header, which can be clicked to execute a flow starting from that node."}
{"file": "overview.md", "chunk_id": 3, "content": "## Inspector  \nThe inspector presents context-specific details for the selected item(s). When a node is selected, it showcases information such as the node's declaration and accompanying documentation. Furthermore, the inspector includes a button that enables you to modify the node's declaration. This prevents the need to delete the node and reconnect all connections when switching declarations."}
{"file": "overview.md", "chunk_id": 4, "content": "## Panels  \n### Log  \nThe log panel displays all messages printed by the `Log` node."}
{"file": "overview.md", "chunk_id": 5, "content": "### Trace history  \nEvery time a flow is run, an item appears in the trace history panel, containing a summary of what happened during the execution."}
{"file": "overview.md", "chunk_id": 6, "content": "### Problems  \nThe problems panel displays a list of errors. If there are any errors present, the tab button itself will get a red border.  \nYou can click on the error to jump to the part of the graph where it appears. Erroneous nodes or arrows will be highlighted."}
{"file": "overview.md", "chunk_id": 7, "content": "### Processes  \nThe processes panel lists all the active processes in the current project. Processes can be stopped by right clicking on one and clicking \"Stop\".  \nThe processes panel contain some information which is currently not directly relevant, except for internal debugging:  \n* `ModuleId` - The id of the module that this processes is executing\n* `Status` - The status of the process, see the processes documentation for details."}
{"file": "overview.md", "chunk_id": 8, "content": "### Services  \nThe services panel displays a list of all the active services in the project, like the _HttpServer_ or the _Scheduler_, and various info that they broadcast. This panel will be used in the future to change parameters on the services as well, but are currently not interactive."}
{"file": "overview.md", "chunk_id": 9, "content": "## Debugging  \nStep debugging is a helpful way for you to examine your code as it runs. By pausing the code at certain points and going through it step by step, you can see how things change and find problems.  \nYou have the ability to set breakpoints by simply right-clicking on nodes and selecting \"toggle breakpoint.\" When the execution reaches that node, it will pause (indicated by a blue outline). With the buttons in the process panel, you can step to the next node or continue the execution. If multiple processes are paused simultaneously, you can easily switch between them by clicking on their respective entries in the process panel."}
{"file": "overview.md", "chunk_id": 10, "content": "## Key bindings  \n* `shift + left mouse pointer`: select nodes using the selection box\n* `delete`: delete the selected nodes\n* `<space>`: node palette\n* `control-shift-p`: show the command palette\n* `control-f`: open the search box"}
{"file": "overview.md", "chunk_id": 11, "content": "### Editing  \n* `control-z`: undo the last action\n* `control-shift-z`: redo the last undone action\n* `control-c`: copy selection\n* `control-v`: paste selection  \n#### While a node is selected  \n* `control + click on another node`: Auto connect nodes"}
{"file": "overview.md", "chunk_id": 12, "content": "### Node layout  \n* `shift-a`: align selected nodes to the left most edge\n* `shift-d`: align selected nodes to the right most edge\n* `shift-w`: align selected nodes to the top most edge\n* `shift-s`: align selected nodes to the bottom most edge\n* `shift-q`: distribute selected nodes horizontally\n* `shift-e`: distribute selected nodes vertically"}
{"file": "overview.md", "chunk_id": 13, "content": "### Debugging  \n* `control-b`: toggle breakpoint on selected nodes\n* `control-shift-s`: step to the next node if execution is stopped\n* `control-shift-c`: continue"}
{"file": "native-plugins.md", "chunk_id": 0, "content": "# Native Plugins  \n!!! warning  \n```\nThe plugin api is highly experimental, and will most likely change soon and often. It also isn't ABI-stable, and will potentially break between midio/rust versions.\n```  \nMidio supports writing native plugins which provide a way of interoperating with native libraries as well as provide custom parameter compilers like the ones used in Http.HttpEndpoint and Strings.Regex.  \nCurrently, only plugins written in Rust are supported, but this will be expanded upon in the future if it proves to be useful. It is possible to wrap libraries in other languages in rust first, and then integrate with Midio."}
{"file": "native-plugins.md", "chunk_id": 1, "content": "## How to write a plugin  \nFirst, create a new Rust library crate, for example:  \n```\ncargo new --lib MyMidioPlugin\n```  \nThen, add `midio-plugin-api` as a dependency.  \n```\ncargo add `midio-plugin-api`\n```  \n!!! note  \n```\nThe `midio-plugin-api` crate might not be publicly available yet.\n```  \nThen implement the `CorePlugin` trait for your plugin.  \n```rust\nstruct MyPlugin;\n\nimpl MidioPlugin for MyPlugin {\nextern \"C\" fn get_plugins() -> CompilerPlugins {\n...\n}\n\nextern \"C\" fn get_dependencies(package_id: PackageId, package: &ExecutablePackage) -> Result<EngineDependencies> {\n...\n}\n}\n```  \nAnd finally, export it using the `midio_plugin!` macro, which simply adds two exportable, non-mangled functions which points those implementations.  \nThen configure the crate to build a dynamic library by adding the following to you `cargo.toml` file:  \n```toml\n[lib]\ncrate-type = [\"cdylib\", \"rlib\"]\n```  \nThen build your library:  \n```\ncargo build --release\n```  \nFinally, add a declaration to your midio module which points to the produced dynamic library:  \n```midio\nnative_dependencies_location(\"./target/release/libmy_midio_plugin\")\n```  \n!!! note  \n```\nDon't add the file ending to this declaration, which is different for each platform.\n```"}
{"file": "the-midio-language.md", "chunk_id": 0, "content": "# The Midio Language  \nMidio is a visual, general-purpose programming language. Its building blocks, composed of functions and events, are similar to those found in standard textual languages. Functions are entities that process input and produce output. Events, on the other hand, enable triggering of flows based on specific conditions such as incoming HTTP requests. Midio also includes data types and modules for organizing the code.  \nThe term **node** is used to describe instances of both functions and events, which are visually represented as nodes connected by **arrows** to form flows. Both functions and modules can contain **flows**, but only modules can utilize event nodes."}
{"file": "the-midio-language.md", "chunk_id": 1, "content": "## Syntax  \n### The anatomy of a node  \nA node represents an **instance** of a function or event, with the original function or event being its **declaration**. Each node has input and output properties, as well as input and output triggers. Properties handle data acceptance and production, while triggers determine when a node is called.  \nNodes without triggers are called on demand."}
{"file": "the-midio-language.md", "chunk_id": 2, "content": "### Execution order  \nUnderstanding the difference between triggers and properties is crucial. Properties pull data from their connected sources, while triggers pushes the flow of execution to the next trigger.  \n#### Example of execution order  \n1. When a request is received matching the `/hello` endpoint with method `GET` and a query parameter `name`, the `HttpEndpoint` event is triggered.\n2. The `Template` node is then called, because the `Log` node depends on its result, and it doesn't have any triggers.\n3. The `Log` node is executed, with input from the `Template` node.\n4. The `Template` node is called again, since the `HttpResponse` node also depends on it.\n5. The `HttpResponse` node is called with input from the `Template` node.  \n#### Functions without triggers  \nFunctions without any trigger inputs or outputs are called 'on demand', and don't cache their results, meaning that if several nodes depend on the output of a single non-triggerable node, it is called several times, like in the example above.  \nFunction with triggers can only be called by triggering it from a previous function or event, or by clicking the 'play'-button. They do cache their results, meaning that as long as a triggered node has been called, any node that depends on it will use the cached result. If a node depends on a triggered node which has not yet been called, the result will be `null`."}
{"file": "the-midio-language.md", "chunk_id": 3, "content": "## Data types  \nMidio supports a variety of data types that allow you to work with different kinds of information. These data types include:  \n* **Number**: Represents both integers and floating-point values.\n* **String**: Represents a sequence of characters.\n* **Boolean**: Represents a true or false value.\n* **Null**: Represents a lack of value\n* **Array**: Represents an ordered collection of elements, which can be of any data type.\n* **Object**: Represents a collection of key-value pairs, where keys are strings and values can be of any data type.\n* **Buffer**: An efficient representation of binary data as a sequence of bytes.\n* **Opaque**: A type used to hide a native value, used by certain native functions to manage native data types."}
{"file": "the-midio-language.md", "chunk_id": 4, "content": "### User defined types  (currently not exposed in the editor)  \nOne can define custom types to a module by clicking the + button next to a module. A user defined type is, by default, a record type, with fields, each with their own name and type.  \n#### Union types  \nTypes can also be unions of multiple types, meaning that it is valid for values of multiple different types to be assigned to that type.  \n> This is currently not exposed in the editor, but available by editing the .midio file and using the `or` keyword between types, like `type Foo { field1: Number or String }`."}
{"file": "the-midio-language.md", "chunk_id": 5, "content": "## Modules  \nModules in Midio serve as an organizational tool for structuring your code, separating different parts of the program into distinct and manageable units.  \nA module can contain other modules, function definitions, and type definitions, allowing for a hierarchical organization of your program. In addition to these structural elements, modules can also contain flows.  \nModules can also have instances of events, which is not possible inside functions."}
{"file": "the-midio-language.md", "chunk_id": 6, "content": "## Functions  \nFunctions in Midio provide a way to group reusable flows together. By defining a function, you can encapsulate a specific behavior or operation that can be invoked multiple times throughout your program. Functions can have both inputs and outputs in the form of triggers and properties, allowing them to accept data, process it, and produce results. Unlike modules, functions cannot contain events."}
{"file": "the-midio-language.md", "chunk_id": 7, "content": "### External functions  \nExternal functions in Midio are functions with a native implementation in Rust. These functions generally provide better performance and access to lower-level system features compared to functions written directly in Midio. Most of the functions in the Midio standard library are external functions, which form a foundation of useful and efficient building blocks for your programs.  \n> You currently cannot create your own external functions, but this will be possible in the future."}
{"file": "the-midio-language.md", "chunk_id": 8, "content": "## Local Variables  \nVariables lets us assign data to a named key, which can then later be retrieved or changed.  \nYou can use the 'variable setter' node to assign a value to a variable name.  \nAnd get the value of a variable using the 'variable setter' node.  \nVariables being **local** means changing a variable in one module or function doesn't affect a variable with the same name in a different module or function. This means that you can more easily reason about what changes changing a variable has, and don't have to worry too much about naming colisions.  \n{% hint style=\"warning\" %}\nNote that a variables value does not persist between processes.\n{% endhint %}  \nHere is an example of setting a variable and immediately retrieving it again."}
{"file": "the-midio-language.md", "chunk_id": 9, "content": "## Data node  \nData nodes can be used to create both primitive values and complex data structures easily. You can add one by pressing space, and searching for `data object`, `string`, `number` and so on, or just paste a string into the search bar and press enter to get a string object. You can also paste JSON data from the clipboard directly onto the node graph, and it will import it as a data node.  \nData nodes are connected by the socket in their top-right corner, and can be used as input to any function.  \nData nodes can also depend on other data nodes or the result of function calls, by converting a field to an input field. This can be done by clicking the input icon which appear when hovering a field."}
{"file": "the-midio-language.md", "chunk_id": 10, "content": "## Waypoint node  \nWaypoint nodes serve two purposes:  \n1. Gives us a way of specifying the pathing of an arrow more accurately.\n2. Gives us an easy way to access fields on objects and items in lists by index."}
{"file": "the-midio-language.md", "chunk_id": 11, "content": "## Portals  \nPortals allows you to split an arrow in two, disconnecting them visually. This can be achieved by right clicking the arrow and selecting the 'split' option. This can be very useful for cleaning up a messy node graph, and lets you avoid very long arrows, or arrows that loop back."}
{"file": "technical-details.md", "chunk_id": 0, "content": "# Technical details  \n## Overview  \nMidio compiled to bytecode, meaning that before the node graph is executed, it is compiled to a list of instructions, which is then executed by the \\[**Midio VM**]\\(#The Midio VM). This makes the code run a lot faster than it would if we had to interpret the node graph during execution."}
{"file": "technical-details.md", "chunk_id": 1, "content": "## The Midio compiler  \nThe midio compiler converts the midio languages textual representation into bytecode, which is a binary format which the VM can directly execute. This bytecode consist of simple instructions, which are executed one after the other. Examples of instructions are  \n* **Jump(offset)** - which skips the `offset` number of instructions  \nand  \n* **CallFunction(function id)** - Which calls the given function  \nEach module is compiled into a bundle of bytecode, which can be executed by a process."}
{"file": "technical-details.md", "chunk_id": 2, "content": "### The semantic model  \nThe compiler also produces a model of the textual representation, which is what the editor interacts with. The semantic model has a 1 to 1 relationship with the textual representation, meaning that it contains all the same information as the textual representation."}
{"file": "technical-details.md", "chunk_id": 3, "content": "## The Midio VM  \nThe midio VM is the engine that executes the bytecode produced by the compiler. It is responsible for hooking up all the native functionality that the code depends on, like all external functions, and services.  \nMidio bytecode is executed in processes."}
{"file": "technical-details.md", "chunk_id": 4, "content": "### Processes  \nA process represents an isolated environment for bytecode to be executed in. It contains its own call stack, and its own memory heap, and is not able to affect other processes directly.  \nProcesses are created by supplying it a module to run. It can then be handed to the scheduler, which will eventually schedule it for execution.  \nA process can be in one of the following states:  \n* **Runnable** - The process is ready to be scheduled by the scheduler\n* **DoneAndWaitingForCleanup** - The process is done executing, and is waiting for the engine to clean up its resources, like heap and stack.\n* **WaitingToReceiving** - The process is waiting for an event node to receive a message.\n* **Error** - The process has experienced an error, and is waiting for cleanup.\n* **Paused** - The process is paused for debugging purposes\n* **Stepping** - The process is in debugger state, and the middle of performing a single. The difference from being **Runnable** is that the process will enter the **Paused** state as soon as it hits an instruction corresponding to a node, like a `CallFunction` instruction."}
{"file": "technical-details.md", "chunk_id": 5, "content": "### Services  \n> Services are not something the user directly interfaces with, but are accessed through functions.  \nServices are components that provide various capabilities to your programs, such as offering an HTTP server, scheduling flows at specific intervals, and more. These services are shared between processes and are instantiated automatically when a node that requires the service is used. This process is entirely transparent to the user, and the way you interact with services is through funtions whose implementation happen to use them.  \n> Currently, you cannot create your own service, but this will eventually be possible.  \nSome existing services include:  \n* **HttpServer**: Enables the creation of HTTP APIs. Some functions that use this service include `HttpEndpoint` and `HttpResponse`.\n* **Scheduler**: Allows scheduling of flows to run at specific intervals. The `Timer` event uses this sevices.\n* **Testing**: Offers a way for tests to report their results. Some nodes using this service includes the `Test` event and the various assertion functions, like: `AssertEqual`, `AssertTrue` and `AssertFalse`.\n* **TcpListener**: Facilitates responding to TCP connections. The `TcpStream` event and `TcpSend` function uses this service.\n* **Database**: Provides an in-memory key-value store (non-persistent) for storing data between various flow executions. This service is accessed through the `GetData` and `SetData` functions and the `OnData` event."}
{"file": "technical-details.md", "chunk_id": 6, "content": "## The Midio textual representation  \nMidio programs are stored using a textual representation, which maps almost one to one with the visual representation."}
{"file": "technical-details.md", "chunk_id": 7, "content": "### Midio Language Syntax  \nMidio is a declarative programming language with a textual representation, designed for node-based programming. Its primary features include the ability to define modules, functions, events, and properties, as well as supporting native implementation through external functions. This section provides an overview of the syntax used in Midio.  \n!!! note The midio textual representation is not designed to be written by hand, but is means to at least be understandable by a human. The syntax is easy enough to understand, but it is hard to get a sense of what a program is doing by only looking at the textual representation.  \n#### Modules  \nModules in Midio are containers for functions and other elements. The hidden attribute determines whether the module should be visible in the editor or not.  \n```\nmodule(hidden: true) ModuleName {\n// Module content (functions, events, types, nodes and arrows)\n}\n```  \n#### Functions  \nFunctions in Midio can be either user-defined or external (native) functions.  \nUser-defined functions:  \n```\nfunc FunctionName {\n// input and output and parameter declarations\nin trigger execute\nout trigger continue\nin property input1\nout property output1\n\n// function body (node instances and arrows)\n}\n```  \nExternal functions:  \n```\nextern func FunctionName {\n// only input and output and parameter declarations\n}\n\n```  \nExternal functions have a native implementation in Rust and cannot have a body.  \n#### Inputs, and Outputs  \nInputs, and outputs are defined within functions using the in, out, and event keywords:  \n```\nin(name: \"inputName\") property(Type) inputVariableName\nout(name: \"outputName\") property(Type) outputVariableName\n```  \n#### Parameters and Attributes  \nParameters provide compile-time information to nodes, while attributes are optional values that can be used to configure modules, functions, events, inputs, or outputs:  \n```\nparameter attributeName\n```  \nAttributes are enclosed in parentheses, following the element they belong to:  \n```\nmodule(attributeName: attributeValue) ModuleName\nfunc(attributeName: attributeValue) FunctionName\nevent(attributeName: attributeValue) EventName\nin(attributeName: attributeValue) property(Type) inputVariableName\nout(attributeName: attributeValue) property(Type) outputVariableName\n```  \n#### Properties and Types  \nProperties in Midio are used to store values and are declared with a type:  \n```\nproperty(Type) propertyName\n```  \n#### Identifiers  \nIdentifiers in Midio follow conventional rules from languages like JavaScript, C, or Rust, which include:  \n* Starting with a letter, underscore\n* Continuing with any combination of letters, digits, underscores, or dollar signs  \n#### Instances and Arrows  \nIn the body of user-defined functions, instances of other functions and arrows are used to connect them:  \n```\ninstance(x: xPosition, y: yPosition, name: \"InstanceName\") instanceVariableName FunctionType {\n\n}\n```  \n```\ninputPropertyName -> instanceVariableName.propertyName\ninstanceVariableName.propertyName -> outputPropertyName\n```  \nThis is a general overview of the syntax used in Midio. The language is designed to support a node-based programming paradigm, allowing for a flexible and visual approach to developing software."}
{"file": "partial-function-application.md", "chunk_id": 0, "content": "# Partial function application  \nMidio functions can take other functions as input by using the top-right socket as illustrated bellow. The `Std.CallFunction`function can be used to call functions passed as input.  \nWhen the function being used as input has any inputs set, like the `Math.Add`function above, which has its `first`input set to _123,_ the function acts as a . This means the `Math.Add`function above now only takes one input instead of two. This input can either be supplied as an object with the input name set, as above, or as a list with only one input, like we show below.  \nPartial function application can be very useful in situations when one needs to be able to pass a function which captures certain data only available in the scope where the function instance is created, and can act as a limited kind of )."}
{"file": "contexts.md", "chunk_id": 0, "content": "# Contexts  \n## # What is it?  \nContexts are a way for nodes to implicitly pass along values along a path of execution. It for example allows the `Http.Endpoint` node to implicitly pass along an implicit http request handle to the `Http.Response` node, without you having to do this with a separate arrow."}
{"file": "contexts.md", "chunk_id": 1, "content": "## How it works  \nSome triggers attach one or more contexts to a flow when they activate. Examples are the `Http.Endpoint.onRequest` trigger, which produces an `EndpointContext` context, and `Testing.Test.onRun`, which produces a `TestContext` context. You can see what contexts an output trigger produces, if any, by hovering it.  \nSome input triggers either \"consumes\" or \"borrows\" one or several contexts. The `Http.Response.execute` input trigger for example consumes a `EndpointContext`. A context can only be consumed once, but borrowed multiple times. The `Testing.AssertEqual.execute` trigger for example only borrows the `TestContext` context, which lets us perform several asserts during the same test.  \nA Http request can only be responded to once, which is why the `Http.Response.execute` trigger consumes the context.  \n{% hint style=\"info\" %}\nContexts are currently only partially exposed to user defined functions, in that you can define which contexts your functions consumes, but they are not allowed to borrow contexts yet. This limitation will be relaxed in the future, and should ideally be inferred. You can make your input trigger consume a context by pressing the + button under the consumes section on the input trigger node:  \n<img src=\"../.gitbook/assets/Cursor_and_Midio_🔊 (2).png\" alt=\"\" data-size=\"original\">\n{% endhint %}"}
{"file": "getting-started.md", "chunk_id": 0, "content": "# Getting started  \nMidio is a low-code tool and node-based visual programming language that lets you create anything from simple Web APIs and automations, to AI powered backends.  \nThis guide is intended to get you quickly up and running with Midio, and to teach you the basics of how to create applications."}
{"file": "getting-started.md", "chunk_id": 1, "content": "## Creating a new project  \nAfter logging in, you get to the overview page. Here you can create new and manage existing projects.  \nTo create a new project, click the `New` button. A new project with an auto generated name will appear in the projects panel. Click on it to get started developing."}
{"file": "getting-started.md", "chunk_id": 2, "content": "## The basics  \nLets start simple with a traditional 'Hello world' app. Press 'space' (you may have to focus the canvas first by clicking on it) to bring up the node palette. Search for 'Log', and select `Std.Log` either by clicking on it, or by navigating with the arrow keys and pressing 'enter'.  \nThis will add an instance of the `Std.Log` function to your project. Write its input to the Log panel, which can be a handy way to get some insight into how your application behaves.  \n(1) (1) (1) (1) (1).png>)  \nSee  for an introduction to how nodes work.  \nTo give the Log node a message to print, click on the field to the right of the 'input' property, and write a message, like 'Hello world'.  \nYou can then execute the function by clicking on the 'play' button in the top left part of the node. A line will then appear in the 'Log' panel to the top right (if it is open, if not, click the '+' button in the top right corner and select Log)."}
{"file": "getting-started.md", "chunk_id": 3, "content": "## Lets create a simple Web API  \nNow that we have our 'hello world' app, lets expose it as a web api. Summon the 'node palette' again using 'space', and search for 'Http.Endpoint', and add it to the project.  \n`Http.Endpoint` is an `Event` node. Event nodes are used to react to events produced by various services, in this case a Http Server service.  \nThe event node is configured to respond to a request to the `/` path, with `GET` as HTTP method. When our app receives a request to this resource, the `onRequest` trigger on the `Http.Endpoint` node will trigger. We can connect this to the `execute` trigger on the `Std.Log` node we created earlier in order to execute it whenever we receive an http request. First click on the `onRequest` trigger, and then on the `execute` trigger to connect them.  \nTODO: HOW TO CALL THE NODE  \nFinally, we need to respond to the Http request. We can do this using the `Http.Response` node. Add one using the node palette ('space').  \nConnect the `continue` trigger of `Std.Log` to the `respond` trigger on `Http.Response`. Choose some values for its inputs, like 200 (which means OK) for `status`, and optionally a message for `body`. The `headers` input can be left blank.  \nTODO: Try calling the API again"}
{"file": "getting-started.md", "chunk_id": 4, "content": "## Call our own API using Midio  \nWe don't have to leave midio in order to play with our API. Midio has a built in function for making http requests, called `Http.FetchUrl`.  \nTry adding it. Fill in your public url in the url field, and select the 'text' option for the `response type` input. The click the 'play' button in the top left corner of the node.  \nTo make the node automaticlly log its inputs and outputs when it is executed, toggle the 'log' option in the toolbar which appears when selecting the node."}
{"file": "getting-started.md", "chunk_id": 5, "content": "## Further reading  \nTo learn more about how Midio works, either try following the , which shows you how to integrate with OpenAI, Airtable and the Slack web hooks api to create a simple sentiment analysis slack bot.  \nYou can also head to the  section to learn more about the various features of the editor, or the  section, to learn how the Midio visual language works in more detail."}
{"file": "groq-setup.md", "chunk_id": 0, "content": "# Groq setup  \nTo get an Groq API key, first register an account in .  \nAfter signing up go to , and click on *API Keys* in the left panel.  \nOpen the create dialog by clicking *Create API Key*.\nGive the key a name (the name can be whatever you want) and click *Submit*.  \n**Make sure you copy the generated key, and store it somewhere safe.**\nYou won't be able to get the key after you've clicked done."}
{"file": "openai-setup.md", "chunk_id": 0, "content": "# OpenAI setup  \nTo get an OpenAI API key, first register an account in .\nNote that you can only use the OpenAI API if you have active credit grant(s).  \nAfter signing up go to , and click on *Dashboard* in the top right corner.  \nThen, click *API keys* in the menu to the left.  \nOpen the create dialog by clicking *Create new secret key*.\nKeep the default selected permission settings ('All'), and give it a name (the name can be whatever you want).  \n**Make sure you copy the generated key, and store it somewhere safe.**\nYou won't be able to get the key after you've clicked done."}
{"file": "README.md", "chunk_id": 0, "content": "# Tutorial  \nIn this tutorial we will build a simple Slack bot, which uses OpenAI to perform sentiment analysis on messages, and then store the result in Airtable.  \nWe will need to access three separate web APIs, and obtain an API key for each of them. Follow the short tutorials below to retrieve API keys from each of them."}
{"file": "README.md", "chunk_id": 1, "content": "## Web API setup  \n*\n*\n- If you want to use Groq instead, go to . The API is similar to OpenAI.\n*"}
{"file": "README.md", "chunk_id": 2, "content": "## Create our bot  \n### Getting started  \nFirst off, create a new module called Main (the name doesn't really matter, 'Main' is just a convention).  \nAdd two nodes (press the space bar to open the node palette):  \n* Http.Endpoint\n* Http.Response  \nAnd connect the `onRequest` on the endpoint to the `execute` trigger on the response node. Click the I-icon on the status input of the response node and enter 200 (which means our response is considered OK). We now have a basic endpoint setup, which just returns an empty response. Enter '/slack-event' in the 'path' field of `Http.Endpoint` and POST in the 'method' field."}
{"file": "README.md", "chunk_id": 3, "content": "### Registering our endpoint with Slack  \nNext up, we need to register our endpoint with Slack. Go to , select your app (which you can set up following the steps here), and then select the 'Event subscriptions' item from the left side menu.  \nAdd the url of our endpoint in the text box marked 'Request url'. Our url will be 'midio.com/slack-event',,, . TODO(Kristian): Add the actual url here.&#x20;  \nSlack will try to verify our endpoint by sending us a POST request with a JSON body which looks something like this: `{ \"challenge\": \"somechallgengeid\" }`. To verify our endpoint, we must return the value in the challenge field.  \n{% hint style=\"warning\" %}\nWe still haven't implemented this part, so Slack will show us an error message explaining that it can't verify our endpoint. We will fix this next.\n{% endhint %}  \nTo do this in Midio, we need the following nodes:  \n* Json.Parse - Converts JSON encoded text to Midio objects\n* Map.ContainsKey - Returns true if the input map contains a given key\n* Std.If - Lets us choose a different path based on whether the input value is `true` or `false`.\n* Std.Log - Writes to the log panel (just to make it easier to see what happens)  \nAdd and hook up the nodes as shown here:  \nNote that you can add the 'waypoint' node, which is the small node between `Parse.value` and `HttpResponse.body`, by first creating a connection between them, and then double clicking he connection.  \n{% hint style=\"info\" %}\nThis is a waypoint node. Add one by double clicking a blue dotted connection, or search for waypoint using the node palette (space bar).  \n<img src=\"../../.gitbook/assets/Midio (3).png\" alt=\"\" data-size=\"original\">\n{% endhint %}  \n#### What you've hooked up everything, go back to the slack portal and click retry.  \nIf everything is working correctly, slack will display a success message, and you'll see a trace of the execution in the Midio editor. Hover or click the blue dots on the arrows to view the data which have passed through your code.  \n#### Cleanup  \nWe can then clean up our code by converting some of the nodes into a function, which hides them behind a single node. Lets do this by selecting (hold shift and drag the mouse) the nodes which are only related to handling the challenge event. Right click on one of them, and select 'Convert to function' from the dropdown menu. Give the function a name, like 'Handle slack challenge event'."}
{"file": "README.md", "chunk_id": 4, "content": "### Sentiment analysis  \nNext up, we will create a Midio function which uses the OpenAI completion API to perform sentiment analysis on the content of the slack event.  \nFirst, create an empty function by right clicking on the `Main` module in the left side panel, and then clicking 'Add'. Then select 'function' from the popup window. Name the function something like 'Perform sentiment analysis'.  \nWe will now add inputs and outputs to the function. Select the function from the left side panel, then click the 'add input' button in the top center, and select 'trigger'. Name it something like 'execute'.  \nThen add another input, this time a 'data' input, name it something like 'message', and pick `String` as its type (if you're ever unsure about which type to pick for an input or ouput, you can select the type `Any`, which means we don't care about the type. Read more about types . Add outputs using the 'add output' button right next to the 'add input'-button. First add an output, select trigger, and name it 'continue'. Then add another output, pick data, and call it 'sentiment'. Select `Number` as its type when prompted for a type.  \nYou should then have something like this:  \n#### Call the OpenAI API.  \nFor this, we need a couple new functions and a new node type:  \n* Http.FetchUrl - lets us perform an http request to a url\n* Math.NumberFromString - Lets us convert a string to a number\n* Data objects - to create the data expected by the Open AI API.  \n{% hint style=\"info\" %}\nThis is what a data object looks like in Midio:  \n.png>)\n{% endhint %}  \nImplement the function like this:  \nThe data nodes can be built by adding a 'data object' node from the node palette (space bar), or by pasting the following JSON objects using control-v/cmd-v.  \n{% hint style=\"warning\" %}\nTo paste JSON data into Midio, first copy the JSON to your clipboard as you normally copy text, then click anywhere in the midio node editor, and finally paste using control-/cmd-v. You **shouldn't** open the node palette first, as that would paste the text into the search box and have you create a text object with the JSON value as a text object.\n{% endhint %}  \n```json\n{\n\"Authorization\": \"Bearer <your API Key>\",\n\"content-type\": \"application/json\"\n}\n```  \n```json\n{\n\"messages\": [\n{\n\"content\": \"You perform sentiment analysis on user messages. Return a number between 0 and 10, where 0 represents a very negative sentiment, and 10 represents a very positive sentiment. Return the number and the number only!\",\n\"role\": \"system\"\n},\n{\n\"content\": \"prompt\",\n\"role\": \"user\"\n}\n],\n\"model\": \"gpt-3.5-turbo\",\n\"temperature\": \"0.7\"\n}\n```  \nTo convert the `messages.1.content` item to an input, hover it, and click the 'convert to input'-icon. This will allow you to hook it up to the function input we created earlier.  \n**Add it to the main flow**  \nWe can now use this function in our main flow. Select the 'Main' module from the left side panel. Then add an instance of our new function using the node palette (space bar).  \nWe can now test our flow by sendimg a message to a channel in our slack workspace. Note that we are using the `Std.FormatLog` function to print the resulting sentiment to the log. You can also hover/click on the blue dots appearing on the connections between nodes to inspect the data which has passed through our flow."}
{"file": "README.md", "chunk_id": 5, "content": "### Store in Airtable  \nThe last step of our slack bot, is to store the analysis along with the original message in our airtable database (which you set up here).  \nWe start by creating a new function, like we did in the previous step. Name the function something like 'Store analysis in Airtable'.  \nThe function also uses `Http.FetchUrl` to interact with the API. Implement the function as shown here:  \n{% hint style=\"info\" %}\n```\nNote that the url you pass to `Http.FetchUrl` should be constructed as follows:\n\nhttps://api.airtable.com/v0/<your base id>/<your table id>\n\nIf you navigate to your base in the airtable dashboard, you can get these IDs from the url. For example:\n\nhttps://airtable.com/appzte7M4AptpTo3T/tblg2Z1Th1mKEjc3i/viwWhPV8Uo8zVLbH4?blocks=hide\n<-----base id --> <---table id --->\n\n```\n{% endhint %}  \nThe headers object looks the same as the one we used with OpenAI, but make sure you fill in your Airtable API-key:  \n```json\n{\n\"Authorization\": \"Bearer patl3AnvCPtzEDTOm.3e674e850a1993e30a96e1d890f3a078e4fc44ae1434d66d44d687e365b0d2d9\",\n\"Content-Type\": \"application/json\"\n}\n```  \n```json\n{\n\"records\": [\n{\n\"fields\": {\n\"Message\": \"message\",\n\"Sentiment\": \"sentiment\"\n}\n}\n]\n}\n```  \nFinally, add an instance of this function to the main flow, and hook it up. The final top level code should look like this:  \nNow, write another message in slack to verify that everything works as expected, and that you can see a new row appear in your airtable table."}
{"file": "README.md", "chunk_id": 6, "content": "### A final bug  \nWe've forgotten a small detail, which causes our bot to potentially receive the same event multiple times. Slack expects a '200 OK' response from us, to indicate that the event has been handled, but we currently only do this for the challenge event. Lets respond to normal events as well by adding an instance of `Http.Response` just before we start our sentiment analysis."}
{"file": "slack-setup.md", "chunk_id": 0, "content": "# Slack setup  \nGo to  \nClick create app  \nSelect 'From scratch'.  \nEnter a name for your app, like _midio-slack-bot_, and pick a workspace as an owner of the app.  \nSelect your newly created app from the list, and scroll down to the **'event subscriptions'** menu item in the left menu bar.  \nClick on the switch to enable events for this app.  \nA text box expecting a URL appears; we will fill in this later.  \nScroll down a bit and, expand the **'Subscribe to bot events'** header.  \nClick the **'Add Bot User Event'** button, and select **'message.channels'**.  \nRemember to save your changes by clicking the **'Save changes'** button in the bottom right corner."}
{"file": "airtable-setup.md", "chunk_id": 0, "content": "# Airtable setup  \nCreate an account at , and create a fresh database.  \nThen go to , to create an access token.  \nClick 'Create new token' in the top right corner. Give it a name, and select the 'data.records:read' and 'data.records:write', scopes.  \nChoose your newly created database under 'Access'.  \nClick 'Create token'. Make sure to copy token from the popup, and store it somewhere safe. You won't be able to retrieve the token again, and will have to make a new one if it is lost."}
{"file": "http_extern.midio", "chunk_id": 0, "content": "#### Function 'Url.UrlEncodeFormData'\n\n\n\n## Signature: \n\n extern func UrlEncodeFormData {\n\n        in(name: \"form data\") property(Any) form_data\n\n        out property(String) encoded\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "http_extern.midio", "chunk_id": 1, "content": "#### Function 'Url.UrlEncodeString'\n\n\n\n## Signature: \n\n extern func UrlEncodeString {\n\n        in property(String) string\n\n        out property(String) encoded\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "http_extern.midio", "chunk_id": 2, "content": "#### Function 'Url.UrlDecodeString'\n\n\n\n## Signature: \n\n extern func UrlDecodeString {\n\n        in property(String) encoded\n\n        out property(String) string\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "http_extern.midio", "chunk_id": 3, "content": "#### Function 'Http.Response'\n\nResponds to an http request (`req`) provided by an `Http.Endpoint` event.\n\n## Signature: \n\n extern func(doc: \"Responds to an http request (`req`) provided by an `Http.Endpoint` event.\") Response {\n\n        in trigger(consumes: Http.EndpointContext, ) respond\n\n        out trigger continue\n\n        in(defaultValue: 200) property(Number) status\n\n        in property headers\n\n        in property body\n\n    }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"}
{"file": "http_extern.midio", "chunk_id": 4, "content": "#### Function 'Http.FetchUrl'\n\nPerforms a simple http/https request to the provided `url` and returns the `response` a string or a buffer depending on the value of `resopnseType`, which can be 'text' or 'buffer'. The body input will be converted to json if it is anything other than a String or Null.\n\n## Signature: \n\n extern func(doc: \"Performs a simple http/https request to the provided `url` and returns the `response` a string or a buffer depending on the value of `resopnseType`, which can be 'text' or 'buffer'. The body input will be converted to json if it is anything other than a String or Null.\") FetchUrl {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"url\") property(String) url\n\n        in(x: 0, y: 0, name: \"response type\", editor: \"ComboBox(\\\"text\\\",\\\"json\\\",\\\"buffer\\\")\", defaultValue: \"json\") property(Any) responseType\n\n        in(x: 0, y: 0, name: \"headers\") property headers\n\n        in(x: 0, y: 0, name: \"method\", editor: \"ComboBox(\\\"GET\\\",\\\"POST\\\",\\\"HEAD\\\",\\\"PUT\\\",\\\"DELETE\\\",\\\"CONNECT\\\",\\\"OPTIONS\\\",\\\"TRACE\\\",\\\"PATCH\\\")\", defaultValue: \"GET\") property method\n\n        in(x: 0, y: 0, name: \"body\") property(Any) body\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"response\") property(String) response\n\n        out(x: 0, y: 0, name: \"status\") property(Number) status\n\n        out(x: 0, y: 0, name: \"headers\") property(Headers) headers\n\n        out(x: 0, y: 0, name: \"on error\") trigger() onError\n\n        out(x: 0, y: 0, name: \"error\") property(String) error\n\n    }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"}
{"file": "http_extern.midio", "chunk_id": 5, "content": "#### Function 'Http.GetHttpQueryParam'\n\nReturns the query parameter `name` from a request (`req`) object.\n\n## Signature: \n\n extern func(doc: \"Returns the query parameter `name` from a request (`req`) object.\") GetHttpQueryParam {\n\n        in(x: 0, y: 0, name: \"req\") property req\n\n        in(x: 0, y: 0, name: \"name\") property(String) name\n\n        out(x: 0, y: 0, name: \"value\") property(String) value\n\n    }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"}
{"file": "http_extern.midio", "chunk_id": 6, "content": "#### Function 'Http.HttpListenRoute'\n\n\n\n## Signature: \n\n extern func HttpListenRoute {\n\n        in(x: 0, y: 0, name: \"listen\") trigger() listen\n\n        in(x: 0, y: 0, name: \"path\") property path\n\n        in(x: 0, y: 0, name: \"method\") property method\n\n        out(x: 0, y: 0, name: \"listening\") trigger() listening\n\n        out(x: 0, y: 0, name: \"on request\") trigger(produces: Http.EndpointContext) onRequest\n\n    }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"}
{"file": "http_extern.midio", "chunk_id": 7, "content": "#### Event 'Http.Endpoint'\n\nListens for http requests on the provided `path` and `method`. `path` is an url of the form some/path/, which can be parameterized by :name for path items, and ?query_name&another_query_name for query values. Example: 'user/:name?email&joined_date' This creates `name`, `email` and `joined_date` output properties that one can use to get these values from the request. NOTE: All endpoints currently shares a single http server.\n\n## Signature: \n\n extern event(doc: \"Listens for http requests on the provided `path` and `method`. `path` is an url of the form some/path/, which can be parameterized by :name for path items, and ?query_name&another_query_name for query values. Example: 'user/:name?email&joined_date' This creates `name`, `email` and `joined_date` output properties that one can use to get these values from the request. NOTE: All endpoints currently shares a single http server.\") Endpoint {\n\n        parameter(\n\n            compilerPlugin: \"Url\",\n\n            defaultValue: \"/\"\n\n        ) path\n\n        parameter(\n\n            editor: \"ComboBox(\\\"GET\\\",\\\"POST\\\",\\\"HEAD\\\",\\\"PUT\\\",\\\"DELETE\\\",\\\"CONNECT\\\",\\\"OPTIONS\\\",\\\"TRACE\\\",\\\"PATCH\\\")\",\n\n            defaultValue: \"GET\"\n\n        ) method\n\n        parameter(\n\n            editor: \"ComboBox(\\\"text\\\",\\\"buffer\\\")\",\n\n            defaultValue: \"text\",\n\n            name: \"body type\",\n\n        ) accept\n\n        out(name: \"on request\") trigger(produces: Http.EndpointContext) onRequest\n\n        out() property headers\n\n        out() property body\n\n    }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"}
{"file": "http_extern.midio", "chunk_id": 8, "content": "#### Function 'Http.Client.OpenNetworkStream'\n\nOpens a new network stream.\n\n## Signature: \n\n extern func(doc: \"Opens a new network stream.\") OpenNetworkStream {\n\n            in trigger open\n\n            in(editor: \"ComboBox(\\\"tcp\\\",\\\"tls\\\")\") property(NetworkStreamKind) kind\n\n            in property(String) url\n\n            in property(Number) port\n\n            out trigger(produces: Http.Client.ClientConnection) connected\n\n            out trigger failed\n\n            out property(String) error\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque"}
{"file": "http_extern.midio", "chunk_id": 9, "content": "#### Function 'Http.Client.CreateRequest'\n\n\n\n## Signature: \n\n extern func CreateRequest {\n\n            in property(String) path\n\n            in property(Http.Method) method\n\n            in property(Http.Headers) headers\n\n            in property(String or Null) body\n\n            out property(Http.Client.Request) request\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"}
{"file": "http_extern.midio", "chunk_id": 10, "content": "#### Function 'Http.Client.StringifyRequest'\n\n\n\n## Signature: \n\n extern func StringifyRequest {\n\n            in property(Http.Client.Request) request\n\n            out property(String) request\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"}
{"file": "http_extern.midio", "chunk_id": 11, "content": "#### Function 'Http.Client.SendRequest'\n\n\n\n## Signature: \n\n extern func SendRequest {\n\n            in trigger(borrows: Http.Client.ClientConnection) send\n\n            in property(Http.Client.Request) request\n\n            out(name: \"on response\") trigger(produces: Http.Client.Response) onResponse\n\n            out trigger failed\n\n            out property(String) error\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"}
{"file": "http_extern.midio", "chunk_id": 12, "content": "#### Function 'Http.Client.ResponseStatus'\n\n\n\n## Signature: \n\n extern func ResponseStatus {\n\n            in trigger(borrows: Http.Client.Response) get\n\n            out trigger continue\n\n            out property(Number) status\n\n            out(name: \"status text\") property(String) statusText\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"}
{"file": "http_extern.midio", "chunk_id": 13, "content": "#### Function 'Http.Client.ResponseHeaders'\n\n\n\n## Signature: \n\n extern func ResponseHeaders {\n\n            in trigger(borrows: Http.Client.Response) get\n\n            out trigger continue\n\n            out property(Http.Headers) headers\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"}
{"file": "http_extern.midio", "chunk_id": 14, "content": "#### Function 'Http.Client.ResponseBody'\n\n\n\n## Signature: \n\n extern func ResponseBody {\n\n            in trigger(borrows: Http.Client.Response) get\n\n            in(x: 0, y: 0, name: \"response type\", editor: \"ComboBox(\\\"text\\\",\\\"buffer\\\")\") property(String) responseType\n\n            out trigger continue\n\n            out property(Http.Client.Body) body\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"}
{"file": "http_extern.midio", "chunk_id": 15, "content": "#### Function 'Http.Client.ResponseBodyStream'\n\nStreams content from a response body as descrete events.\n\n## Signature: \n\n extern func(doc: \"Streams content from a response body as descrete events.\") ResponseBodyStream {\n\n            in(name: \"next frame\") trigger(borrows: Http.Client.Response) nextFrame\n\n            in(x: 0, y: 0, name: \"response type\", editor: \"ComboBox(\\\"text\\\",\\\"buffer\\\")\") property(String) responseType\n\n            out(name: \"on data\") trigger onData\n\n            out property(String) data\n\n            out(name: \"on done\") trigger onDone\n\n            out trigger failed\n\n            out property(String) error\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"}
{"file": "http_extern.midio", "chunk_id": 16, "content": "#### Function 'Http.Server.BindNetworkListener'\n\nBinds a new network listener. If `port` is Null, the OS will assign a port number to the listener.\n\n## Signature: \n\n extern func(doc: \"Binds a new network listener. If `port` is Null, the OS will assign a port number to the listener.\") BindNetworkListener {\n\n            in trigger open\n\n            in(editor: \"ComboBox(\\\"tcp\\\")\") property(Http.Server.NetworkListenerKind) kind\n\n            in property(String) addr\n\n            in property(Number or Null) port\n\n            out(name: \"listener bound\") trigger(produces: Http.Server.NetworkListener) listenerBound\n\n            out(name: \"bound address\") property(String) boundAddr\n\n            out(name: \"bound port\") property(Number) boundPort\n\n            out(name: \"on error\") trigger onError\n\n            out property(String) error\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"}
{"file": "http_extern.midio", "chunk_id": 17, "content": "#### Function 'Http.Server.AcceptConnections'\n\nStarts accepting incoming connections on the provided `NetworkListener`. The process is forked for each accepted connection.\n\n## Signature: \n\n extern func(doc: \"Starts accepting incoming connections on the provided `NetworkListener`. The process is forked for each accepted connection.\") AcceptConnections {\n\n            in trigger(consumes: Http.Server.NetworkListener) accept\n\n            out(name: \"listener started\") trigger listenerStarted\n\n            out(name: \"client connected\") trigger(produces: Http.Server.Request) clientConnected\n\n            out(name: \"on error\") trigger onError\n\n            out property(String) error\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"}
{"file": "http_extern.midio", "chunk_id": 18, "content": "#### Function 'Http.Server.RequestInfo'\n\n\n\n## Signature: \n\n extern func RequestInfo {\n\n            in trigger(borrows: Http.Server.Request) get\n\n            out trigger continue\n\n            out property(Http.Method) method\n\n            out property(Http.Url) url\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"}
{"file": "http_extern.midio", "chunk_id": 19, "content": "#### Function 'Http.Server.RequestBody'\n\n\n\n## Signature: \n\n extern func RequestBody {\n\n            in trigger(borrows: Http.Server.Request) get\n\n            in(x: 0, y: 0, name: \"response type\", editor: \"ComboBox(\\\"text\\\",\\\"buffer\\\")\") property(String) requestType\n\n            out trigger continue\n\n            out property(Http.Server.Body) body\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"}
{"file": "http_extern.midio", "chunk_id": 20, "content": "#### Function 'Http.Server.CreateResponse'\n\n\n\n## Signature: \n\n extern func CreateResponse {\n\n            in(name: \"status\") property(Http.Server.Status) Status\n\n            in property(Http.Headers) headers\n\n            in property(String or Null) body\n\n            out property(Http.Server.Response) response\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"}
{"file": "http_extern.midio", "chunk_id": 21, "content": "#### Function 'Http.Server.SendResponse'\n\n\n\n## Signature: \n\n extern func SendResponse {\n\n            in trigger(borrows: Http.Server.Request) execute\n\n            in property(Http.Server.Response) response\n\n            out trigger continue\n\n            out property(Http.Server.Body) body\n\n        }\n\n## Custom types in scope: \n\n type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"}
{"file": "std_extern.midio", "chunk_id": 22, "content": "#### Function 'Std.CallFunction'\n\nCalls the supplied `handler` function using list of arguments supplied to `inputs`.\n\n## Signature: \n\n extern func(doc: \"Calls the supplied `handler` function using list of arguments supplied to `inputs`.\") CallFunction {\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"inputs\") property inputs\n\n        out(x: 0, y: 0, name: \"outputs\") property outputs\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 23, "content": "#### Function 'Std.OrElse'\n\nReturn `first` if it is not null, otherwise `second`.\n\n## Signature: \n\n extern func(doc: \"Return `first` if it is not null, otherwise `second`.\") OrElse {\n\n        in(x: 0, y: 0, name: \"first\") property(Any) first\n\n        in(x: 0, y: 0, name: \"second\") property(Any) second\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 24, "content": "#### Function 'Std.Switch'\n\nPropagates the first value if the first trigger is called, other wise propagates the second value.\n\n## Signature: \n\n extern func(doc: \"Propagates the first value if the first trigger is called, other wise propagates the second value.\") Switch {\n\n        in(x: 0, y: 0, name: \"on first\") trigger() onFirst\n\n        in(x: 0, y: 0, name: \"on second\") trigger() onSecond\n\n        in(x: 0, y: 0, name: \"first\") property(Any) first\n\n        in(x: 0, y: 0, name: \"second\") property(Any) second\n\n        out(x: 0, y: 0, name: \"continue first\") trigger() continueFirst\n\n        out(x: 0, y: 0, name: \"continue second\") trigger() continueSecond\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 25, "content": "#### Function 'Std.GenerateUuid'\n\nGenerates a uuid\n\n## Signature: \n\n extern func(doc: \"Generates a uuid\") GenerateUuid {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"uuid\") property uuid\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 26, "content": "#### Function 'Std.Delay'\n\nPauses execution for `delayFor` ms. All execution is blocked during this time.\n\n## Signature: \n\n extern func(doc: \"Pauses execution for `delayFor` ms. All execution is blocked during this time.\") Delay {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"delay for\") property(Number) delayFor\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 27, "content": "#### Function 'Std.Relay'\n\nSimple makes the `input` value available on the `value` output to multiple consumers. Since this is an executable function, the input value will be cached, so `Relay` can be used for simple caching of expensive computations\n\n## Signature: \n\n extern func(doc: \"Simple makes the `input` value available on the `value` output to multiple consumers. Since this is an executable function, the input value will be cached, so `Relay` can be used for simple caching of expensive computations\") Relay {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"input\") property(Any) input\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 28, "content": "#### Function 'Std.Constant'\n\nMakes the `value` parameter available on the `value` output.\n\n## Signature: \n\n extern func(doc: \"Makes the `value` parameter available on the `value` output.\") Constant {\n\n        parameter value\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 29, "content": "#### Function 'Std.Log'\n\nWrite `input` to the Log panel.\n\n## Signature: \n\n extern func(doc: \"Write `input` to the Log panel.\") Log {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"input\") property(Any) input\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 30, "content": "#### Function 'Std.FormatLog'\n\nLogs a formatted string to the log window, letting you replace {{input name}} with string content.\n\n## Signature: \n\n extern func(doc: \"Logs a formatted string to the log window, letting you replace {{input name}} with string content.\") FormatLog {\n\n        parameter(compilerPlugin: \"TemplateString\") formatString\n\n\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 31, "content": "#### Function 'Std.ToString'\n\nConverts any `input` type to a String.\n\n## Signature: \n\n extern func(doc: \"Converts any `input` type to a String.\") ToString {\n\n        in(x: 0, y: 0, name: \"input\") property(Any) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 32, "content": "#### Function 'Std.If'\n\nIf `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.\n\n## Signature: \n\n extern func(doc: \"If `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.\") If {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"input\") property(Bool) predicate\n\n        out(x: 0, y: 0, name: \"then\") trigger() then\n\n        out(x: 0, y: 0, name: \"else\") trigger() else\n\n        out(x: 0, y: 0, name: \"value\") property(Bool) value\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 33, "content": "#### Function 'Std.IfExpression'\n\nIfExpression is a function that allows you to create a conditional expression using a simple expression language provided through the `expression` parameter. Example: `a > b ? a : b` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `value` output.\n\n## Signature: \n\n extern func(doc: \"IfExpression is a function that allows you to create a conditional expression using a simple expression language provided through the `expression` parameter. Example: `a > b ? a : b` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `value` output.\") IfExpression {\n\n        parameter(\n\n            compilerPlugin: \"Expression\",\n\n            defaultValue: \"\",\n\n        ) expression\n\n\n\n        in trigger execute\n\n        out trigger then\n\n        out trigger else\n\n        out property(Bool) value\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 34, "content": "#### Function 'Std.Choose'\n\nIf `predicate` is true, the `value` output will have the value of `then`, otherwise, it will have the value of `else`.\n\n## Signature: \n\n extern func(doc: \"If `predicate` is true, the `value` output will have the value of `then`, otherwise, it will have the value of `else`.\") Choose {\n\n        in property(Bool) predicate\n\n        in property(Any) then\n\n        in property(Any) else\n\n        out property(Any) value\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 35, "content": "#### Function 'Std.Match'\n\nSwitches on the values provided to the `cases` parameter, which accepts a list of values. For each value, an output trigger is created, which is triggered when the `value` property matches that list item.\n\n## Signature: \n\n extern func(doc: \"Switches on the values provided to the `cases` parameter, which accepts a list of values. For each value, an output trigger is created, which is triggered when the `value` property matches that list item.\") Match {\n\n        parameter(\n\n            compilerPlugin: \"Match\",\n\n            defaultValue: [\"\"],\n\n            editor: \"List\"\n\n        ) cases\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"value\") property value\n\n        out(x: 0, y: 0, name: \"no match\") trigger() noMatch\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 36, "content": "#### Function 'Std.TypeOf'\n\nReturns the type of `value` as a String.\n\n## Signature: \n\n extern func(doc: \"Returns the type of `value` as a String.\") TypeOf {\n\n        in(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"type name\") property(String) typeName\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 37, "content": "#### Function 'Std.PWD'\n\nReturns the path of the working directory.\n\n## Signature: \n\n extern func(doc: \"Returns the path of the working directory.\") PWD {\n\n        out(x: 0, y: 0, name: \"current directory\") property(String) currentDirectory\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 38, "content": "#### Function 'Std.IterRange'\n\nCreate a new process for each index in a range, executing the `onItem` trigger for each of them, with a corresponding `index`.\n\n## Signature: \n\n extern func(doc: \"Create a new process for each index in a range, executing the `onItem` trigger for each of them, with a corresponding `index`.\") IterRange {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"from\") property from\n\n        in(x: 0, y: 0, name: \"to\") property to\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"iteration\") trigger() iteration\n\n        out(x: 0, y: 0, name: \"index\") property index\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 39, "content": "#### Function 'Std.IterList'\n\nCreate a new process for each item in a list, executing the `onItem` trigger for each of them, with a corresponding `item`.\n\n## Signature: \n\n extern func(doc: \"Create a new process for each item in a list, executing the `onItem` trigger for each of them, with a corresponding `item`.\") IterList {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"on item\") trigger() onItem\n\n        out(x: 0, y: 0, name: \"item\") property item\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 40, "content": "#### Function 'Std.Fork'\n\nForks to current process by copying its entire state. The current process continues through the `continue` output trigger, while the forked process continues throug the `forked` output trigger, but in a new process.\n\n## Signature: \n\n extern func(doc: \"Forks to current process by copying its entire state. The current process continues through the `continue` output trigger, while the forked process continues throug the `forked` output trigger, but in a new process.\") Fork {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"forked\") trigger() forked\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 41, "content": "#### Function 'Std.ProcessId'\n\nGets the process id of the executing process.\n\n## Signature: \n\n extern func(doc: \"Gets the process id of the executing process.\") ProcessId {\n\n        out(x: 0, y: 0, name: \"pid\") property pid\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 42, "content": "#### Function 'Std.Count'\n\nCount can be used to make sure a loop in a flow only runs for a certain number of iteartions. The `reset` input trigger resets the count, and the `count` trigger is used to increment it.\n\n## Signature: \n\n extern func(doc: \"Count can be used to make sure a loop in a flow only runs for a certain number of iteartions. The `reset` input trigger resets the count, and the `count` trigger is used to increment it.\") Count {\n\n        in(x: 0, y: 0, name: \"reset\") trigger() reset\n\n        in(x: 0, y: 0, name: \"count\") trigger(consumes: Std.CountContext, ) count\n\n        in(x: 0, y: 0, name: \"iterations\") property(Number) iterations\n\n        out(x: 0, y: 0, name: \"on count\") trigger(produces: Std.CountContext) onCount\n\n        out(x: 0, y: 0, name: \"done\") trigger() done\n\n        out(x: 0, y: 0, name: \"interation\") property(Number) interation\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 43, "content": "#### Function 'Std.For'\n\nFor is a loop construct that can be used to iterate over a list of items. The `trigger` input is used to start the loop, the `reset` input is used to reset the loop, and the `next` input is used to move to the next item in the list. The `items` input is used to provide the list of items to iterate over. The `on item` output trigger is used to signal that an item has been processed, the `done` output trigger is used to signal that the loop has finished, the `item` output property is used to provide the current item, and the `index` output property is used to provide the current index.\n\n## Signature: \n\n extern func(doc: \"For is a loop construct that can be used to iterate over a list of items. The `trigger` input is used to start the loop, the `reset` input is used to reset the loop, and the `next` input is used to move to the next item in the list. The `items` input is used to provide the list of items to iterate over. The `on item` output trigger is used to signal that an item has been processed, the `done` output trigger is used to signal that the loop has finished, the `item` output property is used to provide the current item, and the `index` output property is used to provide the current index.\") For {\n\n        in trigger() reset\n\n        in trigger(consumes: Number) next\n\n        in property(List) items\n\n        out(name: \"on item\") trigger(produces: Number) onItem\n\n        out trigger done\n\n        out property(Any) item\n\n        out property(Number) index\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 44, "content": "#### Event 'Std.Start'\n\nAn event which is triggered as soon as the engine starts.\n\n## Signature: \n\n extern event(doc: \"An event which is triggered as soon as the engine starts.\") Start {\n\n        out(name: \"on start\") trigger() onStart\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 45, "content": "#### Function 'Std.Stop'\n\n\n\n## Signature: \n\n extern func Stop {\n\n        in trigger stop\n\n        in(name: \"exit code\") property(Number) exitCode\n\n    }\n\n## Custom types in scope: \n\n type CountContext Number\ntype AnyContext Any"}
{"file": "std_extern.midio", "chunk_id": 46, "content": "#### Function 'ConsumeContext'\n\nConsumes the context of the `execute` trigger, and makes it available as an output through `value`.\n\n## Signature: \n\n extern func(doc: \"Consumes the context of the `execute` trigger, and makes it available as an output through `value`.\") ConsumeContext {\n\n        in trigger(consumes: AnyContext) execute\n\n        out trigger continue\n\n        out property(Any) value\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Number\") IsNumber {\n\n        in property(Any) input\n\n        out(name: \"is number\") property(Bool) isNumber\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Bool\") IsBool {\n\n        in property(Any) input\n\n        out(name: \"is bool\") property(Bool) isBool\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is String\") IsString {\n\n        in property(Any) input\n\n        out(name: \"is string\") property(Bool) isString\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Null\") IsNull {\n\n        in property(Any) input\n\n        out(name: \"is null\") property(Bool) isNull\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is not Null\") NotNull {\n\n        in property(Any) input\n\n        out(name: \"not null\") property(Bool) notNull\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is List\") IsList {\n\n        in property(Any) input\n\n        out(name: \"is list\") property(Bool) isList\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Map\") IsMap {\n\n        in property(Any) input\n\n        out(name: \"is map\") property(Bool) isMap\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Buffer\") IsBuffer {\n\n        in property(Any) input\n\n        out(name: \"is buffer\") property(Bool) isBuffer\n\n    }\n\n\n\n    extern func(buildTag: \"panic\", doc: \"Causes a native panic to occur with the provided message.\") Panic {\n\n        in trigger execute\n\n        in property message\n\n        out trigger continue\n\n    }\n\n}\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 47, "content": "#### Function 'Time.Now'\n\nGives the current time in nano seconds\n\n## Signature: \n\n extern func(doc: \"Gives the current time in nano seconds\") Now {\n\n        out property(Number) time\n\n    }\n\n## Custom types in scope: \n\n type DateTime Opaque"}
{"file": "std_extern.midio", "chunk_id": 48, "content": "#### Function 'Time.DateNow'\n\nGives the current time as a `DateTime` object\n\n## Signature: \n\n extern func(doc: \"Gives the current time as a `DateTime` object\") DateNow {\n\n        out property(DateTime) date\n\n    }\n\n## Custom types in scope: \n\n type DateTime Opaque"}
{"file": "std_extern.midio", "chunk_id": 49, "content": "#### Function 'Time.Parse'\n\nParses an RFC 3339 and ISO 8601 date and time string such as 1996-12-19T16:39:57-08:00.\n\n## Signature: \n\n extern func(doc: \"Parses an RFC 3339 and ISO 8601 date and time string such as 1996-12-19T16:39:57-08:00.\") Parse {\n\n        in(x: 0, y: 0, name: \"date string\") property(String) dateString\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }\n\n## Custom types in scope: \n\n type DateTime Opaque"}
{"file": "std_extern.midio", "chunk_id": 50, "content": "#### Function 'Time.Format'\n\nFormats a time value as a string using the given format string (as defined in https://docs.rs/chrono/latest/chrono/format/strftime/index.html).\n\n## Signature: \n\n extern func(doc: \"Formats a time value as a string using the given format string (as defined in https://docs.rs/chrono/latest/chrono/format/strftime/index.html).\") Format {\n\n        in(x: 0, y: 0, name: \"time\") property(DateTime) time\n\n        in(x: 0, y: 0, name: \"format\") property(String) format\n\n        out(x: 0, y: 0, name: \"date string\") property(String) dateString\n\n    }\n\n## Custom types in scope: \n\n type DateTime Opaque"}
{"file": "std_extern.midio", "chunk_id": 51, "content": "#### Function 'Time.AddSeconds'\n\nAdds the given amount of `seconds` to the provided `time` object\n\n## Signature: \n\n extern func(doc: \"Adds the given amount of `seconds` to the provided `time` object\") AddSeconds {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"seconds\") property(Number) seconds\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }\n\n## Custom types in scope: \n\n type DateTime Opaque"}
{"file": "std_extern.midio", "chunk_id": 52, "content": "#### Function 'Time.AddMinutes'\n\nAdds the given amount of `minutes` to the provided `time` object\n\n## Signature: \n\n extern func(doc: \"Adds the given amount of `minutes` to the provided `time` object\") AddMinutes {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"minutes\") property(Number) minutes\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }\n\n## Custom types in scope: \n\n type DateTime Opaque"}
{"file": "std_extern.midio", "chunk_id": 53, "content": "#### Function 'Time.AddHours'\n\nAdds the given amount of `hours` to the provided `time` object\n\n## Signature: \n\n extern func(doc: \"Adds the given amount of `hours` to the provided `time` object\") AddHours {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"hours\") property(Number) hours\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }\n\n## Custom types in scope: \n\n type DateTime Opaque"}
{"file": "std_extern.midio", "chunk_id": 54, "content": "#### Function 'Time.AddDays'\n\nAdds the given amount of `days` to the provided `time` object\n\n## Signature: \n\n extern func(doc: \"Adds the given amount of `days` to the provided `time` object\") AddDays {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"days\") property(Number) days\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }\n\n## Custom types in scope: \n\n type DateTime Opaque"}
{"file": "std_extern.midio", "chunk_id": 55, "content": "#### Function 'Time.AddWeeks'\n\nAdds the given amount of `weeks` to the provided `time` object\n\n## Signature: \n\n extern func(doc: \"Adds the given amount of `weeks` to the provided `time` object\") AddWeeks {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"weeks\") property(Number) weeks\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }\n\n## Custom types in scope: \n\n type DateTime Opaque"}
{"file": "std_extern.midio", "chunk_id": 56, "content": "#### Function 'Strings.Empty'\n\nCreates a new, empty string.\n\n## Signature: \n\n extern func(doc: \"Creates a new, empty string.\") Empty {\n\n        out property(String) empty\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 57, "content": "#### Function 'Strings.Concat'\n\nConcatenates the values in `left` and `right` as strings, making it available on the `result` output.\n\n## Signature: \n\n extern func(doc: \"Concatenates the values in `left` and `right` as strings, making it available on the `result` output.\") Concat {\n\n        in(x: 0, y: 0, name: \"left\") property(String) left\n\n        in(x: 0, y: 0, name: \"right\") property(String) right\n\n        out(x: 0, y: 0, name: \"result\") property(String) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 58, "content": "#### Function 'Strings.Template'\n\nCreates a string template letting you replace {{input name}} with string content.\n\n## Signature: \n\n extern func(doc: \"Creates a string template letting you replace {{input name}} with string content.\") Template {\n\n        parameter(compilerPlugin: \"TemplateString\") template\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 59, "content": "#### Function 'Strings.Length'\n\nReturns the length of the string `input`.\n\n## Signature: \n\n extern func(doc: \"Returns the length of the string `input`.\") Length {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"length\") property(Number) length\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 60, "content": "#### Function 'Strings.Substring'\n\nReturns the substring of `input` starting at `start` and ending at `end`. If `end` is not provided, the substring will be from `start` to the end of the string.\n\n## Signature: \n\n extern func(doc: \"Returns the substring of `input` starting at `start` and ending at `end`. If `end` is not provided, the substring will be from `start` to the end of the string.\") Substring {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        in(x: 0, y: 0, name: \"start\") property(Number) start\n\n        in(x: 0, y: 0, name: \"end\") property(Number) end\n\n        out(x: 0, y: 0, name: \"substring\") property(String) substring\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 61, "content": "#### Function 'Strings.Replace'\n\nReturns the string `input` with all occurrences of `search` replaced with `replace`.\n\n## Signature: \n\n extern func(doc: \"Returns the string `input` with all occurrences of `search` replaced with `replace`.\") Replace {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        in(x: 0, y: 0, name: \"search\") property(String) search\n\n        in(x: 0, y: 0, name: \"replace\") property(String) replace\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 62, "content": "#### Function 'Strings.ToLower'\n\nReturns the string `input` with all characters converted to lowercase.\n\n## Signature: \n\n extern func(doc: \"Returns the string `input` with all characters converted to lowercase.\") ToLower {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 63, "content": "#### Function 'Strings.ToUpper'\n\nReturns the string `input` with all characters converted to uppercase.\n\n## Signature: \n\n extern func(doc: \"Returns the string `input` with all characters converted to uppercase.\") ToUpper {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 64, "content": "#### Function 'Strings.IsLowerCase'\n\nReturns true is all characters in `input` are lower case.\n\n## Signature: \n\n extern func(doc: \"Returns true is all characters in `input` are lower case.\") IsLowerCase {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 65, "content": "#### Function 'Strings.IsUpperCase'\n\nReturns true is all characters in `input` are upper case.\n\n## Signature: \n\n extern func(doc: \"Returns true is all characters in `input` are upper case.\") IsUpperCase {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 66, "content": "#### Function 'Strings.Trim'\n\nReturns a trimmed version of `input` where leading an trailing whitespace is removed.\n\n## Signature: \n\n extern func(doc: \"Returns a trimmed version of `input` where leading an trailing whitespace is removed.\") Trim {\n\n        in property(String) input\n\n        out property(String) trimmed\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 67, "content": "#### Function 'Strings.Join'\n\nCombines each string in `string list` by placing `separator` between them.\n\n## Signature: \n\n extern func(doc: \"Combines each string in `string list` by placing `separator` between them.\") Join {\n\n        in(x: 0, y: 0, name: \"string list\") property(Any) strings\n\n        in(x: 0, y: 0, name: \"separator\") property(String or Null) separator\n\n        out(x: 0, y: 0, name: \"result\") property(String) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 68, "content": "#### Function 'Strings.Split'\n\n\n\n## Signature: \n\n extern func Split {\n\n        in property(String) string\n\n        in(name: \"split on\") property(String) splitOn\n\n\n\n        out property(List) strings\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 69, "content": "#### Function 'Strings.Regex.FirstMatch'\n\nReturns the first match for the provided regex `pattern` matching on `input`. For each capture group, a separate output property is created.\n\n## Signature: \n\n extern func(doc: \"Returns the first match for the provided regex `pattern` matching on `input`. For each capture group, a separate output property is created.\") FirstMatch {\n\n            parameter(compilerPlugin: \"Regex\", aiSystemPrompt: \"\n\n                You will generate a regex pattern based on the users prompt, and only return the generated pattern. Here are some examples:\n\n\n\n                prompt: Find all the words in the sentence which start with the letter 'a'\n\n                pattern: \\\\b[aA]\\\\w+\\\\b\n\n\n\n                prompt: Find all the words in the sentence which end with the letter 'a'\n\n                pattern: \\\\b\\\\w+[aA]\\\\b\n\n\n\n                prompt: Match all email addresses and capture the username and domain\n\n                pattern: (\\\\w+)@(\\\\w+.\\\\w+)\n\n            \") pattern\n\n\n\n            in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n            in(x: 0, y: 0, name: \"input\") property(String) input\n\n\n\n            out(x: 0, y: 0, name: \"found match\") trigger() foundMatch\n\n            out(x: 0, y: 0, name: \"no match\") trigger() noMatch\n\n        }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 70, "content": "#### Function 'Strings.Regex.AllMatches'\n\nReturns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.\n\n## Signature: \n\n extern func(doc: \"Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.\") AllMatches {\n\n            parameter(aiSystemPrompt: \"\n\n                You will generate a regex pattern based on the users prompt, and only return the generated pattern. Here are some examples:\n\n\n\n                prompt: Find all the words in the sentence which start with the letter 'a'\n\n                pattern: \\\\b[aA]\\\\w+\\\\b\n\n\n\n                prompt: Find all the words in the sentence which end with the letter 'a'\n\n                pattern: \\\\b\\\\w+[aA]\\\\b\n\n\n\n                prompt: Match all email addresses and capture the username and domain\n\n                pattern: (\\\\w+)@(\\\\w+.\\\\w+)\n\n            \") pattern\n\n            in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n            in(x: 0, y: 0, name: \"input\") property(String) input\n\n            out(x: 0, y: 0, name: \"continue\") trigger() foundMatches\n\n            out property(List) matches\n\n        }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 71, "content": "#### Function 'Strings.AllMatchesWithRange'\n\nReturns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.\n\n## Signature: \n\n extern func(doc: \"Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.\") AllMatchesWithRange {\n\n            parameter(aiSystemPrompt: \"\n\n                You will generate a regex pattern based on the users prompt, and only return the generated pattern. Here are some examples:\n\n\n\n                prompt: Find all the words in the sentence which start with the letter 'a'\n\n                pattern: \\\\b[aA]\\\\w+\\\\b\n\n\n\n                prompt: Find all the words in the sentence which end with the letter 'a'\n\n                pattern: \\\\b\\\\w+[aA]\\\\b\n\n\n\n                prompt: Match all email addresses and capture the username and domain\n\n                pattern: (\\\\w+)@(\\\\w+.\\\\w+)\n\n            \") pattern\n\n            in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n            in(x: 0, y: 0, name: \"input\") property(String) input\n\n            out(x: 0, y: 0, name: \"continue\") trigger() foundMatches\n\n            out property(List) matches\n\n        }\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 72, "content": "#### Function 'Strings.IsNumeric'\n\nReturns true if `input` is a numeric string.\n\n## Signature: \n\n extern func(doc: \"Returns true if `input` is a numeric string.\") IsNumeric {\n\n        in property(String) input\n\n        out(name: \"is numeric\") property(Bool) isNumeric\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 73, "content": "#### Function 'Strings.IsAlphabetic'\n\n\n\n## Signature: \n\n extern func IsAlphabetic {\n\n        in property(String) input\n\n        out(name: \"is alphanumeric\") property(Bool) isAlphanumeric\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 74, "content": "#### Function 'Strings.IsAlphaNumeric'\n\n\n\n## Signature: \n\n extern func IsAlphaNumeric {\n\n        in property(String) input\n\n        out property(Bool) isAlphaNumeric\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 75, "content": "#### Function 'Strings.IsWhitespace'\n\n\n\n## Signature: \n\n extern func IsWhitespace {\n\n        in property(String) input\n\n        out(name: \"is whitespace\") property(Bool) isWhitespace\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 76, "content": "#### Function 'Strings.IsEmpty'\n\n\n\n## Signature: \n\n extern func IsEmpty {\n\n        in property(String) input\n\n        out(name: \"is empty\") property(Bool) isEmpty\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 77, "content": "#### Function 'Strings.Reversed'\n\n\n\n## Signature: \n\n extern func Reversed {\n\n        in property(String) input\n\n        out property(String) reversed\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 78, "content": "#### Function 'Strings.MatchIndices'\n\nReturns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at.\n\n## Signature: \n\n extern func(doc: \"Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at.\") MatchIndices {\n\n        in property(String) input\n\n        in property(String) pattern\n\n        out property(List) indicesOfMatches\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 79, "content": "#### Function 'Strings.RightMatchIndices'\n\nReturns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at, yielded in reverse order.\n\n## Signature: \n\n extern func(doc: \"Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at, yielded in reverse order.\") RightMatchIndices {\n\n        in property(String) input\n\n        in property(String) pattern\n\n        out property(List) indicesOfMatches\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 80, "content": "#### Function 'Strings.Characters'\n\nReturns a list of characters in `input`, though the output 'characters' list.\n\n## Signature: \n\n extern func(doc: \"Returns a list of characters in `input`, though the output 'characters' list.\") Characters {\n\n        in property(String) input\n\n        out property(List) characters\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 81, "content": "#### Function 'Strings.Contains'\n\nReturns true if `input` contains `contains` as a substring.\n\n## Signature: \n\n extern func(doc: \"Returns true if `input` contains `contains` as a substring.\") Contains {\n\n        in property(String) input\n\n        in property(String) contains\n\n        out property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 82, "content": "#### Function 'Testing.AssertEqual'\n\nAsserts that `expected` and `actual` are equal. The equality check is a deep check, where objects are traversed and matched against each other. `testId` identifies which test this assert is run under, and is provided by the `Testing.Test` event.\n\n## Signature: \n\n extern func(doc: \"Asserts that `expected` and `actual` are equal. The equality check is a deep check, where objects are traversed and matched against each other. `testId` identifies which test this assert is run under, and is provided by the `Testing.Test` event.\") AssertEqual {\n\n        in(x: 0, y: 0, name: \"execute\") trigger(borrows: Testing.TestContext) execute\n\n        in(x: 0, y: 0, name: \"expect\") property expect\n\n        in(x: 0, y: 0, name: \"actual\") property actual\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n type TestContext Any"}
{"file": "std_extern.midio", "chunk_id": 83, "content": "#### Function 'Testing.AssertTrue'\n\n\n\n## Signature: \n\n extern func AssertTrue {\n\n        in(x: 0, y: 0, name: \"execute\") trigger(borrows: Testing.TestContext) execute\n\n        in(x: 0, y: 0, name: \"actual\") property value\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n type TestContext Any"}
{"file": "std_extern.midio", "chunk_id": 84, "content": "#### Function 'Testing.AssertFalse'\n\n\n\n## Signature: \n\n extern func AssertFalse {\n\n        in(x: 0, y: 0, name: \"execute\") trigger(borrows: Testing.TestContext) execute\n\n        in(x: 0, y: 0, name: \"actual\") property value\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n type TestContext Any"}
{"file": "std_extern.midio", "chunk_id": 85, "content": "#### Function 'Testing.Fail'\n\nCauses the test identified by `testId` to fail.\n\n## Signature: \n\n extern func(doc: \"Causes the test identified by `testId` to fail.\") Fail {\n\n        in(x: 0, y: 0, name: \"execute\") trigger(borrows: Testing.TestContext) execute\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }\n\n## Custom types in scope: \n\n type TestContext Any"}
{"file": "std_extern.midio", "chunk_id": 86, "content": "#### Event 'Testing.Test'\n\nCreates a test, which can be run using the cli tool. `id` is used by `Testing.AssertEqual` to identify the running test.\n\n## Signature: \n\n extern event(doc: \"Creates a test, which can be run using the cli tool. `id` is used by `Testing.AssertEqual` to identify the running test.\") Test {\n\n        parameter(defaultValue: \"Test name\") name\n\n        out(name: \"on run\") trigger(produces: Testing.TestContext) onRun\n\n    }\n\n## Custom types in scope: \n\n type TestContext Any"}
{"file": "std_extern.midio", "chunk_id": 87, "content": "#### Function 'Data.GetData'\n\nReturns the `data` stored under `key` if the key exists. If the key is present, the `onData` trigger is executed, otherwise the `keyNotFound` trigger is executed.\n\n## Signature: \n\n extern func(doc: \"Returns the `data` stored under `key` if the key exists. If the key is present, the `onData` trigger is executed, otherwise the `keyNotFound` trigger is executed.\") GetData {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        out(x: 0, y: 0, name: \"on data\") trigger() onData\n\n        out(x: 0, y: 0, name: \"keyNotFound\") trigger() keyNotFound\n\n        out(x: 0, y: 0, name: \"data\") property(Any) data\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 88, "content": "#### Function 'Data.SetData'\n\nAssociates a `value` with a string `key`, and also passes on a copy of the inserted data through the `inserted_value` output.\n\n## Signature: \n\n extern func(doc: \"Associates a `value` with a string `key`, and also passes on a copy of the inserted data through the `inserted_value` output.\") SetData {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        in(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"inserted value\") property inserted_value\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 89, "content": "#### Function 'Data.RemoveData'\n\nRemoves the data at `key`\n\n## Signature: \n\n extern func(doc: \"Removes the data at `key`\") RemoveData {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 90, "content": "#### Event 'Data.OnData'\n\nAllows one to get an event whenever data on a `key` is added, removed or updated.\n\n## Signature: \n\n extern event(doc: \"Allows one to get an event whenever data on a `key` is added, removed or updated.\") OnData {\n\n        parameter key\n\n        out(name: \"on added\") trigger() onAdded\n\n        out(name: \"on removed\") trigger() onRemoved\n\n        out(name: \"on updated\") trigger() onUpdated\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 91, "content": "#### Function 'Json.Parse'\n\nParses the json provided in the `string` property. The parsed `value` is available on success, and the `onSuccess` trigger is executed. If parsing fails, the `onFailure` trigger is executed, and the error is available on the `error` output.\n\n## Signature: \n\n extern func(doc: \"Parses the json provided in the `string` property. The parsed `value` is available on success, and the `onSuccess` trigger is executed. If parsing fails, the `onFailure` trigger is executed, and the error is available on the `error` output.\") Parse {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"string\") property(String) string\n\n        out(x: 0, y: 0, name: \"on success\") trigger() onSuccess\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"on failure\") trigger() onFailure\n\n        out(x: 0, y: 0, name: \"error\") property error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 92, "content": "#### Function 'Json.Parsed'\n\nParses the json provided in the `string` property. Returns null if parsing fails. Use `Json.Parse` if you need to be able to handle a parse error explicitly.\n\n## Signature: \n\n extern func(doc: \"Parses the json provided in the `string` property. Returns null if parsing fails. Use `Json.Parse` if you need to be able to handle a parse error explicitly.\") Parsed {\n\n        in(x: 0, y: 0, name: \"string\") property(String) string\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 93, "content": "#### Function 'Json.Stringify'\n\nConverts any object on the `json` input to a String.\n\n## Signature: \n\n extern func(doc: \"Converts any object on the `json` input to a String.\") Stringify {\n\n        in(x: 0, y: 0, name: \"json\") property(Any) json\n\n        out(x: 0, y: 0, name: \"string\") property(String) string\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 94, "content": "#### Function 'CSV.Parse'\n\n\n\n## Signature: \n\n extern func Parse {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"string\") property(String) string\n\n        out(x: 0, y: 0, name: \"on success\") trigger() onSuccess\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"on failure\") trigger() onFailure\n\n        out(x: 0, y: 0, name: \"error\") property error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 95, "content": "#### Function 'CSV.Stringify'\n\n\n\n## Signature: \n\n extern func Stringify {\n\n        in(x: 0, y: 0, name: \"csv\") property(Any) csv\n\n        out(x: 0, y: 0, name: \"string\") property(String) string\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 96, "content": "#### Function 'List.Empty'\n\nCreates an empty list\n\n## Signature: \n\n extern func(doc: \"Creates an empty list\") Empty {\n\n        out(x: 0, y: 0, name: \"empty list\") property(List) list\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 97, "content": "#### Function 'List.GetAt'\n\nGets the item at `index` from `list`, returning Null if the index is out of bounds.\n\n## Signature: \n\n extern func(doc: \"Gets the item at `index` from `list`, returning Null if the index is out of bounds.\") GetAt {\n\n        in(x: 0, y: 0, name: \"list\") property(List) list\n\n        in(x: 0, y: 0, name: \"index\") property(Number) index\n\n        out(x: 0, y: 0, name: \"itemAtIndex\") property(Any) itemAtIndex\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 98, "content": "#### Function 'List.SetAt'\n\nSets the item at `index` of `list` to `value`\n\n## Signature: \n\n extern func(doc: \"Sets the item at `index` of `list` to `value`\") SetAt {\n\n        in(x: 0, y: 0, name: \"list\") property(List) list\n\n        in(x: 0, y: 0, name: \"index\") property(Number) index\n\n        in(x: 0, y: 0, name: \"value\") property(Number) value\n\n        out(name: \"updated list\") property(List) updatedList\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 99, "content": "#### Function 'List.Add'\n\nAdds `item` to the `list` by creating a new list with the item added, available on the `listWithItem` output.\n\n## Signature: \n\n extern func(doc: \"Adds `item` to the `list` by creating a new list with the item added, available on the `listWithItem` output.\") Add {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in(x: 0, y: 0, name: \"item\") property item\n\n        out(x: 0, y: 0, name: \"listWithItem\") property listWithItem\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 100, "content": "#### Function 'List.Remove'\n\nRemoves the item at `index` from `list` by creating a new list with the item removed, available on the `listWithoutItem` output.\n\n## Signature: \n\n extern func(doc: \"Removes the item at `index` from `list` by creating a new list with the item removed, available on the `listWithoutItem` output.\") Remove {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in(x: 0, y: 0, name: \"index\") property index\n\n        out(x: 0, y: 0, name: \"listWithoutItem\") property listWithoutItem\n\n        out(x: 0, y: 0, name: \"removed item\") property removedItem\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 101, "content": "#### Function 'List.Length'\n\nReturns the number of items in `list`.\n\n## Signature: \n\n extern func(doc: \"Returns the number of items in `list`.\") Length {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"length\") property length\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 102, "content": "#### Function 'List.Contains'\n\nReturns true if `item` is contained in `list`.\n\n## Signature: \n\n extern func(doc: \"Returns true if `item` is contained in `list`.\") Contains {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in(x: 0, y: 0, name: \"item\") property(Any) item\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) is_contained\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 103, "content": "#### Function 'List.Sort'\n\nReturns a sorted version of `list`\n\n## Signature: \n\n extern func(doc: \"Returns a sorted version of `list`\") Sort {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"sorted list\") property sorted_list\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 104, "content": "#### Function 'List.SortOn'\n\nReturns a sorted version of `list`. Sorting in done based on the provided `key`, which is retrieved from the objects in the list, which are expected to have that key. If any value in the list is not an object, or doesn't contain the given key, it is treated as less than any other item.\n\n## Signature: \n\n extern func(doc: \"Returns a sorted version of `list`. Sorting in done based on the provided `key`, which is retrieved from the objects in the list, which are expected to have that key. If any value in the list is not an object, or doesn't contain the given key, it is treated as less than any other item.\") SortOn {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in property(String) key\n\n        out(x: 0, y: 0, name: \"sorted list\") property sorted_list\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 105, "content": "#### Function 'List.GenerateRange'\n\nA list containing number from `from` to `to`.\n\n## Signature: \n\n extern func(doc: \"A list containing number from `from` to `to`.\") GenerateRange {\n\n        in(x: 0, y: 0, name: \"from\") property from\n\n        in(x: 0, y: 0, name: \"to\") property to\n\n        out(x: 0, y: 0, name: \"list\") property list\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 106, "content": "#### Function 'List.Max'\n\nFinds the largest item in a list of numbers\n\n## Signature: \n\n extern func(doc: \"Finds the largest item in a list of numbers\") Max {\n\n        in(x: 0, y: 0, name: \"items\") property(List) items\n\n        out property(Number) max\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 107, "content": "#### Function 'List.Min'\n\nFinds the smallest item in a list of numbers\n\n## Signature: \n\n extern func(doc: \"Finds the smallest item in a list of numbers\") Min {\n\n        in(x: 0, y: 0, name: \"items\") property(List) items\n\n        out property(Number) min\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 108, "content": "#### Function 'List.Slice'\n\nGets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1\n\n## Signature: \n\n extern func(doc: \"Gets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1\") Slice {\n\n        in(x: 0, y: 0, name: \"items\") property(List) list\n\n        in property(Number) start\n\n        in property(Number) end\n\n        out property(List) slice\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 109, "content": "#### Function 'List.Reversed'\n\nReverses the order of the items in `list`\n\n## Signature: \n\n extern func(doc: \"Reverses the order of the items in `list`\") Reversed {\n\n        in(x: 0, y: 0, name: \"items\") property(List) list\n\n        out property(List) reversed\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 110, "content": "#### Function 'List.Chunks'\n\n\n\n## Signature: \n\n extern func Chunks {\n\n        in(name: \"items\") property(List) list\n\n        in(name: \"chunk size\") property(Number) chunkSize\n\n        out property(List) chunks\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 111, "content": "#### Function 'List.FirstItem'\n\nReturns the first item in 'list', through the `item` output.\n\n## Signature: \n\n extern func(doc: \"Returns the first item in 'list', through the `item` output.\") FirstItem {\n\n        in property(List) list\n\n        out property(Any) item\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 112, "content": "#### Function 'List.LastItem'\n\nReturns the last item in 'list', through the `item` output.\n\n## Signature: \n\n extern func(doc: \"Returns the last item in 'list', through the `item` output.\") LastItem {\n\n        in property(List) list\n\n        out property(Any) item\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 113, "content": "#### Function 'List.IsEmpty'\n\nReturns true if `list` is empty, through the 'isEmpty' output\n\n## Signature: \n\n extern func(doc: \"Returns true if `list` is empty, through the 'isEmpty' output\") IsEmpty {\n\n        in property(List) list\n\n        out(name: \"is empty\") property(Bool) isEmpty\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 114, "content": "#### Function 'List.NotEmpty'\n\nReturns true if `list` is not empty, through the 'isEmpty' output\n\n## Signature: \n\n extern func(doc: \"Returns true if `list` is not empty, through the 'isEmpty' output\") NotEmpty {\n\n        in property(List) list\n\n        out(name: \"is empty\") property(Bool) isEmpty\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 115, "content": "#### Function 'List.Flatten'\n\nConverts a list of lists into a flattened list.\n\n## Signature: \n\n extern func(doc: \"Converts a list of lists into a flattened list.\") Flatten {\n\n        in property(List) items\n\n        out property(List) flattened\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 116, "content": "#### Function 'List.Concat'\n\nConcatenates two lists\n\n## Signature: \n\n extern func(doc: \"Concatenates two lists\") Concat {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 117, "content": "#### Function 'List.GroupByKey'\n\n\n\n## Signature: \n\n extern func GroupByKey {\n\n        in property(List) list\n\n        in property(String) key\n\n        out property(Any) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 118, "content": "#### Function 'Query.Select'\n\nMaps over a list of objects and selects the given set of keys from each object.\n\n## Signature: \n\n extern func(doc: \"Maps over a list of objects and selects the given set of keys from each object.\") Select {\n\n          in property from\n\n          in(editor: \"List\") property keys\n\n          out property result\n\n      }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 119, "content": "#### Function 'Query.Pick'\n\nMaps over a list of objects extracts the value for the given field from each item.\n\n## Signature: \n\n extern func(doc: \"Maps over a list of objects extracts the value for the given field from each item.\") Pick {\n\n          in property from\n\n          in property key\n\n          out property result\n\n      }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 120, "content": "#### Function 'Query.Filter'\n\nFilters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.\n\n## Signature: \n\n extern func(doc: \"Filters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.\") Filter {\n\n          parameter(defaultValue: \"it < 10\") where\n\n          in property(List) list\n\n          out property(List) result\n\n      }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 121, "content": "#### Function 'Query.Find'\n\nFinds the first item in a list where the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.\n\n## Signature: \n\n extern func(doc: \"Finds the first item in a list where the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.\") Find {\n\n          parameter(defaultValue: \"it < 10\") where\n\n          in property(List) list\n\n          out property(Any) item\n\n      }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 122, "content": "#### Function 'Query.InnerJoinOn'\n\nJoin two list of objects together where the given keys match. If there are several pairs of matches, one pair for each match will be present in the list.\n\n## Signature: \n\n extern func(doc: \"Join two list of objects together where the given keys match. If there are several pairs of matches, one pair for each match will be present in the list.\") InnerJoinOn {\n\n          in(name: \"left list\") property(List) left\n\n          in(name: \"left key\") property(String) left_key\n\n          in(name: \"right list\") property(List) right\n\n          in(name: \"right key\") property(String) right_key\n\n          out property result\n\n      }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 123, "content": "#### Function 'Structure.Get'\n\nRetrieves the value located at a specified `path` within a `record`. The `path` is a string that represents keys and indices in a nested structure. Keys are denoted by strings, and indices by numbers. If the `path` is valid and the value exists, it triggers `onValue` with the result. If the `path` is invalid or the value does not exist, it triggers `onError`.\n\n## Signature: \n\n extern func(doc: \"Retrieves the value located at a specified `path` within a `record`. The `path` is a string that represents keys and indices in a nested structure. Keys are denoted by strings, and indices by numbers. If the `path` is valid and the value exists, it triggers `onValue` with the result. If the `path` is invalid or the value does not exist, it triggers `onError`.\") Get {\n\n        in trigger execute\n\n        in(x: 0, y: 0, name: \"record\") property record\n\n        in(x: 0, y: 0, name: \"path\") property(String) path\n\n\n\n        out(name: \"on value\") trigger onValue\n\n        out(x: 0, y: 0, name: \"value\") property value\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 124, "content": "#### Function 'Structure.Set'\n\nUpdates the value at a given `path` within a `record`. The `path` is a string representing where the value should be set within the nested structure of the record. This function creates a new record with the updated value and outputs it as `record_with_value`. Strings in the `path` indicate keys, while numbers indicate indices.\n\n## Signature: \n\n extern func(doc: \"Updates the value at a given `path` within a `record`. The `path` is a string representing where the value should be set within the nested structure of the record. This function creates a new record with the updated value and outputs it as `record_with_value`. Strings in the `path` indicate keys, while numbers indicate indices.\") Set {\n\n        in trigger execute\n\n        in(x: 0, y: 0, name: \"record\") property(Any) record\n\n        in(x: 0, y: 0, name: \"path\") property(String) path\n\n        in(x: 0, y: 0, name: \"value\") property(Any) value\n\n\n\n        out trigger continue\n\n        out(x: 0, y: 0, name: \"record_with_value\") property record_with_value\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 125, "content": "#### Function 'Map.Get'\n\nGets the `value` stored in `map` on `key`.\n\n## Signature: \n\n extern func(doc: \"Gets the `value` stored in `map` on `key`.\") Get {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        out(x: 0, y: 0, name: \"value\") property value\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 126, "content": "#### Function 'Map.Set'\n\nSets the `value` on `key` of `map` by returning a new map with the value, available on the `map_with_value` output.\n\n## Signature: \n\n extern func(doc: \"Sets the `value` on `key` of `map` by returning a new map with the value, available on the `map_with_value` output.\") Set {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        in(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"map_with_value\") property map_with_value\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 127, "content": "#### Function 'Map.Empty'\n\nReturns an empty map.\n\n## Signature: \n\n extern func(doc: \"Returns an empty map.\") Empty {\n\n        out(x: 0, y: 0, name: \"new map\") property new_map\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 128, "content": "#### Function 'Map.Merge'\n\nMerge two maps into one, picking the last maps items for duplicate keys. If a key in `second` is set to Null, it will not replace an existing value for that key.\n\n## Signature: \n\n extern func(doc: \"Merge two maps into one, picking the last maps items for duplicate keys. If a key in `second` is set to Null, it will not replace an existing value for that key.\") Merge {\n\n        in property first\n\n        in property second\n\n        out property merged\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 129, "content": "#### Function 'Map.ContainsKey'\n\nChecks if `map` has a key `key`.\n\n## Signature: \n\n extern func(doc: \"Checks if `map` has a key `key`.\") ContainsKey {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        out(x: 0, y: 0, name: \"is contained\") property(Bool) is_contained\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 130, "content": "#### Function 'Map.Keys'\n\nReturns a list of all the `keys` in `map`.\n\n## Signature: \n\n extern func(doc: \"Returns a list of all the `keys` in `map`.\") Keys {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        out(x: 0, y: 0, name: \"keys\") property keys\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 131, "content": "#### Function 'Map.Values'\n\nReturns a list of all the `values` in `map`.\n\n## Signature: \n\n extern func(doc: \"Returns a list of all the `values` in `map`.\") Values {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        out(x: 0, y: 0, name: \"values\") property values\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 132, "content": "#### Function 'Map.Entries'\n\nReturns a list of all key-values pairs in `map` as a list of lists.\n\n## Signature: \n\n extern func(doc: \"Returns a list of all key-values pairs in `map` as a list of lists.\") Entries {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        out(x: 0, y: 0, name: \"entries\") property entries\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 133, "content": "#### Function 'Map.WithFields'\n\nReturns a new map with only the fields specified in the `fields` list.\n\n## Signature: \n\n extern func(doc: \"Returns a new map with only the fields specified in the `fields` list.\") WithFields {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"fields\") property(List) fields\n\n        out(x: 0, y: 0, name: \"new map\") property new_map\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 134, "content": "#### Function 'Map.MapEntries'\n\nCalls the given mapping function instance (`handler`) once for each key value pair in `map` returning a new list with the mapped values (`output_list`).\n\n## Signature: \n\n extern func(doc: \"Calls the given mapping function instance (`handler`) once for each key value pair in `map` returning a new list with the mapped values (`output_list`).\") MapEntries {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"output list\") property output_list\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 135, "content": "#### Function 'Iteration.ForEach'\n\nCalls the given function instance (`handler`) once for each item in `items`\n\n## Signature: \n\n extern func(doc: \"Calls the given function instance (`handler`) once for each item in `items`\") ForEach {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 136, "content": "#### Function 'Iteration.Map'\n\nCalls the given function instance (`handler`) once for each item in `items` returning a new list with the mapped values (`output_list`). Handle is expected to be a function which takes in at least one input (the item), and returns a single item, the mapped value. It can also take a second input, which is the index of the value, and a third value, an optional context value passed from the outside.\n\n## Signature: \n\n extern func(doc: \"Calls the given function instance (`handler`) once for each item in `items` returning a new list with the mapped values (`output_list`). Handle is expected to be a function which takes in at least one input (the item), and returns a single item, the mapped value. It can also take a second input, which is the index of the value, and a third value, an optional context value passed from the outside.\") Map {\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"output list\") property output_list\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 137, "content": "#### Function 'Iteration.Zip'\n\nCall the given function instance ('handler') on corresponding pairs of elements from 'left' and 'right' lists. The function applies 'handler(left[i], right[i])' for each index 'i', up to the length of the shorter list. The results are collected into the output property 'zipped'.\n\n## Signature: \n\n extern func(doc: \"Call the given function instance ('handler') on corresponding pairs of elements from 'left' and 'right' lists. The function applies 'handler(left[i], right[i])' for each index 'i', up to the length of the shorter list. The results are collected into the output property 'zipped'.\") Zip {\n\n        in property(List) left\n\n        in property(List) right\n\n        in property(Any) handler\n\n        out property zipped\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 138, "content": "#### Function 'Iteration.Filter'\n\nFilters the input list 'items' using the provided 'handler' function, which is expected to return a boolean value. The filtered list is available on the 'output_list' output.\n\n## Signature: \n\n extern func(doc: \"Filters the input list 'items' using the provided 'handler' function, which is expected to return a boolean value. The filtered list is available on the 'output_list' output.\") Filter {\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"output list\") property output_list\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 139, "content": "#### Function 'Iteration.Reduce'\n\nReduces the list `item` using the provided reducer function, which is expected to accept 2-4 inputs, the first being the accumulated value, and the second the value being accumulated. A third optional input will contain the current index, while the fourth optional input will contain the context input.\n\n## Signature: \n\n extern func(doc: \"Reduces the list `item` using the provided reducer function, which is expected to accept 2-4 inputs, the first being the accumulated value, and the second the value being accumulated. A third optional input will contain the current index, while the fourth optional input will contain the context input.\") Reduce {\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(name: \"initial value\") property initialValue\n\n        in(x: 0, y: 0, name: \"reducer\") property(Any) reducer\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"output\") property output\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 140, "content": "#### Function 'Iteration.Find'\n\nFinds an item in the list `items` that satisfies the `predicate` function, and returns the item through the `item` output.\n\n## Signature: \n\n extern func(doc: \"Finds an item in the list `items` that satisfies the `predicate` function, and returns the item through the `item` output.\") Find {\n\n        in property(List) items\n\n        in property predicate\n\n        in property context\n\n        out property item\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 141, "content": "#### Function 'Math.Floor'\n\nReturns the largest integer less than or equal `input`\n\n## Signature: \n\n extern func(doc: \"Returns the largest integer less than or equal `input`\") Floor {\n\n        in(x: 0, y: 0, name: \"input\") property input\n\n        out(x: 0, y: 0, name: \"output\") property output\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 142, "content": "#### Function 'Math.Add'\n\nAdds `first` and `second` making the result avilable on the `result` output.\n\n## Signature: \n\n extern func(doc: \"Adds `first` and `second` making the result avilable on the `result` output.\") Add {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 143, "content": "#### Function 'Math.Sub'\n\nSubtracts `first` and `second` making the result avilable on the `result` output.\n\n## Signature: \n\n extern func(doc: \"Subtracts `first` and `second` making the result avilable on the `result` output.\") Sub {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 144, "content": "#### Function 'Math.Mul'\n\nMultiplies `first` and `second` making the result avilable on the `result` output.\n\n## Signature: \n\n extern func(doc: \"Multiplies `first` and `second` making the result avilable on the `result` output.\") Mul {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 145, "content": "#### Function 'Math.Div'\n\nDivides `first` by `second` making the result avilable on the `result` output.\n\n## Signature: \n\n extern func(doc: \"Divides `first` by `second` making the result avilable on the `result` output.\") Div {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 146, "content": "#### Function 'Math.LessThan'\n\nChecks is `left` less than `right`.\n\n## Signature: \n\n extern func(doc: \"Checks is `left` less than `right`.\") LessThan {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 147, "content": "#### Function 'Math.GreaterThan'\n\nChecks if `left` is greater than `right`\n\n## Signature: \n\n extern func(doc: \"Checks if `left` is greater than `right`\") GreaterThan {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 148, "content": "#### Function 'Math.LessThanOrEqual'\n\nChecks if 'left' is les than or eqaul to the 'right'\n\n## Signature: \n\n extern func(doc: \"Checks if 'left' is les than or eqaul to the 'right'\") LessThanOrEqual {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 149, "content": "#### Function 'Math.GreaterThanOrEqual'\n\nChecks if the 'left' is greater than or equal to the 'right'\n\n## Signature: \n\n extern func(doc: \"Checks if the 'left' is greater than or equal to the 'right'\") GreaterThanOrEqual {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 150, "content": "#### Function 'Math.Expression'\n\nCreates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.\n\n## Signature: \n\n extern func(doc: \"Creates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.\") Expression {\n\n        parameter(\n\n            compilerPlugin: \"Expression\",\n\n            defaultValue: \"\",\n\n            aiSystemPrompt: \"You will generate math expressions based on a user prompt. The expression you generate will consist only of the following operators:\n\n                            - + (plus)\n\n                            - - (minus)\n\n                            - * (multiply)\n\n                            - / (divide)\n\n                            - % (modulo)\n\n\n\n                            Inputs that must be provided by the user are represented by valid C identifiers, and should prefer to be as short as possible, without confusing the user about what the input represents.\n\n\n\n                            Here are a few examples:\n\n\n\n                            Prompt: Calcualte the average of three number\n\n                            Response: (a + b + c) / 3\n\n\n\n                            Prompt: Calculate the area of a circle of radius r\n\n                            Response: 3.14 * r * r\n\n\n\n                            Prompt: Calculate the area of a rectangle\n\n                            Response: a * b\n\n                            \",\n\n        ) expression\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 151, "content": "#### Function 'Math.Abs'\n\nReturns the absolute value of `x`.\n\n## Signature: \n\n extern func(doc: \"Returns the absolute value of `x`.\") Abs {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 152, "content": "#### Function 'Math.Sin'\n\nReturns the sine of `x` (in radians).\n\n## Signature: \n\n extern func(doc: \"Returns the sine of `x` (in radians).\") Sin {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 153, "content": "#### Function 'Math.Cos'\n\nReturns the cosine of `x` (in radians).\n\n## Signature: \n\n extern func(doc: \"Returns the cosine of `x` (in radians).\") Cos {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 154, "content": "#### Function 'Math.Tan'\n\nReturns the tangent of `x` (in radians).\n\n## Signature: \n\n extern func(doc: \"Returns the tangent of `x` (in radians).\") Tan {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 155, "content": "#### Function 'Math.Asin'\n\nReturns the arcsine of `x` (in radians).\n\n## Signature: \n\n extern func(doc: \"Returns the arcsine of `x` (in radians).\") Asin {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 156, "content": "#### Function 'Math.Acos'\n\nReturns the arccosine of `x` (in radians).\n\n## Signature: \n\n extern func(doc: \"Returns the arccosine of `x` (in radians).\") Acos {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 157, "content": "#### Function 'Math.Atan'\n\nReturns the arctangent of `x` (in radians).\n\n## Signature: \n\n extern func(doc: \"Returns the arctangent of `x` (in radians).\") Atan {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 158, "content": "#### Function 'Math.Exp'\n\nReturns the natural exponential function of `x`.\n\n## Signature: \n\n extern func(doc: \"Returns the natural exponential function of `x`.\") Exp {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 159, "content": "#### Function 'Math.Log'\n\nReturns the natural logarithm (base e) of `x`.\n\n## Signature: \n\n extern func(doc: \"Returns the natural logarithm (base e) of `x`.\") Log {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 160, "content": "#### Function 'Math.Log10'\n\nReturns the base-10 logarithm of `x`.\n\n## Signature: \n\n extern func(doc: \"Returns the base-10 logarithm of `x`.\") Log10 {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 161, "content": "#### Function 'Math.Pow'\n\nReturns `x` raised to the power of `y`.\n\n## Signature: \n\n extern func(doc: \"Returns `x` raised to the power of `y`.\") Pow {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        in(x: 0, y: 0, name: \"y\") property y\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 162, "content": "#### Function 'Math.Sqrt'\n\nReturns the positive square root of `x`.\n\n## Signature: \n\n extern func(doc: \"Returns the positive square root of `x`.\") Sqrt {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 163, "content": "#### Function 'Math.Cbrt'\n\nReturns the cube root of `x`.\n\n## Signature: \n\n extern func(doc: \"Returns the cube root of `x`.\") Cbrt {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 164, "content": "#### Function 'Math.NthRoot'\n\nReturns the `n`th root of `x`.\n\n## Signature: \n\n extern func(doc: \"Returns the `n`th root of `x`.\") NthRoot {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        in(x: 0, y: 0, name: \"n\") property n\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 165, "content": "#### Function 'Math.Ceil'\n\nReturns the smallest integer greater than or equal to `x`.\n\n## Signature: \n\n extern func(doc: \"Returns the smallest integer greater than or equal to `x`.\") Ceil {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 166, "content": "#### Function 'Math.Modulo'\n\nCalculates the modulo of `value` and `divisor`, and returns the modulo through the `result` output.\n\n## Signature: \n\n extern func(doc: \"Calculates the modulo of `value` and `divisor`, and returns the modulo through the `result` output.\") Modulo {\n\n        in(x: 0, y: 0, name: \"value\") property value\n\n        in(x: 0, y: 0, name: \"divisor\") property divisor\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 167, "content": "#### Function 'Math.Round'\n\nRounds `x` to the nearest integer.\n\n## Signature: \n\n extern func(doc: \"Rounds `x` to the nearest integer.\") Round {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 168, "content": "#### Function 'Math.RoundTo'\n\nRounds `x` to `decimals` decimal places.\n\n## Signature: \n\n extern func(doc: \"Rounds `x` to `decimals` decimal places.\") RoundTo {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        in(x: 0, y: 0, name: \"decimals\") property decimals\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 169, "content": "#### Function 'Math.Min'\n\nReturns the smallest of the input numbers.\n\n## Signature: \n\n extern func(doc: \"Returns the smallest of the input numbers.\") Min {\n\n        in(x: 0, y: 0, name: \"values\") property values\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 170, "content": "#### Function 'Math.Max'\n\nReturns the largest of the input numbers.\n\n## Signature: \n\n extern func(doc: \"Returns the largest of the input numbers.\") Max {\n\n        in(x: 0, y: 0, name: \"values\") property values\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 171, "content": "#### Function 'Math.Max2'\n\nFinds the largest of two numbers\n\n## Signature: \n\n extern func(doc: \"Finds the largest of two numbers\") Max2 {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out property(Number) max\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 172, "content": "#### Function 'Math.Min2'\n\nFinds the smallest of two numbers\n\n## Signature: \n\n extern func(doc: \"Finds the smallest of two numbers\") Min2 {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out property(Number) min\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 173, "content": "#### Function 'Math.Random'\n\nCreates a random `value` from `from` to `to` each time the function is `execute`d.\n\n## Signature: \n\n extern func(doc: \"Creates a random `value` from `from` to `to` each time the function is `execute`d.\") Random {\n\n        in(x: 0, y: 0, name: \"from\") property from\n\n        in(x: 0, y: 0, name: \"to\") property to\n\n        out(x: 0, y: 0, name: \"value\") property value\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 174, "content": "#### Function 'Math.NumberFromString'\n\nConverts `string` to a number. If the string is not convertible to a number, Null is returned.\n\n## Signature: \n\n extern func(doc: \"Converts `string` to a number. If the string is not convertible to a number, Null is returned.\") NumberFromString {\n\n        in(x: 0, y: 0, name: \"string\") property string\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 175, "content": "#### Function 'LinearAlgebra.VecFromList'\n\n\n\n## Signature: \n\n extern func VecFromList {\n\n        in(name: \"Number list\") property number_list\n\n        out property(Vector) vector\n\n    }\n\n## Custom types in scope: \n\n type Vector Opaque"}
{"file": "std_extern.midio", "chunk_id": 176, "content": "#### Function 'LinearAlgebra.DotProduct'\n\n\n\n## Signature: \n\n extern func DotProduct {\n\n        in(name: \"left vector\") property(Vector) left_vector\n\n        in(name: \"right vector\") property(Vector) right_vector\n\n        out property(Number) result\n\n    }\n\n## Custom types in scope: \n\n type Vector Opaque"}
{"file": "std_extern.midio", "chunk_id": 177, "content": "#### Function 'LinearAlgebra.L2Norm'\n\n\n\n## Signature: \n\n extern func L2Norm {\n\n        in property(Vector) vector\n\n        out property(Number) result\n\n    }\n\n## Custom types in scope: \n\n type Vector Opaque"}
{"file": "std_extern.midio", "chunk_id": 178, "content": "#### Function 'LinearAlgebra.KMeans'\n\n\n\n## Signature: \n\n extern func KMeans {\n\n        in property(List) vectors\n\n        in(name: \"num clusters\") property(Number) num_clusters\n\n        in(name: \"max iterations\") property(Number) max_iterations\n\n        out(name: \"cluster assignments\") property(List) cluster_assignments\n\n        out property(List) centroids\n\n    }\n\n## Custom types in scope: \n\n type Vector Opaque"}
{"file": "std_extern.midio", "chunk_id": 179, "content": "#### Function 'Logic.Equal'\n\nChecks if `left` and `right` are equal by performing a deep scan of the objects.\n\n## Signature: \n\n extern func(doc: \"Checks if `left` and `right` are equal by performing a deep scan of the objects.\") Equal {\n\n        in(x: 0, y: 0, name: \"left\") property(Any) left\n\n        in(x: 0, y: 0, name: \"right\") property(Any) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 180, "content": "#### Function 'Logic.NotEqual'\n\nChecks if `left` and `right` are not equal by performing a deep scan of the objects.\n\n## Signature: \n\n extern func(doc: \"Checks if `left` and `right` are not equal by performing a deep scan of the objects.\") NotEqual {\n\n        in(x: 0, y: 0, name: \"left\") property(Any) left\n\n        in(x: 0, y: 0, name: \"right\") property(Any) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 181, "content": "#### Function 'Logic.Not'\n\nThe logic not operator\n\n## Signature: \n\n extern func(doc: \"The logic not operator\") Not {\n\n        in property(Bool) input\n\n        out property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 182, "content": "#### Function 'Logic.Or'\n\nThe logic or operator\n\n## Signature: \n\n extern func(doc: \"The logic or operator\") Or {\n\n        in property(Bool) left\n\n        in property(Bool) right\n\n        out property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 183, "content": "#### Function 'Logic.And'\n\nThe logic and operator\n\n## Signature: \n\n extern func(doc: \"The logic and operator\") And {\n\n        in property(Bool) left\n\n        in property(Bool) right\n\n        out property(Bool) result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 184, "content": "#### Event 'Scheduling.Schedule'\n\nSchedule can be used to trigger flows based on a timed schedule. It is based on the Cron API, but with support for resolution down to seconds. Note that scheduling is started relative to the current UTC time.\n\n## Signature: \n\n extern event(doc: \"Schedule can be used to trigger flows based on a timed schedule. It is based on the Cron API, but with support for resolution down to seconds. Note that scheduling is started relative to the current UTC time.\") Schedule {\n\n        parameter(name: \"second (0-59)\", defaultValue: \"0\") second\n\n        parameter(name: \"minute (0-59)\", defaultValue: \"*\") minute\n\n        parameter(name: \"hour (0-23)\", defaultValue: \"*\") hour\n\n        parameter(name: \"day of the month (1-31)\", defaultValue: \"*\") day_of_month\n\n        parameter(name: \"month (1-12)\", defaultValue: \"*\") month\n\n        parameter(name: \"day of the week (0-6)\", defaultValue: \"*\") week_day\n\n        parameter(name: \"year\", defaultValue: \"*\") year\n\n\n\n        out(name: \"on tick\") trigger onTick\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 185, "content": "#### Event 'Scheduling.ScheduleFromCronExpression'\n\n\n\n## Signature: \n\n extern event(doc: \"Creates a schedule using a cron expression (second minute hour 'day of month' 'month' 'day of week' year). See https://en.wikipedia.org/wiki/Cron for details (note that this page doesn't show with second as the lowest resolution, as we do here.\")) ScheduleFromCronExpression {\n\n        parameter(name: \"cron expression\", defaultValue: \"*/5 * * * * * *\") cron_expr\n\n        out(name: \"on tick\") trigger onTick\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 186, "content": "#### Function 'Net.TcpSend'\n\nSends the provided `line` as a tcp messages to the target of `connection`.\n\n## Signature: \n\n extern func(doc: \"Sends the provided `line` as a tcp messages to the target of `connection`.\") TcpSend {\n\n        in(x: 0, y: 0, name: \"send\") trigger() send\n\n        in(x: 0, y: 0, name: \"connection\") property connection\n\n        in(x: 0, y: 0, name: \"line\") property line\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 187, "content": "#### Function 'Net.TcpListen'\n\n\n\n## Signature: \n\n extern func TcpListen {\n\n        in(x: 0, y: 0, name: \"listen\") trigger() listen\n\n        in(x: 0, y: 0, name: \"address\") property address\n\n        in(x: 0, y: 0, name: \"port\") property port\n\n        out(x: 0, y: 0, name: \"listening\") trigger() listening\n\n        out(x: 0, y: 0, name: \"on connection\") trigger() onConnection\n\n        out(x: 0, y: 0, name: \"stream\") property stream\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 188, "content": "#### Function 'Net.TcpReadLine'\n\n\n\n## Signature: \n\n extern func TcpReadLine {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"stream\") property stream\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"line\") property line\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 189, "content": "#### Event 'Net.TcpStream'\n\nListens for tcp messages by binding a tcp listener to the provided `address`:`port`. The `onLine` trigger is executed for each `line` received on `connection`.\n\n## Signature: \n\n extern event(doc: \"Listens for tcp messages by binding a tcp listener to the provided `address`:`port`. The `onLine` trigger is executed for each `line` received on `connection`.\") TcpStream {\n\n        parameter port\n\n        parameter address\n\n        out(name: \"on line\") trigger() onLine\n\n        out() property connection\n\n        out() property line\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 190, "content": "#### Function 'Image.FromFile'\n\n\n\n## Signature: \n\n extern func(buildTag: \"file\", doc: \"Reads the contents of `file` and interprets it as an `image`. The supported image formats can be found here (https://docs.rs/image/latest/image/codecs/index.html#supported-formats)\") FromFile {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"file\") property file\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 191, "content": "#### Function 'Image.FromBuffer'\n\nConverts the `buffer` to an `image`\n\n## Signature: \n\n extern func(doc: \"Converts the `buffer` to an `image`\") FromBuffer {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"buffer\") property buffer\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 192, "content": "#### Function 'Image.ToBuffer'\n\nConverts the `image` to a `buffer`\n\n## Signature: \n\n extern func(doc: \"Converts the `image` to a `buffer`\") ToBuffer {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"buffer\") property buffer\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 193, "content": "#### Function 'Image.BoxFilter'\n\nApplies a 3x3 box filter on the image using the provided `kernel`, which expected a flattened 3x3 list of numbers (9 numbers).\n\n## Signature: \n\n extern func(doc: \"Applies a 3x3 box filter on the image using the provided `kernel`, which expected a flattened 3x3 list of numbers (9 numbers).\") BoxFilter {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"kernel\", editor: \"InputGrid(3,3)\") property kernel\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 194, "content": "#### Function 'Image.Blend'\n\nBlends two images together\n\n## Signature: \n\n extern func(doc: \"Blends two images together\") Blend {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image1\") property image1\n\n        in(x: 0, y: 0, name: \"image2\") property image2\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 195, "content": "#### Function 'Image.Resize'\n\nResizes the `image` to `width` and `height`, making the result available on the `resized_image` output.\n\n## Signature: \n\n extern func(doc: \"Resizes the `image` to `width` and `height`, making the result available on the `resized_image` output.\") Resize {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"width\") property width\n\n        in(x: 0, y: 0, name: \"height\") property height\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"resized image\") property resized_image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 196, "content": "#### Function 'Image.SaveToFile'\n\n\n\n## Signature: \n\n extern func(buildTag: \"file\", doc: \"Saves the provided `image` content to a file named `path`, using the file name as an indication of which encoding to use.\") SaveToFile {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"path\") property path\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 197, "content": "#### Function 'Image.Blur'\n\nBlurs the `image` by `amount`. NOTE: This function can become slow when using large values for `amount`. This should be fixed in the future.\n\n## Signature: \n\n extern func(doc: \"Blurs the `image` by `amount`. NOTE: This function can become slow when using large values for `amount`. This should be fixed in the future.\") Blur {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"amount\") property amount\n\n        out(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 198, "content": "#### Function 'Image.Grayscale'\n\nConverts `image` to grayscale.\n\n## Signature: \n\n extern func(doc: \"Converts `image` to grayscale.\") Grayscale {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 199, "content": "#### Function 'Image.Brighten'\n\nBrightens `image` by `amount`.\n\n## Signature: \n\n extern func(doc: \"Brightens `image` by `amount`.\") Brighten {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"amount\") property amount\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 200, "content": "#### Function 'Image.Contrast'\n\nIncreases the contrast of `image` by `amount`.\n\n## Signature: \n\n extern func(doc: \"Increases the contrast of `image` by `amount`.\") Contrast {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"amount\") property amount\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 201, "content": "#### Function 'Image.FlipHorizontal'\n\nFlips `image` horizontally.\n\n## Signature: \n\n extern func(doc: \"Flips `image` horizontally.\") FlipHorizontal {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 202, "content": "#### Function 'Image.FlipVertical'\n\nFlips `image` vertically.\n\n## Signature: \n\n extern func(doc: \"Flips `image` vertically.\") FlipVertical {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 203, "content": "#### Function 'Image.Rotate90'\n\nRotates `image` by 90 degress clockwise.\n\n## Signature: \n\n extern func(doc: \"Rotates `image` by 90 degress clockwise.\") Rotate90 {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 204, "content": "#### Function 'Image.Rotate180'\n\nRotates `image` by 180 degress.\n\n## Signature: \n\n extern func(doc: \"Rotates `image` by 180 degress.\") Rotate180 {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 205, "content": "#### Function 'Image.Rotate270'\n\nRotates `image` by 270 degress clockwise.\n\n## Signature: \n\n extern func(doc: \"Rotates `image` by 270 degress clockwise.\") Rotate270 {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 206, "content": "#### Function 'Image.Threshold'\n\nThreshold `image` by `threshold`.\n\n## Signature: \n\n extern func(doc: \"Threshold `image` by `threshold`.\") Threshold {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"threshold\", editor: \"Slider(0,10)\") property threshold\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 207, "content": "#### Function 'Image.Base64Encode'\n\nBase64 encodes `image` into a string.\n\n## Signature: \n\n extern func(doc: \"Base64 encodes `image` into a string.\") Base64Encode {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"value\") property value\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 208, "content": "#### Function 'File.ReadAll'\n\nReads the entire contents of the file at `path` and returns the contents in the `content` output.\n\n## Signature: \n\n extern func(doc: \"Reads the entire contents of the file at `path` and returns the contents in the `content` output.\") ReadAll {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n        out property(String) content\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 209, "content": "#### Function 'File.ReadAllToBuffer'\n\nReads the entire contents of the file at `path` and returns the contents in the `content` output.\n\n## Signature: \n\n extern func(doc: \"Reads the entire contents of the file at `path` and returns the contents in the `content` output.\") ReadAllToBuffer {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n        out property(Buffer) content\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 210, "content": "#### Function 'File.WriteAll'\n\nWrites the string or buffer to the specified path as is, or converts the value to a string if it is not a String or Buffer and then writes to file.\n\n## Signature: \n\n extern func(doc: \"Writes the string or buffer to the specified path as is, or converts the value to a string if it is not a String or Buffer and then writes to file.\") WriteAll {\n\n        in trigger execute\n\n        in property(String) path\n\n        in property(String or Buffer or Any) content\n\n\n\n        out(name: \"on done\") trigger onDone\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 211, "content": "#### Function 'File.ListDirectory'\n\n\n\n## Signature: \n\n extern func ListDirectory {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n        out property(List) files\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 212, "content": "#### Function 'File.CreateDirectory'\n\n\n\n## Signature: \n\n extern func CreateDirectory {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 213, "content": "#### Function 'File.RemoveFile'\n\n\n\n## Signature: \n\n extern func RemoveFile {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 214, "content": "#### Function 'Env.GetEnvironmentVariable'\n\n\n\n## Signature: \n\n extern func GetEnvironmentVariable {\n\n        in trigger execute\n\n        in(name: \"variable name\") property(String) variable_name\n\n\n\n        out(name: \"on variable\") trigger onVariable\n\n        out property(String) value\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 215, "content": "#### Function 'Env.SetEnvironmentVariable'\n\n\n\n## Signature: \n\n extern func SetEnvironmentVariable {\n\n        in trigger execute\n\n        in(name: \"variable name\") property(String) variable_name\n\n        in property(String) value\n\n\n\n        out(name: \"on success\") trigger onSuccess\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 216, "content": "#### Function 'Env.EnvironmentVariable'\n\n\n\n## Signature: \n\n extern func EnvironmentVariable {\n\n        in(name: \"variable name\") property(String) variable_name\n\n        out property(String or Null) value\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 217, "content": "#### Function 'Buffer.FromString'\n\n\n\n## Signature: \n\n extern func FromString {\n\n        in trigger execute\n\n        in property(String) string\n\n        out trigger continue\n\n        out property(Buffer) buffer\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 218, "content": "#### Function 'Buffer.ReadU8'\n\n\n\n## Signature: \n\n extern func ReadU8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 219, "content": "#### Function 'Buffer.ReadI8'\n\n\n\n## Signature: \n\n extern func ReadI8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 220, "content": "#### Function 'Buffer.ReadU16BE'\n\n\n\n## Signature: \n\n extern func ReadU16BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 221, "content": "#### Function 'Buffer.ReadU16LE'\n\n\n\n## Signature: \n\n extern func ReadU16LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 222, "content": "#### Function 'Buffer.ReadU16NE'\n\n\n\n## Signature: \n\n extern func ReadU16NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 223, "content": "#### Function 'Buffer.ReadI16BE'\n\n\n\n## Signature: \n\n extern func ReadI16BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 224, "content": "#### Function 'Buffer.ReadI16LE'\n\n\n\n## Signature: \n\n extern func ReadI16LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 225, "content": "#### Function 'Buffer.ReadI16NE'\n\n\n\n## Signature: \n\n extern func ReadI16NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 226, "content": "#### Function 'Buffer.ReadU32BE'\n\n\n\n## Signature: \n\n extern func ReadU32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 227, "content": "#### Function 'Buffer.ReadU32LE'\n\n\n\n## Signature: \n\n extern func ReadU32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 228, "content": "#### Function 'Buffer.ReadU32NE'\n\n\n\n## Signature: \n\n extern func ReadU32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 229, "content": "#### Function 'Buffer.ReadI32BE'\n\n\n\n## Signature: \n\n extern func ReadI32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 230, "content": "#### Function 'Buffer.ReadI32LE'\n\n\n\n## Signature: \n\n extern func ReadI32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 231, "content": "#### Function 'Buffer.ReadI32NE'\n\n\n\n## Signature: \n\n extern func ReadI32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 232, "content": "#### Function 'Buffer.ReadU64BE'\n\n\n\n## Signature: \n\n extern func ReadU64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 233, "content": "#### Function 'Buffer.ReadU64LE'\n\n\n\n## Signature: \n\n extern func ReadU64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 234, "content": "#### Function 'Buffer.ReadU64NE'\n\n\n\n## Signature: \n\n extern func ReadU64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 235, "content": "#### Function 'Buffer.ReadI64BE'\n\n\n\n## Signature: \n\n extern func ReadI64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 236, "content": "#### Function 'Buffer.ReadI64LE'\n\n\n\n## Signature: \n\n extern func ReadI64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 237, "content": "#### Function 'Buffer.ReadI64NE'\n\n\n\n## Signature: \n\n extern func ReadI64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 238, "content": "#### Function 'Buffer.ReadF32BE'\n\n\n\n## Signature: \n\n extern func ReadF32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 239, "content": "#### Function 'Buffer.ReadF32LE'\n\n\n\n## Signature: \n\n extern func ReadF32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 240, "content": "#### Function 'Buffer.ReadF32NE'\n\n\n\n## Signature: \n\n extern func ReadF32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 241, "content": "#### Function 'Buffer.ReadF64BE'\n\n\n\n## Signature: \n\n extern func ReadF64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 242, "content": "#### Function 'Buffer.ReadF64LE'\n\n\n\n## Signature: \n\n extern func ReadF64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 243, "content": "#### Function 'Buffer.ReadF64NE'\n\n\n\n## Signature: \n\n extern func ReadF64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 244, "content": "#### Function 'Buffer.PutU8'\n\n\n\n## Signature: \n\n extern func PutU8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 245, "content": "#### Function 'Buffer.PutI8'\n\n\n\n## Signature: \n\n extern func PutI8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 246, "content": "#### Function 'Buffer.PutU16BE'\n\n\n\n## Signature: \n\n extern func PutU16BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 247, "content": "#### Function 'Buffer.PutU16LE'\n\n\n\n## Signature: \n\n extern func PutU16LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 248, "content": "#### Function 'Buffer.PutU16NE'\n\n\n\n## Signature: \n\n extern func PutU16NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 249, "content": "#### Function 'Buffer.PutI16BE'\n\n\n\n## Signature: \n\n extern func PutI16BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 250, "content": "#### Function 'Buffer.PutI16LE'\n\n\n\n## Signature: \n\n extern func PutI16LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 251, "content": "#### Function 'Buffer.PutI16NE'\n\n\n\n## Signature: \n\n extern func PutI16NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 252, "content": "#### Function 'Buffer.PutU32BE'\n\n\n\n## Signature: \n\n extern func PutU32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 253, "content": "#### Function 'Buffer.PutU32LE'\n\n\n\n## Signature: \n\n extern func PutU32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 254, "content": "#### Function 'Buffer.PutU32NE'\n\n\n\n## Signature: \n\n extern func PutU32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 255, "content": "#### Function 'Buffer.PutI32BE'\n\n\n\n## Signature: \n\n extern func PutI32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 256, "content": "#### Function 'Buffer.PutI32LE'\n\n\n\n## Signature: \n\n extern func PutI32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 257, "content": "#### Function 'Buffer.PutI32NE'\n\n\n\n## Signature: \n\n extern func PutI32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 258, "content": "#### Function 'Buffer.PutU64BE'\n\n\n\n## Signature: \n\n extern func PutU64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 259, "content": "#### Function 'Buffer.PutU64LE'\n\n\n\n## Signature: \n\n extern func PutU64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 260, "content": "#### Function 'Buffer.PutU64NE'\n\n\n\n## Signature: \n\n extern func PutU64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 261, "content": "#### Function 'Buffer.PutI64BE'\n\n\n\n## Signature: \n\n extern func PutI64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 262, "content": "#### Function 'Buffer.PutI64LE'\n\n\n\n## Signature: \n\n extern func PutI64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 263, "content": "#### Function 'Buffer.PutI64NE'\n\n\n\n## Signature: \n\n extern func PutI64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 264, "content": "#### Function 'Buffer.PutF32BE'\n\n\n\n## Signature: \n\n extern func PutF32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 265, "content": "#### Function 'Buffer.PutF32LE'\n\n\n\n## Signature: \n\n extern func PutF32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 266, "content": "#### Function 'Buffer.PutF32NE'\n\n\n\n## Signature: \n\n extern func PutF32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 267, "content": "#### Function 'Buffer.PutF64BE'\n\n\n\n## Signature: \n\n extern func PutF64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 268, "content": "#### Function 'Buffer.PutF64LE'\n\n\n\n## Signature: \n\n extern func PutF64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 269, "content": "#### Function 'Buffer.PutF64NE'\n\n\n\n## Signature: \n\n extern func PutF64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 270, "content": "#### Function 'Buffer.DecodeUtf8'\n\n\n\n## Signature: \n\n extern func DecodeUtf8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out(name: \"on success\") trigger onSuccess\n\n        out property(String) string\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 271, "content": "#### Function 'Buffer.EncodeUtf8'\n\n\n\n## Signature: \n\n extern func EncodeUtf8 {\n\n        in trigger execute\n\n        in property(String) string\n\n        out trigger continue\n\n        out property(Cursor) buffer\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 272, "content": "#### Function 'Buffer.Concat'\n\nConcatenates two buffers by allocating a new one and copying the contents of `left` and `right`.\n\n## Signature: \n\n extern func(doc: \"Concatenates two buffers by allocating a new one and copying the contents of `left` and `right`.\") Concat {\n\n        in trigger execute\n\n        in property(Cursor) left\n\n        in property(Cursor) right\n\n        out trigger continue\n\n        out property(Cursor) buffer\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 273, "content": "#### Function 'Buffer.Length'\n\n\n\n## Signature: \n\n extern func Length {\n\n        in property(Cursor) buffer\n\n        out property(Number) length\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 274, "content": "#### Function 'Buffer.Empty'\n\n\n\n## Signature: \n\n extern func Empty {\n\n        out property(Cursor) buffer\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 275, "content": "#### Function 'Buffer.ToByteList'\n\n\n\n## Signature: \n\n extern func ToByteList {\n\n        in property(Cursor) buffer\n\n        out property(Any) list\n\n    }\n\n## Custom types in scope: \n\n type Cursor Buffer"}
{"file": "std_extern.midio", "chunk_id": 276, "content": "#### Function 'Sets.Intersection'\n\nReturns the intersection of the two input lists, `left` and `right`, through the `intersect` output.\n\n## Signature: \n\n extern func(doc: \"Returns the intersection of the two input lists, `left` and `right`, through the `intersect` output.\") Intersection {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) intersect\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 277, "content": "#### Function 'Sets.Union'\n\n\n\n## Signature: \n\n extern func Union {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) union\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 278, "content": "#### Function 'Sets.Difference'\n\nReturns the difference of the two input lists, `left` and `right`, through the `difference` output.\n\n## Signature: \n\n extern func(doc: \"Returns the difference of the two input lists, `left` and `right`, through the `difference` output.\") Difference {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) difference\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 279, "content": "#### Function 'Process.RunCommand'\n\n\n\n## Signature: \n\n extern func RunCommand {\n\n        in trigger execute\n\n        in property(String) name\n\n        in property(List or Null) args\n\n        in(name: \"env vars\") property(Any) env\n\n        in property(String or Null) cwd\n\n\n\n        out(name: \"on done\") trigger onDone\n\n        out property(Number or Null) status\n\n        out property(String) stdout\n\n        out property(String) stderr\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 280, "content": "#### Function 'Base64.Encode'\n\n\n\n## Signature: \n\n extern func Encode {\n\n        in property(String) input\n\n        out property(String) encoded\n\n\n\n        parameter(\n\n            editor: \"ComboBox(\\\"standard\\\",\\\"url-safe\\\",\\\"standard-no-pad\\\",\\\"url-safe-no-pad\\\")\",\n\n            defaultValue: \"standard\"\n\n        ) alphabet\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 281, "content": "#### Function 'Base64.Decode'\n\nDecodes a base64 encoded string back into its original input. If the decoding fails, the `on error` trigger is executed. Use `Base64 Encoded` for a version without triggers.\n\n## Signature: \n\n extern func(doc: \"Decodes a base64 encoded string back into its original input. If the decoding fails, the `on error` trigger is executed. Use `Base64 Encoded` for a version without triggers.\") Decode {\n\n        in trigger execute\n\n        out trigger continue\n\n\n\n        in property(String or Buffer) input\n\n        out property(Buffer or String or Null) decoded\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String or Null) error\n\n\n\n        parameter(\n\n            editor: \"ComboBox(\\\"standard\\\",\\\"url-safe\\\",\\\"standard-no-pad\\\",\\\"url-safe-no-pad\\\")\",\n\n            defaultValue: \"standard\"\n\n        ) alphabet\n\n        parameter(\n\n            editor: \"ComboBox(\\\"string\\\",\\\"buffer\\\")\",\n\n            defaultValue: \"string\",\n\n            name: \"result type\"\n\n        ) resultType\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 282, "content": "#### Function 'Base64.Decoded'\n\nA non triggable version of `Base64 Decode`\n\n## Signature: \n\n extern func(doc: \"A non triggable version of `Base64 Decode`\") Decoded {\n\n        in property(String or Buffer) input\n\n        out property(Buffer or String or Null) decoded\n\n\n\n        parameter(\n\n            editor: \"ComboBox(\\\"standard\\\",\\\"url-safe\\\",\\\"standard-no-pad\\\",\\\"url-safe-no-pad\\\")\",\n\n            defaultValue: \"standard\"\n\n        ) alphabet\n\n        parameter(\n\n            editor: \"ComboBox(\\\"string\\\",\\\"buffer\\\")\",\n\n            defaultValue: \"string\",\n\n            name: \"result type\"\n\n        ) resultType\n\n    }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 283, "content": "#### Function 'Hashing.Argon2.HashPassword'\n\n\n\n## Signature: \n\n extern func HashPassword {\n\n            in property(String) input\n\n            out(name: \"phc string\") property(String) phc_string\n\n        }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 284, "content": "#### Function 'Hashing.Argon2.VerifyPassword'\n\n\n\n## Signature: \n\n extern func VerifyPassword {\n\n            in(name: \"password hash\") property(String) password_hash\n\n            in property(String) password\n\n\n\n            out(name: \"phc string\") property(String) phc_string\n\n        }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 285, "content": "#### Function 'Hashing.Argon2.HashKey'\n\n\n\n## Signature: \n\n extern func HashKey {\n\n            in property(String) password\n\n            in property(String) salt\n\n            in(name: \"num bytes\") property(Number) num_bytes\n\n\n\n            out property(Buffer) key\n\n        }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 286, "content": "#### Function 'Hashing.Sha2.Hash'\n\n\n\n## Signature: \n\n extern func Hash {\n\n            in property(String) input\n\n            out property(String or Buffer) hash\n\n\n\n            parameter(\n\n                editor: \"ComboBox(\\\"224\\\",\\\"256\\\", \\\"512_224\\\", \\\"512_256\\\",\\\"384\\\",\\\"512\\\")\",\n\n                defaultValue: \"256\"\n\n            ) bits\n\n            parameter(\n\n                name: \"output type\",\n\n                editor: \"ComboBox(\\\"hex-string\\\",\\\"buffer\\\")\",\n\n                defaultValue: \"hex-string\"\n\n            ) output_type\n\n        }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 287, "content": "#### Function 'Hashing.Sha3.Hash'\n\n\n\n## Signature: \n\n extern func Hash {\n\n            in property(String) input\n\n            out property(String or Buffer) hash\n\n\n\n            parameter(\n\n                editor: \"ComboBox(\\\"SHA3-224\\\", \\\"SHA3-256\\\", \\\"SHA3-384\\\", \\\"SHA3-512\\\", \\\"Keccak224\\\", \\\"Keccak256\\\", \\\"Keccak384\\\", \\\"Keccak512\\\")\",\n\n                defaultValue: \"SHA3-256\"\n\n            ) bits\n\n            parameter(\n\n                name: \"output type\",\n\n                editor: \"ComboBox(\\\"hex-string\\\",\\\"buffer\\\")\",\n\n                defaultValue: \"hex-string\"\n\n            ) output_type\n\n        }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 288, "content": "#### Function 'Hashing.HMAC.Compute'\n\n\n\n## Signature: \n\n extern func Compute {\n\n            parameter(\n\n                name: \"hashing function\",\n\n                editor: \"ComboBox(\\\"SHA2-256\\\", \\\"SHA2-512\\\")\",\n\n                defaultValue: \"SHA2-256\"\n\n            ) hashing_function\n\n\n\n            in property(String) secret\n\n            in property(String) message\n\n\n\n            out property(String) hmac\n\n        }\n\n## Custom types in scope: \n\n None"}
{"file": "std_extern.midio", "chunk_id": 289, "content": "#### Function 'Hashing.HMAC.Verify'\n\n\n\n## Signature: \n\n extern func Verify {\n\n            parameter(\n\n                name: \"hashing function\",\n\n                editor: \"ComboBox(\\\"SHA2-256\\\", \\\"SHA2-512\\\")\",\n\n                defaultValue: \"SHA2-256\"\n\n            ) hashing_function\n\n\n\n            in property(String) secret\n\n            in property(String) message\n\n            in property(String) hmac\n\n\n\n            out property(Bool) result\n\n        }\n\n## Custom types in scope: \n\n None"}
