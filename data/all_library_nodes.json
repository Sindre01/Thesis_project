[
    {
        "type": "function",
        "function_name": "Std.CallFunction",
        "module_path": "Std",
        "doc": "Calls the supplied `handler` function using list of arguments supplied to `inputs`.",
        "body": "extern func(doc: \"Calls the supplied `handler` function using list of arguments supplied to `inputs`.\") CallFunction {\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"inputs\") property inputs\n\n        out(x: 0, y: 0, name: \"outputs\") property outputs\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.OrElse",
        "module_path": "Std",
        "doc": "Return `first` if it is not null, otherwise `second`.",
        "body": "extern func(doc: \"Return `first` if it is not null, otherwise `second`.\") OrElse {\n\n        in(x: 0, y: 0, name: \"first\") property(Any) first\n\n        in(x: 0, y: 0, name: \"second\") property(Any) second\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Switch",
        "module_path": "Std",
        "doc": "Propagates the first value if the first trigger is called, other wise propagates the second value.",
        "body": "extern func(doc: \"Propagates the first value if the first trigger is called, other wise propagates the second value.\") Switch {\n\n        in(x: 0, y: 0, name: \"on first\") trigger() onFirst\n\n        in(x: 0, y: 0, name: \"on second\") trigger() onSecond\n\n        in(x: 0, y: 0, name: \"first\") property(Any) first\n\n        in(x: 0, y: 0, name: \"second\") property(Any) second\n\n        out(x: 0, y: 0, name: \"continue first\") trigger() continueFirst\n\n        out(x: 0, y: 0, name: \"continue second\") trigger() continueSecond\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.GenerateUuid",
        "module_path": "Std",
        "doc": "Generates a uuid",
        "body": "extern func(doc: \"Generates a uuid\") GenerateUuid {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"uuid\") property uuid\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Delay",
        "module_path": "Std",
        "doc": "Pauses execution for `delayFor` ms. All execution is blocked during this time.",
        "body": "extern func(doc: \"Pauses execution for `delayFor` ms. All execution is blocked during this time.\") Delay {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"delay for\") property(Number) delayFor\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Relay",
        "module_path": "Std",
        "doc": "Simple makes the `input` value available on the `value` output to multiple consumers. Since this is an executable function, the input value will be cached, so `Relay` can be used for simple caching of expensive computations",
        "body": "extern func(doc: \"Simple makes the `input` value available on the `value` output to multiple consumers. Since this is an executable function, the input value will be cached, so `Relay` can be used for simple caching of expensive computations\") Relay {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"input\") property(Any) input\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Constant",
        "module_path": "Std",
        "doc": "Makes the `value` parameter available on the `value` output.",
        "body": "extern func(doc: \"Makes the `value` parameter available on the `value` output.\") Constant {\n\n        parameter value\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Log",
        "module_path": "Std",
        "doc": "Write `input` to the Log panel.",
        "body": "extern func(doc: \"Write `input` to the Log panel.\") Log {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"input\") property(Any) input\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.FormatLog",
        "module_path": "Std",
        "doc": "Logs a formatted string to the log window, letting you replace {{input name}} with string content.",
        "body": "extern func(doc: \"Logs a formatted string to the log window, letting you replace {{input name}} with string content.\") FormatLog {\n\n        parameter(compilerPlugin: \"TemplateString\") formatString\n\n\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.ToString",
        "module_path": "Std",
        "doc": "Converts any `input` type to a String.",
        "body": "extern func(doc: \"Converts any `input` type to a String.\") ToString {\n\n        in(x: 0, y: 0, name: \"input\") property(Any) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.If",
        "module_path": "Std",
        "doc": "If `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.",
        "body": "extern func(doc: \"If `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.\") If {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"input\") property(Bool) predicate\n\n        out(x: 0, y: 0, name: \"then\") trigger() then\n\n        out(x: 0, y: 0, name: \"else\") trigger() else\n\n        out(x: 0, y: 0, name: \"value\") property(Bool) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.IfExpression",
        "module_path": "Std",
        "doc": "IfExpression is a function that allows you to create a conditional expression using a simple expression language provided through the `expression` parameter. Example: `a > b ? a : b` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `value` output.",
        "body": "extern func(doc: \"IfExpression is a function that allows you to create a conditional expression using a simple expression language provided through the `expression` parameter. Example: `a > b ? a : b` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `value` output.\") IfExpression {\n\n        parameter(\n\n            compilerPlugin: \"Expression\",\n\n            defaultValue: \"\",\n\n        ) expression\n\n\n\n        in trigger execute\n\n        out trigger then\n\n        out trigger else\n\n        out property(Bool) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Choose",
        "module_path": "Std",
        "doc": "If `predicate` is true, the `value` output will have the value of `then`, otherwise, it will have the value of `else`.",
        "body": "extern func(doc: \"If `predicate` is true, the `value` output will have the value of `then`, otherwise, it will have the value of `else`.\") Choose {\n\n        in property(Bool) predicate\n\n        in property(Any) then\n\n        in property(Any) else\n\n        out property(Any) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Match",
        "module_path": "Std",
        "doc": "Switches on the values provided to the `cases` parameter, which accepts a list of values. For each value, an output trigger is created, which is triggered when the `value` property matches that list item.",
        "body": "extern func(doc: \"Switches on the values provided to the `cases` parameter, which accepts a list of values. For each value, an output trigger is created, which is triggered when the `value` property matches that list item.\") Match {\n\n        parameter(\n\n            compilerPlugin: \"Match\",\n\n            defaultValue: [\"\"],\n\n            editor: \"List\"\n\n        ) cases\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"value\") property value\n\n        out(x: 0, y: 0, name: \"no match\") trigger() noMatch\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.TypeOf",
        "module_path": "Std",
        "doc": "Returns the type of `value` as a String.",
        "body": "extern func(doc: \"Returns the type of `value` as a String.\") TypeOf {\n\n        in(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"type name\") property(String) typeName\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.PWD",
        "module_path": "Std",
        "doc": "Returns the path of the working directory.",
        "body": "extern func(doc: \"Returns the path of the working directory.\") PWD {\n\n        out(x: 0, y: 0, name: \"current directory\") property(String) currentDirectory\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.IterRange",
        "module_path": "Std",
        "doc": "Create a new process for each index in a range, executing the `onItem` trigger for each of them, with a corresponding `index`.",
        "body": "extern func(doc: \"Create a new process for each index in a range, executing the `onItem` trigger for each of them, with a corresponding `index`.\") IterRange {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"from\") property from\n\n        in(x: 0, y: 0, name: \"to\") property to\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"iteration\") trigger() iteration\n\n        out(x: 0, y: 0, name: \"index\") property index\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.IterList",
        "module_path": "Std",
        "doc": "Create a new process for each item in a list, executing the `onItem` trigger for each of them, with a corresponding `item`.",
        "body": "extern func(doc: \"Create a new process for each item in a list, executing the `onItem` trigger for each of them, with a corresponding `item`.\") IterList {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"on item\") trigger() onItem\n\n        out(x: 0, y: 0, name: \"item\") property item\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Fork",
        "module_path": "Std",
        "doc": "Forks to current process by copying its entire state. The current process continues through the `continue` output trigger, while the forked process continues throug the `forked` output trigger, but in a new process.",
        "body": "extern func(doc: \"Forks to current process by copying its entire state. The current process continues through the `continue` output trigger, while the forked process continues throug the `forked` output trigger, but in a new process.\") Fork {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"forked\") trigger() forked\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.ProcessId",
        "module_path": "Std",
        "doc": "Gets the process id of the executing process.",
        "body": "extern func(doc: \"Gets the process id of the executing process.\") ProcessId {\n\n        out(x: 0, y: 0, name: \"pid\") property pid\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Count",
        "module_path": "Std",
        "doc": "Count can be used to make sure a loop in a flow only runs for a certain number of iteartions. The `reset` input trigger resets the count, and the `count` trigger is used to increment it.",
        "body": "extern func(doc: \"Count can be used to make sure a loop in a flow only runs for a certain number of iteartions. The `reset` input trigger resets the count, and the `count` trigger is used to increment it.\") Count {\n\n        in(x: 0, y: 0, name: \"reset\") trigger() reset\n\n        in(x: 0, y: 0, name: \"count\") trigger(consumes: Std.CountContext, ) count\n\n        in(x: 0, y: 0, name: \"iterations\") property(Number) iterations\n\n        out(x: 0, y: 0, name: \"on count\") trigger(produces: Std.CountContext) onCount\n\n        out(x: 0, y: 0, name: \"done\") trigger() done\n\n        out(x: 0, y: 0, name: \"interation\") property(Number) interation\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.For",
        "module_path": "Std",
        "doc": "For is a loop construct that can be used to iterate over a list of items. The `trigger` input is used to start the loop, the `reset` input is used to reset the loop, and the `next` input is used to move to the next item in the list. The `items` input is used to provide the list of items to iterate over. The `on item` output trigger is used to signal that an item has been processed, the `done` output trigger is used to signal that the loop has finished, the `item` output property is used to provide the current item, and the `index` output property is used to provide the current index.",
        "body": "extern func(doc: \"For is a loop construct that can be used to iterate over a list of items. The `trigger` input is used to start the loop, the `reset` input is used to reset the loop, and the `next` input is used to move to the next item in the list. The `items` input is used to provide the list of items to iterate over. The `on item` output trigger is used to signal that an item has been processed, the `done` output trigger is used to signal that the loop has finished, the `item` output property is used to provide the current item, and the `index` output property is used to provide the current index.\") For {\n\n        in trigger() reset\n\n        in trigger(consumes: Number) next\n\n        in property(List) items\n\n        out(name: \"on item\") trigger(produces: Number) onItem\n\n        out trigger done\n\n        out property(Any) item\n\n        out property(Number) index\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "event",
        "function_name": "Std.Start",
        "module_path": "Std",
        "doc": "An event which is triggered as soon as the engine starts.",
        "body": "extern event(doc: \"An event which is triggered as soon as the engine starts.\") Start {\n\n        out(name: \"on start\") trigger() onStart\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Stop",
        "module_path": "Std",
        "doc": "",
        "body": "extern func Stop {\n\n        in trigger stop\n\n        in(name: \"exit code\") property(Number) exitCode\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "ConsumeContext",
        "module_path": "",
        "doc": "Consumes the context of the `execute` trigger, and makes it available as an output through `value`.",
        "body": "extern func(doc: \"Consumes the context of the `execute` trigger, and makes it available as an output through `value`.\") ConsumeContext {\n\n        in trigger(consumes: AnyContext) execute\n\n        out trigger continue\n\n        out property(Any) value\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Number\") IsNumber {\n\n        in property(Any) input\n\n        out(name: \"is number\") property(Bool) isNumber\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Bool\") IsBool {\n\n        in property(Any) input\n\n        out(name: \"is bool\") property(Bool) isBool\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is String\") IsString {\n\n        in property(Any) input\n\n        out(name: \"is string\") property(Bool) isString\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Null\") IsNull {\n\n        in property(Any) input\n\n        out(name: \"is null\") property(Bool) isNull\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is not Null\") NotNull {\n\n        in property(Any) input\n\n        out(name: \"not null\") property(Bool) notNull\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is List\") IsList {\n\n        in property(Any) input\n\n        out(name: \"is list\") property(Bool) isList\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Map\") IsMap {\n\n        in property(Any) input\n\n        out(name: \"is map\") property(Bool) isMap\n\n    }\n\n\n\n    extern func(doc: \"Returns true if the type of `input` is Buffer\") IsBuffer {\n\n        in property(Any) input\n\n        out(name: \"is buffer\") property(Bool) isBuffer\n\n    }\n\n\n\n    extern func(buildTag: \"panic\", doc: \"Causes a native panic to occur with the provided message.\") Panic {\n\n        in trigger execute\n\n        in property message\n\n        out trigger continue\n\n    }\n\n}",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Time.Now",
        "module_path": "Time",
        "doc": "Gives the current time in nano seconds",
        "body": "extern func(doc: \"Gives the current time in nano seconds\") Now {\n\n        out property(Number) time\n\n    }",
        "types": "type DateTime Opaque"
    },
    {
        "type": "function",
        "function_name": "Time.DateNow",
        "module_path": "Time",
        "doc": "Gives the current time as a `DateTime` object",
        "body": "extern func(doc: \"Gives the current time as a `DateTime` object\") DateNow {\n\n        out property(DateTime) date\n\n    }",
        "types": "type DateTime Opaque"
    },
    {
        "type": "function",
        "function_name": "Time.Parse",
        "module_path": "Time",
        "doc": "Parses an RFC 3339 and ISO 8601 date and time string such as 1996-12-19T16:39:57-08:00.",
        "body": "extern func(doc: \"Parses an RFC 3339 and ISO 8601 date and time string such as 1996-12-19T16:39:57-08:00.\") Parse {\n\n        in(x: 0, y: 0, name: \"date string\") property(String) dateString\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }",
        "types": "type DateTime Opaque"
    },
    {
        "type": "function",
        "function_name": "Time.Format",
        "module_path": "Time",
        "doc": "Formats a time value as a string using the given format string (as defined in https://docs.rs/chrono/latest/chrono/format/strftime/index.html).",
        "body": "extern func(doc: \"Formats a time value as a string using the given format string (as defined in https://docs.rs/chrono/latest/chrono/format/strftime/index.html).\") Format {\n\n        in(x: 0, y: 0, name: \"time\") property(DateTime) time\n\n        in(x: 0, y: 0, name: \"format\") property(String) format\n\n        out(x: 0, y: 0, name: \"date string\") property(String) dateString\n\n    }",
        "types": "type DateTime Opaque"
    },
    {
        "type": "function",
        "function_name": "Time.AddSeconds",
        "module_path": "Time",
        "doc": "Adds the given amount of `seconds` to the provided `time` object",
        "body": "extern func(doc: \"Adds the given amount of `seconds` to the provided `time` object\") AddSeconds {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"seconds\") property(Number) seconds\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }",
        "types": "type DateTime Opaque"
    },
    {
        "type": "function",
        "function_name": "Time.AddMinutes",
        "module_path": "Time",
        "doc": "Adds the given amount of `minutes` to the provided `time` object",
        "body": "extern func(doc: \"Adds the given amount of `minutes` to the provided `time` object\") AddMinutes {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"minutes\") property(Number) minutes\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }",
        "types": "type DateTime Opaque"
    },
    {
        "type": "function",
        "function_name": "Time.AddHours",
        "module_path": "Time",
        "doc": "Adds the given amount of `hours` to the provided `time` object",
        "body": "extern func(doc: \"Adds the given amount of `hours` to the provided `time` object\") AddHours {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"hours\") property(Number) hours\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }",
        "types": "type DateTime Opaque"
    },
    {
        "type": "function",
        "function_name": "Time.AddDays",
        "module_path": "Time",
        "doc": "Adds the given amount of `days` to the provided `time` object",
        "body": "extern func(doc: \"Adds the given amount of `days` to the provided `time` object\") AddDays {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"days\") property(Number) days\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }",
        "types": "type DateTime Opaque"
    },
    {
        "type": "function",
        "function_name": "Time.AddWeeks",
        "module_path": "Time",
        "doc": "Adds the given amount of `weeks` to the provided `time` object",
        "body": "extern func(doc: \"Adds the given amount of `weeks` to the provided `time` object\") AddWeeks {\n\n        in(x: 0, y: 0, name: \"time\") property time\n\n        in(x: 0, y: 0, name: \"weeks\") property(Number) weeks\n\n        out(x: 0, y: 0, name: \"time\") property time\n\n    }",
        "types": "type DateTime Opaque"
    },
    {
        "type": "function",
        "function_name": "Strings.Empty",
        "module_path": "Strings",
        "doc": "Creates a new, empty string.",
        "body": "extern func(doc: \"Creates a new, empty string.\") Empty {\n\n        out property(String) empty\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Concat",
        "module_path": "Strings",
        "doc": "Concatenates the values in `left` and `right` as strings, making it available on the `result` output.",
        "body": "extern func(doc: \"Concatenates the values in `left` and `right` as strings, making it available on the `result` output.\") Concat {\n\n        in(x: 0, y: 0, name: \"left\") property(String) left\n\n        in(x: 0, y: 0, name: \"right\") property(String) right\n\n        out(x: 0, y: 0, name: \"result\") property(String) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Template",
        "module_path": "Strings",
        "doc": "Creates a string template letting you replace {{input name}} with string content.",
        "body": "extern func(doc: \"Creates a string template letting you replace {{input name}} with string content.\") Template {\n\n        parameter(compilerPlugin: \"TemplateString\") template\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Length",
        "module_path": "Strings",
        "doc": "Returns the length of the string `input`.",
        "body": "extern func(doc: \"Returns the length of the string `input`.\") Length {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"length\") property(Number) length\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Substring",
        "module_path": "Strings",
        "doc": "Returns the substring of `input` starting at `start` and ending at `end`. If `end` is not provided, the substring will be from `start` to the end of the string.",
        "body": "extern func(doc: \"Returns the substring of `input` starting at `start` and ending at `end`. If `end` is not provided, the substring will be from `start` to the end of the string.\") Substring {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        in(x: 0, y: 0, name: \"start\") property(Number) start\n\n        in(x: 0, y: 0, name: \"end\") property(Number) end\n\n        out(x: 0, y: 0, name: \"substring\") property(String) substring\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Replace",
        "module_path": "Strings",
        "doc": "Returns the string `input` with all occurrences of `search` replaced with `replace`.",
        "body": "extern func(doc: \"Returns the string `input` with all occurrences of `search` replaced with `replace`.\") Replace {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        in(x: 0, y: 0, name: \"search\") property(String) search\n\n        in(x: 0, y: 0, name: \"replace\") property(String) replace\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.ToLower",
        "module_path": "Strings",
        "doc": "Returns the string `input` with all characters converted to lowercase.",
        "body": "extern func(doc: \"Returns the string `input` with all characters converted to lowercase.\") ToLower {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.ToUpper",
        "module_path": "Strings",
        "doc": "Returns the string `input` with all characters converted to uppercase.",
        "body": "extern func(doc: \"Returns the string `input` with all characters converted to uppercase.\") ToUpper {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.IsLowerCase",
        "module_path": "Strings",
        "doc": "Returns true is all characters in `input` are lower case.",
        "body": "extern func(doc: \"Returns true is all characters in `input` are lower case.\") IsLowerCase {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.IsUpperCase",
        "module_path": "Strings",
        "doc": "Returns true is all characters in `input` are upper case.",
        "body": "extern func(doc: \"Returns true is all characters in `input` are upper case.\") IsUpperCase {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Trim",
        "module_path": "Strings",
        "doc": "Returns a trimmed version of `input` where leading an trailing whitespace is removed.",
        "body": "extern func(doc: \"Returns a trimmed version of `input` where leading an trailing whitespace is removed.\") Trim {\n\n        in property(String) input\n\n        out property(String) trimmed\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Join",
        "module_path": "Strings",
        "doc": "Combines each string in `string list` by placing `separator` between them.",
        "body": "extern func(doc: \"Combines each string in `string list` by placing `separator` between them.\") Join {\n\n        in(x: 0, y: 0, name: \"string list\") property(Any) strings\n\n        in(x: 0, y: 0, name: \"separator\") property(String or Null) separator\n\n        out(x: 0, y: 0, name: \"result\") property(String) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Split",
        "module_path": "Strings",
        "doc": "",
        "body": "extern func Split {\n\n        in property(String) string\n\n        in(name: \"split on\") property(String) splitOn\n\n\n\n        out property(List) strings\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Regex.FirstMatch",
        "module_path": "Strings.Regex",
        "doc": "Returns the first match for the provided regex `pattern` matching on `input`. For each capture group, a separate output property is created.",
        "body": "extern func(doc: \"Returns the first match for the provided regex `pattern` matching on `input`. For each capture group, a separate output property is created.\") FirstMatch {\n\n            parameter(compilerPlugin: \"Regex\", aiSystemPrompt: \"\n\n                You will generate a regex pattern based on the users prompt, and only return the generated pattern. Here are some examples:\n\n\n\n                prompt: Find all the words in the sentence which start with the letter 'a'\n\n                pattern: \\\\b[aA]\\\\w+\\\\b\n\n\n\n                prompt: Find all the words in the sentence which end with the letter 'a'\n\n                pattern: \\\\b\\\\w+[aA]\\\\b\n\n\n\n                prompt: Match all email addresses and capture the username and domain\n\n                pattern: (\\\\w+)@(\\\\w+.\\\\w+)\n\n            \") pattern\n\n\n\n            in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n            in(x: 0, y: 0, name: \"input\") property(String) input\n\n\n\n            out(x: 0, y: 0, name: \"found match\") trigger() foundMatch\n\n            out(x: 0, y: 0, name: \"no match\") trigger() noMatch\n\n        }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Regex.AllMatches",
        "module_path": "Strings.Regex",
        "doc": "Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.",
        "body": "extern func(doc: \"Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.\") AllMatches {\n\n            parameter(aiSystemPrompt: \"\n\n                You will generate a regex pattern based on the users prompt, and only return the generated pattern. Here are some examples:\n\n\n\n                prompt: Find all the words in the sentence which start with the letter 'a'\n\n                pattern: \\\\b[aA]\\\\w+\\\\b\n\n\n\n                prompt: Find all the words in the sentence which end with the letter 'a'\n\n                pattern: \\\\b\\\\w+[aA]\\\\b\n\n\n\n                prompt: Match all email addresses and capture the username and domain\n\n                pattern: (\\\\w+)@(\\\\w+.\\\\w+)\n\n            \") pattern\n\n            in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n            in(x: 0, y: 0, name: \"input\") property(String) input\n\n            out(x: 0, y: 0, name: \"continue\") trigger() foundMatches\n\n            out property(List) matches\n\n        }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.AllMatchesWithRange",
        "module_path": "Strings",
        "doc": "Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.",
        "body": "extern func(doc: \"Returns all matches for the provided regex `pattern` matching on `input` as a list of lists, where each item contains a the matches for each capture group, with the first item matching the whole expression.\") AllMatchesWithRange {\n\n            parameter(aiSystemPrompt: \"\n\n                You will generate a regex pattern based on the users prompt, and only return the generated pattern. Here are some examples:\n\n\n\n                prompt: Find all the words in the sentence which start with the letter 'a'\n\n                pattern: \\\\b[aA]\\\\w+\\\\b\n\n\n\n                prompt: Find all the words in the sentence which end with the letter 'a'\n\n                pattern: \\\\b\\\\w+[aA]\\\\b\n\n\n\n                prompt: Match all email addresses and capture the username and domain\n\n                pattern: (\\\\w+)@(\\\\w+.\\\\w+)\n\n            \") pattern\n\n            in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n            in(x: 0, y: 0, name: \"input\") property(String) input\n\n            out(x: 0, y: 0, name: \"continue\") trigger() foundMatches\n\n            out property(List) matches\n\n        }\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.IsNumeric",
        "module_path": "Strings",
        "doc": "Returns true if `input` is a numeric string.",
        "body": "extern func(doc: \"Returns true if `input` is a numeric string.\") IsNumeric {\n\n        in property(String) input\n\n        out(name: \"is numeric\") property(Bool) isNumeric\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.IsAlphabetic",
        "module_path": "Strings",
        "doc": "",
        "body": "extern func IsAlphabetic {\n\n        in property(String) input\n\n        out(name: \"is alphanumeric\") property(Bool) isAlphanumeric\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.IsAlphaNumeric",
        "module_path": "Strings",
        "doc": "",
        "body": "extern func IsAlphaNumeric {\n\n        in property(String) input\n\n        out property(Bool) isAlphaNumeric\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.IsWhitespace",
        "module_path": "Strings",
        "doc": "",
        "body": "extern func IsWhitespace {\n\n        in property(String) input\n\n        out(name: \"is whitespace\") property(Bool) isWhitespace\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.IsEmpty",
        "module_path": "Strings",
        "doc": "",
        "body": "extern func IsEmpty {\n\n        in property(String) input\n\n        out(name: \"is empty\") property(Bool) isEmpty\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Reversed",
        "module_path": "Strings",
        "doc": "",
        "body": "extern func Reversed {\n\n        in property(String) input\n\n        out property(String) reversed\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.MatchIndices",
        "module_path": "Strings",
        "doc": "Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at.",
        "body": "extern func(doc: \"Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at.\") MatchIndices {\n\n        in property(String) input\n\n        in property(String) pattern\n\n        out property(List) indicesOfMatches\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.RightMatchIndices",
        "module_path": "Strings",
        "doc": "Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at, yielded in reverse order.",
        "body": "extern func(doc: \"Returns a list over the disjoint matches of a pattern (not regex) within the `input` string as well as the index that the match starts at, yielded in reverse order.\") RightMatchIndices {\n\n        in property(String) input\n\n        in property(String) pattern\n\n        out property(List) indicesOfMatches\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Characters",
        "module_path": "Strings",
        "doc": "Returns a list of characters in `input`, though the output 'characters' list.",
        "body": "extern func(doc: \"Returns a list of characters in `input`, though the output 'characters' list.\") Characters {\n\n        in property(String) input\n\n        out property(List) characters\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Contains",
        "module_path": "Strings",
        "doc": "Returns true if `input` contains `contains` as a substring.",
        "body": "extern func(doc: \"Returns true if `input` contains `contains` as a substring.\") Contains {\n\n        in property(String) input\n\n        in property(String) contains\n\n        out property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Testing.AssertEqual",
        "module_path": "Testing",
        "doc": "Asserts that `expected` and `actual` are equal. The equality check is a deep check, where objects are traversed and matched against each other. `testId` identifies which test this assert is run under, and is provided by the `Testing.Test` event.",
        "body": "extern func(doc: \"Asserts that `expected` and `actual` are equal. The equality check is a deep check, where objects are traversed and matched against each other. `testId` identifies which test this assert is run under, and is provided by the `Testing.Test` event.\") AssertEqual {\n\n        in(x: 0, y: 0, name: \"execute\") trigger(borrows: Testing.TestContext) execute\n\n        in(x: 0, y: 0, name: \"expect\") property expect\n\n        in(x: 0, y: 0, name: \"actual\") property actual\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": "type TestContext Any"
    },
    {
        "type": "function",
        "function_name": "Testing.AssertTrue",
        "module_path": "Testing",
        "doc": "",
        "body": "extern func AssertTrue {\n\n        in(x: 0, y: 0, name: \"execute\") trigger(borrows: Testing.TestContext) execute\n\n        in(x: 0, y: 0, name: \"actual\") property value\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": "type TestContext Any"
    },
    {
        "type": "function",
        "function_name": "Testing.AssertFalse",
        "module_path": "Testing",
        "doc": "",
        "body": "extern func AssertFalse {\n\n        in(x: 0, y: 0, name: \"execute\") trigger(borrows: Testing.TestContext) execute\n\n        in(x: 0, y: 0, name: \"actual\") property value\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": "type TestContext Any"
    },
    {
        "type": "function",
        "function_name": "Testing.Fail",
        "module_path": "Testing",
        "doc": "Causes the test identified by `testId` to fail.",
        "body": "extern func(doc: \"Causes the test identified by `testId` to fail.\") Fail {\n\n        in(x: 0, y: 0, name: \"execute\") trigger(borrows: Testing.TestContext) execute\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }",
        "types": "type TestContext Any"
    },
    {
        "type": "event",
        "function_name": "Testing.Test",
        "module_path": "Testing",
        "doc": "Creates a test, which can be run using the cli tool. `id` is used by `Testing.AssertEqual` to identify the running test.",
        "body": "extern event(doc: \"Creates a test, which can be run using the cli tool. `id` is used by `Testing.AssertEqual` to identify the running test.\") Test {\n\n        parameter(defaultValue: \"Test name\") name\n\n        out(name: \"on run\") trigger(produces: Testing.TestContext) onRun\n\n    }",
        "types": "type TestContext Any"
    },
    {
        "type": "function",
        "function_name": "Data.GetData",
        "module_path": "Data",
        "doc": "Returns the `data` stored under `key` if the key exists. If the key is present, the `onData` trigger is executed, otherwise the `keyNotFound` trigger is executed.",
        "body": "extern func(doc: \"Returns the `data` stored under `key` if the key exists. If the key is present, the `onData` trigger is executed, otherwise the `keyNotFound` trigger is executed.\") GetData {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        out(x: 0, y: 0, name: \"on data\") trigger() onData\n\n        out(x: 0, y: 0, name: \"keyNotFound\") trigger() keyNotFound\n\n        out(x: 0, y: 0, name: \"data\") property(Any) data\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Data.SetData",
        "module_path": "Data",
        "doc": "Associates a `value` with a string `key`, and also passes on a copy of the inserted data through the `inserted_value` output.",
        "body": "extern func(doc: \"Associates a `value` with a string `key`, and also passes on a copy of the inserted data through the `inserted_value` output.\") SetData {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        in(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"inserted value\") property inserted_value\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Data.RemoveData",
        "module_path": "Data",
        "doc": "Removes the data at `key`",
        "body": "extern func(doc: \"Removes the data at `key`\") RemoveData {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }",
        "types": ""
    },
    {
        "type": "event",
        "function_name": "Data.OnData",
        "module_path": "Data",
        "doc": "Allows one to get an event whenever data on a `key` is added, removed or updated.",
        "body": "extern event(doc: \"Allows one to get an event whenever data on a `key` is added, removed or updated.\") OnData {\n\n        parameter key\n\n        out(name: \"on added\") trigger() onAdded\n\n        out(name: \"on removed\") trigger() onRemoved\n\n        out(name: \"on updated\") trigger() onUpdated\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Json.Parse",
        "module_path": "Json",
        "doc": "Parses the json provided in the `string` property. The parsed `value` is available on success, and the `onSuccess` trigger is executed. If parsing fails, the `onFailure` trigger is executed, and the error is available on the `error` output.",
        "body": "extern func(doc: \"Parses the json provided in the `string` property. The parsed `value` is available on success, and the `onSuccess` trigger is executed. If parsing fails, the `onFailure` trigger is executed, and the error is available on the `error` output.\") Parse {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"string\") property(String) string\n\n        out(x: 0, y: 0, name: \"on success\") trigger() onSuccess\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"on failure\") trigger() onFailure\n\n        out(x: 0, y: 0, name: \"error\") property error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Json.Parsed",
        "module_path": "Json",
        "doc": "Parses the json provided in the `string` property. Returns null if parsing fails. Use `Json.Parse` if you need to be able to handle a parse error explicitly.",
        "body": "extern func(doc: \"Parses the json provided in the `string` property. Returns null if parsing fails. Use `Json.Parse` if you need to be able to handle a parse error explicitly.\") Parsed {\n\n        in(x: 0, y: 0, name: \"string\") property(String) string\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Json.Stringify",
        "module_path": "Json",
        "doc": "Converts any object on the `json` input to a String.",
        "body": "extern func(doc: \"Converts any object on the `json` input to a String.\") Stringify {\n\n        in(x: 0, y: 0, name: \"json\") property(Any) json\n\n        out(x: 0, y: 0, name: \"string\") property(String) string\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "CSV.Parse",
        "module_path": "CSV",
        "doc": "",
        "body": "extern func Parse {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"string\") property(String) string\n\n        out(x: 0, y: 0, name: \"on success\") trigger() onSuccess\n\n        out(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"on failure\") trigger() onFailure\n\n        out(x: 0, y: 0, name: \"error\") property error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "CSV.Stringify",
        "module_path": "CSV",
        "doc": "",
        "body": "extern func Stringify {\n\n        in(x: 0, y: 0, name: \"csv\") property(Any) csv\n\n        out(x: 0, y: 0, name: \"string\") property(String) string\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Empty",
        "module_path": "List",
        "doc": "Creates an empty list",
        "body": "extern func(doc: \"Creates an empty list\") Empty {\n\n        out(x: 0, y: 0, name: \"empty list\") property(List) list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.GetAt",
        "module_path": "List",
        "doc": "Gets the item at `index` from `list`, returning Null if the index is out of bounds.",
        "body": "extern func(doc: \"Gets the item at `index` from `list`, returning Null if the index is out of bounds.\") GetAt {\n\n        in(x: 0, y: 0, name: \"list\") property(List) list\n\n        in(x: 0, y: 0, name: \"index\") property(Number) index\n\n        out(x: 0, y: 0, name: \"itemAtIndex\") property(Any) itemAtIndex\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.SetAt",
        "module_path": "List",
        "doc": "Sets the item at `index` of `list` to `value`",
        "body": "extern func(doc: \"Sets the item at `index` of `list` to `value`\") SetAt {\n\n        in(x: 0, y: 0, name: \"list\") property(List) list\n\n        in(x: 0, y: 0, name: \"index\") property(Number) index\n\n        in(x: 0, y: 0, name: \"value\") property(Number) value\n\n        out(name: \"updated list\") property(List) updatedList\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Add",
        "module_path": "List",
        "doc": "Adds `item` to the `list` by creating a new list with the item added, available on the `listWithItem` output.",
        "body": "extern func(doc: \"Adds `item` to the `list` by creating a new list with the item added, available on the `listWithItem` output.\") Add {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in(x: 0, y: 0, name: \"item\") property item\n\n        out(x: 0, y: 0, name: \"listWithItem\") property listWithItem\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Remove",
        "module_path": "List",
        "doc": "Removes the item at `index` from `list` by creating a new list with the item removed, available on the `listWithoutItem` output.",
        "body": "extern func(doc: \"Removes the item at `index` from `list` by creating a new list with the item removed, available on the `listWithoutItem` output.\") Remove {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in(x: 0, y: 0, name: \"index\") property index\n\n        out(x: 0, y: 0, name: \"listWithoutItem\") property listWithoutItem\n\n        out(x: 0, y: 0, name: \"removed item\") property removedItem\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Length",
        "module_path": "List",
        "doc": "Returns the number of items in `list`.",
        "body": "extern func(doc: \"Returns the number of items in `list`.\") Length {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"length\") property length\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Contains",
        "module_path": "List",
        "doc": "Returns true if `item` is contained in `list`.",
        "body": "extern func(doc: \"Returns true if `item` is contained in `list`.\") Contains {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in(x: 0, y: 0, name: \"item\") property(Any) item\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) is_contained\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Sort",
        "module_path": "List",
        "doc": "Returns a sorted version of `list`",
        "body": "extern func(doc: \"Returns a sorted version of `list`\") Sort {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"sorted list\") property sorted_list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.SortOn",
        "module_path": "List",
        "doc": "Returns a sorted version of `list`. Sorting in done based on the provided `key`, which is retrieved from the objects in the list, which are expected to have that key. If any value in the list is not an object, or doesn't contain the given key, it is treated as less than any other item.",
        "body": "extern func(doc: \"Returns a sorted version of `list`. Sorting in done based on the provided `key`, which is retrieved from the objects in the list, which are expected to have that key. If any value in the list is not an object, or doesn't contain the given key, it is treated as less than any other item.\") SortOn {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in property(String) key\n\n        out(x: 0, y: 0, name: \"sorted list\") property sorted_list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.GenerateRange",
        "module_path": "List",
        "doc": "A list containing number from `from` to `to`.",
        "body": "extern func(doc: \"A list containing number from `from` to `to`.\") GenerateRange {\n\n        in(x: 0, y: 0, name: \"from\") property from\n\n        in(x: 0, y: 0, name: \"to\") property to\n\n        out(x: 0, y: 0, name: \"list\") property list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Max",
        "module_path": "List",
        "doc": "Finds the largest item in a list of numbers",
        "body": "extern func(doc: \"Finds the largest item in a list of numbers\") Max {\n\n        in(x: 0, y: 0, name: \"items\") property(List) items\n\n        out property(Number) max\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Min",
        "module_path": "List",
        "doc": "Finds the smallest item in a list of numbers",
        "body": "extern func(doc: \"Finds the smallest item in a list of numbers\") Min {\n\n        in(x: 0, y: 0, name: \"items\") property(List) items\n\n        out property(Number) min\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Slice",
        "module_path": "List",
        "doc": "Gets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1",
        "body": "extern func(doc: \"Gets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1\") Slice {\n\n        in(x: 0, y: 0, name: \"items\") property(List) list\n\n        in property(Number) start\n\n        in property(Number) end\n\n        out property(List) slice\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Reversed",
        "module_path": "List",
        "doc": "Reverses the order of the items in `list`",
        "body": "extern func(doc: \"Reverses the order of the items in `list`\") Reversed {\n\n        in(x: 0, y: 0, name: \"items\") property(List) list\n\n        out property(List) reversed\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Chunks",
        "module_path": "List",
        "doc": "",
        "body": "extern func Chunks {\n\n        in(name: \"items\") property(List) list\n\n        in(name: \"chunk size\") property(Number) chunkSize\n\n        out property(List) chunks\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.FirstItem",
        "module_path": "List",
        "doc": "Returns the first item in 'list', through the `item` output.",
        "body": "extern func(doc: \"Returns the first item in 'list', through the `item` output.\") FirstItem {\n\n        in property(List) list\n\n        out property(Any) item\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.LastItem",
        "module_path": "List",
        "doc": "Returns the last item in 'list', through the `item` output.",
        "body": "extern func(doc: \"Returns the last item in 'list', through the `item` output.\") LastItem {\n\n        in property(List) list\n\n        out property(Any) item\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.IsEmpty",
        "module_path": "List",
        "doc": "Returns true if `list` is empty, through the 'isEmpty' output",
        "body": "extern func(doc: \"Returns true if `list` is empty, through the 'isEmpty' output\") IsEmpty {\n\n        in property(List) list\n\n        out(name: \"is empty\") property(Bool) isEmpty\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.NotEmpty",
        "module_path": "List",
        "doc": "Returns true if `list` is not empty, through the 'isEmpty' output",
        "body": "extern func(doc: \"Returns true if `list` is not empty, through the 'isEmpty' output\") NotEmpty {\n\n        in property(List) list\n\n        out(name: \"is empty\") property(Bool) isEmpty\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Flatten",
        "module_path": "List",
        "doc": "Converts a list of lists into a flattened list.",
        "body": "extern func(doc: \"Converts a list of lists into a flattened list.\") Flatten {\n\n        in property(List) items\n\n        out property(List) flattened\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Concat",
        "module_path": "List",
        "doc": "Concatenates two lists",
        "body": "extern func(doc: \"Concatenates two lists\") Concat {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.GroupByKey",
        "module_path": "List",
        "doc": "",
        "body": "extern func GroupByKey {\n\n        in property(List) list\n\n        in property(String) key\n\n        out property(Any) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Query.Select",
        "module_path": "Query",
        "doc": "Maps over a list of objects and selects the given set of keys from each object.",
        "body": "extern func(doc: \"Maps over a list of objects and selects the given set of keys from each object.\") Select {\n\n          in property from\n\n          in(editor: \"List\") property keys\n\n          out property result\n\n      }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Query.Pick",
        "module_path": "Query",
        "doc": "Maps over a list of objects extracts the value for the given field from each item.",
        "body": "extern func(doc: \"Maps over a list of objects extracts the value for the given field from each item.\") Pick {\n\n          in property from\n\n          in property key\n\n          out property result\n\n      }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Query.Filter",
        "module_path": "Query",
        "doc": "Filters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.",
        "body": "extern func(doc: \"Filters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.\") Filter {\n\n          parameter(defaultValue: \"it < 10\") where\n\n          in property(List) list\n\n          out property(List) result\n\n      }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Query.Find",
        "module_path": "Query",
        "doc": "Finds the first item in a list where the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.",
        "body": "extern func(doc: \"Finds the first item in a list where the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.\") Find {\n\n          parameter(defaultValue: \"it < 10\") where\n\n          in property(List) list\n\n          out property(Any) item\n\n      }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Query.InnerJoinOn",
        "module_path": "Query",
        "doc": "Join two list of objects together where the given keys match. If there are several pairs of matches, one pair for each match will be present in the list.",
        "body": "extern func(doc: \"Join two list of objects together where the given keys match. If there are several pairs of matches, one pair for each match will be present in the list.\") InnerJoinOn {\n\n          in(name: \"left list\") property(List) left\n\n          in(name: \"left key\") property(String) left_key\n\n          in(name: \"right list\") property(List) right\n\n          in(name: \"right key\") property(String) right_key\n\n          out property result\n\n      }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Structure.Get",
        "module_path": "Structure",
        "doc": "Retrieves the value located at a specified `path` within a `record`. The `path` is a string that represents keys and indices in a nested structure. Keys are denoted by strings, and indices by numbers. If the `path` is valid and the value exists, it triggers `onValue` with the result. If the `path` is invalid or the value does not exist, it triggers `onError`.",
        "body": "extern func(doc: \"Retrieves the value located at a specified `path` within a `record`. The `path` is a string that represents keys and indices in a nested structure. Keys are denoted by strings, and indices by numbers. If the `path` is valid and the value exists, it triggers `onValue` with the result. If the `path` is invalid or the value does not exist, it triggers `onError`.\") Get {\n\n        in trigger execute\n\n        in(x: 0, y: 0, name: \"record\") property record\n\n        in(x: 0, y: 0, name: \"path\") property(String) path\n\n\n\n        out(name: \"on value\") trigger onValue\n\n        out(x: 0, y: 0, name: \"value\") property value\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Structure.Set",
        "module_path": "Structure",
        "doc": "Updates the value at a given `path` within a `record`. The `path` is a string representing where the value should be set within the nested structure of the record. This function creates a new record with the updated value and outputs it as `record_with_value`. Strings in the `path` indicate keys, while numbers indicate indices.",
        "body": "extern func(doc: \"Updates the value at a given `path` within a `record`. The `path` is a string representing where the value should be set within the nested structure of the record. This function creates a new record with the updated value and outputs it as `record_with_value`. Strings in the `path` indicate keys, while numbers indicate indices.\") Set {\n\n        in trigger execute\n\n        in(x: 0, y: 0, name: \"record\") property(Any) record\n\n        in(x: 0, y: 0, name: \"path\") property(String) path\n\n        in(x: 0, y: 0, name: \"value\") property(Any) value\n\n\n\n        out trigger continue\n\n        out(x: 0, y: 0, name: \"record_with_value\") property record_with_value\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.Get",
        "module_path": "Map",
        "doc": "Gets the `value` stored in `map` on `key`.",
        "body": "extern func(doc: \"Gets the `value` stored in `map` on `key`.\") Get {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        out(x: 0, y: 0, name: \"value\") property value\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.Set",
        "module_path": "Map",
        "doc": "Sets the `value` on `key` of `map` by returning a new map with the value, available on the `map_with_value` output.",
        "body": "extern func(doc: \"Sets the `value` on `key` of `map` by returning a new map with the value, available on the `map_with_value` output.\") Set {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        in(x: 0, y: 0, name: \"value\") property(Any) value\n\n        out(x: 0, y: 0, name: \"map_with_value\") property map_with_value\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.Empty",
        "module_path": "Map",
        "doc": "Returns an empty map.",
        "body": "extern func(doc: \"Returns an empty map.\") Empty {\n\n        out(x: 0, y: 0, name: \"new map\") property new_map\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.Merge",
        "module_path": "Map",
        "doc": "Merge two maps into one, picking the last maps items for duplicate keys. If a key in `second` is set to Null, it will not replace an existing value for that key.",
        "body": "extern func(doc: \"Merge two maps into one, picking the last maps items for duplicate keys. If a key in `second` is set to Null, it will not replace an existing value for that key.\") Merge {\n\n        in property first\n\n        in property second\n\n        out property merged\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.ContainsKey",
        "module_path": "Map",
        "doc": "Checks if `map` has a key `key`.",
        "body": "extern func(doc: \"Checks if `map` has a key `key`.\") ContainsKey {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"key\") property(String) key\n\n        out(x: 0, y: 0, name: \"is contained\") property(Bool) is_contained\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.Keys",
        "module_path": "Map",
        "doc": "Returns a list of all the `keys` in `map`.",
        "body": "extern func(doc: \"Returns a list of all the `keys` in `map`.\") Keys {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        out(x: 0, y: 0, name: \"keys\") property keys\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.Values",
        "module_path": "Map",
        "doc": "Returns a list of all the `values` in `map`.",
        "body": "extern func(doc: \"Returns a list of all the `values` in `map`.\") Values {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        out(x: 0, y: 0, name: \"values\") property values\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.Entries",
        "module_path": "Map",
        "doc": "Returns a list of all key-values pairs in `map` as a list of lists.",
        "body": "extern func(doc: \"Returns a list of all key-values pairs in `map` as a list of lists.\") Entries {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        out(x: 0, y: 0, name: \"entries\") property entries\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.WithFields",
        "module_path": "Map",
        "doc": "Returns a new map with only the fields specified in the `fields` list.",
        "body": "extern func(doc: \"Returns a new map with only the fields specified in the `fields` list.\") WithFields {\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"fields\") property(List) fields\n\n        out(x: 0, y: 0, name: \"new map\") property new_map\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Map.MapEntries",
        "module_path": "Map",
        "doc": "Calls the given mapping function instance (`handler`) once for each key value pair in `map` returning a new list with the mapped values (`output_list`).",
        "body": "extern func(doc: \"Calls the given mapping function instance (`handler`) once for each key value pair in `map` returning a new list with the mapped values (`output_list`).\") MapEntries {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"map\") property map\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"output list\") property output_list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.ForEach",
        "module_path": "Iteration",
        "doc": "Calls the given function instance (`handler`) once for each item in `items`",
        "body": "extern func(doc: \"Calls the given function instance (`handler`) once for each item in `items`\") ForEach {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.Map",
        "module_path": "Iteration",
        "doc": "Calls the given function instance (`handler`) once for each item in `items` returning a new list with the mapped values (`output_list`). Handle is expected to be a function which takes in at least one input (the item), and returns a single item, the mapped value. It can also take a second input, which is the index of the value, and a third value, an optional context value passed from the outside.",
        "body": "extern func(doc: \"Calls the given function instance (`handler`) once for each item in `items` returning a new list with the mapped values (`output_list`). Handle is expected to be a function which takes in at least one input (the item), and returns a single item, the mapped value. It can also take a second input, which is the index of the value, and a third value, an optional context value passed from the outside.\") Map {\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"output list\") property output_list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.Zip",
        "module_path": "Iteration",
        "doc": "Call the given function instance ('handler') on corresponding pairs of elements from 'left' and 'right' lists. The function applies 'handler(left[i], right[i])' for each index 'i', up to the length of the shorter list. The results are collected into the output property 'zipped'.",
        "body": "extern func(doc: \"Call the given function instance ('handler') on corresponding pairs of elements from 'left' and 'right' lists. The function applies 'handler(left[i], right[i])' for each index 'i', up to the length of the shorter list. The results are collected into the output property 'zipped'.\") Zip {\n\n        in property(List) left\n\n        in property(List) right\n\n        in property(Any) handler\n\n        out property zipped\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.Filter",
        "module_path": "Iteration",
        "doc": "Filters the input list 'items' using the provided 'handler' function, which is expected to return a boolean value. The filtered list is available on the 'output_list' output.",
        "body": "extern func(doc: \"Filters the input list 'items' using the provided 'handler' function, which is expected to return a boolean value. The filtered list is available on the 'output_list' output.\") Filter {\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"output list\") property output_list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.Reduce",
        "module_path": "Iteration",
        "doc": "Reduces the list `item` using the provided reducer function, which is expected to accept 2-4 inputs, the first being the accumulated value, and the second the value being accumulated. A third optional input will contain the current index, while the fourth optional input will contain the context input.",
        "body": "extern func(doc: \"Reduces the list `item` using the provided reducer function, which is expected to accept 2-4 inputs, the first being the accumulated value, and the second the value being accumulated. A third optional input will contain the current index, while the fourth optional input will contain the context input.\") Reduce {\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(name: \"initial value\") property initialValue\n\n        in(x: 0, y: 0, name: \"reducer\") property(Any) reducer\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"output\") property output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.Find",
        "module_path": "Iteration",
        "doc": "Finds an item in the list `items` that satisfies the `predicate` function, and returns the item through the `item` output.",
        "body": "extern func(doc: \"Finds an item in the list `items` that satisfies the `predicate` function, and returns the item through the `item` output.\") Find {\n\n        in property(List) items\n\n        in property predicate\n\n        in property context\n\n        out property item\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Floor",
        "module_path": "Math",
        "doc": "Returns the largest integer less than or equal `input`",
        "body": "extern func(doc: \"Returns the largest integer less than or equal `input`\") Floor {\n\n        in(x: 0, y: 0, name: \"input\") property input\n\n        out(x: 0, y: 0, name: \"output\") property output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Add",
        "module_path": "Math",
        "doc": "Adds `first` and `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Adds `first` and `second` making the result avilable on the `result` output.\") Add {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Sub",
        "module_path": "Math",
        "doc": "Subtracts `first` and `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Subtracts `first` and `second` making the result avilable on the `result` output.\") Sub {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Mul",
        "module_path": "Math",
        "doc": "Multiplies `first` and `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Multiplies `first` and `second` making the result avilable on the `result` output.\") Mul {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Div",
        "module_path": "Math",
        "doc": "Divides `first` by `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Divides `first` by `second` making the result avilable on the `result` output.\") Div {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.LessThan",
        "module_path": "Math",
        "doc": "Checks is `left` less than `right`.",
        "body": "extern func(doc: \"Checks is `left` less than `right`.\") LessThan {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.GreaterThan",
        "module_path": "Math",
        "doc": "Checks if `left` is greater than `right`",
        "body": "extern func(doc: \"Checks if `left` is greater than `right`\") GreaterThan {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.LessThanOrEqual",
        "module_path": "Math",
        "doc": "Checks if 'left' is les than or eqaul to the 'right'",
        "body": "extern func(doc: \"Checks if 'left' is les than or eqaul to the 'right'\") LessThanOrEqual {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.GreaterThanOrEqual",
        "module_path": "Math",
        "doc": "Checks if the 'left' is greater than or equal to the 'right'",
        "body": "extern func(doc: \"Checks if the 'left' is greater than or equal to the 'right'\") GreaterThanOrEqual {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Expression",
        "module_path": "Math",
        "doc": "Creates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.",
        "body": "extern func(doc: \"Creates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.\") Expression {\n\n        parameter(\n\n            compilerPlugin: \"Expression\",\n\n            defaultValue: \"\",\n\n            aiSystemPrompt: \"You will generate math expressions based on a user prompt. The expression you generate will consist only of the following operators:\n\n                            - + (plus)\n\n                            - - (minus)\n\n                            - * (multiply)\n\n                            - / (divide)\n\n                            - % (modulo)\n\n\n\n                            Inputs that must be provided by the user are represented by valid C identifiers, and should prefer to be as short as possible, without confusing the user about what the input represents.\n\n\n\n                            Here are a few examples:\n\n\n\n                            Prompt: Calcualte the average of three number\n\n                            Response: (a + b + c) / 3\n\n\n\n                            Prompt: Calculate the area of a circle of radius r\n\n                            Response: 3.14 * r * r\n\n\n\n                            Prompt: Calculate the area of a rectangle\n\n                            Response: a * b\n\n                            \",\n\n        ) expression\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Abs",
        "module_path": "Math",
        "doc": "Returns the absolute value of `x`.",
        "body": "extern func(doc: \"Returns the absolute value of `x`.\") Abs {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Sin",
        "module_path": "Math",
        "doc": "Returns the sine of `x` (in radians).",
        "body": "extern func(doc: \"Returns the sine of `x` (in radians).\") Sin {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Cos",
        "module_path": "Math",
        "doc": "Returns the cosine of `x` (in radians).",
        "body": "extern func(doc: \"Returns the cosine of `x` (in radians).\") Cos {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Tan",
        "module_path": "Math",
        "doc": "Returns the tangent of `x` (in radians).",
        "body": "extern func(doc: \"Returns the tangent of `x` (in radians).\") Tan {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Asin",
        "module_path": "Math",
        "doc": "Returns the arcsine of `x` (in radians).",
        "body": "extern func(doc: \"Returns the arcsine of `x` (in radians).\") Asin {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Acos",
        "module_path": "Math",
        "doc": "Returns the arccosine of `x` (in radians).",
        "body": "extern func(doc: \"Returns the arccosine of `x` (in radians).\") Acos {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Atan",
        "module_path": "Math",
        "doc": "Returns the arctangent of `x` (in radians).",
        "body": "extern func(doc: \"Returns the arctangent of `x` (in radians).\") Atan {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Exp",
        "module_path": "Math",
        "doc": "Returns the natural exponential function of `x`.",
        "body": "extern func(doc: \"Returns the natural exponential function of `x`.\") Exp {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Log",
        "module_path": "Math",
        "doc": "Returns the natural logarithm (base e) of `x`.",
        "body": "extern func(doc: \"Returns the natural logarithm (base e) of `x`.\") Log {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Log10",
        "module_path": "Math",
        "doc": "Returns the base-10 logarithm of `x`.",
        "body": "extern func(doc: \"Returns the base-10 logarithm of `x`.\") Log10 {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Pow",
        "module_path": "Math",
        "doc": "Returns `x` raised to the power of `y`.",
        "body": "extern func(doc: \"Returns `x` raised to the power of `y`.\") Pow {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        in(x: 0, y: 0, name: \"y\") property y\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Sqrt",
        "module_path": "Math",
        "doc": "Returns the positive square root of `x`.",
        "body": "extern func(doc: \"Returns the positive square root of `x`.\") Sqrt {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Cbrt",
        "module_path": "Math",
        "doc": "Returns the cube root of `x`.",
        "body": "extern func(doc: \"Returns the cube root of `x`.\") Cbrt {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.NthRoot",
        "module_path": "Math",
        "doc": "Returns the `n`th root of `x`.",
        "body": "extern func(doc: \"Returns the `n`th root of `x`.\") NthRoot {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        in(x: 0, y: 0, name: \"n\") property n\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Ceil",
        "module_path": "Math",
        "doc": "Returns the smallest integer greater than or equal to `x`.",
        "body": "extern func(doc: \"Returns the smallest integer greater than or equal to `x`.\") Ceil {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Modulo",
        "module_path": "Math",
        "doc": "Calculates the modulo of `value` and `divisor`, and returns the modulo through the `result` output.",
        "body": "extern func(doc: \"Calculates the modulo of `value` and `divisor`, and returns the modulo through the `result` output.\") Modulo {\n\n        in(x: 0, y: 0, name: \"value\") property value\n\n        in(x: 0, y: 0, name: \"divisor\") property divisor\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Round",
        "module_path": "Math",
        "doc": "Rounds `x` to the nearest integer.",
        "body": "extern func(doc: \"Rounds `x` to the nearest integer.\") Round {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.RoundTo",
        "module_path": "Math",
        "doc": "Rounds `x` to `decimals` decimal places.",
        "body": "extern func(doc: \"Rounds `x` to `decimals` decimal places.\") RoundTo {\n\n        in(x: 0, y: 0, name: \"x\") property x\n\n        in(x: 0, y: 0, name: \"decimals\") property decimals\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Min",
        "module_path": "Math",
        "doc": "Returns the smallest of the input numbers.",
        "body": "extern func(doc: \"Returns the smallest of the input numbers.\") Min {\n\n        in(x: 0, y: 0, name: \"values\") property values\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Max",
        "module_path": "Math",
        "doc": "Returns the largest of the input numbers.",
        "body": "extern func(doc: \"Returns the largest of the input numbers.\") Max {\n\n        in(x: 0, y: 0, name: \"values\") property values\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Max2",
        "module_path": "Math",
        "doc": "Finds the largest of two numbers",
        "body": "extern func(doc: \"Finds the largest of two numbers\") Max2 {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out property(Number) max\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Min2",
        "module_path": "Math",
        "doc": "Finds the smallest of two numbers",
        "body": "extern func(doc: \"Finds the smallest of two numbers\") Min2 {\n\n        in(x: 0, y: 0, name: \"left\") property(Number) left\n\n        in(x: 0, y: 0, name: \"right\") property(Number) right\n\n        out property(Number) min\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Random",
        "module_path": "Math",
        "doc": "Creates a random `value` from `from` to `to` each time the function is `execute`d.",
        "body": "extern func(doc: \"Creates a random `value` from `from` to `to` each time the function is `execute`d.\") Random {\n\n        in(x: 0, y: 0, name: \"from\") property from\n\n        in(x: 0, y: 0, name: \"to\") property to\n\n        out(x: 0, y: 0, name: \"value\") property value\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.NumberFromString",
        "module_path": "Math",
        "doc": "Converts `string` to a number. If the string is not convertible to a number, Null is returned.",
        "body": "extern func(doc: \"Converts `string` to a number. If the string is not convertible to a number, Null is returned.\") NumberFromString {\n\n        in(x: 0, y: 0, name: \"string\") property string\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "LinearAlgebra.VecFromList",
        "module_path": "LinearAlgebra",
        "doc": "",
        "body": "extern func VecFromList {\n\n        in(name: \"Number list\") property number_list\n\n        out property(Vector) vector\n\n    }",
        "types": "type Vector Opaque"
    },
    {
        "type": "function",
        "function_name": "LinearAlgebra.DotProduct",
        "module_path": "LinearAlgebra",
        "doc": "",
        "body": "extern func DotProduct {\n\n        in(name: \"left vector\") property(Vector) left_vector\n\n        in(name: \"right vector\") property(Vector) right_vector\n\n        out property(Number) result\n\n    }",
        "types": "type Vector Opaque"
    },
    {
        "type": "function",
        "function_name": "LinearAlgebra.L2Norm",
        "module_path": "LinearAlgebra",
        "doc": "",
        "body": "extern func L2Norm {\n\n        in property(Vector) vector\n\n        out property(Number) result\n\n    }",
        "types": "type Vector Opaque"
    },
    {
        "type": "function",
        "function_name": "LinearAlgebra.KMeans",
        "module_path": "LinearAlgebra",
        "doc": "",
        "body": "extern func KMeans {\n\n        in property(List) vectors\n\n        in(name: \"num clusters\") property(Number) num_clusters\n\n        in(name: \"max iterations\") property(Number) max_iterations\n\n        out(name: \"cluster assignments\") property(List) cluster_assignments\n\n        out property(List) centroids\n\n    }",
        "types": "type Vector Opaque"
    },
    {
        "type": "function",
        "function_name": "Logic.Equal",
        "module_path": "Logic",
        "doc": "Checks if `left` and `right` are equal by performing a deep scan of the objects.",
        "body": "extern func(doc: \"Checks if `left` and `right` are equal by performing a deep scan of the objects.\") Equal {\n\n        in(x: 0, y: 0, name: \"left\") property(Any) left\n\n        in(x: 0, y: 0, name: \"right\") property(Any) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Logic.NotEqual",
        "module_path": "Logic",
        "doc": "Checks if `left` and `right` are not equal by performing a deep scan of the objects.",
        "body": "extern func(doc: \"Checks if `left` and `right` are not equal by performing a deep scan of the objects.\") NotEqual {\n\n        in(x: 0, y: 0, name: \"left\") property(Any) left\n\n        in(x: 0, y: 0, name: \"right\") property(Any) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Logic.Not",
        "module_path": "Logic",
        "doc": "The logic not operator",
        "body": "extern func(doc: \"The logic not operator\") Not {\n\n        in property(Bool) input\n\n        out property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Logic.Or",
        "module_path": "Logic",
        "doc": "The logic or operator",
        "body": "extern func(doc: \"The logic or operator\") Or {\n\n        in property(Bool) left\n\n        in property(Bool) right\n\n        out property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Logic.And",
        "module_path": "Logic",
        "doc": "The logic and operator",
        "body": "extern func(doc: \"The logic and operator\") And {\n\n        in property(Bool) left\n\n        in property(Bool) right\n\n        out property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "event",
        "function_name": "Scheduling.Schedule",
        "module_path": "Scheduling",
        "doc": "Schedule can be used to trigger flows based on a timed schedule. It is based on the Cron API, but with support for resolution down to seconds. Note that scheduling is started relative to the current UTC time.",
        "body": "extern event(doc: \"Schedule can be used to trigger flows based on a timed schedule. It is based on the Cron API, but with support for resolution down to seconds. Note that scheduling is started relative to the current UTC time.\") Schedule {\n\n        parameter(name: \"second (0-59)\", defaultValue: \"0\") second\n\n        parameter(name: \"minute (0-59)\", defaultValue: \"*\") minute\n\n        parameter(name: \"hour (0-23)\", defaultValue: \"*\") hour\n\n        parameter(name: \"day of the month (1-31)\", defaultValue: \"*\") day_of_month\n\n        parameter(name: \"month (1-12)\", defaultValue: \"*\") month\n\n        parameter(name: \"day of the week (0-6)\", defaultValue: \"*\") week_day\n\n        parameter(name: \"year\", defaultValue: \"*\") year\n\n\n\n        out(name: \"on tick\") trigger onTick\n\n    }",
        "types": ""
    },
    {
        "type": "event",
        "function_name": "Scheduling.ScheduleFromCronExpression",
        "module_path": "Scheduling",
        "doc": "",
        "body": "extern event(doc: \"Creates a schedule using a cron expression (second minute hour 'day of month' 'month' 'day of week' year). See https://en.wikipedia.org/wiki/Cron for details (note that this page doesn't show with second as the lowest resolution, as we do here.\")) ScheduleFromCronExpression {\n\n        parameter(name: \"cron expression\", defaultValue: \"*/5 * * * * * *\") cron_expr\n\n        out(name: \"on tick\") trigger onTick\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Net.TcpSend",
        "module_path": "Net",
        "doc": "Sends the provided `line` as a tcp messages to the target of `connection`.",
        "body": "extern func(doc: \"Sends the provided `line` as a tcp messages to the target of `connection`.\") TcpSend {\n\n        in(x: 0, y: 0, name: \"send\") trigger() send\n\n        in(x: 0, y: 0, name: \"connection\") property connection\n\n        in(x: 0, y: 0, name: \"line\") property line\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Net.TcpListen",
        "module_path": "Net",
        "doc": "",
        "body": "extern func TcpListen {\n\n        in(x: 0, y: 0, name: \"listen\") trigger() listen\n\n        in(x: 0, y: 0, name: \"address\") property address\n\n        in(x: 0, y: 0, name: \"port\") property port\n\n        out(x: 0, y: 0, name: \"listening\") trigger() listening\n\n        out(x: 0, y: 0, name: \"on connection\") trigger() onConnection\n\n        out(x: 0, y: 0, name: \"stream\") property stream\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Net.TcpReadLine",
        "module_path": "Net",
        "doc": "",
        "body": "extern func TcpReadLine {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"stream\") property stream\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"line\") property line\n\n    }",
        "types": ""
    },
    {
        "type": "event",
        "function_name": "Net.TcpStream",
        "module_path": "Net",
        "doc": "Listens for tcp messages by binding a tcp listener to the provided `address`:`port`. The `onLine` trigger is executed for each `line` received on `connection`.",
        "body": "extern event(doc: \"Listens for tcp messages by binding a tcp listener to the provided `address`:`port`. The `onLine` trigger is executed for each `line` received on `connection`.\") TcpStream {\n\n        parameter port\n\n        parameter address\n\n        out(name: \"on line\") trigger() onLine\n\n        out() property connection\n\n        out() property line\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.FromFile",
        "module_path": "Image",
        "doc": "",
        "body": "extern func(buildTag: \"file\", doc: \"Reads the contents of `file` and interprets it as an `image`. The supported image formats can be found here (https://docs.rs/image/latest/image/codecs/index.html#supported-formats)\") FromFile {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"file\") property file\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.FromBuffer",
        "module_path": "Image",
        "doc": "Converts the `buffer` to an `image`",
        "body": "extern func(doc: \"Converts the `buffer` to an `image`\") FromBuffer {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"buffer\") property buffer\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.ToBuffer",
        "module_path": "Image",
        "doc": "Converts the `image` to a `buffer`",
        "body": "extern func(doc: \"Converts the `image` to a `buffer`\") ToBuffer {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"buffer\") property buffer\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.BoxFilter",
        "module_path": "Image",
        "doc": "Applies a 3x3 box filter on the image using the provided `kernel`, which expected a flattened 3x3 list of numbers (9 numbers).",
        "body": "extern func(doc: \"Applies a 3x3 box filter on the image using the provided `kernel`, which expected a flattened 3x3 list of numbers (9 numbers).\") BoxFilter {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"kernel\", editor: \"InputGrid(3,3)\") property kernel\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Blend",
        "module_path": "Image",
        "doc": "Blends two images together",
        "body": "extern func(doc: \"Blends two images together\") Blend {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image1\") property image1\n\n        in(x: 0, y: 0, name: \"image2\") property image2\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Resize",
        "module_path": "Image",
        "doc": "Resizes the `image` to `width` and `height`, making the result available on the `resized_image` output.",
        "body": "extern func(doc: \"Resizes the `image` to `width` and `height`, making the result available on the `resized_image` output.\") Resize {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"width\") property width\n\n        in(x: 0, y: 0, name: \"height\") property height\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"resized image\") property resized_image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.SaveToFile",
        "module_path": "Image",
        "doc": "",
        "body": "extern func(buildTag: \"file\", doc: \"Saves the provided `image` content to a file named `path`, using the file name as an indication of which encoding to use.\") SaveToFile {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"path\") property path\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Blur",
        "module_path": "Image",
        "doc": "Blurs the `image` by `amount`. NOTE: This function can become slow when using large values for `amount`. This should be fixed in the future.",
        "body": "extern func(doc: \"Blurs the `image` by `amount`. NOTE: This function can become slow when using large values for `amount`. This should be fixed in the future.\") Blur {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"amount\") property amount\n\n        out(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Grayscale",
        "module_path": "Image",
        "doc": "Converts `image` to grayscale.",
        "body": "extern func(doc: \"Converts `image` to grayscale.\") Grayscale {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Brighten",
        "module_path": "Image",
        "doc": "Brightens `image` by `amount`.",
        "body": "extern func(doc: \"Brightens `image` by `amount`.\") Brighten {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"amount\") property amount\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Contrast",
        "module_path": "Image",
        "doc": "Increases the contrast of `image` by `amount`.",
        "body": "extern func(doc: \"Increases the contrast of `image` by `amount`.\") Contrast {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"amount\") property amount\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.FlipHorizontal",
        "module_path": "Image",
        "doc": "Flips `image` horizontally.",
        "body": "extern func(doc: \"Flips `image` horizontally.\") FlipHorizontal {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.FlipVertical",
        "module_path": "Image",
        "doc": "Flips `image` vertically.",
        "body": "extern func(doc: \"Flips `image` vertically.\") FlipVertical {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Rotate90",
        "module_path": "Image",
        "doc": "Rotates `image` by 90 degress clockwise.",
        "body": "extern func(doc: \"Rotates `image` by 90 degress clockwise.\") Rotate90 {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Rotate180",
        "module_path": "Image",
        "doc": "Rotates `image` by 180 degress.",
        "body": "extern func(doc: \"Rotates `image` by 180 degress.\") Rotate180 {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Rotate270",
        "module_path": "Image",
        "doc": "Rotates `image` by 270 degress clockwise.",
        "body": "extern func(doc: \"Rotates `image` by 270 degress clockwise.\") Rotate270 {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Threshold",
        "module_path": "Image",
        "doc": "Threshold `image` by `threshold`.",
        "body": "extern func(doc: \"Threshold `image` by `threshold`.\") Threshold {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        in(x: 0, y: 0, name: \"threshold\", editor: \"Slider(0,10)\") property threshold\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"image\") property image\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Image.Base64Encode",
        "module_path": "Image",
        "doc": "Base64 encodes `image` into a string.",
        "body": "extern func(doc: \"Base64 encodes `image` into a string.\") Base64Encode {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"image\") property image\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"value\") property value\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "File.ReadAll",
        "module_path": "File",
        "doc": "Reads the entire contents of the file at `path` and returns the contents in the `content` output.",
        "body": "extern func(doc: \"Reads the entire contents of the file at `path` and returns the contents in the `content` output.\") ReadAll {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n        out property(String) content\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "File.ReadAllToBuffer",
        "module_path": "File",
        "doc": "Reads the entire contents of the file at `path` and returns the contents in the `content` output.",
        "body": "extern func(doc: \"Reads the entire contents of the file at `path` and returns the contents in the `content` output.\") ReadAllToBuffer {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n        out property(Buffer) content\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "File.WriteAll",
        "module_path": "File",
        "doc": "Writes the string or buffer to the specified path as is, or converts the value to a string if it is not a String or Buffer and then writes to file.",
        "body": "extern func(doc: \"Writes the string or buffer to the specified path as is, or converts the value to a string if it is not a String or Buffer and then writes to file.\") WriteAll {\n\n        in trigger execute\n\n        in property(String) path\n\n        in property(String or Buffer or Any) content\n\n\n\n        out(name: \"on done\") trigger onDone\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "File.ListDirectory",
        "module_path": "File",
        "doc": "",
        "body": "extern func ListDirectory {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n        out property(List) files\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "File.CreateDirectory",
        "module_path": "File",
        "doc": "",
        "body": "extern func CreateDirectory {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "File.RemoveFile",
        "module_path": "File",
        "doc": "",
        "body": "extern func RemoveFile {\n\n        in trigger execute\n\n        in property(String) path\n\n\n\n        out(name: \"on done\") trigger onDone\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Env.GetEnvironmentVariable",
        "module_path": "Env",
        "doc": "",
        "body": "extern func GetEnvironmentVariable {\n\n        in trigger execute\n\n        in(name: \"variable name\") property(String) variable_name\n\n\n\n        out(name: \"on variable\") trigger onVariable\n\n        out property(String) value\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Env.SetEnvironmentVariable",
        "module_path": "Env",
        "doc": "",
        "body": "extern func SetEnvironmentVariable {\n\n        in trigger execute\n\n        in(name: \"variable name\") property(String) variable_name\n\n        in property(String) value\n\n\n\n        out(name: \"on success\") trigger onSuccess\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Env.EnvironmentVariable",
        "module_path": "Env",
        "doc": "",
        "body": "extern func EnvironmentVariable {\n\n        in(name: \"variable name\") property(String) variable_name\n\n        out property(String or Null) value\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Buffer.FromString",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func FromString {\n\n        in trigger execute\n\n        in property(String) string\n\n        out trigger continue\n\n        out property(Buffer) buffer\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU8",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI8",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU16BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU16BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU16LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU16LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU16NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU16NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI16BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI16BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI16LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI16LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI16NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI16NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU32BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU32LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU32NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI32BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI32LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI32NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU64BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU64LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadU64NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadU64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI64BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI64LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadI64NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadI64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadF32BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadF32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadF32LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadF32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadF32NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadF32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadF64BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadF64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadF64LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadF64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ReadF64NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ReadF64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n        out property(Number) output\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU8",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI8",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU16BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU16BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU16LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU16LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU16NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU16NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI16BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI16BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI16LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI16LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI16NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI16NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU32BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU32LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU32NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI32BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI32LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI32NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU64BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU64LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutU64NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutU64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI64BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI64LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutI64NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutI64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutF32BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutF32BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutF32LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutF32LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutF32NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutF32NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutF64BE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutF64BE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutF64LE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutF64LE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.PutF64NE",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func PutF64NE {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        in property(Number) value\n\n        out trigger continue\n\n        out property(Cursor) cursor\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.DecodeUtf8",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func DecodeUtf8 {\n\n        in trigger execute\n\n        in property(Cursor) buffer\n\n        out(name: \"on success\") trigger onSuccess\n\n        out property(String) string\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.EncodeUtf8",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func EncodeUtf8 {\n\n        in trigger execute\n\n        in property(String) string\n\n        out trigger continue\n\n        out property(Cursor) buffer\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.Concat",
        "module_path": "Buffer",
        "doc": "Concatenates two buffers by allocating a new one and copying the contents of `left` and `right`.",
        "body": "extern func(doc: \"Concatenates two buffers by allocating a new one and copying the contents of `left` and `right`.\") Concat {\n\n        in trigger execute\n\n        in property(Cursor) left\n\n        in property(Cursor) right\n\n        out trigger continue\n\n        out property(Cursor) buffer\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.Length",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func Length {\n\n        in property(Cursor) buffer\n\n        out property(Number) length\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.Empty",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func Empty {\n\n        out property(Cursor) buffer\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Buffer.ToByteList",
        "module_path": "Buffer",
        "doc": "",
        "body": "extern func ToByteList {\n\n        in property(Cursor) buffer\n\n        out property(Any) list\n\n    }",
        "types": "type Cursor Buffer"
    },
    {
        "type": "function",
        "function_name": "Sets.Intersection",
        "module_path": "Sets",
        "doc": "Returns the intersection of the two input lists, `left` and `right`, through the `intersect` output.",
        "body": "extern func(doc: \"Returns the intersection of the two input lists, `left` and `right`, through the `intersect` output.\") Intersection {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) intersect\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Sets.Union",
        "module_path": "Sets",
        "doc": "",
        "body": "extern func Union {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) union\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Sets.Difference",
        "module_path": "Sets",
        "doc": "Returns the difference of the two input lists, `left` and `right`, through the `difference` output.",
        "body": "extern func(doc: \"Returns the difference of the two input lists, `left` and `right`, through the `difference` output.\") Difference {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) difference\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Process.RunCommand",
        "module_path": "Process",
        "doc": "",
        "body": "extern func RunCommand {\n\n        in trigger execute\n\n        in property(String) name\n\n        in property(List or Null) args\n\n        in(name: \"env vars\") property(Any) env\n\n        in property(String or Null) cwd\n\n\n\n        out(name: \"on done\") trigger onDone\n\n        out property(Number or Null) status\n\n        out property(String) stdout\n\n        out property(String) stderr\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String) error\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Base64.Encode",
        "module_path": "Base64",
        "doc": "",
        "body": "extern func Encode {\n\n        in property(String) input\n\n        out property(String) encoded\n\n\n\n        parameter(\n\n            editor: \"ComboBox(\\\"standard\\\",\\\"url-safe\\\",\\\"standard-no-pad\\\",\\\"url-safe-no-pad\\\")\",\n\n            defaultValue: \"standard\"\n\n        ) alphabet\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Base64.Decode",
        "module_path": "Base64",
        "doc": "Decodes a base64 encoded string back into its original input. If the decoding fails, the `on error` trigger is executed. Use `Base64 Encoded` for a version without triggers.",
        "body": "extern func(doc: \"Decodes a base64 encoded string back into its original input. If the decoding fails, the `on error` trigger is executed. Use `Base64 Encoded` for a version without triggers.\") Decode {\n\n        in trigger execute\n\n        out trigger continue\n\n\n\n        in property(String or Buffer) input\n\n        out property(Buffer or String or Null) decoded\n\n\n\n        out(name: \"on error\") trigger onError\n\n        out property(String or Null) error\n\n\n\n        parameter(\n\n            editor: \"ComboBox(\\\"standard\\\",\\\"url-safe\\\",\\\"standard-no-pad\\\",\\\"url-safe-no-pad\\\")\",\n\n            defaultValue: \"standard\"\n\n        ) alphabet\n\n        parameter(\n\n            editor: \"ComboBox(\\\"string\\\",\\\"buffer\\\")\",\n\n            defaultValue: \"string\",\n\n            name: \"result type\"\n\n        ) resultType\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Base64.Decoded",
        "module_path": "Base64",
        "doc": "A non triggable version of `Base64 Decode`",
        "body": "extern func(doc: \"A non triggable version of `Base64 Decode`\") Decoded {\n\n        in property(String or Buffer) input\n\n        out property(Buffer or String or Null) decoded\n\n\n\n        parameter(\n\n            editor: \"ComboBox(\\\"standard\\\",\\\"url-safe\\\",\\\"standard-no-pad\\\",\\\"url-safe-no-pad\\\")\",\n\n            defaultValue: \"standard\"\n\n        ) alphabet\n\n        parameter(\n\n            editor: \"ComboBox(\\\"string\\\",\\\"buffer\\\")\",\n\n            defaultValue: \"string\",\n\n            name: \"result type\"\n\n        ) resultType\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Hashing.Argon2.HashPassword",
        "module_path": "Hashing.Argon2",
        "doc": "",
        "body": "extern func HashPassword {\n\n            in property(String) input\n\n            out(name: \"phc string\") property(String) phc_string\n\n        }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Hashing.Argon2.VerifyPassword",
        "module_path": "Hashing.Argon2",
        "doc": "",
        "body": "extern func VerifyPassword {\n\n            in(name: \"password hash\") property(String) password_hash\n\n            in property(String) password\n\n\n\n            out(name: \"phc string\") property(String) phc_string\n\n        }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Hashing.Argon2.HashKey",
        "module_path": "Hashing.Argon2",
        "doc": "",
        "body": "extern func HashKey {\n\n            in property(String) password\n\n            in property(String) salt\n\n            in(name: \"num bytes\") property(Number) num_bytes\n\n\n\n            out property(Buffer) key\n\n        }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Hashing.Sha2.Hash",
        "module_path": "Hashing.Sha2",
        "doc": "",
        "body": "extern func Hash {\n\n            in property(String) input\n\n            out property(String or Buffer) hash\n\n\n\n            parameter(\n\n                editor: \"ComboBox(\\\"224\\\",\\\"256\\\", \\\"512_224\\\", \\\"512_256\\\",\\\"384\\\",\\\"512\\\")\",\n\n                defaultValue: \"256\"\n\n            ) bits\n\n            parameter(\n\n                name: \"output type\",\n\n                editor: \"ComboBox(\\\"hex-string\\\",\\\"buffer\\\")\",\n\n                defaultValue: \"hex-string\"\n\n            ) output_type\n\n        }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Hashing.Sha3.Hash",
        "module_path": "Hashing.Sha3",
        "doc": "",
        "body": "extern func Hash {\n\n            in property(String) input\n\n            out property(String or Buffer) hash\n\n\n\n            parameter(\n\n                editor: \"ComboBox(\\\"SHA3-224\\\", \\\"SHA3-256\\\", \\\"SHA3-384\\\", \\\"SHA3-512\\\", \\\"Keccak224\\\", \\\"Keccak256\\\", \\\"Keccak384\\\", \\\"Keccak512\\\")\",\n\n                defaultValue: \"SHA3-256\"\n\n            ) bits\n\n            parameter(\n\n                name: \"output type\",\n\n                editor: \"ComboBox(\\\"hex-string\\\",\\\"buffer\\\")\",\n\n                defaultValue: \"hex-string\"\n\n            ) output_type\n\n        }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Hashing.HMAC.Compute",
        "module_path": "Hashing.HMAC",
        "doc": "",
        "body": "extern func Compute {\n\n            parameter(\n\n                name: \"hashing function\",\n\n                editor: \"ComboBox(\\\"SHA2-256\\\", \\\"SHA2-512\\\")\",\n\n                defaultValue: \"SHA2-256\"\n\n            ) hashing_function\n\n\n\n            in property(String) secret\n\n            in property(String) message\n\n\n\n            out property(String) hmac\n\n        }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Hashing.HMAC.Verify",
        "module_path": "Hashing.HMAC",
        "doc": "",
        "body": "extern func Verify {\n\n            parameter(\n\n                name: \"hashing function\",\n\n                editor: \"ComboBox(\\\"SHA2-256\\\", \\\"SHA2-512\\\")\",\n\n                defaultValue: \"SHA2-256\"\n\n            ) hashing_function\n\n\n\n            in property(String) secret\n\n            in property(String) message\n\n            in property(String) hmac\n\n\n\n            out property(Bool) result\n\n        }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Url.UrlEncodeFormData",
        "module_path": "Url",
        "doc": "",
        "body": "extern func UrlEncodeFormData {\n\n        in(name: \"form data\") property(Any) form_data\n\n        out property(String) encoded\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Url.UrlEncodeString",
        "module_path": "Url",
        "doc": "",
        "body": "extern func UrlEncodeString {\n\n        in property(String) string\n\n        out property(String) encoded\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Url.UrlDecodeString",
        "module_path": "Url",
        "doc": "",
        "body": "extern func UrlDecodeString {\n\n        in property(String) encoded\n\n        out property(String) string\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Http.Response",
        "module_path": "Http",
        "doc": "Responds to an http request (`req`) provided by an `Http.Endpoint` event.",
        "body": "extern func(doc: \"Responds to an http request (`req`) provided by an `Http.Endpoint` event.\") Response {\n\n        in trigger(consumes: Http.EndpointContext, ) respond\n\n        out trigger continue\n\n        in(defaultValue: 200) property(Number) status\n\n        in property headers\n\n        in property body\n\n    }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"
    },
    {
        "type": "function",
        "function_name": "Http.FetchUrl",
        "module_path": "Http",
        "doc": "Performs a simple http/https request to the provided `url` and returns the `response` a string or a buffer depending on the value of `resopnseType`, which can be 'text' or 'buffer'. The body input will be converted to json if it is anything other than a String or Null.",
        "body": "extern func(doc: \"Performs a simple http/https request to the provided `url` and returns the `response` a string or a buffer depending on the value of `resopnseType`, which can be 'text' or 'buffer'. The body input will be converted to json if it is anything other than a String or Null.\") FetchUrl {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"url\") property(String) url\n\n        in(x: 0, y: 0, name: \"response type\", editor: \"ComboBox(\\\"text\\\",\\\"json\\\",\\\"buffer\\\")\", defaultValue: \"json\") property(Any) responseType\n\n        in(x: 0, y: 0, name: \"headers\") property headers\n\n        in(x: 0, y: 0, name: \"method\", editor: \"ComboBox(\\\"GET\\\",\\\"POST\\\",\\\"HEAD\\\",\\\"PUT\\\",\\\"DELETE\\\",\\\"CONNECT\\\",\\\"OPTIONS\\\",\\\"TRACE\\\",\\\"PATCH\\\")\", defaultValue: \"GET\") property method\n\n        in(x: 0, y: 0, name: \"body\") property(Any) body\n\n        out(x: 0, y: 0, name: \"continue\") trigger() continue\n\n        out(x: 0, y: 0, name: \"response\") property(String) response\n\n        out(x: 0, y: 0, name: \"status\") property(Number) status\n\n        out(x: 0, y: 0, name: \"headers\") property(Headers) headers\n\n        out(x: 0, y: 0, name: \"on error\") trigger() onError\n\n        out(x: 0, y: 0, name: \"error\") property(String) error\n\n    }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"
    },
    {
        "type": "function",
        "function_name": "Http.GetHttpQueryParam",
        "module_path": "Http",
        "doc": "Returns the query parameter `name` from a request (`req`) object.",
        "body": "extern func(doc: \"Returns the query parameter `name` from a request (`req`) object.\") GetHttpQueryParam {\n\n        in(x: 0, y: 0, name: \"req\") property req\n\n        in(x: 0, y: 0, name: \"name\") property(String) name\n\n        out(x: 0, y: 0, name: \"value\") property(String) value\n\n    }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"
    },
    {
        "type": "function",
        "function_name": "Http.HttpListenRoute",
        "module_path": "Http",
        "doc": "",
        "body": "extern func HttpListenRoute {\n\n        in(x: 0, y: 0, name: \"listen\") trigger() listen\n\n        in(x: 0, y: 0, name: \"path\") property path\n\n        in(x: 0, y: 0, name: \"method\") property method\n\n        out(x: 0, y: 0, name: \"listening\") trigger() listening\n\n        out(x: 0, y: 0, name: \"on request\") trigger(produces: Http.EndpointContext) onRequest\n\n    }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"
    },
    {
        "type": "event",
        "function_name": "Http.Endpoint",
        "module_path": "Http",
        "doc": "Listens for http requests on the provided `path` and `method`. `path` is an url of the form some/path/, which can be parameterized by :name for path items, and ?query_name&another_query_name for query values. Example: 'user/:name?email&joined_date' This creates `name`, `email` and `joined_date` output properties that one can use to get these values from the request. NOTE: All endpoints currently shares a single http server.",
        "body": "extern event(doc: \"Listens for http requests on the provided `path` and `method`. `path` is an url of the form some/path/, which can be parameterized by :name for path items, and ?query_name&another_query_name for query values. Example: 'user/:name?email&joined_date' This creates `name`, `email` and `joined_date` output properties that one can use to get these values from the request. NOTE: All endpoints currently shares a single http server.\") Endpoint {\n\n        parameter(\n\n            compilerPlugin: \"Url\",\n\n            defaultValue: \"/\"\n\n        ) path\n\n        parameter(\n\n            editor: \"ComboBox(\\\"GET\\\",\\\"POST\\\",\\\"HEAD\\\",\\\"PUT\\\",\\\"DELETE\\\",\\\"CONNECT\\\",\\\"OPTIONS\\\",\\\"TRACE\\\",\\\"PATCH\\\")\",\n\n            defaultValue: \"GET\"\n\n        ) method\n\n        parameter(\n\n            editor: \"ComboBox(\\\"text\\\",\\\"buffer\\\")\",\n\n            defaultValue: \"text\",\n\n            name: \"body type\",\n\n        ) accept\n\n        out(name: \"on request\") trigger(produces: Http.EndpointContext) onRequest\n\n        out() property headers\n\n        out() property body\n\n    }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any"
    },
    {
        "type": "function",
        "function_name": "Http.Client.OpenNetworkStream",
        "module_path": "Http.Client",
        "doc": "Opens a new network stream.",
        "body": "extern func(doc: \"Opens a new network stream.\") OpenNetworkStream {\n\n            in trigger open\n\n            in(editor: \"ComboBox(\\\"tcp\\\",\\\"tls\\\")\") property(NetworkStreamKind) kind\n\n            in property(String) url\n\n            in property(Number) port\n\n            out trigger(produces: Http.Client.ClientConnection) connected\n\n            out trigger failed\n\n            out property(String) error\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque"
    },
    {
        "type": "function",
        "function_name": "Http.Client.CreateRequest",
        "module_path": "Http.Client",
        "doc": "",
        "body": "extern func CreateRequest {\n\n            in property(String) path\n\n            in property(Http.Method) method\n\n            in property(Http.Headers) headers\n\n            in property(String or Null) body\n\n            out property(Http.Client.Request) request\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"
    },
    {
        "type": "function",
        "function_name": "Http.Client.StringifyRequest",
        "module_path": "Http.Client",
        "doc": "",
        "body": "extern func StringifyRequest {\n\n            in property(Http.Client.Request) request\n\n            out property(String) request\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"
    },
    {
        "type": "function",
        "function_name": "Http.Client.SendRequest",
        "module_path": "Http.Client",
        "doc": "",
        "body": "extern func SendRequest {\n\n            in trigger(borrows: Http.Client.ClientConnection) send\n\n            in property(Http.Client.Request) request\n\n            out(name: \"on response\") trigger(produces: Http.Client.Response) onResponse\n\n            out trigger failed\n\n            out property(String) error\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"
    },
    {
        "type": "function",
        "function_name": "Http.Client.ResponseStatus",
        "module_path": "Http.Client",
        "doc": "",
        "body": "extern func ResponseStatus {\n\n            in trigger(borrows: Http.Client.Response) get\n\n            out trigger continue\n\n            out property(Number) status\n\n            out(name: \"status text\") property(String) statusText\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"
    },
    {
        "type": "function",
        "function_name": "Http.Client.ResponseHeaders",
        "module_path": "Http.Client",
        "doc": "",
        "body": "extern func ResponseHeaders {\n\n            in trigger(borrows: Http.Client.Response) get\n\n            out trigger continue\n\n            out property(Http.Headers) headers\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"
    },
    {
        "type": "function",
        "function_name": "Http.Client.ResponseBody",
        "module_path": "Http.Client",
        "doc": "",
        "body": "extern func ResponseBody {\n\n            in trigger(borrows: Http.Client.Response) get\n\n            in(x: 0, y: 0, name: \"response type\", editor: \"ComboBox(\\\"text\\\",\\\"buffer\\\")\") property(String) responseType\n\n            out trigger continue\n\n            out property(Http.Client.Body) body\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"
    },
    {
        "type": "function",
        "function_name": "Http.Client.ResponseBodyStream",
        "module_path": "Http.Client",
        "doc": "Streams content from a response body as descrete events.",
        "body": "extern func(doc: \"Streams content from a response body as descrete events.\") ResponseBodyStream {\n\n            in(name: \"next frame\") trigger(borrows: Http.Client.Response) nextFrame\n\n            in(x: 0, y: 0, name: \"response type\", editor: \"ComboBox(\\\"text\\\",\\\"buffer\\\")\") property(String) responseType\n\n            out(name: \"on data\") trigger onData\n\n            out property(String) data\n\n            out(name: \"on done\") trigger onDone\n\n            out trigger failed\n\n            out property(String) error\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkStreamKind String\ntype HttpClient Opaque\ntype ClientConnection Opaque\ntype Body String\ntype Request Any\ntype Response Any"
    },
    {
        "type": "function",
        "function_name": "Http.Server.BindNetworkListener",
        "module_path": "Http.Server",
        "doc": "Binds a new network listener. If `port` is Null, the OS will assign a port number to the listener.",
        "body": "extern func(doc: \"Binds a new network listener. If `port` is Null, the OS will assign a port number to the listener.\") BindNetworkListener {\n\n            in trigger open\n\n            in(editor: \"ComboBox(\\\"tcp\\\")\") property(Http.Server.NetworkListenerKind) kind\n\n            in property(String) addr\n\n            in property(Number or Null) port\n\n            out(name: \"listener bound\") trigger(produces: Http.Server.NetworkListener) listenerBound\n\n            out(name: \"bound address\") property(String) boundAddr\n\n            out(name: \"bound port\") property(Number) boundPort\n\n            out(name: \"on error\") trigger onError\n\n            out property(String) error\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"
    },
    {
        "type": "function",
        "function_name": "Http.Server.AcceptConnections",
        "module_path": "Http.Server",
        "doc": "Starts accepting incoming connections on the provided `NetworkListener`. The process is forked for each accepted connection.",
        "body": "extern func(doc: \"Starts accepting incoming connections on the provided `NetworkListener`. The process is forked for each accepted connection.\") AcceptConnections {\n\n            in trigger(consumes: Http.Server.NetworkListener) accept\n\n            out(name: \"listener started\") trigger listenerStarted\n\n            out(name: \"client connected\") trigger(produces: Http.Server.Request) clientConnected\n\n            out(name: \"on error\") trigger onError\n\n            out property(String) error\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"
    },
    {
        "type": "function",
        "function_name": "Http.Server.RequestInfo",
        "module_path": "Http.Server",
        "doc": "",
        "body": "extern func RequestInfo {\n\n            in trigger(borrows: Http.Server.Request) get\n\n            out trigger continue\n\n            out property(Http.Method) method\n\n            out property(Http.Url) url\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"
    },
    {
        "type": "function",
        "function_name": "Http.Server.RequestBody",
        "module_path": "Http.Server",
        "doc": "",
        "body": "extern func RequestBody {\n\n            in trigger(borrows: Http.Server.Request) get\n\n            in(x: 0, y: 0, name: \"response type\", editor: \"ComboBox(\\\"text\\\",\\\"buffer\\\")\") property(String) requestType\n\n            out trigger continue\n\n            out property(Http.Server.Body) body\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"
    },
    {
        "type": "function",
        "function_name": "Http.Server.CreateResponse",
        "module_path": "Http.Server",
        "doc": "",
        "body": "extern func CreateResponse {\n\n            in(name: \"status\") property(Http.Server.Status) Status\n\n            in property(Http.Headers) headers\n\n            in property(String or Null) body\n\n            out property(Http.Server.Response) response\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"
    },
    {
        "type": "function",
        "function_name": "Http.Server.SendResponse",
        "module_path": "Http.Server",
        "doc": "",
        "body": "extern func SendResponse {\n\n            in trigger(borrows: Http.Server.Request) execute\n\n            in property(Http.Server.Response) response\n\n            out trigger continue\n\n            out property(Http.Server.Body) body\n\n        }",
        "types": "type Headers Any\ntype Url String\ntype EndpointContext Any\ntype ServerContext Any\ntype NetworkListenerKind String\ntype NetworkListener Opaque\ntype Request Opaque\ntype Response Opaque\ntype Body String\ntype Status Number"
    }
]