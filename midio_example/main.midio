import("std", Std_k98ojb)
import("http", Http_q7o96c)

module() main { 
    func(doc: "check whether the entered number is greater than the elements of the given array.") check_greater {
        in(x: -33, y: -26, name: "n") property(Number) n_a6cea7
        in(x: -294, y: 155, name: "list") property(Any) list_0b075e

        out(x: 546, y: 63, name: "output") property(Bool) output_b1d7f8

        instance(x: 11, y: 57) filter_1f9e8f root.Std_k98ojb.Iteration.Filter {}
        instance(x: 459, y: 63) lessthan_1e9f1f root.Std_k98ojb.Math.LessThan {}
        instance(x: 321, y: 0) if_1f9f1f root.Std_k98ojb.Std.If {}
        instance(x: 495, y: 0) count_1f9f1f root.Std_k98ojb.Std.Count {}
        instance(x: 495, y: -48) ifexpression_1f9f1f root.Std_k98ojb.Std.IfExpression {
            expression: "a == 0"
        }
        n_a6cea7 -> lessthan_1e9f1f.right
        list_0b075e -> filter_1f9e8f.items
        func() {
            in(x: -272, y: -48, name: "current") property(Number) current_86a8fb

            out(x: 405, y: -52, name: "output") property(Bool) output_8ba733

            current_41a8fb -> lessthan_1e9f1f.left
            lessthan_1e9f1f.result -> output_8ba733
        } -> filter_1f9e8f.handler
        filter_1f9e8f.output_list -> if_1f9f1f.predicate
        count_1f9f1f.count -> if_1f9f1f.value
        if_1f9f1f.then -> output_b1d7f8
        if_1f9f1f.else -> ifexpression_1f9f1f.execute
        count_1f9f1f.reset -> ifexpression_1f9f1f.execute
        ifexpression_1f9f1f.then -> output_b1d7f8
        ifexpression_1f9f1f.else -> count_1f9f1f.increment
        filter_1f9e8f.onItem -> count_1f9f1f.increment
    }

    

    instance(x: -1, y: -1) check_greater_1f9f1f root.main.check_greater {}

}