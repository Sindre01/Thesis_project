[
    {
        "prompts": [
            "Create a flow that checks whether the given two integers have opposite sign or not.",
            "The flow should create a user-defined function. The body of the function contains two input properties of type Number, a 'Math Expression' node and one output property of type 'Bool'.\n The arrows are connected as follows: The input properties is connected with arrows to 'Math Expression', that contains an expression with the two input properties of type numbers. The 'Math Expression' result is a boolean. This value is connected with arrows to the created output property, that return the Bool from the function. The user-defined function is then created within the main module.",
            "This created user-defined function should then be tested within a seperate module called tests, within the main module. Since the user-defined function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers. "
        ],
        "task_id": 1,
        "specification": {
            "function_signature": "func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n  in(x: -426.75106687766726, y: -248.6672781623361, name: \"x\") property(Number) x_853326\n  in(x: -420.9177240472398, y: -107.83359783106482, name: \"y\") property(Number) y_5390f5\n\n  out(x: 159.11126708984375, y: -219.88885498046875, name: \"output\") property(Bool) output_3339a3\n}",
            "preconditions": "- There are no preconditions, the method will always work.",
            "postconditions": "- The result is true if x and y have opposite signs\n- The result is false if x and y have the same sign"
        },
        "MBPP_task_id": 58,
        "library_functions": [
            "Math.Expression"
        ],
        "visual_node_types": [
            "Function",
            "Output Property",
            "Input Property"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertTrue",
                "root.std.Testing.AssertFalse"
            ],
            "visual_node_types": [
                "Event",
                "Function"
            ],
            "textual_instance_types": [
                "instance"
            ],
            "test_list": [
                "assert opposite_Signs(1,-2) == True",
                "assert opposite_Signs(3,2) == False",
                "assert opposite_Signs(-10,-10) == False",
                "assert opposite_Signs(-2,2) == True"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the kth element in the given array using 1-based indexing.",
            "The flow should create a user-defined function called 'kth_element' with three inputs: an 'execute' trigger, 'list' of type List, and 'k' of type Number. The function should have two outputs: a 'continue' trigger and 'element' of type Number, which is the kth element in the provided list. Inside the function, a local variable is used to store the state of the input property 'k'. This variable is called 'local_k' and is set at the beginning of the flow using the setter node to the value of the input property of 'k'. Then an 'IfExpression' node is used to check if 'k' is equal to 0. If 'k' is 0, trigger the 'continue' output immediately. Otherwise, it gets the 'local_k' variable using a getter node and adjusts for zero-based indexing by using 'Math Sub' to subract 1, and assign this result back to 'local_k', using the setter node. Then, use a 'List GetAt' node to retrieve the element at the updated index from 'list'. The getter node is used for getting the value of the local variable 'local_k'. The retrieved element should be output through the 'element' property. Connect the nodes appropriately: the 'execute' trigger starts the flow and sends the flow of execution to the setter node. The setter node uses input property 'k' and therefore an arrow is created between them. The setter node then sends the flow of execution to the 'Std IfExpression' node, which also takes in the input property 'k'. The node's output trigger 'then' is connected with the output trigger 'continue' of the flow, and the output trigger 'else' is connected to another setter node. The setter node's input property 'new value' is connected to the output property 'result' of the 'Math Sub' node. Lastly, the input propery 'list' and the getter node is connected to the input properties 'list' and 'index' of the 'List GetAt' node. The outpur property 'itemAtIndex' of this node is then connected to the output property 'element' of the user-defined function, which returns the number.",
            "This created user-defined function should then be tested in a seperate module called tests, within the main module. Since the user-defined function uses input and ouput triggers, the flow of execution is sent between the created function and assert nodes, using their input and output triggers.  "
        ],
        "task_id": 4,
        "specification": {
            "function_signature": "func(doc: \"finds the kth element in the given array using 1-based indexing.\") kth_element {\n  in(x: -286.0833326588629, y: -119.5833377136553, name: \"execute\") trigger() execute_1e159f\n  in(x: 153.3888224263642, y: 446.30657270108384, name: \"list\") property(List) list_b5d10a\n  in(x: -289.44439697265625, y: 126.55570983886724, name: \"k\") property(Number) k_1e19fb\n\n  out(x: 844.7513913467067, y: 53.95836826061554, name: \"continue\") trigger() continue_c95bcb\n  out(x: 692.8760222272696, y: 553.3761034449718, name: \"element\") property(Number) element_fd7945\n}",
            "preconditions": "- index should be between 1 and the length of the list (inclusive)",
            "postconditions": "- The result should be the kth element of the input list."
        },
        "MBPP_task_id": 101,
        "library_functions": [
            "List.GetAt",
            "Math.Sub",
            "Std.IfExpression"
        ],
        "visual_node_types": [
            "Function",
            "Setter",
            "Getter",
            "Output Property",
            "Input Property",
            "Input Trigger",
            "Output Trigger"
        ],
        "textual_instance_types": [
            "instance",
            "data_instance",
            "setter",
            "getter",
            "in",
            "out"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert kth_element([12,3,5,7,19], 2) == 3",
                "assert kth_element([17,24,8,23], 3) == 8",
                "assert kth_element([16,21,25,36,4], 4) == 36"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the last digit of a given number.",
            "The flow should create a 'Math Modulo' node which uses 10 as divisor and the given number as value. The node should be created in the main module.",
            "The 'Math Modulo' node should then be tested inside a seperate module called tests, within the main module. Since the function does not contain input and ouput triggers, the flow of execution is sent between the assert nodes, using their input and output triggers."
        ],
        "task_id": 9,
        "specification": {
            "function_signature": "",
            "preconditions": "- n should be a non-negative integer",
            "postconditions": "- The returned digit d should be between 0 and 9\n- d should be the last digit of the input number n"
        },
        "MBPP_task_id": 435,
        "library_functions": [
            "Math.Modulo"
        ],
        "visual_node_types": [
            "Function"
        ],
        "textual_instance_types": [
            "instance"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert last_Digit(123) == 3",
                "assert last_Digit(25) == 5",
                "assert last_Digit(30) == 0"
            ]
        }
    },
    {
        "prompts": [
            "Create a flow to find the last position of an element in a sorted array.",
            "",
            ""
        ],
        "task_id": 41,
        "specification": {
            "function_signature": "func(doc: \"Finds the last position of an element in a sorted array.\") last {\n    in(x: -231, y: -29, name: \"list\") property(List) list_2bbadf\n    in(x: -246, y: 105, name: \"elem\") property(Number) elem_94ca57\n}",
            "preconditions": "- The input array should be sorted in non-decreasing order",
            "postconditions": "- If the element is found, the returned position should be the last occurrence of the element in the array\n- If the element is not found, the returned position should be -1\n- The input array remains unchanged"
        },
        "MBPP_task_id": 793,
        "library_functions": [
            "Std.For",
            "Std.IfExpression"
        ],
        "visual_node_types": [
            "Function",
            "Input Property",
            "Output Property",
            "Getter",
            "Setter"
        ],
        "textual_instance_types": [
            "instance",
            "in",
            "out",
            "getter",
            "setter"
        ],
        "testing": {
            "library_functions": [
                "root.std.Testing.Test",
                "root.std.Testing.AssertEqual"
            ],
            "visual_node_types": [
                "Event",
                "Function",
                "Data Object"
            ],
            "textual_instance_types": [
                "instance",
                "data_instance"
            ],
            "test_list": [
                "assert last([1,2,3],1) == 0",
                "assert last([1,1,1,2,3,4],1) == 2",
                "assert last([2,3,2,3,6,8,9],3) == 3"
            ]
        }
    }
]