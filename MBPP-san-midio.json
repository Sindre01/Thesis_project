[
    {
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
        "test_list": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False",
            "assert opposite_Signs(-2,2) == True"
        ]
    },
    {
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.",
        "code": "def smallest_num(xs):\n  return min(xs)\n",
        "test_list": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ]
    },
    {
        "task_id": 77,
        "prompt": "Write a python function to find whether a number is divisible by 11.",
        "code": "def is_Diff(n): \n    return (n % 11 == 0) ",
        "test_list": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ]
    },
    {
        "task_id": 101,
        "prompt": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "test_list": [
            "assert kth_element([12,3,5,7,19], 2) == 3",
            "assert kth_element([17,24,8,23], 3) == 8",
            "assert kth_element([16,21,25,36,4], 4) == 36"
        ]
    },
    {
        "task_id": 127,
        "prompt": "Write a function to multiply two integers.",
        "code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "test_list": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ]
    },
    {
        "task_id": 227,
        "prompt": "Write a function to find minimum of three numbers.",
        "code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
        "test_list": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ]
    },
    {
        "task_id": 267,
        "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
        "test_list": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ]
    },
    {
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.",
        "code": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
        "test_list": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ]
    },
    {
        "task_id": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "test_list": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ]
    },
    {
        "task_id": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
        "test_list": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == False",
            "assert check_greater([2, 3, 4, 5, 6], 8) == True",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
        ]
    },
    {
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.",
        "code": "def last_Digit(n) :\n    return (n % 10) ",
        "test_list": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ]
    },
    {
        "task_id": 441,
        "prompt": "Write a function to find the surface area of a cube of a given size.",
        "code": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "test_list": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ]
    },
    {
        "task_id": 447,
        "prompt": "Write a function to find cubes of individual elements in a list.",
        "code": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "test_list": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ]
    },
    {
        "task_id": 454,
        "prompt": "Write a function that matches a word containing 'z'.",
        "code": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test_list": [
            "assert text_match_wordz(\"pythonz.\")==True",
            "assert text_match_wordz(\"xyz.\")==True",
            "assert text_match_wordz(\"  lang  .\")==False"
        ]
    },
    {
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "code": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "test_list": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ]
    },
    {
        "task_id": 474,
        "prompt": "Write a function to replace characters in a string.",
        "code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "test_list": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ]
    },
    {
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.",
        "code": "def is_lower(string):\n  return (string.lower())",
        "test_list": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ]
    },
    {
        "task_id": 566,
        "prompt": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))",
        "test_list": [
            "assert sum_digits(345)==12",
            "assert sum_digits(12)==3",
            "assert sum_digits(97)==16"
        ]
    },
    {
        "task_id": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.",
        "code": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result",
        "test_list": [
            "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
            "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
            "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
        ]
    },
    {
        "task_id": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers in a given list.",
        "code": "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p",
        "test_list": [
            "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
            "assert unique_product([1, 2, 3, 1,]) == 6",
            "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
        ]
    },
    {
        "task_id": 576,
        "prompt": "Write a python function to check whether a list is sublist of another or not.",
        "code": "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; ",
        "test_list": [
            "assert is_Sub_Array([1,4,3,5],[1,2]) == False",
            "assert is_Sub_Array([1,2,1],[1,2,1]) == True",
            "assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False"
        ]
    },
    {
        "task_id": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.",
        "code": "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ",
        "test_list": [
            "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
            "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
            "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
        ]
    },
    {
        "task_id": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given list.",
        "code": "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff",
        "test_list": [
            "assert big_diff([1,2,3,4]) == 3",
            "assert big_diff([4,5,12]) == 8",
            "assert big_diff([9,2,3]) == 7"
        ]
    },
    {
        "task_id": 594,
        "prompt": "Write a function to find the difference of the first even and first odd number of a given list.",
        "code": "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)",
        "test_list": [
            "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
            "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
            "assert diff_even_odd([1,5,7,9,10])==9"
        ]
    },
    {
        "task_id": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.",
        "code": "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)",
        "test_list": [
            "assert sum_average(10)==(55, 5.5)",
            "assert sum_average(15)==(120, 8.0)",
            "assert sum_average(20)==(210, 10.5)"
        ]
    },
    {
        "task_id": 600,
        "prompt": "Write a python function to check whether the given number is even or not.",
        "code": "def is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; ",
        "test_list": [
            "assert is_Even(1) == False",
            "assert is_Even(2) == True",
            "assert is_Even(3) == False"
        ]
    },
    {
        "task_id": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.",
        "code": "def first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c",
        "test_list": [
            "assert first_repeated_char(\"abcabc\") == \"a\"",
            "assert first_repeated_char(\"abc\") == None",
            "assert first_repeated_char(\"123123\") == \"1\""
        ]
    },
    {
        "task_id": 605,
        "prompt": "Write a function to check if the given integer is a prime number.",
        "code": "def prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False",
        "test_list": [
            "assert prime_num(13)==True",
            "assert prime_num(7)==True",
            "assert prime_num(-1010)==False"
        ]
    },
    {
        "task_id": 610,
        "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "code": "def remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]",
        "test_list": [
            "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
            "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
            "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
        ]
    },
    {
        "task_id": 616,
        "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "code": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ",
        "test_list": [
            "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
            "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
            "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
        ]
    },
    {
        "task_id": 624,
        "prompt": "Write a python function to convert a given string to uppercase.",
        "code": "def is_upper(string):\n  return (string.upper())",
        "test_list": [
            "assert is_upper(\"person\") ==\"PERSON\"",
            "assert is_upper(\"final\") == \"FINAL\"",
            "assert is_upper(\"Valid\") == \"VALID\""
        ]
    },
    {
        "task_id": 625,
        "prompt": "Write a python function to interchange the first and last element in a given list.",
        "code": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList ",
        "test_list": [
            "assert swap_List([1,2,3]) == [3,2,1]",
            "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
            "assert swap_List([4,5,6]) == [6,5,4]"
        ]
    },
    {
        "task_id": 627,
        "prompt": "Write a python function to find the smallest missing number from a sorted list of natural numbers.",
        "code": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) ",
        "test_list": [
            "assert find_First_Missing([0,1,2,3]) == 4",
            "assert find_First_Missing([0,1,2,6,9]) == 3",
            "assert find_First_Missing([2,3,5,8,9]) == 0"
        ]
    },
    {
        "task_id": 629,
        "prompt": "Write a python function to find even numbers from a list of numbers.",
        "code": "def Split(list): \n    return [num for num in list if num % 2 == 0]",
        "test_list": [
            "assert Split([1,2,3,4,5]) == [2,4]",
            "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
            "assert Split ([8,12,15,19]) == [8,12]"
        ]
    },
    {
        "task_id": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.",
        "code": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a",
        "test_list": [
            "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
            "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
            "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
        ]
    },
    {
        "task_id": 644,
        "prompt": "Write a python function to reverse an array upto a given position.",
        "code": "def reverse_Array_Upto_K(input, k): \n  return (input[k-1::-1] + input[k:]) ",
        "test_list": [
            "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
            "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
            "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
        ]
    },
    {
        "task_id": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "import re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n",
        "test_list": [
            "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
            "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
            "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
        ]
    },
    {
        "task_id": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result",
        "test_list": [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ]
    },
    {
        "task_id": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.",
        "code": "def all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True",
        "test_list": [
            "assert all_Characters_Same(\"python\") == False",
            "assert all_Characters_Same(\"aaa\") == True",
            "assert all_Characters_Same(\"data\") == False"
        ]
    },
    {
        "task_id": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
        "code": "def rotate_right(list, m):\n  result =  list[-m:] + list[:-m]\n  return result",
        "test_list": [
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"
        ]
    },
    {
        "task_id": 755,
        "prompt": "Write a function to find the second smallest number in a list.",
        "code": "def second_smallest(numbers):\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]",
        "test_list": [
            "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
            "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
            "assert second_smallest([2,2])==None",
            "assert second_smallest([2,2,2])==None"
        ]
    },
    {
        "task_id": 760,
        "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
        "code": "def unique_Element(arr):\n    s = set(arr)\n    return len(s) == 1",
        "test_list": [
            "assert unique_Element([1,1,1]) == True",
            "assert unique_Element([1,2,1,2]) == False",
            "assert unique_Element([1,2,3,4,5]) == False"
        ]
    },
    {
        "task_id": 764,
        "prompt": "Write a python function to count number of digits in a given string.",
        "code": "def number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr",
        "test_list": [
            "assert number_ctr('program2bedone') == 1",
            "assert number_ctr('3wonders') == 1",
            "assert number_ctr('123') == 3",
            "assert number_ctr('3wond-1ers2') == 3"
        ]
    },
    {
        "task_id": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "code": "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ",
        "test_list": [
            "assert odd_num_sum(2) == 82",
            "assert odd_num_sum(3) == 707",
            "assert odd_num_sum(4) == 3108"
        ]
    },
    {
        "task_id": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "code": "def odd_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))",
        "test_list": [
            "assert odd_position([2,1,4,3,6,7,6,3]) == True",
            "assert odd_position([4,1,2]) == True",
            "assert odd_position([1,2,3]) == False"
        ]
    },
    {
        "task_id": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.",
        "code": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)",
        "test_list": [
            "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert mul_even_odd([1,5,7,9,10])==10"
        ]
    },
    {
        "task_id": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.",
        "code": "def last(arr,x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res",
        "test_list": [
            "assert last([1,2,3],1) == 0",
            "assert last([1,1,1,2,3,4],1) == 2",
            "assert last([2,3,2,3,6,8,9],3) == 3"
        ]
    },
    {
        "task_id": 798,
        "prompt": "Write a python function to find the sum of an array.",
        "code": "def _sum(arr):  \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ",
        "test_list": [
            "assert _sum([1, 2, 3]) == 6",
            "assert _sum([15, 12, 13, 10]) == 50",
            "assert _sum([0, 1, 2]) == 3"
        ]
    },
    {
        "task_id": 803,
        "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "def is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False",
        "test_list": [
            "assert not is_perfect_square(10)",
            "assert is_perfect_square(36)",
            "assert not is_perfect_square(14)",
            "assert is_perfect_square(14*14)",
            "assert not is_perfect_square(125)",
            "assert is_perfect_square(125*125)"
        ]
    },
    {
        "task_id": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.",
        "code": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd",
        "test_list": [
            "assert first_odd([1,3,5]) == 1",
            "assert first_odd([2,4,1,3]) == 1",
            "assert first_odd ([8,9,1]) == 9"
        ]
    }
]