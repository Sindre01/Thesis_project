[
    {
        "task_id": 1,
        "candidate_id": 1,
        "metric": "syntax",
        "passed": true,
        "error_type": null,
        "error_msg": null,
        "test_result": null,
        "code": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") check_opposite_sign {\n        in(x: -183, y: 37, name: \"execute\") trigger() execute_8a4f2e\n        in(x: -177, y: -137, name: \"first\") property(Number) first_1c9d7b\n        in(x: -178, y: -289, name: \"second\") property(Number) second_f6e0ea\n\n        out(x: 1132, y: 60, name: \"continue\") trigger() continue_5f3a4d\n        out(x: 1177, y: -116, name: \"result\") property(Bool) result_1c9b8a\n\n        instance(x: 74, y: -214) greaterthan_2e0b6a root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 72, y: -375) lessthanorequal_4f5d7f root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 74, y: -533) greaterthanor_equal_8e1c2a root.Std_k98ojb.Math.GreaterThanOrEqual {}\n        instance(x: 72, y: -695) lessthanorequal_d4d5f0 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 74, y: -853) and_8e7a2c root.Std_k98ojb.Logic.And {}\n        instance(x: 73, y: -1011) or_e9a3be root.Std_k98ojb.Logic.Or {}\n        instance(x: 72, y: -1169) not_5f4d6f root.Std_k98ojb.Logic.Not {}\n\n        execute_8a4f2e -> greaterthan_2e0b6a.execute\n        first_1c9d7b -> greaterthan_2e0b6a.left\n        second_f6e0ea -> greaterthan_2e0b6a.right\n\n        execute_8a4f2e -> lessthanorequal_4f5d7f.execute\n        first_1c9d7b -> lessthanorequal_4f5d7f.left\n        second_f6e0ea -> lessthanorequal_4f5d7f.right\n\n        execute_8a4f2e -> greaterthanor_equal_8e1c2a.execute\n        first_1c9d7b -> greaterthanor_equal_8e1c2a.left\n        second_f6e0ea -> greaterthanor_equal_8e1c2a.right\n\n        execute_8a4f2e -> lessthanorequal_d4d5f0.execute\n        first_1c9d7b -> lessthanorequal_d4d5f0.left\n        second_f6e0ea -> lessthanorequal_d4d5f0.right\n\n        greaterthan_2e0b6a.result -> and_8e7a2c.left\n        lessthanorequal_4f5d7f.result -> and_8e7a2c.right\n\n        greaterthanor_equal_8e1c2a.result -> or_e9a3be.left\n        lessthanorequal_d4d5f0.result -> or_e9a3be.right\n\n        or_e9a3be.result -> not_5f4d6f.input\n        not_5f4d6f.output -> result_1c9b8a\n\n        and_8e7a2c.result -> continue_5f3a4d\n        or_e9a3be.result -> continue_5f3a4d\n    }\n\n    \n\n    instance(x: -97, y: 45) check_opposite_sign_1e6b0a root.main.check_opposite_sign {}\n\n}"
    },
    {
        "task_id": 3,
        "candidate_id": 1,
        "metric": "syntax",
        "passed": false,
        "error_type": "syntax",
        "error_msg": [
            "ERROR compiler::frontend::parser: 1372: Error during parsing of file midio_example: CompilerError - Error: Expected token Identifier, but got Dot at 535",
            "ERROR compiler::frontend::parser: 1373:     backtrace: disabled backtrace"
        ],
        "test_result": null,
        "code": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds whether a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -200, y: -100, name: \"number\") property(Number) number\n        out(x: 800, y: 0, name: \"isDivisible\") property(Bool) isDivisible\n\n        instance(x: 50, y: -150) modulo_1 root.Std_k98ojb.Math.Modulo {\n            value: number\n            divisor: 11\n        }\n        \n        instance(x: 300, y: -100) equal_2 root.Std_k98ojb.Logic.Equal {\n            left: modulo_1.result\n            right: 0\n        }\n\n        modulo_1.result -> equal_2.left\n        equal_2.result -> isDivisible\n    }\n\n    instance(x: -150, y: -50) is_divisible_by_11_instance root.main.is_divisible_by_11 {}\n\n}"
    },
    {
        "task_id": 1,
        "candidate_id": 1,
        "metric": "syntax",
        "passed": true,
        "error_type": null,
        "error_msg": null,
        "test_result": null,
        "code": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_sign {\n        in(x: -286, y: -119, name: \"execute\") trigger() execute_1e159f\n        in(x: 153, y: 446, name: \"first\") property(Number) first_b5d10a\n        in(x: -289, y: 126, name: \"second\") property(Number) second_1e19fb\n\n        out(x: 844, y: 53, name: \"continue\") trigger() continue_c95bcb\n        out(x: 692, y: 553, name: \"isOpposite\") property(Bool) isOpposite_fd7945\n\n        instance(x: 406, y: 546) lessthan_8eae56 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 215, y: 100) ifexpression_a2fa90 root.Std_k98ojb.Std.IfExpression {\n            expression: \"a * b < 0\"\n        }\n        instance(x: 196, y: 256) mul_9ff257 root.Std_k98ojb.Math.Mul {}\n        setter(x: -37, y: -48, name: \"setter_d09207\") setter_d09207 = result\n        getter(x: -130, y: 211, name: \"getter_7f13b7\") getter_7f13b7 = result\n        getter(x: 118, y: 540, name: \"getter_44a047\") getter_44a047 = result\n        setter(x: 491, y: 194, name: \"setter_29a5c8\") setter_29a5c8 = result\n        first_b5d10a -> mul_9ff257.first\n        second_1e19fb -> mul_9ff257.second\n        mul_9ff257.result -> lessthan_8eae56.left\n        0 -> lessthan_8eae56.right\n        lessthan_8eae56.result -> isOpposite_fd7945\n        execute_1e159f -> continue_c95bcb\n    }\n\n    \n\n    instance(x: -97, y: -68) opposite_sign_49c6ac root.main.opposite_sign {}\n}"
    },
    {
        "task_id": 3,
        "candidate_id": 1,
        "metric": "syntax",
        "passed": true,
        "error_type": null,
        "error_msg": null,
        "test_result": null,
        "code": "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main { \n    func(doc: \"finds whether a number is divisible by 11.\") is_divisible_by_11 {\n        in(x: -250, y: -150, name: \"number\") property(Number) number_1a2b3c\n\n        out(x: 650, y: -150, name: \"result\") property(Bool) result_4d5e6f\n\n        instance(x: 150, y: -150) modulo_7f8g9h root.Std_k98ojb.Math.Modulo {}\n        instance(x: 450, y: -150) equal_0a1b2c root.Std_k98ojb.Logic.Equal {}\n        number_1a2b3c -> modulo_7f8g9h.value\n        11 -> modulo_7f8g9h.divisor\n        modulo_7f8g9h.result -> equal_0a1b2c.left\n        0 -> equal_0a1b2c.right\n        equal_0a1b2c.result -> result_4d5e6f\n    }\n\n    \n\n    instance(x: -100, y: -50) is_divisible_by_11_7h8i9j root.main.is_divisible_by_11 {}\n}"
    }
]