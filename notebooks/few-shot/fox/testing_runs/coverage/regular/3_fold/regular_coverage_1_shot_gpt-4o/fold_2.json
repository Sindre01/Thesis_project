[
    {
        "experiment_name": "regular_coverage_1_shot",
        "best_params_optimization": "semantic",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": -1,
        "seed": 3,
        "n_generations_per_task": 10,
        "model": "gpt-4o",
        "largest_context": 5183,
        "task_candidates": {
            "7": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") has_common_element {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 200, name: \"list2\") property(List) list2\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 200, name: \"out\") property(Bool) out\n        out(x: 400, y: 300, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 150) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 200) not_empty root.Std_k98ojb.List.NotEmpty {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> not_empty.list\n        not_empty.isEmpty -> out\n        execute -> intersection.reset\n        not_empty.isEmpty -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element\") have_common_element {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 200, name: \"list2\") property(List) list2\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 150, name: \"result\") property(Bool) result\n        out(x: 400, y: 250, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 150) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 350, y: 150) not_empty root.Std_k98ojb.List.NotEmpty {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> not_empty.list\n        not_empty.isEmpty -> result\n        execute -> intersection\n        execute -> not_empty\n        not_empty.isEmpty -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element\") has_common_element {\n        in(x: 150, y: 150, name: \"list1\") property(List) list1\n        in(x: 150, y: 200, name: \"list2\") property(List) list2\n        in(x: 150, y: 250, name: \"execute\") trigger() execute\n\n        out(x: 450, y: 150, name: \"result\") property(Bool) result\n        out(x: 450, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: 150) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 600, y: 150) is_empty root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 750, y: 150) not root.Std_k98ojb.Logic.Not {}\n        instance(x: 900, y: 150) if root.Std_k98ojb.Std.If {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> is_empty.list\n        is_empty.isEmpty -> not.input\n        not.output -> if.input\n        if.value -> result\n        execute -> if.execute\n        if.then -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element.\") has_common_element {\n        in(x: 110, y: -150, name: \"list1\") property(List) list1_1a2b3c\n        in(x: 110, y: -100, name: \"list2\") property(List) list2_4d5e6f\n        in(x: 110, y: -50, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 110, y: 150, name: \"out\") property(Bool) out_0j1k2l\n        out(x: 110, y: 200, name: \"continue\") trigger() continue_3m4n5o\n\n        instance(x: 310, y: -50) intersection_6p7q8r root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 510, y: -50) isempty_9s0t1u root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 710, y: -50) not_2v3w4x root.Std_k98ojb.Logic.Not {}\n        instance(x: 910, y: -50) if_5y6z7a root.Std_k98ojb.Std.If {}\n\n        list1_1a2b3c -> intersection_6p7q8r.left\n        list2_4d5e6f -> intersection_6p7q8r.right\n        intersection_6p7q8r.intersect -> isempty_9s0t1u.list\n        isempty_9s0t1u.isEmpty -> not_2v3w4x.input\n        not_2v3w4x.output -> if_5y6z7a.predicate\n        execute_7g8h9i -> if_5y6z7a.execute\n        if_5y6z7a.value -> out_0j1k2l\n        if_5y6z7a.then -> continue_3m4n5o\n        if_5y6z7a.else -> continue_3m4n5o\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element\") has_common_element {\n        in(x: 80, y: 0, name: \"list1\") property(List) list1\n        in(x: 80, y: 40, name: \"list2\") property(List) list2\n        in(x: 80, y: 80, name: \"execute\") trigger() execute\n\n        out(x: 280, y: 0, name: \"result\") property(Bool) result\n        out(x: 280, y: 40, name: \"continue\") trigger() continue\n\n        instance(x: 160, y: 0) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 240, y: 0) not_empty root.Std_k98ojb.List.NotEmpty {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> not_empty.list\n        not_empty.isEmpty -> result\n        execute -> intersection.execute\n        intersection.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element\") have_common_element {\n        in(x: 100, y: 50, name: \"list1\") property(List) list1_abc123\n        in(x: 100, y: 100, name: \"list2\") property(List) list2_def456\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_ghi789\n\n        out(x: 400, y: 100, name: \"result\") property(Bool) result_jkl012\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_mno345\n\n        instance(x: 200, y: 100) intersection_pqr678 root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 100) isEmpty_stu901 root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 350, y: 100) not_vwx234 root.Std_k98ojb.Logic.Not {}\n\n        list1_abc123 -> intersection_pqr678.left\n        list2_def456 -> intersection_pqr678.right\n        intersection_pqr678.intersect -> isEmpty_stu901.list\n        isEmpty_stu901.isEmpty -> not_vwx234.input\n        not_vwx234.output -> result_jkl012\n        execute_ghi789 -> continue_mno345\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element\") have_common_element {\n        in(x: 90, y: 90, name: \"list1\") property(List) list1_1a2b3c\n        in(x: 90, y: 140, name: \"list2\") property(List) list2_4d5e6f\n        in(x: 90, y: 190, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 320, y: 115, name: \"out\") property(Bool) out_0a1b2c\n        out(x: 320, y: 165, name: \"continue\") trigger() continue_3d4e5f\n\n        instance(x: 210, y: 90) intersection_5g6h7i root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 450, y: 115) isempty_8j9k0l root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 580, y: 115) not_1m2n3o root.Std_k98ojb.Logic.Not {}\n        instance(x: 710, y: 115) if_4p5q6r root.Std_k98ojb.Std.If {}\n\n        list1_1a2b3c -> intersection_5g6h7i.left\n        list2_4d5e6f -> intersection_5g6h7i.right\n        intersection_5g6h7i.intersect -> isempty_8j9k0l.list\n        isempty_8j9k0l.isEmpty -> not_1m2n3o.input\n        not_1m2n3o.output -> if_4p5q6r.input\n        if_4p5q6r.value -> out_0a1b2c\n        execute_7g8h9i -> if_4p5q6r.execute\n        if_4p5q6r.then -> continue_3d4e5f\n        if_4p5q6r.else -> continue_3d4e5f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") has_common_element {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1_1a2b3c\n        in(x: 100, y: 200, name: \"list2\") property(List) list2_4d5e6f\n        in(x: 100, y: 300, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 400, y: 150, name: \"result\") property(Bool) result_j1k2l3\n        out(x: 400, y: 250, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 200, y: 150) intersection_abc123 root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 150) is_empty_def456 root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 350, y: 150) not_ghi789 root.Std_k98ojb.Logic.Not {}\n        instance(x: 400, y: 150) if_jkl012 root.Std_k98ojb.Std.If {}\n\n        list1_1a2b3c -> intersection_abc123.left\n        list2_4d5e6f -> intersection_abc123.right\n        intersection_abc123.intersect -> is_empty_def456.list\n        is_empty_def456.isEmpty -> not_ghi789.input\n        not_ghi789.output -> if_jkl012.predicate\n        if_jkl012.value -> result_j1k2l3\n        execute_7g8h9i -> if_jkl012.execute\n        if_jkl012.then -> continue_m4n5o6\n        if_jkl012.else -> continue_m4n5o6\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element\") has_common_element {\n        in(x: 30, y: 0, name: \"list1\") property(List) list1_123abc\n        in(x: 30, y: 50, name: \"list2\") property(List) list2_456def\n        in(x: 30, y: 100, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 400, y: 0, name: \"result\") property(Bool) result_jklmno\n        out(x: 400, y: 50, name: \"continue\") trigger() continue_pqrst\n\n        instance(x: 150, y: 0) intersection_uvwxy root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 0) notempty_zabcd root.Std_k98ojb.List.NotEmpty {}\n\n        list1_123abc -> intersection_uvwxy.left\n        list2_456def -> intersection_uvwxy.right\n        intersection_uvwxy.intersect -> notempty_zabcd.list\n        notempty_zabcd.isEmpty -> result_jklmno\n        execute_789ghi -> continue_pqrst\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") has_common_element {\n        in(x: 108, y: -49, name: \"list1\") property(List) list1_2a3b6f\n        in(x: 108, y: 55, name: \"list2\") property(List) list2_1f3c4d\n        in(x: 108, y: 159, name: \"execute\") trigger() execute_3b4a1c\n\n        out(x: 468, y: 55, name: \"out\") property(Bool) out_4f6b7d\n        out(x: 468, y: 159, name: \"continue\") trigger() continue_7d5e8c\n\n        instance(x: 274, y: 0) intersection_5a6b7c root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 634, y: 20) isempty_9b8c7d root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 394, y: 80) not_2c3d4e root.Std_k98ojb.Logic.Not {}\n        instance(x: 514, y: 100) if_1a2b3c root.Std_k98ojb.Std.If {}\n\n        list1_2a3b6f -> intersection_5a6b7c.left\n        list2_1f3c4d -> intersection_5a6b7c.right\n        intersection_5a6b7c.intersect -> isempty_9b8c7d.list\n        isempty_9b8c7d.isEmpty -> not_2c3d4e.input\n        not_2c3d4e.result -> if_1a2b3c.predicate\n        if_1a2b3c.value -> out_4f6b7d\n        execute_3b4a1c -> if_1a2b3c.execute\n        if_1a2b3c.then -> continue_7d5e8c\n        if_1a2b3c.else -> continue_7d5e8c\n    }\n}"
            ],
            "11": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 354, y: -53, name: \"input\") property(List) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 591, y: 74) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) sub_f11fda root.Std_k98ojb.Math.Sub {}\n        instance(x: 714, y: -155) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) equal_80a119 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1504, y: -400) sub_expression root.Std_k98ojb.Math.Expression {\n            expression: \"(a - b)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> for_8cb3f6.items\n        for_8cb3f6.index -> sub_f11fda.first\n        1 -> sub_f11fda.second\n        sub_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        sub_expression.result -> equal_80a119.left\n        1 -> equal_80a119.right\n        equal_80a119.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n        for_8cb3f6.index -> sub_expression.a\n        for_8cb3f6.item -> sub_expression.b\n        if_07b8c7.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_e19a62.else -> for_8cb3f6.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 100, y: 50, name: \"input\") property(List<Number>) input_list\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) out_result\n\n        instance(x: 150, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 150, y: 200) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 150) if_check root.Std_k98ojb.Std.If {}\n        instance(x: 250, y: 250) sub_expr root.Std_k98ojb.Math.Sub {}\n        instance(x: 500, y: 150) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> for_loop.items\n\n        for_loop.item -> sub_expr.first\n        for_loop.index -> sub_expr.second\n        1 -> sub_expr.second\n\n        sub_expr.result -> not_equal.left\n        1 -> not_equal.right\n\n        not_equal.result -> if_check.predicate\n        for_loop.onItem -> if_check.execute\n\n        false -> if_check.then\n        if_check.then -> out_result\n\n        true -> if_check.else\n        if_check.else -> for_loop.next\n\n        for_loop.done -> out_result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") has_consecutive_numbers {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) sort_6030c9 root.Std_k98ojb.List.Sort {}\n        instance(x: 591, y: 74) count_038fce root.Std_k98ojb.Std.Count {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(current == previous + 1)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n\n        input_f5c03d -> sort_6030c9.list\n        sort_6030c9.sorted -> for_8cb3f6.items\n        for_8cb3f6.item -> expression_b720d7.gen_0\n        count_038fce.count -> expression_b720d7.gen_1\n        expression_b720d7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> if_e19a62.execute\n        if_07b8c7.else -> continue_8ba06b\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.index -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> count_038fce.reset\n    }\n\n    \n\n    instance(x: -189, y: 222) has_consecutive_numbers_f0be66 root.main.has_consecutive_numbers {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 158, y: -46, name: \"input\") property(List<Number>) input_6a2f5d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 598, y: -15, name: \"out\") property(Bool) out_ef7c3d\n        out(x: 744, y: 115, name: \"continue\") trigger() continue_4ab06b\n\n        instance(x: 352, y: -493) sort_6030c9 root.Std_k98ojb.List.Sort {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(current - prev != 1)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) getat_prev root.Std_k98ojb.List.GetAt {}\n        instance(x: 1088, y: -100) sub_index root.Std_k98ojb.Math.Sub {}\n        \n        input_6a2f5d -> sort_6030c9.list\n        sort_6030c9.sorted -> for_8cb3f6.items\n        for_8cb3f6.index -> sub_index.first\n        1 -> sub_index.second\n        sub_index.result -> getat_prev.index\n        sort_6030c9.sorted -> getat_prev.list\n        for_8cb3f6.item -> expression_b720d7.gen_0\n        getat_prev.item -> expression_b720d7.gen_1\n        expression_b720d7.result -> if_e19a62.predicate\n        if_e19a62.then -> if_07b8c7.execute\n        if_07b8c7.predicate -> out_ef7c3d\n        if_07b8c7.then -> continue_4ab06b\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_4ab06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -189, y: 222) is_consecutive_f0be66 root.main.is_consecutive {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 354, y: -53, name: \"input\") property(List) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) equal_7f1fda root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(current + 1 == next)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 1812, y: -319) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 591, y: 74) sort_038fce root.Std_k98ojb.List.Sort {}\n\n        input_f5c03d -> sort_038fce.list\n        sort_038fce.sorted -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_7f1fda.left\n        for_8cb3f6.index -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> equal_7f1fda.right\n        equal_7f1fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        expression_b720d7.result -> not_80a119.input\n        not_80a119.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n        for_8cb3f6.index -> expression_b720d7.gen_0\n        for_8cb3f6.item -> expression_b720d7.gen_1\n        if_07b8c7.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_e19a62.else -> for_8cb3f6.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 80, y: -45, name: \"input\") property(List<Number>) input_2f3d7b\n        in(x: 80, y: 45, name: \"execute\") trigger() execute_5c3d9a\n\n        out(x: 580, y: 0, name: \"out\") property(Bool) out_3f2d7c\n        out(x: 580, y: 100, name: \"continue\") trigger() continue_9b2f6a\n\n        instance(x: 260, y: 0) sort_1a3d7b root.Std_k98ojb.List.Sort {}\n        instance(x: 400, y: 0) for_3c4d7b root.Std_k98ojb.Std.For {}\n        instance(x: 760, y: 0) sub_2d3b7c root.Std_k98ojb.Math.Sub {}\n        instance(x: 900, y: 0) equal_3d4c7b root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1040, y: 0) if_4e5d7c root.Std_k98ojb.Std.If {}\n\n        input_2f3d7b -> sort_1a3d7b.list\n        sort_1a3d7b.sorted -> for_3c4d7b.items\n        for_3c4d7b.item -> sub_2d3b7c.first\n        for_3c4d7b.index -> sub_2d3b7c.second\n        sub_2d3b7c.result -> equal_3d4c7b.left\n        1 -> equal_3d4c7b.right\n        equal_3d4c7b.result -> if_4e5d7c.predicate\n        for_3c4d7b.onItem -> if_4e5d7c.execute\n        if_4e5d7c.then -> continue_9b2f6a\n        if_4e5d7c.else -> out_3f2d7c\n        execute_5c3d9a -> for_3c4d7b.reset\n        for_3c4d7b.done -> continue_9b2f6a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 54, y: -12, name: \"input\") property(List) input_1a2b3c\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_7g8h9i\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 352, y: -493) sort_3m4n5o root.Std_k98ojb.List.Sort {}\n        instance(x: 591, y: 74) for_6p7q8r root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) add_9s0t1u root.Std_k98ojb.Math.Add {}\n        instance(x: 714, y: -155) if_2v3w4x root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) notequal_5y6z7a root.Std_k98ojb.Logic.NotEqual {}\n\n        input_1a2b3c -> sort_3m4n5o.list\n        sort_3m4n5o.list -> for_6p7q8r.items\n        for_6p7q8r.item -> add_9s0t1u.first\n        1 -> add_9s0t1u.second\n        add_9s0t1u.result -> notequal_5y6z7a.left\n        for_6p7q8r.index -> notequal_5y6z7a.right\n        notequal_5y6z7a.result -> if_2v3w4x.predicate\n        for_6p7q8r.onItem -> if_2v3w4x.execute\n        if_2v3w4x.then -> continue_0j1k2l\n        if_2v3w4x.else -> continue_0j1k2l\n        if_2v3w4x.value -> out_7g8h9i\n        for_6p7q8r.done -> continue_0j1k2l\n        execute_4d5e6f -> for_6p7q8r.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 100, y: 100, name: \"input\") property(List) input_list\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) is_consecutive\n\n        instance(x: 150, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 450, y: 100) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: 100) sub_expression root.Std_k98ojb.Math.Expression {\n            expression: \"a - b\"\n        }\n        instance(x: 750, y: 100) if_not_consecutive root.Std_k98ojb.Std.IfExpression {\n            expression: \"diff != 1\"\n        }\n        instance(x: 900, y: 100) not_consecutive root.Std_k98ojb.Std.If {}\n\n        input_list -> sort_list.list\n        sort_list.list -> for_loop.items\n        for_loop.item -> sub_expression.a\n        for_loop.index -> sub_expression.b\n        sub_expression.result -> if_not_consecutive.diff\n        if_not_consecutive.value -> not_consecutive.input\n        not_consecutive.then -> is_consecutive.false\n        not_consecutive.else -> for_loop.next\n        for_loop.done -> is_consecutive.true\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 114, y: -30, name: \"input\") property(List<Number>) input_1a2b3c\n        in(x: 113, y: 70, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 450, y: 0, name: \"out\") property(Bool) out_7g8h9i\n        out(x: 580, y: 70, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 300, y: -150) sort_3m4n5o root.Std_k98ojb.List.Sort {}\n        instance(x: 600, y: -150) for_6p7q8r root.Std_k98ojb.Std.For {}\n        instance(x: 900, y: -150) add_9s0t1u root.Std_k98ojb.Math.Add {}\n        instance(x: 1200, y: -150) if_2v3w4x root.Std_k98ojb.Std.If {}\n        instance(x: 1500, y: -150) not_equal_5y6z7a root.Std_k98ojb.Logic.NotEqual {}\n\n        input_1a2b3c -> sort_3m4n5o.list\n        sort_3m4n5o.sorted -> for_6p7q8r.items\n        for_6p7q8r.index -> add_9s0t1u.first\n        1 -> add_9s0t1u.second\n        add_9s0t1u.result -> not_equal_5y6z7a.left\n        for_6p7q8r.item -> not_equal_5y6z7a.right\n        not_equal_5y6z7a.result -> if_2v3w4x.predicate\n        for_6p7q8r.onItem -> if_2v3w4x.execute\n        if_2v3w4x.then -> continue_0j1k2l\n        if_2v3w4x.else -> out_7g8h9i\n        for_6p7q8r.done -> continue_0j1k2l\n        execute_4d5e6f -> for_6p7q8r.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") has_consecutive_numbers {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) sort_038fce root.Std_k98ojb.List.Sort {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) sub_b720d7 root.Std_k98ojb.Math.Sub {}\n        instance(x: 2136, y: -356) equal_e19a62 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n\n        input_f5c03d -> sort_038fce.list\n        sort_038fce.sorted -> for_8cb3f6.items\n        for_8cb3f6.index -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> for_8cb3f6.next\n\n        for_8cb3f6.item -> sub_b720d7.first\n        for_8cb3f6.index -> sub_b720d7.second\n        sub_b720d7.result -> equal_e19a62.left\n        1 -> equal_e19a62.right\n\n        equal_e19a62.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> out_f3db9f\n\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}"
            ],
            "17": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: 50, name: \"mainList\") property(List) mainList\n        in(x: 100, y: 100, name: \"subList\") property(List) subList\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 100, name: \"isSublist\") property(Bool) isSublist\n        out(x: 300, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 50) length_mainList root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 100) length_subList root.Std_k98ojb.List.Length {}\n        instance(x: 400, y: 50) generate_range root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: 50) slice_list root.Std_k98ojb.List.Slice {}\n        instance(x: 1000, y: 50) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1200, y: 50) if_check root.Std_k98ojb.Std.If {}\n\n        mainList -> length_mainList.list\n        subList -> length_subList.list\n        length_mainList.length -> generate_range.to\n        length_subList.length -> generate_range.from\n        generate_range.list -> for_loop.items\n        for_loop.item -> slice_list.start\n        length_subList.length -> slice_list.end\n        mainList -> slice_list.list\n        slice_list.slice -> equal_check.left\n        subList -> equal_check.right\n        equal_check.equal -> if_check.predicate\n        for_loop.onItem -> if_check.execute\n        if_check.then -> continue\n        if_check.value -> isSublist\n        if_check.else -> for_loop.next\n        for_loop.done -> continue\n        execute -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 124, y: -56, name: \"list\") property(List) list_1\n        in(x: 124, y: -156, name: \"sublist\") property(List) sublist_1\n        in(x: 124, y: -256, name: \"execute\") trigger() execute_1\n\n        out(x: 724, y: -56, name: \"out\") property(Bool) out_1\n        out(x: 724, y: 44, name: \"continue\") trigger() continue_1\n\n        instance(x: 424, y: -156) contains_1 root.Std_k98ojb.List.Contains {}\n        instance(x: 324, y: -56) for_1 root.Std_k98ojb.Std.For {}\n        instance(x: 524, y: -56) if_1 root.Std_k98ojb.Std.If {}\n        instance(x: 224, y: -256) is_empty_1 root.Std_k98ojb.List.IsEmpty {}\n\n        sublist_1 -> is_empty_1.list\n        is_empty_1.isEmpty -> if_1.predicate\n        execute_1 -> if_1.execute\n        if_1.then -> continue_1\n        if_1.value -> out_1\n\n        sublist_1 -> for_1.items\n        for_1.item -> contains_1.item\n        list_1 -> contains_1.list\n        contains_1.result -> if_1.predicate\n        for_1.onItem -> if_1.execute\n        if_1.else -> continue_1\n        if_1.value -> out_1\n        for_1.done -> continue_1\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 70, y: 10, name: \"mainList\") property(List) mainList_1\n        in(x: 70, y: 70, name: \"subList\") property(List) subList_2\n        in(x: 70, y: 130, name: \"execute\") trigger() execute_3\n\n        out(x: 470, y: 10, name: \"isSublist\") property(Bool) isSublist_4\n        out(x: 470, y: 70, name: \"continue\") trigger() continue_5\n\n        instance(x: 230, y: 10) length_mainList root.Std_k98ojb.List.Length {}\n        instance(x: 230, y: 70) length_subList root.Std_k98ojb.List.Length {}\n        instance(x: 320, y: 10) expression_compareLength root.Std_k98ojb.Math.Expression {\n            expression: \"mainLength >= subLength\"\n        }\n        instance(x: 410, y: 10) if_checkLength root.Std_k98ojb.Std.If {}\n        instance(x: 320, y: 70) filter_subList root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 410, y: 70) if_checkSublist root.Std_k98ojb.Std.If {}\n\n        mainList_1 -> length_mainList.list\n        subList_2 -> length_subList.list\n        length_mainList.length -> expression_compareLength.gen_0\n        length_subList.length -> expression_compareLength.gen_1\n        expression_compareLength.result -> if_checkLength.predicate\n        execute_3 -> if_checkLength.execute\n        if_checkLength.then -> filter_subList.execute\n        if_checkLength.else -> continue_5\n        subList_2 -> filter_subList.items\n        func() {\n            in(x: -40, y: 20, name: \"item\") property(Any) item_6\n\n            out(x: 160, y: 20, name: \"out\") property(Bool) out_7\n\n            instance(x: 40, y: 20) contains_item root.Std_k98ojb.List.Contains {}\n            mainList_1 -> contains_item.list\n            item_6 -> contains_item.item\n            contains_item.contains -> out_7\n        } -> filter_subList.handler\n        filter_subList.output_list -> length_subList.list\n        length_subList.length -> if_checkSublist.predicate\n        if_checkSublist.then -> isSublist_4\n        if_checkSublist.else -> continue_5\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: 100, name: \"mainList\") property(List) mainList\n        in(x: 100, y: 150, name: \"subList\") property(List) subList\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 150, name: \"isSublist\") property(Bool) isSublist\n        out(x: 400, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 100) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 250, y: 150) lengthSubList root.Std_k98ojb.List.Length {}\n        instance(x: 250, y: 200) lengthIntersection root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 150) equalLength root.Std_k98ojb.Logic.Equal {}\n\n        mainList -> intersection.left\n        subList -> intersection.right\n        subList -> lengthSubList.list\n        intersection.intersect -> lengthIntersection.list\n        lengthSubList.length -> equalLength.left\n        lengthIntersection.length -> equalLength.right\n        equalLength.result -> isSublist\n        execute -> intersection.execute\n        intersection.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: 50, name: \"list1\") property(List) list1_abc123\n        in(x: 100, y: 100, name: \"list2\") property(List) list2_def456\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_ghi789\n\n        out(x: 300, y: 100, name: \"isSublist\") property(Bool) isSublist_jkl012\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_mno345\n\n        instance(x: 200, y: 50) intersection_pqr678 root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 200, y: 100) equal_stu901 root.Std_k98ojb.Logic.Equal {}\n\n        list1_abc123 -> intersection_pqr678.left\n        list2_def456 -> intersection_pqr678.right\n        intersection_pqr678.intersect -> equal_stu901.left\n        list1_abc123 -> equal_stu901.right\n        equal_stu901.result -> isSublist_jkl012\n        execute_ghi789 -> continue_mno345\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 150, y: -100, name: \"mainList\") property(List) mainList_1\n        in(x: 150, y: -50, name: \"subList\") property(List) subList_2\n        in(x: 150, y: 0, name: \"execute\") trigger() execute_3\n\n        out(x: 150, y: 100, name: \"out\") property(Bool) out_4\n        out(x: 150, y: 150, name: \"continue\") trigger() continue_5\n\n        instance(x: 350, y: -50) length_mainList root.Std_k98ojb.List.Length {}\n        instance(x: 350, y: 0) length_subList root.Std_k98ojb.List.Length {}\n        instance(x: 600, y: -50) sub root.Std_k98ojb.Math.Sub {}\n        instance(x: 850, y: -50) generateRange root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 1100, y: -50) forLoop root.Std_k98ojb.Std.For {}\n        instance(x: 1350, y: -50) slice root.Std_k98ojb.List.Slice {}\n        instance(x: 1600, y: -50) equal root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1850, y: -50) ifCheck root.Std_k98ojb.Std.If {}\n\n        mainList_1 -> length_mainList.list\n        subList_2 -> length_subList.list\n        length_mainList.length -> sub.first\n        length_subList.length -> sub.second\n        sub.result -> generateRange.to\n        0 -> generateRange.from\n        generateRange.list -> forLoop.items\n        forLoop.item -> slice.start\n        length_subList.length -> slice.end\n        mainList_1 -> slice.list\n        slice.slice -> equal.left\n        subList_2 -> equal.right\n        equal.result -> ifCheck.predicate\n        forLoop.onItem -> ifCheck.execute\n        ifCheck.then -> {\n            true -> out_4\n            continue_5\n        }\n        ifCheck.else -> forLoop.next\n        forLoop.done -> {\n            false -> out_4\n            continue_5\n        }\n        execute_3 -> forLoop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: -50, name: \"mainList\") property(List) mainList_1a2b3c\n        in(x: 100, y: 0, name: \"subList\") property(List) subList_4d5e6f\n        in(x: 100, y: 50, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 400, y: 0, name: \"isSublist\") property(Bool) isSublist_0a1b2c\n        out(x: 400, y: 50, name: \"continue\") trigger() continue_3d4e5f\n\n        instance(x: 250, y: -50) length_main_6g7h8i root.Std_k98ojb.List.Length {}\n        instance(x: 250, y: 0) length_sub_9j0k1l root.Std_k98ojb.List.Length {}\n        instance(x: 250, y: 50) subtract_2m3n4o root.Std_k98ojb.Math.Sub {}\n        instance(x: 250, y: 100) add_5p6q7r root.Std_k98ojb.Math.Add {}\n        instance(x: 250, y: 150) for_loop_8s9t0u root.Std_k98ojb.Std.For {}\n        instance(x: 500, y: 0) slice_main_1v2w3x root.Std_k98ojb.List.Slice {}\n        instance(x: 500, y: 50) equal_check_4y5z6a root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_node_7b8c9d root.Std_k98ojb.Std.If {}\n\n        mainList_1a2b3c -> length_main_6g7h8i.list\n        subList_4d5e6f -> length_sub_9j0k1l.list\n        length_main_6g7h8i.length -> subtract_2m3n4o.first\n        length_sub_9j0k1l.length -> subtract_2m3n4o.second\n        subtract_2m3n4o.result -> add_5p6q7r.first\n        1 -> add_5p6q7r.second\n        add_5p6q7r.result -> for_loop_8s9t0u.items\n        for_loop_8s9t0u.index -> slice_main_1v2w3x.start\n        length_sub_9j0k1l.length -> slice_main_1v2w3x.end\n        mainList_1a2b3c -> slice_main_1v2w3x.list\n        slice_main_1v2w3x.slice -> equal_check_4y5z6a.left\n        subList_4d5e6f -> equal_check_4y5z6a.right\n        equal_check_4y5z6a.result -> if_node_7b8c9d.predicate\n        for_loop_8s9t0u.onItem -> if_node_7b8c9d.execute\n        if_node_7b8c9d.then -> continue_3d4e5f\n        if_node_7b8c9d.value -> isSublist_0a1b2c\n        for_loop_8s9t0u.done -> continue_3d4e5f\n        execute_7g8h9i -> for_loop_8s9t0u.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 150, y: -50, name: \"mainList\") property(List) mainList_123abc\n        in(x: 150, y: 50, name: \"subList\") property(List) subList_456def\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 450, y: 0, name: \"isSublist\") property(Bool) isSublist_abc123\n        out(x: 450, y: 100, name: \"continue\") trigger() continue_def456\n\n        instance(x: 300, y: -50) contains_789xyz root.Std_k98ojb.List.Contains {}\n        instance(x: 300, y: 50) forLoop_012jkl root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: 0) if_345mno root.Std_k98ojb.Std.If {}\n        instance(x: 600, y: 100) and_678pqr root.Std_k98ojb.Logic.And {}\n\n        subList_456def -> forLoop_012jkl.items\n        forLoop_012jkl.item -> contains_789xyz.item\n        mainList_123abc -> contains_789xyz.list\n        contains_789xyz.result -> if_345mno.input\n        if_345mno.then -> forLoop_012jkl.next\n        if_345mno.else -> continue_def456\n        if_345mno.value -> and_678pqr.left\n        forLoop_012jkl.done -> and_678pqr.right\n        and_678pqr.result -> isSublist_abc123\n        execute_789ghi -> forLoop_012jkl.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 110, y: -53, name: \"mainList\") property(List) mainList_5c03d\n        in(x: 110, y: 53, name: \"subList\") property(List) subList_27b8c3\n        in(x: 110, y: 159, name: \"execute\") trigger() execute_8ba06b\n\n        out(x: 600, y: 53, name: \"out\") property(Bool) out_f3db9f\n        out(x: 750, y: 159, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 300, y: 53) filter_038fce root.Std_k98ojb.Query.Filter {}\n        instance(x: 450, y: 53) length_8cb3f6 root.Std_k98ojb.List.Length {}\n        instance(x: 600, y: 53) equal_07b8c7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 750, y: 53) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        mainList_5c03d -> filter_038fce.items\n        subList_27b8c3 -> filter_038fce.where\n        filter_038fce.items -> length_8cb3f6.list\n        subList_27b8c3 -> length_8cb3f6.list\n        length_8cb3f6.length -> equal_07b8c7.left\n        length_8cb3f6.length -> equal_07b8c7.right\n        equal_07b8c7.result -> if_e19a62.predicate\n        if_e19a62.value -> out_f3db9f\n        execute_8ba06b -> if_e19a62.execute\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 140, y: 0, name: \"list\") property(List) list_8a6d2e\n        in(x: 140, y: 80, name: \"sublist\") property(List) sublist_1c8d2e\n        in(x: 140, y: 160, name: \"execute\") trigger() execute_1b8c2e\n\n        out(x: 640, y: 40, name: \"isSublist\") property(Bool) isSublist_9b6d2e\n        out(x: 640, y: 120, name: \"continue\") trigger() continue_2b8c2e\n\n        instance(x: 340, y: 0) contains_5a6d2e root.Std_k98ojb.List.Contains {}\n        instance(x: 340, y: 80) for_6b8c2e root.Std_k98ojb.Std.For {}\n        instance(x: 540, y: 0) if_7c8d2e root.Std_k98ojb.Std.If {}\n\n        sublist_1c8d2e -> for_6b8c2e.items\n        for_6b8c2e.item -> contains_5a6d2e.item\n        list_8a6d2e -> contains_5a6d2e.list\n        contains_5a6d2e.result -> if_7c8d2e.input\n        for_6b8c2e.onItem -> if_7c8d2e.execute\n        if_7c8d2e.then -> for_6b8c2e.next\n        if_7c8d2e.else -> continue_2b8c2e\n        if_7c8d2e.value -> isSublist_9b6d2e\n        for_6b8c2e.done -> continue_2b8c2e\n        execute_1b8c2e -> for_6b8c2e.reset\n    }\n}"
            ],
            "27": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing_number {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(current != index)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        0 -> generaterange_038fce.from\n        input_f5c03d -> generaterange_038fce.to\n        generaterange_038fce.list -> for_8cb3f6.items\n        for_8cb3f6.item -> expression_b720d7.gen_0\n        for_8cb3f6.index -> expression_b720d7.gen_1\n        expression_b720d7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> if_e19a62.execute\n        if_07b8c7.else -> for_8cb3f6.next\n        if_e19a62.predicate -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -189, y: 222) find_smallest_missing_number_f0be66 root.main.find_smallest_missing_number {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 100, y: 50, name: \"input_list\") property(List<Number>) input_list_1a2b3c\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 600, y: 50, name: \"missing_number\") property(Number) missing_number_7g8h9i\n        out(x: 600, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 300, y: 50) generaterange_3m4n5o root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 50) find_6p7q8r root.Std_k98ojb.Iteration.Find {}\n        instance(x: 500, y: 50) if_9s0t1u root.Std_k98ojb.Std.If {}\n\n        0 -> generaterange_3m4n5o.from\n        1000 -> generaterange_3m4n5o.to\n        generaterange_3m4n5o.list -> find_6p7q8r.items\n\n        func() {\n            in(x: -100, y: 50, name: \"element\") property(Number) element_2v3w4x\n\n            out(x: 200, y: 50, name: \"is_missing\") property(Bool) is_missing_5y6z7a\n\n            instance(x: 50, y: 50) notcontains_8b9c0d root.Std_k98ojb.Logic.Not {}\n            instance(x: 150, y: 50) contains_1e2f3g root.Std_k98ojb.List.Contains {}\n\n            element_2v3w4x -> contains_1e2f3g.item\n            input_list_1a2b3c -> contains_1e2f3g.list\n            contains_1e2f3g.result -> notcontains_8b9c0d.input\n            notcontains_8b9c0d.result -> is_missing_5y6z7a\n        } -> find_6p7q8r.predicate\n\n        find_6p7q8r.item -> if_9s0t1u.value\n        find_6p7q8r.item -> missing_number_7g8h9i\n        execute_4d5e6f -> find_6p7q8r.execute\n        find_6p7q8r.done -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 100, name: \"missing_number\") property(Number) missing_number\n        out(x: 500, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 50) generate_range root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 150) find_missing root.Std_k98ojb.Iteration.Find {}\n        instance(x: 700, y: 50) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n        0 -> generate_range.from\n        input_list -> generate_range.to\n\n        generate_range.list -> find_missing.items\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element\n\n            out(x: 250, y: 50, name: \"is_missing\") property(Bool) is_missing\n\n            instance(x: 100, y: 50) contains root.Std_k98ojb.List.Contains {}\n\n            element -> contains.item\n            input_list -> contains.list\n\n            contains.result -> not_equal.left\n            false -> not_equal.right\n\n            not_equal.result -> is_missing\n        } -> find_missing.predicate\n\n        find_missing.item -> missing_number\n        execute_trigger -> find_missing.execute\n        find_missing.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 100, y: 100, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 400, y: 100, name: \"missing_number\") property(Number) missing_number\n\n        instance(x: 200, y: 100) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 100) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"it != index\"\n        }\n        instance(x: 500, y: 100) first_item root.Std_k98ojb.List.FirstItem {}\n\n        input_list -> for_loop.items\n        for_loop.index -> if_expression.index\n        for_loop.item -> if_expression.it\n        if_expression.value -> first_item.item\n        first_item.item -> missing_number\n        for_loop.onItem -> if_expression.execute\n        if_expression.then -> for_loop.done\n        if_expression.else -> for_loop.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 200, y: 100, name: \"input_list\") property(List<Number>) input_list\n        in(x: 200, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 600, y: 100, name: \"missing_number\") property(Number) missing_number\n        out(x: 600, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 400, y: 100) generaterange root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 200) filter root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 300) firstitem root.Std_k98ojb.List.FirstItem {}\n\n        0 -> generaterange.from\n        input_list -> generaterange.to\n        generaterange.list -> filter.items\n\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n            out(x: 200, y: 0, name: \"result\") property(Bool) result\n\n            instance(x: 100, y: 0) notcontains root.Std_k98ojb.List.Contains {}\n            item -> notcontains.item\n            input_list -> notcontains.list\n            notcontains.isNotContained -> result\n        } -> filter.handler\n\n        filter.output_list -> firstitem.list\n        firstitem.item -> missing_number\n        execute -> generaterange.reset\n        firstitem.item -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 40, y: -40, name: \"input\") property(List) input_list\n        in(x: 40, y: 0, name: \"execute\") trigger() execute_trigger\n\n        out(x: 200, y: 0, name: \"missing_number\") property(Number) missing_number\n        out(x: 200, y: 40, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 160, y: -160) generaterange_instance root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 360, y: -160) find_instance root.Std_k98ojb.Iteration.Find {}\n        instance(x: 560, y: -160) not_equal_instance root.Std_k98ojb.Logic.NotEqual {}\n\n        0 -> generaterange_instance.from\n        input_list -> generaterange_instance.to\n        generaterange_instance.list -> find_instance.items\n\n        func() {\n            in(x: -60, y: 0, name: \"element\") property(Number) element\n\n            out(x: 60, y: 0, name: \"out\") property(Bool) out\n\n            instance(x: 0, y: 0) get_at_instance root.Std_k98ojb.List.GetAt {}\n            instance(x: 120, y: 0) not_equal_instance root.Std_k98ojb.Logic.NotEqual {}\n\n            element -> get_at_instance.index\n            input_list -> get_at_instance.list\n            element -> not_equal_instance.left\n            get_at_instance.item -> not_equal_instance.right\n            not_equal_instance.result -> out\n        } -> find_instance.predicate\n\n        find_instance.item -> missing_number\n        execute_trigger -> find_instance.execute\n        find_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 40, y: -50, name: \"numbers\") property(List) numbers_input\n        in(x: 40, y: -10, name: \"execute\") trigger() execute_trigger\n\n        out(x: 320, y: -30, name: \"missing_number\") property(Number) missing_number_output\n        out(x: 320, y: 10, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 160, y: -50) generate_range root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 160, y: 0) find_missing root.Std_k98ojb.Iteration.Find {}\n        instance(x: 280, y: -50) not_equal root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 280, y: 0) if_missing root.Std_k98ojb.Std.If {}\n\n        0 -> generate_range.from\n        numbers_input -> List.LastItem.list\n        List.LastItem.item -> generate_range.to\n\n        generate_range.list -> find_missing.items\n        func() {\n            in(x: -80, y: 40, name: \"number\") property(Number) number_input\n\n            out(x: 40, y: 40, name: \"is_missing\") property(Bool) is_missing_output\n\n            instance(x: -40, y: 40) contains root.Std_k98ojb.List.Contains {}\n\n            numbers_input -> contains.list\n            number_input -> contains.item\n            contains.result -> Logic.Not.not_input\n            Logic.Not.not_output -> is_missing_output\n        } -> find_missing.predicate\n\n        find_missing.item -> not_equal.left\n        find_missing.item -> missing_number_output\n        -1 -> not_equal.right\n\n        not_equal.result -> if_missing.predicate\n        execute_trigger -> if_missing.execute\n        if_missing.then -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing_number {\n        in(x: 82, y: 25, name: \"numbers\") property(List<Number>) numbers_82c3f7\n        in(x: 75, y: 188, name: \"execute\") trigger() execute_7f8a1b\n\n        out(x: 640, y: 96, name: \"missing_number\") property(Number) missing_number_1f2a3d\n        out(x: 774, y: 207, name: \"continue\") trigger() continue_2e8b6c\n\n        instance(x: 255, y: 20) generaterange_7f3a2c root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 439, y: 15) difference_3f2a1d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 566, y: 11) firstitem_8b2f3a root.Std_k98ojb.List.FirstItem {}\n\n        0 -> generaterange_7f3a2c.from\n        numbers_82c3f7 -> generaterange_7f3a2c.to\n        generaterange_7f3a2c.list -> difference_3f2a1d.left\n        numbers_82c3f7 -> difference_3f2a1d.right\n        difference_3f2a1d.difference -> firstitem_8b2f3a.list\n        firstitem_8b2f3a.item -> missing_number_1f2a3d\n        execute_7f8a1b -> continue_2e8b6c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 174, y: -60, name: \"input\") property(List<Number>) input_list\n\n        out(x: 1510, y: 0, name: \"out\") property(Number) out_missing_number\n\n        instance(x: 410, y: -50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 780, y: -100) equal root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1030, y: -200) if_missing root.Std_k98ojb.Std.If {}\n        instance(x: 1300, y: -100) add root.Std_k98ojb.Math.Add {}\n        instance(x: 1500, y: -200) is_empty root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 1700, y: -50) if_empty root.Std_k98ojb.Std.If {}\n\n        input_list -> for_loop.items\n        for_loop.index -> equal.left\n        for_loop.item -> equal.right\n        equal.result -> if_missing.predicate\n        if_missing.else -> out_missing_number\n        if_missing.then -> for_loop.next\n        for_loop.onItem -> if_missing.execute\n        for_loop.done -> add.first\n        for_loop.index -> add.second\n        add.result -> out_missing_number\n        input_list -> is_empty.list\n        is_empty.isEmpty -> if_empty.predicate\n        if_empty.then -> out_missing_number\n        0 -> out_missing_number\n        if_empty.else -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing_number {\n        in(x: 100, y: 50, name: \"numbers\") property(List<Number>) numbers\n        in(x: 100, y: 100, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 50, name: \"missingNumber\") property(Number) missingNumber\n        out(x: 500, y: 100, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 50) length root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 150) generateRange root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 100) find root.Std_k98ojb.Iteration.Find {}\n        instance(x: 400, y: 100) notEqual root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 400, y: 150) if root.Std_k98ojb.Std.If {}\n\n        numbers -> length.list\n        0 -> generateRange.from\n        length.length -> generateRange.to\n        generateRange.list -> find.items\n\n        func() {\n            in(x: 50, y: 50, name: \"item\") property(Number) item\n            out(x: 150, y: 50, name: \"out\") property(Bool) out\n\n            instance(x: 100, y: 50) getAt root.Std_k98ojb.List.GetAt {}\n            instance(x: 100, y: 100) notEqual root.Std_k98ojb.Logic.NotEqual {}\n\n            numbers -> getAt.list\n            item -> getAt.index\n            getAt.item -> notEqual.left\n            item -> notEqual.right\n            notEqual.result -> out\n        } -> find.predicate\n\n        find.item -> missingNumber\n        find.item -> notEqual.left\n        find.item -> notEqual.right\n        notEqual.result -> if.predicate\n        if.then -> continue\n        execute -> generateRange.reset\n    }\n}"
            ],
            "31": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 60, y: 60, name: \"input\") property(String) input_str\n        in(x: 60, y: 120, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 60, name: \"output\") property(String) output_str\n        out(x: 400, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 60) replace_space root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 200, y: 160) replace_comma root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 200, y: 260) replace_dot root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_trigger -> replace_space.execute\n        input_str -> replace_space.input\n        replace_space.output -> replace_comma.input\n        replace_comma.execute -> replace_space.done\n        replace_comma.output -> replace_dot.input\n        replace_dot.execute -> replace_comma.done\n        replace_dot.output -> output_str\n        replace_dot.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 150, y: 50, name: \"input\") property(String) input_string\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 50, name: \"output\") property(String) output_string\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 50) replace_spaces root.Std_k98ojb.Strings.Replace {}\n        instance(x: 250, y: 150) replace_commas root.Std_k98ojb.Strings.Replace {}\n        instance(x: 250, y: 250) replace_dots root.Std_k98ojb.Strings.Replace {}\n\n        input_string -> replace_spaces.input\n        \" \" -> replace_spaces.search\n        \":\" -> replace_spaces.replace\n\n        replace_spaces.output -> replace_commas.input\n        \",\" -> replace_commas.search\n        \":\" -> replace_commas.replace\n\n        replace_commas.output -> replace_dots.input\n        \".\" -> replace_dots.search\n        \":\" -> replace_dots.replace\n\n        replace_dots.output -> output_string\n        execute_trigger -> replace_spaces.trigger\n        replace_dots.trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 200, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 600, y: 100, name: \"output\") property(String) output_string\n\n        instance(x: 400, y: 50) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 800, y: 50) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 1200, y: 50) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        input_string -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_string\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_spaces_commas_dots {\n        in(x: 150, y: 0, name: \"input\") property(String) input_str\n        in(x: 150, y: 50, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 0, name: \"output\") property(String) output_str\n        out(x: 500, y: 50, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: 0) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 300, y: 100) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 300, y: 200) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute -> replace_spaces.execute\n        input_str -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_str\n        replace_dots.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 353, y: -33, name: \"input\") property(String) input_27d7f2\n        in(x: 163, y: -190, name: \"execute\") trigger() execute_12f4d3\n\n        out(x: 1790, y: -14, name: \"out\") property(String) out_97c0d2\n        out(x: 1902, y: 128, name: \"continue\") trigger() continue_5d7b8f\n\n        instance(x: 675, y: -43) replace_2a4f9c root.Std_k98ojb.Strings.Replace {}\n        instance(x: 1194, y: -45) replace_7d9f6a root.Std_k98ojb.Strings.Replace {}\n        instance(x: 1456, y: -47) replace_4b7c3a root.Std_k98ojb.Strings.Replace {}\n        instance(x: 903, y: -211) replace_3c2b5e root.Std_k98ojb.Strings.Replace {}\n        \" \" -> replace_2a4f9c.search\n        \",\" -> replace_3c2b5e.search\n        \".\" -> replace_7d9f6a.search\n        \":\" -> replace_2a4f9c.replace\n        \":\" -> replace_3c2b5e.replace\n        \":\" -> replace_7d9f6a.replace\n        input_27d7f2 -> replace_2a4f9c.input\n        replace_2a4f9c.output -> replace_3c2b5e.input\n        replace_3c2b5e.output -> replace_7d9f6a.input\n        replace_7d9f6a.output -> out_97c0d2\n        execute_12f4d3 -> replace_2a4f9c.execute\n        replace_7d9f6a.done -> continue_5d7b8f\n    }\n\n    \n\n    instance(x: -195, y: 220) replace_with_colon_93b4f1 root.main.replace_with_colon {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_spaces_commas_dots {\n        in(x: 50, y: 50, name: \"input\") property(String) input_string\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 50, name: \"output\") property(String) output_string\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 200, y: 150) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 200, y: 250) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_trigger -> replace_spaces.execute\n        input_string -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.execute -> replace_commas.execute\n        replace_commas.output -> replace_dots.input\n        replace_dots.execute -> replace_dots.execute\n        replace_dots.output -> output_string\n        replace_dots.execute -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_spaces_commas_dots {\n        in(x: 154, y: -63, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) replace_spaces_6030c9 root.Std_k98ojb.Strings.Replace {}\n        instance(x: 591, y: 74) replace_commas_038fce root.Std_k98ojb.Strings.Replace {}\n        instance(x: 933, y: 25) replace_dots_f11fda root.Std_k98ojb.Strings.Replace {}\n\n        input_f5c03d -> replace_spaces_6030c9.input\n        \" \" -> replace_spaces_6030c9.search\n        \":\" -> replace_spaces_6030c9.replace\n        replace_spaces_6030c9.result -> replace_commas_038fce.input\n        \",\" -> replace_commas_038fce.search\n        \":\" -> replace_commas_038fce.replace\n        replace_commas_038fce.result -> replace_dots_f11fda.input\n        \".\" -> replace_dots_f11fda.search\n        \":\" -> replace_dots_f11fda.replace\n        replace_dots_f11fda.result -> out_f3db9f\n\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) replace_spaces_commas_dots_f0be66 root.main.replace_spaces_commas_dots {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 200, y: 100) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 200, y: 150) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_trigger -> replace_spaces.trigger\n        input_string -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_string\n        replace_dots.trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_spaces_commas_dots {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n\n        instance(x: 200, y: 50) replace_spaces root.Std_k98ojb.Strings.Replace {}\n        instance(x: 400, y: 50) replace_commas root.Std_k98ojb.Strings.Replace {}\n        instance(x: 600, y: 50) replace_dots root.Std_k98ojb.Strings.Replace {}\n\n        input_string -> replace_spaces.input\n        \" \" -> replace_spaces.search\n        \":\" -> replace_spaces.replace\n\n        replace_spaces.output -> replace_commas.input\n        \",\" -> replace_commas.search\n        \":\" -> replace_commas.replace\n\n        replace_commas.output -> replace_dots.input\n        \".\" -> replace_dots.search\n        \":\" -> replace_dots.replace\n\n        replace_dots.output -> output_string\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 50, y: -50, name: \"input\") property(String) input_string\n        in(x: 50, y: 0, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: -50, name: \"output\") property(String) output_string\n        out(x: 400, y: 0, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: -150) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 200, y: -50) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 200, y: 50) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_trigger -> replace_spaces.execute\n        input_string -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_string\n        replace_dots.done -> continue_trigger\n    }\n}"
            ],
            "33": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 100, y: 50, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) all_same\n\n        instance(x: 150, y: 100) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 150) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 250, y: 200) is_empty_node root.Std_k98ojb.List.IsEmpty {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> filter_node.items\n\n        func() {\n            in(x: 50, y: 50, name: \"character\") property(Char) character\n            in(x: 50, y: 100, name: \"index\") property(Number) index\n\n            out(x: 150, y: 75, name: \"out\") property(Bool) out\n\n            instance(x: 100, y: 50) not_equal_node root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 100, y: 100) get_at_node root.Std_k98ojb.List.GetAt {}\n\n            characters_node.characters -> get_at_node.list\n            0 -> get_at_node.index\n            get_at_node.item -> not_equal_node.left\n            character -> not_equal_node.right\n            not_equal_node.result -> out\n        } -> filter_node.handler\n\n        filter_node.output_list -> is_empty_node.list\n        is_empty_node.isEmpty -> all_same\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 200, y: -50, name: \"input\") property(String) input_str\n\n        out(x: 800, y: -50, name: \"out\") property(Bool) out_result\n\n        instance(x: 400, y: -50) characters_8a9bcd root.Std_k98ojb.Strings.Characters {}\n        instance(x: 600, y: -50) filter_5d2f3a root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1000, y: -50) length_3c7f8e root.Std_k98ojb.List.Length {}\n        instance(x: 1200, y: -50) equal_2b7f6a root.Std_k98ojb.Logic.Equal {}\n\n        input_str -> characters_8a9bcd.input\n        characters_8a9bcd.characters -> filter_5d2f3a.items\n\n        func() {\n            in(x: -100, y: 0, name: \"char\") property(Char) char_input\n            out(x: 100, y: 0, name: \"out\") property(Bool) out_bool\n\n            instance(x: 0, y: 0) equal_1a2b3c root.Std_k98ojb.Logic.Equal {}\n            instance(x: 0, y: 50) first_char_9d8e7f root.Std_k98ojb.List.FirstItem {}\n\n            characters_8a9bcd.characters -> first_char_9d8e7f.list\n            first_char_9d8e7f.item -> equal_1a2b3c.left\n            char_input -> equal_1a2b3c.right\n            equal_1a2b3c.result -> out_bool\n        } -> filter_5d2f3a.handler\n\n        filter_5d2f3a.output_list -> length_3c7f8e.list\n        characters_8a9bcd.characters -> length_3c7f8e.list\n        length_3c7f8e.length -> equal_2b7f6a.left\n        length_3c7f8e.length -> equal_2b7f6a.right\n        equal_2b7f6a.result -> out_result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_string\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) all_same\n\n        instance(x: 591, y: 74) characters_038fce root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) notequal_f11fda root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1088, y: -256) firstitem_b4554f root.Std_k98ojb.List.FirstItem {}\n\n        input_string -> characters_038fce.input\n        characters_038fce.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> notequal_f11fda.left\n        firstitem_b4554f.item -> notequal_f11fda.right\n        notequal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> all_same\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> all_same\n        characters_038fce.characters -> firstitem_b4554f.list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) result\n\n        instance(x: 200, y: 50) characters_abc123 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 400, y: 50) filter_456def root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 50) is_empty_789ghi root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 500, y: 150) not_equal_jkl012 root.Std_k98ojb.Logic.NotEqual {}\n\n        input_string -> characters_abc123.input\n        characters_abc123.characters -> filter_456def.items\n\n        func() {\n            in(x: -100, y: 0, name: \"char\") property(String) char\n            in(x: -100, y: 50, name: \"index\") property(Number) index\n\n            out(x: 100, y: 25, name: \"out\") property(Bool) out\n\n            instance(x: 0, y: 25) equal_mno345 root.Std_k98ojb.Logic.Equal {}\n\n            characters_abc123.characters[0] -> equal_mno345.left\n            char -> equal_mno345.right\n            equal_mno345.result -> out\n        } -> filter_456def.handler\n\n        filter_456def.output_list -> is_empty_789ghi.list\n        is_empty_789ghi.isEmpty -> not_equal_jkl012.left\n        true -> not_equal_jkl012.right\n        not_equal_jkl012.result -> result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all characters in a string are the same.\") all_characters_same {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 100, name: \"out\") property(Bool) out_result\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 100) characters_list root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 200) is_empty root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 300, y: 300) first_item root.Std_k98ojb.List.FirstItem {}\n        instance(x: 300, y: 400) filter root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 500) length root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 600) equal root.Std_k98ojb.Logic.Equal {}\n\n        input_string -> characters_list.input\n        characters_list.characters -> is_empty.list\n        characters_list.characters -> first_item.list\n        characters_list.characters -> filter.items\n\n        func() {\n            in(x: 0, y: 0, name: \"char\") property(Char) char_input\n            in(x: 0, y: 50, name: \"first\") property(Char) first_char\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) out_result\n\n            instance(x: 100, y: 0) equal_char root.Std_k98ojb.Logic.Equal {}\n            char_input -> equal_char.left\n            first_char -> equal_char.right\n            equal_char.result -> out_result\n        } -> filter.handler\n\n        first_item.item -> filter.handler.first_char\n        filter.output_list -> length.list\n        length.length -> equal.left\n        is_empty.isEmpty -> equal.right\n        equal.result -> out_result\n        execute_trigger -> characters_list.execute\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 54, y: -22, name: \"input\") property(String) input_2f3d1b\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 248, y: 24, name: \"out\") property(Bool) out_8a1b4d\n        out(x: 394, y: 154, name: \"continue\") trigger() continue_3c9f7e\n\n        instance(x: 352, y: -193) characters_5b8f2d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 533, y: 15) firstitem_4a7c1e root.Std_k98ojb.List.FirstItem {}\n        instance(x: 704, y: -105) filter_2b9d8f root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 973, y: 34) length_9c7d3f root.Std_k98ojb.List.Length {}\n        instance(x: 1154, y: -67) equal_1a2b3c root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1354, y: 54) if_4b7c8d root.Std_k98ojb.Std.If {}\n\n        input_2f3d1b -> characters_5b8f2d.input\n        characters_5b8f2d.characters -> firstitem_4a7c1e.list\n        characters_5b8f2d.characters -> filter_2b9d8f.items\n        firstitem_4a7c1e.item -> filter_2b9d8f.handler {\n            in(x: -76, y: 46, name: \"character\") property(Char) character_5f51f7\n            in(x: 76, y: 46, name: \"first_char\") property(Char) first_char_1a2b3c\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n            character_5f51f7 -> equal_2f9d09.left\n            first_char_1a2b3c -> equal_2f9d09.right\n            equal_2f9d09.result -> out_d0fd24\n        }\n        filter_2b9d8f.output_list -> length_9c7d3f.list\n        length_9c7d3f.length -> equal_1a2b3c.left\n        characters_5b8f2d.characters -> length_9c7d3f.list\n        length_9c7d3f.length -> equal_1a2b3c.right\n        equal_1a2b3c.result -> if_4b7c8d.predicate\n        if_4b7c8d.value -> out_8a1b4d\n        if_4b7c8d.then -> continue_3c9f7e\n        if_4b7c8d.else -> continue_3c9f7e\n        execute_27b8c3 -> characters_5b8f2d.input\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 100, y: 50, name: \"input\") property(String) input_123abc\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 50, name: \"out\") property(Bool) out_789ghi\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 200, y: 50) characters_345mno root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 50) filter_678pqr root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 500, y: 50) length_901stu root.Std_k98ojb.List.Length {}\n        instance(x: 600, y: 50) equal_234vwx root.Std_k98ojb.Logic.Equal {}\n\n        input_123abc -> characters_345mno.input\n        characters_345mno.characters -> filter_678pqr.items\n\n        func() {\n            in(x: -50, y: 50, name: \"item\") property(Char) item_abc123\n            in(x: -50, y: 100, name: \"index\") property(Number) index_def456\n\n            out(x: 150, y: 75, name: \"out\") property(Bool) out_ghi789\n\n            instance(x: 50, y: 75) equal_jkl012 root.Std_k98ojb.Logic.Equal {}\n\n            item_abc123 -> equal_jkl012.left\n            List.FirstItem(characters_345mno.characters) -> equal_jkl012.right\n            equal_jkl012.result -> out_ghi789\n        } -> filter_678pqr.handler\n\n        filter_678pqr.output_list -> length_901stu.list\n        length_901stu.length -> equal_234vwx.left\n        List.Length(characters_345mno.characters) -> equal_234vwx.right\n\n        equal_234vwx.result -> out_789ghi\n        execute_456def -> characters_345mno.execute\n        execute_456def -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 150, y: 50, name: \"input\") property(String) input_string\n\n        out(x: 400, y: 50, name: \"out\") property(Bool) all_same\n\n        instance(x: 200, y: 150) characters_4a3d5b root.Std_k98ojb.Strings.Characters {}\n        instance(x: 350, y: 150) filter_f3b7d1 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 550, y: 150) is_empty_8b2d3c root.Std_k98ojb.List.IsEmpty {}\n\n        input_string -> characters_4a3d5b.input\n        characters_4a3d5b.characters -> filter_f3b7d1.items\n\n        func() {\n            in(x: -50, y: 50, name: \"character\") property(Char) character\n            in(x: -50, y: 100, name: \"first_char\") property(Char) first_char\n\n            out(x: 200, y: 75, name: \"out\") property(Bool) is_same\n\n            instance(x: 100, y: 75) equal_1a2b3c root.Std_k98ojb.Logic.Equal {}\n\n            character -> equal_1a2b3c.left\n            first_char -> equal_1a2b3c.right\n            equal_1a2b3c.result -> is_same\n        } -> filter_f3b7d1.handler\n\n        characters_4a3d5b.characters -> List.FirstItem().item -> filter_f3b7d1.context\n        filter_f3b7d1.output_list -> is_empty_8b2d3c.list\n        is_empty_8b2d3c.isEmpty -> all_same\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all characters in a string are the same.\") all_characters_same {\n        in(x: 114, y: -35, name: \"input\") property(String) input_4d1a5f\n        in(x: 145, y: -168, name: \"execute\") trigger() execute_9a2b9f\n\n        out(x: 1480, y: 27, name: \"out\") property(Bool) out_2d3b9f\n        out(x: 1626, y: 157, name: \"continue\") trigger() continue_5ba06b\n\n        instance(x: 338, y: -168) characters_3c8b9d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 603, y: -56) firstitem_7b9f6d root.Std_k98ojb.List.FirstItem {}\n        instance(x: 867, y: 34) filter_1f7c3d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1131, y: -76) isEmpty_5b8c3d root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 1404, y: -178) not_2f8b9c root.Std_k98ojb.Logic.Not {}\n\n        input_4d1a5f -> characters_3c8b9d.input\n        characters_3c8b9d.characters -> firstitem_7b9f6d.list\n        firstitem_7b9f6d.item -> filter_1f7c3d.handler\n        characters_3c8b9d.characters -> filter_1f7c3d.items\n\n        func() {\n            in(x: -88, y: 38, name: \"char\") property(Char) char_5f7d9f\n            in(x: -88, y: 88, name: \"first_char\") property(Char) first_char_3f8d9f\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) equal_2f9d09 root.Std_k98ojb.Logic.Equal {}\n            char_5f7d9f -> equal_2f9d09.left\n            first_char_3f8d9f -> equal_2f9d09.right\n            equal_2f9d09.result -> out_d0fd24\n        } -> filter_1f7c3d.handler\n\n        filter_1f7c3d.output_list -> isEmpty_5b8c3d.list\n        isEmpty_5b8c3d.isEmpty -> not_2f8b9c.input\n        not_2f8b9c.output -> out_2d3b9f\n        execute_9a2b9f -> continue_5ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) notequal_b720d7 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) firstitem_b4554f root.Std_k98ojb.List.FirstItem {}\n        \n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> for_8cb3f6.items\n        characters_6030c9.characters -> firstitem_b4554f.list\n        firstitem_b4554f.item -> notequal_b720d7.left\n        for_8cb3f6.item -> notequal_b720d7.right\n        notequal_b720d7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> if_e19a62.execute\n        if_07b8c7.else -> for_8cb3f6.next\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> for_8cb3f6.next\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -189, y: 222) all_characters_same_f0be66 root.main.all_characters_same {}\n}"
            ],
            "37": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 161, y: -211, name: \"input\") property(String) input_4f7c2d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 500, y: -10, name: \"out\") property(Number) out_5d9f1b\n        out(x: 600, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_1a3b9f root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) filter_2b8f3e root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 933, y: 25) isnumeric_7f3c4a root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 1121, y: -54) length_3b7f2d root.Std_k98ojb.List.Length {}\n\n        input_4f7c2d -> characters_1a3b9f.input\n        characters_1a3b9f.characters -> filter_2b8f3e.items\n        func() {\n            in(x: -76, y: 46, name: \"character\") property(String) character_9f5b3d\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            character_9f5b3d -> isnumeric_7f3c4a.input\n            isnumeric_7f3c4a.isNumeric -> out_d0fd24\n        } -> filter_2b8f3e.handler\n        filter_2b8f3e.output_list -> length_3b7f2d.list\n        length_3b7f2d.length -> out_5d9f1b\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 70, y: 50, name: \"input\") property(String) input_4b5c3d\n        in(x: 70, y: 90, name: \"execute\") trigger() execute_1b8c3d\n\n        out(x: 400, y: 50, name: \"digit_count\") property(Number) digit_count_3b5c9f\n        out(x: 400, y: 90, name: \"continue\") trigger() continue_7ba06b\n\n        instance(x: 150, y: 50) characters_3f8c3d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 250, y: 50) filter_2b7c9d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 350, y: 50) length_4c9d7f root.Std_k98ojb.List.Length {}\n\n        input_4b5c3d -> characters_3f8c3d.input\n        characters_3f8c3d.characters -> filter_2b7c9d.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char_2b5c3d\n\n            out(x: 200, y: 50, name: \"is_digit\") property(Bool) is_digit_3c9d7f\n\n            instance(x: 100, y: 50) isnumeric_4d8c7f root.Std_k98ojb.Strings.IsNumeric {}\n            char_2b5c3d -> isnumeric_4d8c7f.input\n            isnumeric_4d8c7f.isNumeric -> is_digit_3c9d7f\n        } -> filter_2b7c9d.handler\n\n        filter_2b7c9d.output_list -> length_4c9d7f.list\n        length_4c9d7f.length -> digit_count_3b5c9f\n\n        execute_1b8c3d -> characters_3f8c3d.execute\n        length_4c9d7f.length -> continue_7ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 158, y: -70, name: \"input\") property(String) input_2a5f8c\n        in(x: 157, y: -210, name: \"execute\") trigger() execute_5c9f3b\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) characters_038fce root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) filter_8cb3f6 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1121, y: -54) is_numeric_07b8c7 root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 933, y: 25) length_f11fda root.Std_k98ojb.List.Length {}\n\n        input_2a5f8c -> characters_038fce.input\n        characters_038fce.characters -> filter_8cb3f6.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            element_5f51f7 -> is_numeric_07b8c7.input\n            is_numeric_07b8c7.isNumeric -> out_d0fd24\n        } -> filter_8cb3f6.handler\n        filter_8cb3f6.output_list -> length_f11fda.list\n        length_f11fda.length -> out_f3db9f\n        execute_5c9f3b -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 100, y: 50, name: \"input\") property(String) input_string\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 50, name: \"digit_count\") property(Number) digit_count\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 150) filter_digits root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 50) length_node root.Std_k98ojb.List.Length {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> filter_digits.items\n\n        func() {\n            in(x: 50, y: 50, name: \"char\") property(String) char_input\n            out(x: 150, y: 50, name: \"is_digit\") property(Bool) is_digit_output\n\n            instance(x: 100, y: 50) is_numeric_node root.Std_k98ojb.Strings.IsNumeric {}\n            char_input -> is_numeric_node.input\n            is_numeric_node.result -> is_digit_output\n        } -> filter_digits.handler\n\n        filter_digits.output_list -> length_node.list\n        length_node.length -> digit_count\n        execute_trigger -> characters_node.trigger\n        characters_node.trigger -> filter_digits.trigger\n        filter_digits.trigger -> length_node.trigger\n        length_node.trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 150, y: -50, name: \"input\") property(String) input_string\n        in(x: 150, y: 0, name: \"execute\") trigger() execute_trigger\n\n        out(x: 450, y: -50, name: \"digit_count\") property(Number) digit_count\n        out(x: 450, y: 0, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: -150) characters_instance root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 50) filter_instance root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: -50) length_instance root.Std_k98ojb.List.Length {}\n\n        input_string -> characters_instance.input\n        characters_instance.characters -> filter_instance.items\n\n        func() {\n            in(x: -50, y: 0, name: \"char\") property(String) char_input\n            out(x: 150, y: 0, name: \"is_digit\") property(Bool) is_digit_output\n\n            instance(x: 50, y: 0) is_numeric_instance root.Std_k98ojb.Strings.IsNumeric {}\n            char_input -> is_numeric_instance.input\n            is_numeric_instance.isNumeric -> is_digit_output\n        } -> filter_instance.handler\n\n        filter_instance.output_list -> length_instance.list\n        length_instance.length -> digit_count\n        execute_trigger -> characters_instance.trigger\n        length_instance.length -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 300, y: -200, name: \"input\") property(String) input_string\n        in(x: 300, y: -250, name: \"execute\") trigger() execute_trigger\n\n        out(x: 800, y: -200, name: \"digit_count\") property(Number) digit_count\n        out(x: 800, y: -250, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 500, y: -200) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 500, y: 0) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 650, y: 0) is_numeric_node root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 650, y: -200) length_node root.Std_k98ojb.List.Length {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> filter_node.items\n        func() {\n            in(x: -50, y: 0, name: \"character\") property(String) character\n\n            out(x: 200, y: 0, name: \"is_digit\") property(Bool) is_digit\n\n            character -> is_numeric_node.input\n            is_numeric_node.isNumeric -> is_digit\n        } -> filter_node.handler\n        filter_node.output_list -> length_node.list\n        length_node.length -> digit_count\n        execute_trigger -> characters_node.trigger\n        length_node.length -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 132, y: 54, name: \"input\") property(String) input_123abc\n        in(x: 152, y: 10, name: \"execute\") trigger() execute_456def\n\n        out(x: 540, y: 10, name: \"digit_count\") property(Number) digit_count_789ghi\n        out(x: 560, y: 54, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 320, y: 30) characters_abc123 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 360, y: 130) filter_digits_def456 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 460, y: 130) is_numeric_ghi789 root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 500, y: 30) length_012jkl root.Std_k98ojb.List.Length {}\n\n        input_123abc -> characters_abc123.input\n        characters_abc123.characters -> filter_digits_def456.items\n\n        func() {\n            in(x: 100, y: 30, name: \"char\") property(String) char_abc456\n\n            out(x: 300, y: 30, name: \"is_digit\") property(Bool) is_digit_def789\n\n            char_abc456 -> is_numeric_ghi789.input\n            is_numeric_ghi789.result -> is_digit_def789\n        } -> filter_digits_def456.handler\n\n        filter_digits_def456.output_list -> length_012jkl.list\n        length_012jkl.length -> digit_count_789ghi\n        execute_456def -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) filter_038fce root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1121, y: -54) length_07b8c7 root.Std_k98ojb.List.Length {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> filter_038fce.items\n        func() {\n            in(x: -76, y: 46, name: \"character\") property(String) character_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) isnumeric_2f9d09 root.Std_k98ojb.Strings.IsNumeric {}\n            character_5f51f7 -> isnumeric_2f9d09.input\n            isnumeric_2f9d09.result -> out_d0fd24\n        } -> filter_038fce.handler\n        filter_038fce.output_list -> length_07b8c7.list\n        length_07b8c7.length -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) count_digits_f0be66 root.main.count_digits {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 126, y: -24, name: \"input\") property(String) input_3b1c4d\n        in(x: 126, y: 51, name: \"execute\") trigger() execute_9f1a3e\n\n        out(x: 600, y: 0, name: \"out\") property(Number) out_7c3f5a\n        out(x: 600, y: 75, name: \"continue\") trigger() continue_1a4d2b\n\n        instance(x: 330, y: -30) characters_9f8b6a root.Std_k98ojb.Strings.Characters {}\n        instance(x: 450, y: 20) filter_0b9c8f root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 750, y: 20) length_3f8d1a root.Std_k98ojb.List.Length {}\n\n        input_3b1c4d -> characters_9f8b6a.input\n        characters_9f8b6a.characters -> filter_0b9c8f.items\n        func() {\n            in(x: -100, y: 30, name: \"char\") property(String) char_4f5b3c\n\n            out(x: 200, y: 30, name: \"out\") property(Bool) out_2f8c9d\n\n            instance(x: 50, y: 30) isnumeric_3b8c7a root.Std_k98ojb.Strings.IsNumeric {}\n            char_4f5b3c -> isnumeric_3b8c7a.input\n            isnumeric_3b8c7a.result -> out_2f8c9d\n        } -> filter_0b9c8f.handler\n        filter_0b9c8f.output_list -> length_3f8d1a.list\n        length_3f8d1a.length -> out_7c3f5a\n        execute_9f1a3e -> continue_1a4d2b\n    }\n\n    \n\n    instance(x: -200, y: 200) count_digits_f1a3c5 root.main.count_digits {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 0, y: 0, name: \"input\") property(String) input_123456\n        in(x: 0, y: 50, name: \"execute\") trigger() execute_654321\n\n        out(x: 400, y: 0, name: \"digit_count\") property(Number) digit_count_abcdef\n        out(x: 400, y: 50, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 100, y: 0) characters_789abc root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 0) filter_digits_321cba root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 0) length_456def root.Std_k98ojb.List.Length {}\n\n        input_123456 -> characters_789abc.input\n        characters_789abc.characters -> filter_digits_321cba.items\n\n        func() {\n            in(x: 0, y: 0, name: \"char\") property(String) char_987zyx\n\n            out(x: 200, y: 0, name: \"is_digit\") property(Bool) is_digit_654wvu\n\n            instance(x: 100, y: 0) is_numeric_123vut root.Std_k98ojb.Strings.IsNumeric {}\n\n            char_987zyx -> is_numeric_123vut.input\n            is_numeric_123vut.isNumeric -> is_digit_654wvu\n        } -> filter_digits_321cba.handler\n\n        filter_digits_321cba.output_list -> length_456def.list\n        length_456def.length -> digit_count_abcdef\n\n        execute_654321 -> characters_789abc.trigger\n        length_456def.length -> continue_fedcba\n    }\n}"
            ],
            "38": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 100, y: 100, name: \"n\") property(Number) n_input\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 50) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 50) filter_odds root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 50) map_fourth_power root.Std_k98ojb.Iteration.Map {}\n        instance(x: 800, y: 50) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_038fce.from\n        n_input -> generaterange_038fce.to\n        generaterange_038fce.list -> filter_odds.items\n\n        func() {\n            in(x: 50, y: 50, name: \"item\") property(Number) item_input\n            out(x: 150, y: 50, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 100, y: 50) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 50) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> equal_zero.left\n            1 -> equal_zero.right\n            equal_zero.result -> is_odd_output\n        } -> filter_odds.handler\n\n        filter_odds.output_list -> map_fourth_power.items\n\n        func() {\n            in(x: 50, y: 50, name: \"item\") property(Number) item_input\n            out(x: 150, y: 50, name: \"fourth_power\") property(Number) fourth_power_output\n\n            instance(x: 100, y: 50) pow_fourth root.Std_k98ojb.Math.Pow {}\n\n            item_input -> pow_fourth.x\n            4 -> pow_fourth.y\n            pow_fourth.result -> fourth_power_output\n        } -> map_fourth_power.handler\n\n        map_fourth_power.output_list -> reduce_sum.items\n\n        func() {\n            in(x: 50, y: 50, name: \"accumulated\") property(Number) accumulated_input\n            in(x: 50, y: 100, name: \"current\") property(Number) current_input\n            out(x: 150, y: 75, name: \"sum\") property(Number) sum_output\n\n            instance(x: 100, y: 75) add_sum root.Std_k98ojb.Math.Add {}\n\n            accumulated_input -> add_sum.first\n            current_input -> add_sum.second\n            add_sum.result -> sum_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 100, y: 100, name: \"n\") property(Number) n_8f7b3d\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_4c5f2a\n\n        out(x: 400, y: 100, name: \"sum\") property(Number) sum_2d9a5f\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_3e7d6b\n\n        instance(x: 200, y: 50) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 50) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 500, y: 50) reduce_6030c9 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 600, y: 50) add_8c9f7a root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_038fce.from\n        n_8f7b3d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n            instance(x: 206, y: 17) mul_3f9d09 root.Std_k98ojb.Math.Mul {}\n            instance(x: 306, y: 17) mul_4f9d09 root.Std_k98ojb.Math.Mul {}\n            instance(x: 406, y: 17) mul_5f9d09 root.Std_k98ojb.Math.Mul {}\n\n            element_5f51f7 -> mul_2f9d09.first\n            element_5f51f7 -> mul_2f9d09.second\n            mul_2f9d09.result -> mul_3f9d09.first\n            element_5f51f7 -> mul_3f9d09.second\n            mul_3f9d09.result -> mul_4f9d09.first\n            element_5f51f7 -> mul_4f9d09.second\n            mul_4f9d09.result -> mul_5f9d09.first\n            element_5f51f7 -> mul_5f9d09.second\n            mul_5f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 96, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            accumulated_5f51f7 -> add_8c9f7a.first\n            value_5f51f7 -> add_8c9f7a.second\n            add_8c9f7a.result -> out_d0fd24\n        } -> reduce_6030c9.reducer\n\n        reduce_6030c9.result -> sum_2d9a5f\n        execute_4c5f2a -> reduce_6030c9.execute\n        reduce_6030c9.done -> continue_3e7d6b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of the fourth power of the first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 200, y: 100, name: \"n\") property(Number) n_input\n\n        out(x: 800, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 400, y: 100) generaterange_4a5f3c root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 100) filter_1c2d3f root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1000, y: 100) map_2b4c5d root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1200, y: 100) reduce_3e6f7a root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_4a5f3c.from\n        n_input -> generaterange_4a5f3c.to\n        generaterange_4a5f3c.list -> filter_1c2d3f.items\n\n        func() {\n            in(x: -100, y: 50, name: \"number\") property(Number) number_input\n\n            out(x: 100, y: 50, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 50) modulo_5a6b7c root.Std_k98ojb.Math.Modulo {}\n            instance(x: 50, y: 50) equal_8d9e0f root.Std_k98ojb.Logic.Equal {}\n\n            number_input -> modulo_5a6b7c.value\n            2 -> modulo_5a6b7c.divisor\n            modulo_5a6b7c.result -> equal_8d9e0f.left\n            1 -> equal_8d9e0f.right\n            equal_8d9e0f.result -> is_odd_output\n        } -> filter_1c2d3f.handler\n\n        filter_1c2d3f.output_list -> map_2b4c5d.items\n\n        func() {\n            in(x: -100, y: 50, name: \"odd_number\") property(Number) odd_number_input\n\n            out(x: 100, y: 50, name: \"fourth_power\") property(Number) fourth_power_output\n\n            instance(x: 0, y: 50) pow_1a2b3c root.Std_k98ojb.Math.Pow {}\n\n            odd_number_input -> pow_1a2b3c.x\n            4 -> pow_1a2b3c.y\n            pow_1a2b3c.result -> fourth_power_output\n        } -> map_2b4c5d.handler\n\n        map_2b4c5d.output_list -> reduce_3e6f7a.items\n\n        func() {\n            in(x: -100, y: 50, name: \"accumulated\") property(Number) accumulated_input\n            in(x: -100, y: 100, name: \"current\") property(Number) current_input\n\n            out(x: 100, y: 75, name: \"sum\") property(Number) sum_output\n\n            instance(x: 0, y: 75) add_4d5e6f root.Std_k98ojb.Math.Add {}\n\n            accumulated_input -> add_4d5e6f.first\n            current_input -> add_4d5e6f.second\n            add_4d5e6f.result -> sum_output\n        } -> reduce_3e6f7a.reducer\n\n        0 -> reduce_3e6f7a.initial\n        reduce_3e6f7a.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 100, y: 100, name: \"n\") property(Number) n_input\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 150, y: 50) generaterange_1 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 150, y: 150) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) map_fourth_power root.Std_k98ojb.Iteration.Map {}\n        instance(x: 600, y: 100) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_1.from\n        n_input -> generaterange_1.to\n        generaterange_1.list -> filter_odd.items\n\n        func() {\n            in(x: 0, y: 0, name: \"number\") property(Number) number_input\n            out(x: 200, y: 0, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 100, y: 0) modulo_2 root.Std_k98ojb.Math.Modulo {}\n            instance(x: 150, y: 0) not_equal_0 root.Std_k98ojb.Logic.NotEqual {}\n\n            number_input -> modulo_2.value\n            2 -> modulo_2.divisor\n            modulo_2.result -> not_equal_0.left\n            0 -> not_equal_0.right\n            not_equal_0.result -> is_odd_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_fourth_power.items\n\n        func() {\n            in(x: 0, y: 0, name: \"number\") property(Number) number_input\n            out(x: 200, y: 0, name: \"fourth_power\") property(Number) fourth_power_output\n\n            instance(x: 100, y: 0) pow_4 root.Std_k98ojb.Math.Pow {}\n\n            number_input -> pow_4.x\n            4 -> pow_4.y\n            pow_4.result -> fourth_power_output\n        } -> map_fourth_power.handler\n\n        map_fourth_power.output_list -> reduce_sum.items\n\n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_input\n            in(x: 0, y: 50, name: \"value\") property(Number) value_input\n            out(x: 200, y: 0, name: \"sum\") property(Number) sum_output\n\n            instance(x: 100, y: 0) add root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add.first\n            value_input -> add.second\n            add.result -> sum_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 174, y: -34, name: \"n\") property(Number) n_123456\n        in(x: 174, y: -74, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 700, y: -34, name: \"sum\") property(Number) sum_789012\n        out(x: 700, y: -74, name: \"continue\") trigger() continue_345678\n\n        instance(x: 320, y: -34) generaterange_098fgh root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 500, y: -34) map_ijklmn root.Std_k98ojb.Iteration.Map {}\n        instance(x: 700, y: -34) reduce_opqrst root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_098fgh.from\n        n_123456 -> generaterange_098fgh.to\n        generaterange_098fgh.list -> map_ijklmn.items\n\n        func() {\n            in(x: -60, y: 20, name: \"item\") property(Number) item_abcd12\n\n            out(x: 160, y: 20, name: \"result\") property(Number) result_efgh34\n\n            instance(x: 60, y: 20) expression_5678ij root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * item - 1) ^ 4\"\n            }\n            item_abcd12 -> expression_5678ij.gen_0\n            expression_5678ij.result -> result_efgh34\n        } -> map_ijklmn.handler\n\n        map_ijklmn.output_list -> reduce_opqrst.items\n\n        func() {\n            in(x: -60, y: 20, name: \"acc\") property(Number) acc_klmn56\n            in(x: -60, y: 60, name: \"value\") property(Number) value_opqr78\n\n            out(x: 160, y: 40, name: \"result\") property(Number) result_stuv90\n\n            instance(x: 60, y: 40) add_wxyz12 root.Std_k98ojb.Math.Add {}\n            acc_klmn56 -> add_wxyz12.first\n            value_opqr78 -> add_wxyz12.second\n            add_wxyz12.result -> result_stuv90\n        } -> reduce_opqrst.reducer\n\n        0 -> reduce_opqrst.initial\n        reduce_opqrst.result -> sum_789012\n        execute_abcdef -> reduce_opqrst.execute\n        reduce_opqrst.done -> continue_345678\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of the fourth power of the first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 180, y: -53, name: \"n\") property(Number) n_ae3b5f\n        in(x: 169, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1060, y: -10, name: \"sum\") property(Number) sum_5f7c3e\n        out(x: 1194, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 351, y: -121) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 603, y: -60) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 860, y: 31) pow_2b9d8f root.Std_k98ojb.Math.Pow {}\n        instance(x: 1120, y: 17) reduce_9c7d3f root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1380, y: -200) add_2b4f3e root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_038fce.from\n        n_ae3b5f -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_4f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * i - 1)\"\n            }\n            element_5f51f7 -> expression_4f9d09.gen_0\n            expression_4f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> pow_2b9d8f.x\n        4 -> pow_2b9d8f.y\n        pow_2b9d8f.result -> reduce_9c7d3f.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 86, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) add_4f9d09 root.Std_k98ojb.Math.Add {}\n            accumulated_5f51f7 -> add_4f9d09.first\n            value_5f51f7 -> add_4f9d09.second\n            add_4f9d09.result -> out_d0fd24\n        } -> reduce_9c7d3f.reducer\n        0 -> reduce_9c7d3f.initial\n        reduce_9c7d3f.result -> sum_5f7c3e\n        execute_27b8c3 -> generaterange_038fce.reset\n        reduce_9c7d3f.done -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) sum_of_fourth_power_f0be66 root.main.sum_of_fourth_power {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 54, y: -53, name: \"n\") property(Number) n_0f3c7d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: -10, name: \"sum\") property(Number) sum_3db9f1\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) reduce_8cb3f6 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1121, y: -54) pow_07b8c7 root.Std_k98ojb.Math.Pow {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(2 * i - 1)\"\n        }\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        1 -> generaterange_038fce.from\n        n_0f3c7d -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) pow_2f9d09 root.Std_k98ojb.Math.Pow {}\n            element_5f51f7 -> pow_2f9d09.x\n            4 -> pow_2f9d09.y\n            pow_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> reduce_8cb3f6.items\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 46, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            acc_5f51f7 -> add_2f9d09.first\n            value_5f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> out_d0fd24\n        } -> reduce_8cb3f6.reducer\n        0 -> reduce_8cb3f6.initial\n        reduce_8cb3f6.result -> sum_3db9f1\n        execute_27b8c3 -> generaterange_038fce.from\n        execute_27b8c3 -> generaterange_038fce.to\n        execute_27b8c3 -> map_6030c9.items\n        execute_27b8c3 -> reduce_8cb3f6.items\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of the fourth power of the first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 100, y: 100, name: \"n\") property(Number) n_input\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 100) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 100) filter_7c8b9d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 100) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 800, y: 100) reduce_5a4b8c root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_038fce.from\n        n_input -> generaterange_038fce.to\n        generaterange_038fce.list -> filter_7c8b9d.items\n\n        func() {\n            in(x: 100, y: 100, name: \"item\") property(Number) item_input\n            out(x: 300, y: 100, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 200, y: 100) modulo_7b8c9d root.Std_k98ojb.Math.Modulo {}\n            instance(x: 400, y: 100) equal_8c9d7b root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo_7b8c9d.value\n            2 -> modulo_7b8c9d.divisor\n            modulo_7b8c9d.result -> equal_8c9d7b.left\n            1 -> equal_8c9d7b.right\n            equal_8c9d7b.result -> is_odd_output\n        } -> filter_7c8b9d.handler\n\n        filter_7c8b9d.output_list -> map_6030c9.items\n\n        func() {\n            in(x: 100, y: 100, name: \"item\") property(Number) item_input\n            out(x: 300, y: 100, name: \"fourth_power\") property(Number) fourth_power_output\n\n            instance(x: 200, y: 100) pow_9d7b8c root.Std_k98ojb.Math.Pow {}\n\n            item_input -> pow_9d7b8c.x\n            4 -> pow_9d7b8c.y\n            pow_9d7b8c.result -> fourth_power_output\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_5a4b8c.items\n\n        func() {\n            in(x: 100, y: 100, name: \"acc\") property(Number) acc_input\n            in(x: 300, y: 100, name: \"value\") property(Number) value_input\n            out(x: 500, y: 100, name: \"sum\") property(Number) sum_output\n\n            instance(x: 400, y: 100) add_7b8c9d root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_7b8c9d.first\n            value_input -> add_7b8c9d.second\n            add_7b8c9d.result -> sum_output\n        } -> reduce_5a4b8c.reducer\n\n        0 -> reduce_5a4b8c.initial\n        reduce_5a4b8c.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 100, y: 100, name: \"n\") property(Number) n_7c2f6d\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_9a4b3c\n\n        out(x: 400, y: 100, name: \"sum\") property(Number) sum_8b7e2a\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_5f3d1e\n\n        instance(x: 200, y: 50) generaterange_2f8d4b root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 50) map_3c9a7d root.Std_k98ojb.Iteration.Map {}\n        instance(x: 500, y: 50) reduce_1a2b3c root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 200, y: 200) mul_5f6a7b root.Std_k98ojb.Math.Mul {}\n        instance(x: 300, y: 200) pow_4e3f2d root.Std_k98ojb.Math.Pow {}\n\n        1 -> generaterange_2f8d4b.from\n        n_7c2f6d -> generaterange_2f8d4b.to\n        generaterange_2f8d4b.list -> map_3c9a7d.items\n\n        func() {\n            in(x: -100, y: 50, name: \"item\") property(Number) item_1d2f3b\n            out(x: 100, y: 50, name: \"result\") property(Number) result_3e4f5a\n\n            2 -> mul_5f6a7b.first\n            item_1d2f3b -> mul_5f6a7b.second\n            mul_5f6a7b.result -> pow_4e3f2d.x\n            4 -> pow_4e3f2d.y\n            pow_4e3f2d.result -> result_3e4f5a\n        } -> map_3c9a7d.handler\n\n        map_3c9a7d.output_list -> reduce_1a2b3c.items\n\n        func() {\n            in(x: -100, y: 50, name: \"acc\") property(Number) acc_2d3e4f\n            in(x: -100, y: 100, name: \"value\") property(Number) value_4f5e6d\n            out(x: 100, y: 75, name: \"result\") property(Number) result_5e6f7a\n\n            acc_2d3e4f -> result_5e6f7a\n            value_4f5e6d -> result_5e6f7a\n        } -> reduce_1a2b3c.reducer\n\n        0 -> reduce_1a2b3c.initialValue\n        reduce_1a2b3c.result -> sum_8b7e2a\n        execute_9a4b3c -> generaterange_2f8d4b.trigger\n        reduce_1a2b3c.done -> continue_5f3d1e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 100, y: 50, name: \"n\") property(Number) n_input\n\n        out(x: 500, y: 50, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 100) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 100) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) map_fourth_power root.Std_k98ojb.Iteration.Map {}\n        instance(x: 500, y: 100) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        generaterange_odd.list -> filter_odd.items\n\n        func() {\n            in(x: 50, y: 50, name: \"item\") property(Number) item_input\n            out(x: 150, y: 50, name: \"result\") property(Bool) result_output\n\n            instance(x: 100, y: 100) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 100) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> equal_zero.left\n            1 -> equal_zero.right\n            equal_zero.result -> result_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_fourth_power.items\n\n        func() {\n            in(x: 50, y: 50, name: \"item\") property(Number) item_input\n            out(x: 150, y: 50, name: \"result\") property(Number) result_output\n\n            instance(x: 100, y: 100) pow_fourth root.Std_k98ojb.Math.Pow {}\n\n            item_input -> pow_fourth.x\n            4 -> pow_fourth.y\n            pow_fourth.result -> result_output\n        } -> map_fourth_power.handler\n\n        map_fourth_power.output_list -> reduce_sum.items\n\n        func() {\n            in(x: 50, y: 50, name: \"acc\") property(Number) acc_input\n            in(x: 150, y: 50, name: \"item\") property(Number) item_input\n            out(x: 250, y: 50, name: \"result\") property(Number) result_output\n\n            instance(x: 100, y: 100) add_sum root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_sum.first\n            item_input -> add_sum.second\n            add_sum.result -> result_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}"
            ],
            "46": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") cube_surface_area {\n        in(x: 154, y: -53, name: \"side_length\") property(Number) side_length_9c7f2d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"surface_area\") property(Number) surface_area_8ba06b\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 933, y: 25) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        side_length_9c7f2d -> mul_1.first\n        side_length_9c7f2d -> mul_1.second\n        mul_1.result -> mul_2.first\n        6 -> mul_2.second\n        mul_2.result -> surface_area_8ba06b\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") surface_area_of_cube {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length_123abc\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 300, y: 100, name: \"surface_area\") property(Number) surface_area_789ghi\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 200, y: 100) expression_abc123 root.Std_k98ojb.Math.Expression {\n            expression: \"6 * side_length * side_length\"\n        }\n\n        side_length_123abc -> expression_abc123.side_length\n        expression_abc123.result -> surface_area_789ghi\n        execute_456def -> continue_012jkl\n    }\n}",
                "module() main {\n    func(doc: \"calculates the surface area of a cube with given side length.\") surface_area_of_cube {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length\n\n        out(x: 400, y: 100, name: \"surface_area\") property(Number) surface_area\n\n        instance(x: 200, y: 100) expression_1 root.Std_k98ojb.Math.Expression {\n            expression: \"6 * side_length * side_length\"\n        }\n\n        side_length -> expression_1.side_length\n        expression_1.result -> surface_area\n    }\n}",
                "module() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") surface_area_of_cube {\n        in(x: 154, y: -55, name: \"side_length\") property(Number) side_length_1a2b3c\n        in(x: 165, y: -210, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"surface_area\") property(Number) surface_area_4d5e6f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 350, y: -150) expression_9fba8c root.Std_k98ojb.Math.Expression {\n            expression: \"6 * (s * s)\"\n        }\n        side_length_1a2b3c -> expression_9fba8c.s\n        expression_9fba8c.result -> surface_area_4d5e6f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "module() main {\n    func(doc: \"Finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length\n\n        out(x: 400, y: 100, name: \"surface_area\") property(Number) surface_area\n\n        instance(x: 200, y: 100) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 300, y: 100) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        6 -> mul_1.first\n        side_length -> mul_1.second\n        mul_1.result -> mul_2.first\n        side_length -> mul_2.second\n        mul_2.result -> surface_area\n    }\n}",
                "module() main {\n    func(doc: \"calculates the surface area of a cube with given side length.\") cube_surface_area {\n        in(x: 60, y: 40, name: \"side_length\") property(Number) side_length_12345\n        in(x: 60, y: 80, name: \"execute\") trigger() execute_67890\n\n        out(x: 300, y: 40, name: \"surface_area\") property(Number) surface_area_54321\n        out(x: 300, y: 80, name: \"continue\") trigger() continue_09876\n\n        instance(x: 160, y: 40) expression_abcde root.Std_k98ojb.Math.Expression {\n            expression: \"6 * (side_length ^ 2)\"\n        }\n\n        execute_67890 -> expression_abcde.execute\n        side_length_12345 -> expression_abcde.gen_0\n        expression_abcde.result -> surface_area_54321\n        expression_abcde.done -> continue_09876\n    }\n}",
                "module() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 150, y: 150, name: \"side_length\") property(Number) side_length_123456\n        in(x: 200, y: 200, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 400, y: 150, name: \"surface_area\") property(Number) surface_area_789abc\n        out(x: 450, y: 200, name: \"continue\") trigger() continue_def456\n\n        instance(x: 300, y: 150) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 350, y: 150) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        6 -> mul_1.first\n        side_length_123456 -> mul_1.second\n        mul_1.result -> mul_2.first\n        side_length_123456 -> mul_2.second\n        mul_2.result -> surface_area_789abc\n\n        execute_abcdef -> continue_def456\n    }\n}",
                "module() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") cube_surface_area {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length\n\n        out(x: 300, y: 100, name: \"surface_area\") property(Number) surface_area\n\n        instance(x: 200, y: 100) expression_1 root.Std_k98ojb.Math.Expression {\n            expression: \"6 * a * a\"\n        }\n        side_length -> expression_1.a\n        expression_1.result -> surface_area\n    }\n}",
                "module() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length\n\n        out(x: 300, y: 100, name: \"surface_area\") property(Number) surface_area\n\n        instance(x: 200, y: 100) expression_a1b2c3 root.Std_k98ojb.Math.Expression {\n            expression: \"6 * a * a\"\n        }\n        side_length -> expression_a1b2c3.a\n        expression_a1b2c3.result -> surface_area\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 150, y: 50, name: \"side_length\") property(Number) side_length_123abc\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_456def\n\n        out(x: 450, y: 50, name: \"surface_area\") property(Number) surface_area_789ghi\n        out(x: 450, y: 100, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: 50) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 300, y: 100) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        side_length_123abc -> mul_1.first\n        side_length_123abc -> mul_1.second\n        mul_1.result -> mul_2.first\n        6 -> mul_2.second\n        mul_2.result -> surface_area_789ghi\n\n        execute_456def -> continue_012jkl\n    }\n}"
            ],
            "19": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the difference between largest and smallest value in a given list.\") difference_between_largest_and_smallest {\n        in(x: 60, y: 60, name: \"input\") property(List<Number>) input_list\n\n        out(x: 540, y: 60, name: \"difference\") property(Number) difference\n\n        instance(x: 180, y: 60) max_value root.Std_k98ojb.List.Max {}\n        instance(x: 180, y: 120) min_value root.Std_k98ojb.List.Min {}\n        instance(x: 360, y: 90) subtract root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_value.list\n        input_list -> min_value.list\n        max_value.max -> subtract.first\n        min_value.min -> subtract.second\n        subtract.result -> difference\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 100, y: 100, name: \"input_list\") property(List) input_list_123abc\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 100, name: \"difference\") property(Number) difference_789ghi\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 200, y: 50) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 200, y: 150) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 300, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list_123abc -> max_node.list\n        input_list_123abc -> min_node.list\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n        sub_node.result -> difference_789ghi\n\n        execute_456def -> max_node.execute\n        max_node.done -> min_node.execute\n        min_node.done -> sub_node.execute\n        sub_node.done -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between largest and smallest value in a given list.\") difference_between_largest_and_smallest {\n        in(x: 200, y: 100, name: \"input\") property(List<Number>) input_list\n        in(x: 200, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 100, name: \"out\") property(Number) difference\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 400, y: 50) max_instance root.Std_k98ojb.List.Max {}\n        instance(x: 400, y: 100) min_instance root.Std_k98ojb.List.Min {}\n        instance(x: 400, y: 150) sub_instance root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_instance.list\n        input_list -> min_instance.list\n\n        max_instance.max -> sub_instance.first\n        min_instance.min -> sub_instance.second\n\n        sub_instance.result -> difference\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 354, y: -53, name: \"input\") property(List) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) max_6030c9 root.Std_k98ojb.List.Max {}\n        instance(x: 591, y: 74) min_038fce root.Std_k98ojb.List.Min {}\n        instance(x: 933, y: 25) sub_f11fda root.Std_k98ojb.Math.Sub {}\n\n        input_f5c03d -> max_6030c9.list\n        input_f5c03d -> min_038fce.list\n        max_6030c9.max -> sub_f11fda.first\n        min_038fce.min -> sub_f11fda.second\n        sub_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") difference_between_max_min {\n        in(x: 200, y: 100, name: \"input_list\") property(List<Number>) input_list_123456\n        in(x: 200, y: 150, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 500, y: 100, name: \"difference\") property(Number) difference_789012\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_345678\n\n        instance(x: 300, y: 100) max_1a2b3c root.Std_k98ojb.List.Max {}\n        instance(x: 300, y: 150) min_4d5e6f root.Std_k98ojb.List.Min {}\n        instance(x: 400, y: 125) sub_7g8h9i root.Std_k98ojb.Math.Sub {}\n\n        input_list_123456 -> max_1a2b3c.list\n        input_list_123456 -> min_4d5e6f.list\n        max_1a2b3c.max -> sub_7g8h9i.first\n        min_4d5e6f.min -> sub_7g8h9i.second\n        sub_7g8h9i.result -> difference_789012\n\n        execute_abcdef -> max_1a2b3c.trigger\n        max_1a2b3c.done -> min_4d5e6f.trigger\n        min_4d5e6f.done -> sub_7g8h9i.trigger\n        sub_7g8h9i.done -> continue_345678\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between the largest and smallest value in a given list.\") find_difference {\n        in(x: 100, y: 50, name: \"input_list\") property(List) input_list_abc123\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 50, name: \"difference\") property(Number) difference_ghi789\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_jkl012\n\n        instance(x: 200, y: 50) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 200, y: 100) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 300, y: 75) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list_abc123 -> max_node.list\n        input_list_abc123 -> min_node.list\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n        sub_node.result -> difference_ghi789\n        execute_456def -> continue_jkl012\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 354, y: -53, name: \"input\") property(List) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) max_038fce root.Std_k98ojb.List.Max {}\n        instance(x: 933, y: 25) min_f11fda root.Std_k98ojb.List.Min {}\n        instance(x: 1121, y: -54) sub_07b8c7 root.Std_k98ojb.Math.Sub {}\n\n        input_f5c03d -> max_038fce.list\n        input_f5c03d -> min_f11fda.list\n        max_038fce.max -> sub_07b8c7.first\n        min_f11fda.min -> sub_07b8c7.second\n        sub_07b8c7.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) find_difference_f0be66 root.main.find_difference {}\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) max_038fce root.Std_k98ojb.List.Max {}\n        instance(x: 933, y: 25) min_f11fda root.Std_k98ojb.List.Min {}\n        instance(x: 1121, y: -54) sub_07b8c7 root.Std_k98ojb.Math.Sub {}\n\n        input_f5c03d -> max_038fce.list\n        input_f5c03d -> min_f11fda.list\n        max_038fce.max -> sub_07b8c7.first\n        min_f11fda.min -> sub_07b8c7.second\n        sub_07b8c7.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) find_difference_f0be66 root.main.find_difference {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") difference_between_max_min {\n        in(x: 174, y: -60, name: \"input\") property(List) input_23f4a5\n        in(x: 168, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1388, y: -10, name: \"out\") property(Number) out_5b3f9e\n        out(x: 1524, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 451, y: -493) max_4c6f8d root.Std_k98ojb.List.Max {}\n        instance(x: 689, y: 74) min_7d9b1e root.Std_k98ojb.List.Min {}\n        instance(x: 932, y: 25) sub_9f5e3b root.Std_k98ojb.Math.Sub {}\n        instance(x: 1105, y: -155) if_0c7b6a root.Std_k98ojb.Std.If {}\n\n        input_23f4a5 -> max_4c6f8d.list\n        input_23f4a5 -> min_7d9b1e.list\n        max_4c6f8d.max -> sub_9f5e3b.first\n        min_7d9b1e.min -> sub_9f5e3b.second\n        sub_9f5e3b.result -> if_0c7b6a.value\n        execute_27b8c3 -> if_0c7b6a.execute\n        if_0c7b6a.value -> out_5b3f9e\n        if_0c7b6a.then -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) difference_between_max_min_efb62d root.main.difference_between_max_min {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between the largest and smallest value in a given list.\") find_difference {\n        in(x: 160, y: 160, name: \"list\") property(List<Number>) list_input\n        in(x: 160, y: 220, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 160, name: \"difference\") property(Number) difference_output\n        out(x: 500, y: 220, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 320, y: 80) max_instance root.Std_k98ojb.List.Max {}\n        instance(x: 320, y: 240) min_instance root.Std_k98ojb.List.Min {}\n        instance(x: 480, y: 160) sub_instance root.Std_k98ojb.Math.Sub {}\n\n        list_input -> max_instance.list\n        list_input -> min_instance.list\n        max_instance.max -> sub_instance.first\n        min_instance.min -> sub_instance.second\n        sub_instance.result -> difference_output\n\n        execute_trigger -> max_instance.execute\n        execute_trigger -> min_instance.execute\n        sub_instance.result -> continue_trigger\n    }\n}"
            ],
            "22": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_f5c03d\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_f3db9f\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 100) modulo_8cb3f6 root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 100) equal_07b8c7 root.Std_k98ojb.Logic.Equal {}\n\n        input_f5c03d -> modulo_8cb3f6.value\n        2 -> modulo_8cb3f6.divisor\n        modulo_8cb3f6.result -> equal_07b8c7.left\n        0 -> equal_07b8c7.right\n        equal_07b8c7.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 50, y: 50, name: \"input\") property(Number) input_number\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 250, y: 50, name: \"out\") property(Bool) output_bool\n        out(x: 250, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 50) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 50) equal_instance root.Std_k98ojb.Logic.Equal {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> output_bool\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 150, y: 0, name: \"input\") property(Number) input_2f5c9a\n        in(x: 150, y: 50, name: \"execute\") trigger() execute_8c3b7d\n\n        out(x: 350, y: 0, name: \"out\") property(Bool) out_4a9d3f\n        out(x: 350, y: 50, name: \"continue\") trigger() continue_7b2c6a\n\n        instance(x: 250, y: 0) modulo_5b8f9e root.Std_k98ojb.Math.Modulo {}\n        instance(x: 450, y: 0) equal_6c4d1b root.Std_k98ojb.Logic.Equal {}\n        instance(x: 550, y: 0) if_7d2e3c root.Std_k98ojb.Std.If {}\n\n        input_2f5c9a -> modulo_5b8f9e.value\n        2 -> modulo_5b8f9e.divisor\n        modulo_5b8f9e.result -> equal_6c4d1b.left\n        0 -> equal_6c4d1b.right\n        equal_6c4d1b.result -> if_7d2e3c.predicate\n        if_7d2e3c.value -> out_4a9d3f\n        execute_8c3b7d -> if_7d2e3c.execute\n        if_7d2e3c.then -> continue_7b2c6a\n        if_7d2e3c.else -> continue_7b2c6a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.value -> output_is_even\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 150) equal_node root.Std_k98ojb.Logic.Equal {}\n        instance(x: 200, y: 200) if_node root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_node.value\n        2 -> modulo_node.divisor\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n        equal_node.result -> if_node.predicate\n        execute_trigger -> if_node.execute\n        if_node.value -> out_is_even\n        if_node.then -> continue_trigger\n        if_node.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_3a7f8b\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_1b9c2d\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_4b8f9c\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_5c9d3e\n\n        instance(x: 200, y: 100) modulo_2a7f8b root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 100) equal_3b9c2d root.Std_k98ojb.Logic.Equal {}\n        instance(x: 300, y: 100) if_4c8f9c root.Std_k98ojb.Std.If {}\n\n        input_3a7f8b -> modulo_2a7f8b.value\n        2 -> modulo_2a7f8b.divisor\n        modulo_2a7f8b.result -> equal_3b9c2d.left\n        0 -> equal_3b9c2d.right\n        equal_3b9c2d.result -> if_4c8f9c.predicate\n        if_4c8f9c.value -> out_4b8f9c\n        execute_1b9c2d -> if_4c8f9c.execute\n        if_4c8f9c.then -> continue_5c9d3e\n        if_4c8f9c.else -> continue_5c9d3e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.predicate -> output_is_even\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 150, y: 50, name: \"input\") property(Number) input_number\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 350, y: 50, name: \"out\") property(Bool) output_is_even\n        out(x: 350, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 50) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 450, y: 50) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 550, y: 50) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        execute_trigger -> if_instance.execute\n        if_instance.value -> output_is_even\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) if_8cb3f6 root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) modulo_07b8c7 root.Std_k98ojb.Math.Modulo {}\n\n        input_f5c03d -> modulo_07b8c7.value\n        2 -> modulo_07b8c7.divisor\n        modulo_07b8c7.result -> if_8cb3f6.predicate\n        execute_27b8c3 -> if_8cb3f6.execute\n        if_8cb3f6.value -> out_f3db9f\n        if_8cb3f6.then -> continue_8ba06b\n        if_8cb3f6.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 200, y: 100, name: \"input\") property(Number) input_1a2b3c\n        in(x: 300, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 500, y: 100, name: \"out\") property(Bool) out_7g8h9i\n        out(x: 600, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 400, y: 100) modulo_3m4n5o root.Std_k98ojb.Math.Modulo {}\n        instance(x: 700, y: 100) equal_6p7q8r root.Std_k98ojb.Logic.Equal {}\n        instance(x: 800, y: 100) if_9s0t1u root.Std_k98ojb.Std.If {}\n\n        input_1a2b3c -> modulo_3m4n5o.value\n        2 -> modulo_3m4n5o.divisor\n        modulo_3m4n5o.result -> equal_6p7q8r.left\n        0 -> equal_6p7q8r.right\n        equal_6p7q8r.result -> if_9s0t1u.predicate\n        if_9s0t1u.value -> out_7g8h9i\n        execute_4d5e6f -> if_9s0t1u.execute\n        if_9s0t1u.then -> continue_0j1k2l\n        if_9s0t1u.else -> continue_0j1k2l\n    }\n}"
            ],
            "23": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 162, y: -66, name: \"input\") property(String) input_f5c03d\n        in(x: 162, y: -150, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 400, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 600, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 350, y: -300) characters_9f1d8e root.Std_k98ojb.Strings.Characters {}\n        instance(x: 550, y: -250) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 750, y: -200) contains_2a7f3c root.Std_k98ojb.List.Contains {}\n        instance(x: 950, y: -150) add_4f5c9d root.Std_k98ojb.List.Add {}\n        instance(x: 1150, y: -100) if_3e2f8b root.Std_k98ojb.Std.If {}\n        instance(x: 1350, y: -50) emptylist_5b6d7e root.Std_k98ojb.List.Empty {}\n\n        input_f5c03d -> characters_9f1d8e.input\n        characters_9f1d8e.characters -> for_8cb3f6.items\n        emptylist_5b6d7e.list -> add_4f5c9d.list\n        for_8cb3f6.item -> contains_2a7f3c.item\n        add_4f5c9d.listWithItem -> contains_2a7f3c.list\n        contains_2a7f3c.result -> if_3e2f8b.predicate\n        for_8cb3f6.onItem -> if_3e2f8b.execute\n        if_3e2f8b.then -> out_f3db9f\n        if_3e2f8b.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -200, y: 200) first_repeated_character_1a2b3c root.main.first_repeated_character {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") find_first_repeated_char {\n        in(x: 240, y: -100, name: \"input\") property(String) input_123abc\n        in(x: 240, y: -50, name: \"execute\") trigger() execute_456def\n\n        out(x: 800, y: -100, name: \"out\") property(String) out_789ghi\n        out(x: 800, y: -50, name: \"continue\") trigger() continue_101jkl\n\n        instance(x: 480, y: -100) characters_234mno root.Std_k98ojb.Strings.Characters {}\n        instance(x: 640, y: -100) find_345pqr root.Std_k98ojb.Iteration.Find {}\n        instance(x: 560, y: -50) filter_456stu root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 720, y: -100) if_567vwx root.Std_k98ojb.Std.If {}\n        instance(x: 640, y: -50) empty_list_678yz root.Std_k98ojb.List.Empty {}\n        instance(x: 880, y: -100) notempty_789abc root.Std_k98ojb.List.NotEmpty {}\n        instance(x: 720, y: -50) add_890def root.Std_k98ojb.List.Add {}\n\n        input_123abc -> characters_234mno.input\n        characters_234mno.characters -> find_345pqr.items\n\n        func() {\n            in(x: -100, y: 50, name: \"char\") property(String) char_112ghi\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out_223jkl\n\n            instance(x: 0, y: 50) contains_334mno root.Std_k98ojb.List.Contains {}\n            char_112ghi -> contains_334mno.item\n            filter_456stu.output_list -> contains_334mno.list\n            contains_334mno.result -> out_223jkl\n        } -> find_345pqr.predicate\n\n        find_345pqr.item -> if_567vwx.value\n        find_345pqr.item -> notempty_789abc.list\n        find_345pqr.item -> out_789ghi\n        find_345pqr.item -> add_890def.item\n        empty_list_678yz.list -> filter_456stu.items\n        find_345pqr.item -> filter_456stu.handler\n        filter_456stu.output_list -> add_890def.list\n        add_890def.listWithItem -> filter_456stu.items\n        if_567vwx.then -> continue_101jkl\n        execute_456def -> find_345pqr.items\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 70, y: -150, name: \"input\") property(String) input_abc123\n        in(x: 70, y: -100, name: \"execute\") trigger() execute_abc123\n\n        out(x: 400, y: -100, name: \"character\") property(String) character_abc123\n        out(x: 400, y: -50, name: \"continue\") trigger() continue_abc123\n\n        instance(x: 200, y: -150) characters_abc123 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: -50) first_item_abc123 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 600, y: -100) if_abc123 root.Std_k98ojb.Std.If {}\n\n        input_abc123 -> characters_abc123.input\n        characters_abc123.characters -> first_item_abc123.items\n\n        func() {\n            in(x: -150, y: 50, name: \"char\") property(String) char_abc123\n            in(x: -150, y: 100, name: \"index\") property(Number) index_abc123\n\n            out(x: 150, y: 75, name: \"out\") property(Bool) out_abc123\n\n            instance(x: 0, y: 75) contains_abc123 root.Std_k98ojb.List.Contains {}\n            instance(x: 0, y: 125) add_abc123 root.Std_k98ojb.List.Add {}\n\n            char_abc123 -> contains_abc123.item\n            contains_abc123.list -> add_abc123.list\n            contains_abc123.result -> out_abc123\n            add_abc123.listWithItem -> contains_abc123.list\n        } -> first_item_abc123.predicate\n\n        first_item_abc123.item -> if_abc123.input\n        first_item_abc123.item -> character_abc123\n        if_abc123.then -> continue_abc123\n\n        execute_abc123 -> characters_abc123.input\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 158, y: -46, name: \"input\") property(String) input_1c6f2d\n        in(x: 158, y: -96, name: \"execute\") trigger() execute_5f0c1d\n\n        out(x: 1534, y: -15, name: \"out\") property(String) out_4f7c9d\n        out(x: 1714, y: 116, name: \"continue\") trigger() continue_3f8a1b\n\n        instance(x: 420, y: -128) characters_1a7f9d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 660, y: -60) for_2c3f7a root.Std_k98ojb.Std.For {}\n        instance(x: 1040, y: -120) contains_4a8f6c root.Std_k98ojb.List.Contains {}\n        instance(x: 1250, y: -20) add_9b7d8f root.Std_k98ojb.List.Add {}\n        instance(x: 860, y: -260) empty_3f6d9a root.Std_k98ojb.List.Empty {}\n        instance(x: 1440, y: -220) if_7f8b6d root.Std_k98ojb.Std.If {}\n\n        input_1c6f2d -> characters_1a7f9d.input\n        characters_1a7f9d.characters -> for_2c3f7a.items\n        for_2c3f7a.item -> contains_4a8f6c.item\n        empty_3f6d9a.list -> contains_4a8f6c.list\n        contains_4a8f6c.result -> if_7f8b6d.predicate\n        for_2c3f7a.onItem -> if_7f8b6d.execute\n        if_7f8b6d.then -> out_4f7c9d\n        if_7f8b6d.then -> continue_3f8a1b\n        if_7f8b6d.else -> add_9b7d8f.item\n        for_2c3f7a.item -> add_9b7d8f.item\n        empty_3f6d9a.list -> add_9b7d8f.list\n        add_9b7d8f.listWithItem -> empty_3f6d9a.list\n        for_2c3f7a.done -> continue_3f8a1b\n        execute_5f0c1d -> for_2c3f7a.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 452, y: -125) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 889, y: -132) contains_f11fda root.Std_k98ojb.List.Contains {}\n        instance(x: 714, y: -155) empty_8cb3f6 root.Std_k98ojb.List.Empty {}\n        instance(x: 1812, y: -319) add_80a119 root.Std_k98ojb.List.Add {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> contains_f11fda.item\n        empty_8cb3f6.list -> contains_f11fda.list\n        contains_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.item -> add_80a119.item\n        empty_8cb3f6.list -> add_80a119.list\n        add_80a119.listWithItem -> empty_8cb3f6.list\n        execute_27b8c3 -> for_8cb3f6.reset\n        for_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 80, y: 40, name: \"input\") property(String) input_string\n        in(x: 80, y: 80, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 40, name: \"character\") property(String) output_character\n        out(x: 500, y: 80, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 40) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 320, y: 40) for_node root.Std_k98ojb.Std.For {}\n        instance(x: 320, y: 160) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 440, y: 40) contains_node root.Std_k98ojb.List.Contains {}\n        instance(x: 440, y: 160) add_node root.Std_k98ojb.List.Add {}\n        instance(x: 560, y: 40) empty_list_node root.Std_k98ojb.List.Empty {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> for_node.items\n        for_node.item -> contains_node.item\n        empty_list_node.list -> contains_node.list\n        contains_node.result -> if_node.predicate\n        if_node.then -> continue_trigger\n        for_node.item -> output_character\n        if_node.else -> for_node.next\n        for_node.item -> add_node.item\n        empty_list_node.list -> add_node.list\n        add_node.listWithItem -> empty_list_node.list\n        execute_trigger -> for_node.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 54, y: -12, name: \"input\") property(String) input_string\n        in(x: 54, y: 12, name: \"execute\") trigger() execute_trigger\n\n        out(x: 480, y: 0, name: \"out\") property(String) output_character\n        out(x: 480, y: 24, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 204, y: -100) characters_2b7f3a root.Std_k98ojb.Strings.Characters {}\n        instance(x: 390, y: -24) find_9f2d1b root.Std_k98ojb.Iteration.Find {}\n        instance(x: 624, y: -24) contains_3e4f5d root.Std_k98ojb.List.Contains {}\n        instance(x: 624, y: 80) add_4b2e9f root.Std_k98ojb.List.Add {}\n        instance(x: 468, y: 120) empty_list_6d3c4f root.Std_k98ojb.List.Empty {}\n\n        input_string -> characters_2b7f3a.input\n        characters_2b7f3a.characters -> find_9f2d1b.items\n        empty_list_6d3c4f.list -> find_9f2d1b.context\n\n        func() {\n            in(x: -76, y: 46, name: \"character\") property(String) character\n            in(x: -76, y: 76, name: \"seen_characters\") property(List) seen_characters\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) is_repeated\n\n            instance(x: 106, y: 17) contains_1a2b3c root.Std_k98ojb.List.Contains {}\n            instance(x: 106, y: 57) add_3d4e5f root.Std_k98ojb.List.Add {}\n\n            character -> contains_1a2b3c.item\n            seen_characters -> contains_1a2b3c.list\n            contains_1a2b3c.result -> is_repeated\n\n            character -> add_3d4e5f.item\n            seen_characters -> add_3d4e5f.list\n            add_3d4e5f.listWithItem -> seen_characters\n        } -> find_9f2d1b.predicate\n\n        find_9f2d1b.item -> output_character\n        find_9f2d1b.item -> continue_trigger\n        execute_trigger -> find_9f2d1b.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 100, name: \"out\") property(String) output_character\n\n        instance(x: 100, y: 200) characters_1 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 300) first_repeated_1 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 400, y: 300) contains_1 root.Std_k98ojb.List.Contains {}\n        instance(x: 300, y: 400) add_1 root.Std_k98ojb.List.Add {}\n        instance(x: 200, y: 400) empty_list_1 root.Std_k98ojb.List.Empty {}\n\n        input_string -> characters_1.input\n        characters_1.characters -> first_repeated_1.items\n\n        func() {\n            in(x: 100, y: 100, name: \"char\") property(String) char\n\n            out(x: 300, y: 100, name: \"out\") property(Bool) is_repeated\n\n            char -> contains_1.item\n            contains_1.isContained -> is_repeated\n        } -> first_repeated_1.predicate\n\n        first_repeated_1.item -> output_character\n\n        first_repeated_1.item -> add_1.item\n        add_1.listWithItem -> contains_1.list\n        empty_list_1.list -> add_1.list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 114, y: -35, name: \"input\") property(String) input_4d1a5f\n        in(x: 145, y: -168, name: \"execute\") trigger() execute_9a4b9f\n\n        out(x: 1480, y: 27, name: \"out\") property(String) out_3f2b1f\n        out(x: 1632, y: 112, name: \"continue\") trigger() continue_9b0f5d\n\n        instance(x: 432, y: -88) characters_6d4c1f root.Std_k98ojb.Strings.Characters {}\n        instance(x: 689, y: -37) empty_7b9f6d root.Std_k98ojb.List.Empty {}\n        instance(x: 946, y: -187) for_9f6c3b root.Std_k98ojb.Std.For {}\n        instance(x: 1245, y: -23) contains_3d4b9c root.Std_k98ojb.List.Contains {}\n        instance(x: 1054, y: 75) add_4f6b1d root.Std_k98ojb.List.Add {}\n        instance(x: 1423, y: -238) if_5f6d3a root.Std_k98ojb.Std.If {}\n\n        input_4d1a5f -> characters_6d4c1f.input\n        characters_6d4c1f.characters -> for_9f6c3b.items\n        empty_7b9f6d.list -> add_4f6b1d.list\n        empty_7b9f6d.list -> contains_3d4b9c.list\n        for_9f6c3b.item -> contains_3d4b9c.item\n        contains_3d4b9c.result -> if_5f6d3a.predicate\n        for_9f6c3b.onItem -> if_5f6d3a.execute\n        if_5f6d3a.then -> continue_9b0f5d\n        if_5f6d3a.value -> out_3f2b1f\n        for_9f6c3b.item -> add_4f6b1d.item\n        add_4f6b1d.listWithItem -> contains_3d4b9c.list\n        add_4f6b1d.listWithItem -> add_4f6b1d.list\n        if_5f6d3a.else -> for_9f6c3b.next\n        for_9f6c3b.done -> continue_9b0f5d\n        execute_9a4b9f -> for_9f6c3b.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 156, y: -32, name: \"input\") property(String) input_1a2b3c\n        in(x: 162, y: -148, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 1024, y: -12, name: \"out\") property(String) out_7g8h9i\n        out(x: 1024, y: 128, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 312, y: -56) characters_3a4b5c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 504, y: -112) for_6d7e8f root.Std_k98ojb.Std.For {}\n        instance(x: 792, y: -72) contains_9g0h1i root.Std_k98ojb.List.Contains {}\n        instance(x: 792, y: 56) add_2j3k4l root.Std_k98ojb.List.Add {}\n        instance(x: 648, y: -256) if_5m6n7o root.Std_k98ojb.Std.If {}\n        instance(x: 504, y: 128) empty_list_8p9q0r root.Std_k98ojb.List.Empty {}\n\n        input_1a2b3c -> characters_3a4b5c.input\n        characters_3a4b5c.characters -> for_6d7e8f.items\n        for_6d7e8f.item -> contains_9g0h1i.item\n        empty_list_8p9q0r.list -> contains_9g0h1i.list\n        contains_9g0h1i.result -> if_5m6n7o.predicate\n        for_6d7e8f.onItem -> if_5m6n7o.execute\n        if_5m6n7o.then -> continue_0j1k2l\n        if_5m6n7o.value -> out_7g8h9i\n        if_5m6n7o.else -> for_6d7e8f.next\n        for_6d7e8f.item -> add_2j3k4l.item\n        empty_list_8p9q0r.list -> add_2j3k4l.list\n        add_2j3k4l.listWithItem -> empty_list_8p9q0r.list\n        execute_4d5e6f -> for_6d7e8f.reset\n        for_6d7e8f.done -> continue_0j1k2l\n    }\n}"
            ],
            "35": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the second smallest number in a list.\") second_smallest {\n        in(x: 54, y: 0, name: \"list\") property(List) list_123abc\n        in(x: 54, y: 50, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 0, name: \"secondSmallest\") property(Number) secondSmallest_789ghi\n        out(x: 400, y: 50, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 150, y: 0) sort_234mno root.Std_k98ojb.List.Sort {}\n        instance(x: 300, y: 0) getAt_567pqr root.Std_k98ojb.List.GetAt {}\n\n        list_123abc -> sort_234mno.list\n        sort_234mno.sorted -> getAt_567pqr.list\n        1 -> getAt_567pqr.index\n        getAt_567pqr.item -> secondSmallest_789ghi\n        execute_456def -> sort_234mno.execute\n        sort_234mno.done -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 50, y: 50, name: \"list\") property(List<Number>) list_input\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 50, name: \"second_smallest\") property(Number) second_smallest_output\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 50) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 200, y: 50) get_second_item root.Std_k98ojb.List.GetAt {}\n\n        list_input -> sort_list.list\n        sort_list.sorted -> get_second_item.list\n        1 -> get_second_item.index\n        get_second_item.item -> second_smallest_output\n        execute_trigger -> sort_list.trigger\n        sort_list.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 354, y: -53, name: \"list\") property(List<Number>) input_list\n\n        out(x: 1748, y: -10, name: \"second_smallest\") property(Number) second_smallest\n\n        instance(x: 591, y: 74) sort_03a9c2 root.Std_k98ojb.List.Sort {}\n        instance(x: 933, y: 25) getat_f11fda root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_03a9c2.list\n        sort_03a9c2.sorted -> getat_f11fda.list\n        1 -> getat_f11fda.index\n        getat_f11fda.item -> second_smallest\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 126, y: -73, name: \"list\") property(List<Number>) list_input\n        in(x: 122, y: 61, name: \"execute\") trigger() execute_input\n\n        out(x: 1002, y: -43, name: \"second smallest\") property(Number) second_smallest_output\n        out(x: 1020, y: 120, name: \"continue\") trigger() continue_output\n\n        instance(x: 308, y: -53) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 580, y: -52) get_second_item root.Std_k98ojb.List.GetAt {}\n        instance(x: 850, y: -50) if_not_empty root.Std_k98ojb.Std.If {}\n\n        list_input -> sort_list.list\n        sort_list.sorted -> get_second_item.list\n        1 -> get_second_item.index\n\n        get_second_item.item -> second_smallest_output\n\n        sort_list.sorted -> if_not_empty.input\n        if_not_empty.then -> continue_output\n        execute_input -> sort_list.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 130, y: -53, name: \"input_list\") property(List<Number>) input_list_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"second_smallest\") property(Number) second_smallest_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) sort_6030c9 root.Std_k98ojb.List.Sort {}\n        instance(x: 591, y: 74) getat_038fce root.Std_k98ojb.List.GetAt {}\n        instance(x: 714, y: -155) length_8cb3f6 root.Std_k98ojb.List.Length {}\n        instance(x: 933, y: 25) greaterthan_f11fda root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_list_f5c03d -> sort_6030c9.list\n        sort_6030c9.sorted -> getat_038fce.list\n        1 -> getat_038fce.index\n        getat_038fce.item -> second_smallest_f3db9f\n        input_list_f5c03d -> length_8cb3f6.list\n        length_8cb3f6.length -> greaterthan_f11fda.left\n        1 -> greaterthan_f11fda.right\n        greaterthan_f11fda.result -> if_07b8c7.predicate\n        if_07b8c7.then -> continue_8ba06b\n        execute_27b8c3 -> if_07b8c7.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 158, y: -54, name: \"list\") property(List<Number>) list_0f8b3c\n        in(x: 181, y: -209, name: \"execute\") trigger() execute_9f8a3b\n\n        out(x: 1064, y: -56, name: \"secondSmallest\") property(Number) secondSmallest_5f4b9f\n        out(x: 1180, y: 120, name: \"continue\") trigger() continue_4b8f7a\n\n        instance(x: 379, y: -145) sort_9c7f4b root.Std_k98ojb.List.Sort {}\n        instance(x: 704, y: -51) getat_4f8a9c root.Std_k98ojb.List.GetAt {}\n        instance(x: 486, y: -320) isEmpty_3b8f7a root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 481, y: -191) if_7c9f8a root.Std_k98ojb.Std.If {}\n\n        list_0f8b3c -> isEmpty_3b8f7a.list\n        isEmpty_3b8f7a.isEmpty -> if_7c9f8a.predicate\n        execute_9f8a3b -> if_7c9f8a.execute\n        if_7c9f8a.else -> sort_9c7f4b.trigger\n        list_0f8b3c -> sort_9c7f4b.list\n        sort_9c7f4b.sorted -> getat_4f8a9c.list\n        1 -> getat_4f8a9c.index\n        getat_4f8a9c.item -> secondSmallest_5f4b9f\n        if_7c9f8a.then -> continue_4b8f7a\n        if_7c9f8a.else -> continue_4b8f7a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 100, y: 100, name: \"input_list\") property(List) input_list\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 100, name: \"second_smallest\") property(Number) second_smallest\n        out(x: 300, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 200, y: 150) get_second root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> get_second.list\n        1 -> get_second.index\n        get_second.item -> second_smallest\n        execute -> sort_list.execute\n        sort_list.done -> get_second.execute\n        get_second.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 162, y: -86, name: \"input\") property(List) input_list\n\n        out(x: 562, y: 32, name: \"out\") property(Number) second_smallest\n\n        instance(x: 368, y: -176) sort_93f8a1 root.Std_k98ojb.List.Sort {}\n        instance(x: 472, y: -46) getat_72d1f2 root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_93f8a1.list\n        sort_93f8a1.sorted -> getat_72d1f2.list\n        1 -> getat_72d1f2.index\n        getat_72d1f2.item -> second_smallest\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 120, y: 20, name: \"list\") property(List) list_input\n        in(x: 120, y: 60, name: \"execute\") trigger() execute_input\n\n        out(x: 520, y: 20, name: \"second smallest\") property(Number) second_smallest_output\n        out(x: 520, y: 60, name: \"continue\") trigger() continue_output\n\n        instance(x: 300, y: 20) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 420, y: 20) get_second_smallest root.Std_k98ojb.List.GetAt {}\n\n        list_input -> sort_list.list\n        sort_list.sorted -> get_second_smallest.list\n        1 -> get_second_smallest.index\n        get_second_smallest.item -> second_smallest_output\n        execute_input -> sort_list.trigger\n        sort_list.done -> continue_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 200, y: 100, name: \"input_list\") property(List<Number>) input_list_1a2b3c\n        in(x: 200, y: 200, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 800, y: 100, name: \"second_smallest\") property(Number) second_smallest_7g8h9i\n        out(x: 800, y: 200, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 400, y: 100) sort_3m4n5o root.Std_k98ojb.List.Sort {}\n        instance(x: 600, y: 100) getat_6p7q8r root.Std_k98ojb.List.GetAt {}\n\n        input_list_1a2b3c -> sort_3m4n5o.list\n        sort_3m4n5o.sorted -> getat_6p7q8r.list\n        1 -> getat_6p7q8r.index\n        getat_6p7q8r.item -> second_smallest_7g8h9i\n        execute_4d5e6f -> sort_3m4n5o.trigger\n        sort_3m4n5o.done -> continue_0j1k2l\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "best_params_optimization": "semantic",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": -1,
        "seed": 75,
        "n_generations_per_task": 10,
        "model": "gpt-4o",
        "largest_context": 5183,
        "task_candidates": {
            "7": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element\") has_common_element {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 200, name: \"list2\") property(List) list2\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 200, name: \"result\") property(Bool) result\n        out(x: 400, y: 300, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 150) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 200) not_empty root.Std_k98ojb.List.NotEmpty {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> not_empty.list\n        not_empty.isEmpty -> result\n        execute -> intersection.trigger\n        intersection.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element\") has_common_element {\n        in(x: 154, y: -31, name: \"list1\") property(List) list1_5f7d6a\n        in(x: 154, y: 50, name: \"list2\") property(List) list2_4b6c9d\n        in(x: 154, y: 131, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 380, y: 50, name: \"out\") property(Bool) out_9a7b2f\n        out(x: 380, y: 131, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 584, y: 50) intersection_5a8f3c root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 820, y: 50) isempty_1c3f7d root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 1056, y: 50) not_2b7c4f root.Std_k98ojb.Logic.Not {}\n        instance(x: 1292, y: 50) if_4f8d2c root.Std_k98ojb.Std.If {}\n\n        list1_5f7d6a -> intersection_5a8f3c.left\n        list2_4b6c9d -> intersection_5a8f3c.right\n        intersection_5a8f3c.intersect -> isempty_1c3f7d.list\n        isempty_1c3f7d.isEmpty -> not_2b7c4f.input\n        not_2b7c4f.output -> if_4f8d2c.predicate\n        if_4f8d2c.value -> out_9a7b2f\n        execute_27b8c3 -> if_4f8d2c.execute\n        if_4f8d2c.then -> continue_8ba06b\n        if_4f8d2c.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element\") has_common_element {\n        in(x: 120, y: -40, name: \"list1\") property(List) list1_1f8b9c\n        in(x: 120, y: 40, name: \"list2\") property(List) list2_1f8b9c\n        in(x: 120, y: 120, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 500, y: 40, name: \"out\") property(Bool) out_f3db9f\n        out(x: 500, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 300, y: 40) intersection_80a119 root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 400, y: 40) notempty_07b8c7 root.Std_k98ojb.List.NotEmpty {}\n\n        list1_1f8b9c -> intersection_80a119.left\n        list2_1f8b9c -> intersection_80a119.right\n        intersection_80a119.intersect -> notempty_07b8c7.list\n        notempty_07b8c7.isEmpty -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") has_common_element {\n        in(x: 114, y: -10, name: \"list1\") property(List<Any>) list1_4c7f1b\n        in(x: 114, y: 90, name: \"list2\") property(List<Any>) list2_4c7f1b\n        in(x: 114, y: 190, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 814, y: 90, name: \"result\") property(Bool) result_8ba06b\n        out(x: 814, y: 190, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 314, y: 90) intersection_038fce root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 614, y: 90) isempty_07b8c7 root.Std_k98ojb.List.IsEmpty {}\n\n        list1_4c7f1b -> intersection_038fce.left\n        list2_4c7f1b -> intersection_038fce.right\n        intersection_038fce.intersect -> isempty_07b8c7.list\n        isempty_07b8c7.isEmpty -> result_8ba06b\n        execute_27b8c3 -> isempty_07b8c7.execute\n        isempty_07b8c7.notEmpty -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element.\") has_common_element {\n        in(x: 0, y: 0, name: \"list1\") property(List<Any>) list1\n        in(x: 0, y: 100, name: \"list2\") property(List<Any>) list2\n        in(x: 0, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 0, name: \"result\") property(Bool) result\n        out(x: 400, y: 100, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 0) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 0) not_empty root.Std_k98ojb.List.NotEmpty {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> not_empty.list\n        not_empty.isEmpty -> result\n        execute -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") has_common_element {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 200, name: \"list2\") property(List) list2\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 150, name: \"result\") property(Bool) result\n        out(x: 500, y: 250, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: 150) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 400, y: 150) is_empty root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 450, y: 150) logic_not root.Std_k98ojb.Logic.Not {}\n\n        execute -> intersection.trigger\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> is_empty.list\n        is_empty.isEmpty -> logic_not.input\n        logic_not.output -> result\n        logic_not.output -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") has_common_element {\n        in(x: 120, y: 60, name: \"list1\") property(List) list1_1a2b3c\n        in(x: 120, y: 120, name: \"list2\") property(List) list2_4d5e6f\n        in(x: 120, y: 180, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 400, y: 120, name: \"result\") property(Bool) result_0a1b2c\n        out(x: 400, y: 180, name: \"continue\") trigger() continue_3d4e5f\n\n        instance(x: 240, y: 120) intersection_6a7b8c root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 320, y: 120) notempty_9a0b1c root.Std_k98ojb.List.NotEmpty {}\n        instance(x: 240, y: 180) if_2b3c4d root.Std_k98ojb.Std.If {}\n\n        list1_1a2b3c -> intersection_6a7b8c.left\n        list2_4d5e6f -> intersection_6a7b8c.right\n        intersection_6a7b8c.intersect -> notempty_9a0b1c.list\n        notempty_9a0b1c.isEmpty -> if_2b3c4d.input\n        if_2b3c4d.value -> result_0a1b2c\n        execute_7g8h9i -> if_2b3c4d.then\n        if_2b3c4d.then -> continue_3d4e5f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") has_common_element {\n        in(x: 100, y: 50, name: \"list1\") property(List) list1_1a2b3c\n        in(x: 100, y: 100, name: \"list2\") property(List) list2_4d5e6f\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 400, y: 100, name: \"result\") property(Bool) result_j1k2l3\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 200, y: 75) intersection_p7q8r9 root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 75) is_empty_s1t2u3 root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 350, y: 100) not_v4w5x6 root.Std_k98ojb.Logic.Not {}\n\n        list1_1a2b3c -> intersection_p7q8r9.left\n        list2_4d5e6f -> intersection_p7q8r9.right\n        intersection_p7q8r9.intersect -> is_empty_s1t2u3.list\n        is_empty_s1t2u3.isEmpty -> not_v4w5x6.input\n        not_v4w5x6.output -> result_j1k2l3\n\n        execute_7g8h9i -> continue_m4n5o6\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element\") has_common_element {\n        in(x: 100, y: 50, name: \"list1\") property(List) list1_1a2b3c\n        in(x: 100, y: 100, name: \"list2\") property(List) list2_4d5e6f\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 400, y: 100, name: \"out\") property(Bool) out_j1k2l3\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 250, y: 100) intersection_p7q8r9 root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 100) notempty_s1t2u3 root.Std_k98ojb.List.NotEmpty {}\n\n        list1_1a2b3c -> intersection_p7q8r9.left\n        list2_4d5e6f -> intersection_p7q8r9.right\n        intersection_p7q8r9.intersect -> notempty_s1t2u3.list\n        notempty_s1t2u3.isEmpty -> out_j1k2l3\n        execute_7g8h9i -> continue_m4n5o6\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element\") have_common_element {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 200, name: \"list2\") property(List) list2\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"result\") property(Bool) result\n        out(x: 400, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 150) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 350, y: 150) not_empty root.Std_k98ojb.List.NotEmpty {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> not_empty.list\n        not_empty.isEmpty -> result\n        execute -> not_empty.isEmpty\n        not_empty.isEmpty -> continue\n    }\n}"
            ],
            "11": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 354, y: -53, name: \"input\") property(List) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 591, y: 74) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) sub_f11fda root.Std_k98ojb.Math.Sub {}\n        instance(x: 714, y: -155) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) equal_80a119 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1504, y: -400) sub_expression root.Std_k98ojb.Math.Expression {\n            expression: \"(current - previous)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_list -> sort_list.list\n        sort_list.list -> for_8cb3f6.items\n        for_8cb3f6.index -> sub_f11fda.first\n        1 -> sub_f11fda.second\n        sub_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        sub_expression.result -> equal_80a119.left\n        1 -> equal_80a119.right\n        equal_80a119.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n        for_8cb3f6.item -> sub_expression.gen_0\n        for_8cb3f6.index -> sub_expression.gen_1\n        if_07b8c7.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_e19a62.else -> for_8cb3f6.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 40, y: 40, name: \"input\") property(List<Number>) input_1a2b3c\n        in(x: 40, y: 80, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 200, y: 40, name: \"out\") property(Bool) out_7g8h9i\n        out(x: 200, y: 80, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 100, y: 40) sort_3m4n5o root.Std_k98ojb.List.Sort {}\n        instance(x: 100, y: 80) for_6p7q8r root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 40) sub_9s0t1u root.Std_k98ojb.Math.Sub {}\n        instance(x: 300, y: 80) if_2v3w4x root.Std_k98ojb.Std.If {}\n        instance(x: 500, y: 40) not_equal_5y6z7a root.Std_k98ojb.Logic.NotEqual {}\n\n        input_1a2b3c -> sort_3m4n5o.list\n        sort_3m4n5o.sorted -> for_6p7q8r.items\n        for_6p7q8r.index -> sub_9s0t1u.first\n        1 -> sub_9s0t1u.second\n        sub_9s0t1u.result -> not_equal_5y6z7a.left\n        for_6p7q8r.item -> not_equal_5y6z7a.right\n        not_equal_5y6z7a.result -> if_2v3w4x.predicate\n        for_6p7q8r.onItem -> if_2v3w4x.execute\n        if_2v3w4x.then -> continue_0j1k2l\n        if_2v3w4x.else -> out_7g8h9i\n        for_6p7q8r.done -> continue_0j1k2l\n        execute_4d5e6f -> for_6p7q8r.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 180, y: -51, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 360, y: -190) sort_38f9a7 root.Std_k98ojb.List.Sort {}\n        instance(x: 750, y: -93) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1024, y: -49) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 1250, y: -210) not_equal_f34d7c root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1450, y: -90) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> sort_38f9a7.list\n        sort_38f9a7.sorted -> for_8cb3f6.items\n        for_8cb3f6.item -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> not_equal_f34d7c.left\n        for_8cb3f6.index -> not_equal_f34d7c.right\n        not_equal_f34d7c.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") has_consecutive_numbers {\n        in(x: 154, y: -44, name: \"input\") property(List<Number>) input_1f2d3a\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 648, y: -10, name: \"out\") property(Bool) out_8c7f5d\n        out(x: 794, y: 120, name: \"continue\") trigger() continue_9d5a6b\n\n        instance(x: 352, y: -493) sort_5a3f2c root.Std_k98ojb.List.Sort {}\n        instance(x: 591, y: 74) sub_3b2c9d root.Std_k98ojb.Math.Sub {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) equal_7f3c4e root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1812, y: -319) not_80a119 root.Std_k98ojb.Logic.Not {}\n\n        input_1f2d3a -> sort_5a3f2c.list\n        sort_5a3f2c.sorted -> for_8cb3f6.items\n        for_8cb3f6.index -> sub_3b2c9d.first\n        1 -> sub_3b2c9d.second\n        sub_3b2c9d.result -> equal_7f3c4e.left\n        for_8cb3f6.item -> equal_7f3c4e.right\n        equal_7f3c4e.result -> not_80a119.input\n        not_80a119.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_9d5a6b\n        if_07b8c7.else -> continue_9d5a6b\n        if_07b8c7.value -> out_8c7f5d\n        for_8cb3f6.done -> continue_9d5a6b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 90, y: 0, name: \"input\") property(List<Number>) input_abc123\n        in(x: 90, y: 60, name: \"execute\") trigger() execute_def456\n\n        out(x: 600, y: 0, name: \"out\") property(Bool) out_ghi789\n        out(x: 600, y: 60, name: \"continue\") trigger() continue_jkl012\n\n        instance(x: 300, y: 0) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 300, y: 120) count_trigger root.Std_k98ojb.Std.Count {}\n        instance(x: 300, y: 60) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 480, y: 0) sub_expression root.Std_k98ojb.Math.Expression {\n            expression: \"a - b\"\n        }\n        instance(x: 480, y: 60) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"diff != 1\"\n        }\n        instance(x: 600, y: 120) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n        input_abc123 -> sort_list.list\n        sort_list.list -> for_loop.items\n        for_loop.item -> sub_expression.a\n        for_loop.index -> count_trigger.count\n        count_trigger.count -> sub_expression.b\n        sub_expression.result -> if_expression.diff\n        if_expression.value -> not_equal.left\n        true -> not_equal.right\n        not_equal.result -> out_ghi789\n        for_loop.onItem -> if_expression.then\n        if_expression.else -> for_loop.next\n        for_loop.done -> continue_jkl012\n        execute_def456 -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") has_consecutive_numbers {\n        in(x: 50, y: -50, name: \"input\") property(List<Number>) input_list\n        in(x: 50, y: -100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 450, y: 0, name: \"out\") property(Bool) out_result\n        out(x: 450, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: -50) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 250, y: -50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 350, y: -50) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"current + 1 != next\"\n        }\n        instance(x: 350, y: 50) logic_not root.Std_k98ojb.Logic.Not {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> for_loop.items\n        for_loop.item -> if_expression.current\n        for_loop.index -> if_expression.index\n        for_loop.index -> if_expression.gen_0\n        for_loop.index -> if_expression.gen_1\n        for_loop.onItem -> if_expression.execute\n        if_expression.result -> logic_not.input\n        logic_not.result -> out_result\n        for_loop.done -> continue_trigger\n        execute_trigger -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") has_consecutive_numbers {\n        in(x: 300, y: -100, name: \"input_list\") property(List) input_list_abc123\n        in(x: 300, y: -150, name: \"execute\") trigger() execute_123abc\n\n        out(x: 700, y: -100, name: \"out\") property(Bool) out_def456\n        out(x: 700, y: -150, name: \"continue\") trigger() continue_456def\n\n        instance(x: 400, y: -100) sort_list_789ghi root.Std_k98ojb.List.Sort {}\n        instance(x: 500, y: -100) for_loop_101jkl root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: -100) sub_102mno root.Std_k98ojb.Math.Sub {}\n        instance(x: 600, y: -150) equal_103pqr root.Std_k98ojb.Logic.Equal {}\n        instance(x: 600, y: -200) if_104stu root.Std_k98ojb.Std.If {}\n\n        input_list_abc123 -> sort_list_789ghi.list\n        sort_list_789ghi.sorted -> for_loop_101jkl.items\n        for_loop_101jkl.item -> sub_102mno.first\n        for_loop_101jkl.index -> sub_102mno.second\n        1 -> sub_102mno.second\n        sub_102mno.result -> equal_103pqr.left\n        1 -> equal_103pqr.right\n        equal_103pqr.result -> if_104stu.predicate\n        for_loop_101jkl.onItem -> if_104stu.execute\n        if_104stu.then -> continue_456def\n        if_104stu.else -> out_def456\n        false -> out_def456\n        for_loop_101jkl.done -> continue_456def\n        execute_123abc -> for_loop_101jkl.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 100, name: \"out\") property(Bool) output_result\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 300, y: 100) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 100) sub_expression root.Std_k98ojb.Math.Expression {\n            expression: \"a - b\"\n        }\n        instance(x: 400, y: 150) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 50) if_check root.Std_k98ojb.Std.If {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> for_loop.items\n        for_loop.item -> sub_expression.a\n        for_loop.index -> sub_expression.b\n        sub_expression.result -> equal_check.left\n        1 -> equal_check.right\n        equal_check.result -> if_check.predicate\n        if_check.then -> continue_trigger\n        if_check.else -> output_result\n        for_loop.done -> continue_trigger\n        execute_trigger -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_result\n\n        instance(x: 714, y: -155) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1121, y: -54) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 1812, y: -319) sub_one root.Std_k98ojb.Math.Sub {}\n        instance(x: 1088, y: -256) add_one root.Std_k98ojb.Math.Add {}\n        instance(x: 591, y: 74) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 2136, y: -356) not_equal_check root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> for_loop.items\n        for_loop.item -> add_one.first\n        1 -> add_one.second\n        add_one.result -> sub_node.first\n        for_loop.index -> sub_one.first\n        1 -> sub_one.second\n        sub_one.result -> sub_node.second\n        sub_node.result -> equal_check.left\n        for_loop.index -> equal_check.right\n        equal_check.result -> not_equal_check.left\n        false -> not_equal_check.right\n        not_equal_check.result -> if_node.predicate\n        if_node.then -> out_result\n        for_loop.onItem -> if_node.execute\n        for_loop.done -> out_result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 100, y: 50, name: \"input_list\") property(List) input_list_1a2b3c\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 600, y: 50, name: \"is_consecutive\") property(Bool) is_consecutive_7g8h9i\n        out(x: 600, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 250, y: 50) sort_3m4n5o root.Std_k98ojb.List.Sort {}\n        instance(x: 400, y: 50) for_6p7q8r root.Std_k98ojb.Std.For {}\n        instance(x: 550, y: 50) if_9s0t1u root.Std_k98ojb.Std.If {}\n        instance(x: 400, y: 150) add_2v3w4x root.Std_k98ojb.Math.Add {}\n        instance(x: 550, y: 150) not_equal_5y6z7a root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list_1a2b3c -> sort_3m4n5o.list\n        sort_3m4n5o.list -> for_6p7q8r.items\n        for_6p7q8r.item -> add_2v3w4x.first\n        1 -> add_2v3w4x.second\n        add_2v3w4x.result -> not_equal_5y6z7a.left\n        for_6p7q8r.index -> not_equal_5y6z7a.right\n        not_equal_5y6z7a.result -> if_9s0t1u.predicate\n        for_6p7q8r.onItem -> if_9s0t1u.execute\n        if_9s0t1u.then -> continue_0j1k2l\n        if_9s0t1u.else -> is_consecutive_7g8h9i\n        for_6p7q8r.done -> is_consecutive_7g8h9i\n        execute_4d5e6f -> for_6p7q8r.reset\n    }\n}"
            ],
            "17": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: 50, name: \"mainList\") property(List) mainList\n        in(x: 100, y: 100, name: \"subList\") property(List) subList\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 100, name: \"isSublist\") property(Bool) isSublist\n        out(x: 300, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 50) length_mainList root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 100) length_subList root.Std_k98ojb.List.Length {}\n        instance(x: 400, y: 50) generate_range root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: 50) slice root.Std_k98ojb.List.Slice {}\n        instance(x: 1000, y: 50) equal root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1200, y: 50) if_node root.Std_k98ojb.Std.If {}\n\n        mainList -> length_mainList.list\n        subList -> length_subList.list\n        length_mainList.length -> generate_range.to\n        length_subList.length -> generate_range.from\n        generate_range.list -> for_loop.items\n        for_loop.item -> slice.start\n        length_subList.length -> slice.end\n        mainList -> slice.list\n        slice.slice -> equal.left\n        subList -> equal.right\n        equal.result -> if_node.predicate\n        if_node.then -> continue\n        if_node.value -> isSublist\n        for_loop.onItem -> if_node.execute\n        for_loop.done -> continue\n        execute -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 120, y: 0, name: \"list\") property(List) list_1\n        in(x: 120, y: 60, name: \"sublist\") property(List) sublist_1\n        in(x: 120, y: 120, name: \"execute\") trigger() execute_1\n\n        out(x: 300, y: 0, name: \"isSublist\") property(Bool) isSublist_1\n        out(x: 300, y: 60, name: \"continue\") trigger() continue_1\n\n        instance(x: 180, y: 180) length_1 root.Std_k98ojb.List.Length {}\n        instance(x: 180, y: 240) length_2 root.Std_k98ojb.List.Length {}\n        instance(x: 240, y: 300) lessthanorequal_1 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 240, y: 360) if_1 root.Std_k98ojb.Std.If {}\n        instance(x: 300, y: 420) generaterange_1 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 360, y: 480) for_1 root.Std_k98ojb.Std.For {}\n        instance(x: 420, y: 540) slice_1 root.Std_k98ojb.List.Slice {}\n        instance(x: 480, y: 600) equal_1 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 540, y: 660) if_2 root.Std_k98ojb.Std.If {}\n\n        list_1 -> length_1.list\n        sublist_1 -> length_2.list\n        length_2.length -> lessthanorequal_1.left\n        length_1.length -> lessthanorequal_1.right\n        lessthanorequal_1.result -> if_1.predicate\n        execute_1 -> if_1.execute\n        0 -> generaterange_1.from\n        length_1.length -> length_2.length\n        length_2.length -> generaterange_1.to\n        generaterange_1.list -> for_1.items\n        for_1.index -> slice_1.start\n        length_2.length -> slice_1.end\n        list_1 -> slice_1.list\n        slice_1.slice -> equal_1.left\n        sublist_1 -> equal_1.right\n        equal_1.result -> if_2.predicate\n        if_1.then -> for_1.trigger\n        if_1.else -> isSublist_1\n        for_1.onItem -> if_2.execute\n        if_2.then -> isSublist_1\n        if_2.else -> for_1.next\n        for_1.done -> continue_1\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 64, y: -48, name: \"mainList\") property(List) mainList\n        in(x: 64, y: 48, name: \"subList\") property(List) subList\n        in(x: 64, y: 144, name: \"execute\") trigger() execute\n\n        out(x: 480, y: 48, name: \"isSublist\") property(Bool) isSublist\n        out(x: 480, y: 144, name: \"continue\") trigger() continue\n\n        instance(x: 256, y: 48) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 320, y: 96) equal root.Std_k98ojb.Logic.Equal {}\n\n        mainList -> intersection.left\n        subList -> intersection.right\n        intersection.intersect -> equal.left\n        subList -> equal.right\n        equal.result -> isSublist\n        execute -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 50, y: 50, name: \"list1\") property(List) list1_1a2b3c\n        in(x: 50, y: 100, name: \"list2\") property(List) list2_4d5e6f\n        in(x: 50, y: 150, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 250, y: 100, name: \"out\") property(Bool) out_j1k2l3\n        out(x: 250, y: 150, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 150, y: 50) filter_7p8q9r root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 350, y: 50) equal_1s2t3u root.Std_k98ojb.Logic.Equal {}\n        instance(x: 450, y: 50) notempty_4v5w6x root.Std_k98ojb.List.NotEmpty {}\n        instance(x: 550, y: 50) if_7y8z9a root.Std_k98ojb.Std.If {}\n\n        list2_4d5e6f -> filter_7p8q9r.items\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Any) element_b1c2d3\n\n            out(x: 150, y: 50, name: \"out\") property(Bool) out_e4f5g6\n\n            instance(x: 50, y: 50) contains_7h8i9j root.Std_k98ojb.List.Contains {}\n            element_b1c2d3 -> contains_7h8i9j.item\n            list1_1a2b3c -> contains_7h8i9j.list\n            contains_7h8i9j.isContained -> out_e4f5g6\n        } -> filter_7p8q9r.handler\n\n        filter_7p8q9r.output_list -> equal_1s2t3u.left\n        list1_1a2b3c -> equal_1s2t3u.right\n        equal_1s2t3u.result -> notempty_4v5w6x.list\n        notempty_4v5w6x.isEmpty -> if_7y8z9a.predicate\n        if_7y8z9a.value -> out_j1k2l3\n        execute_7g8h9i -> if_7y8z9a.execute\n        if_7y8z9a.then -> continue_m4n5o6\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 30, y: -40, name: \"list\") property(List) list_1\n        in(x: 30, y: 0, name: \"sublist\") property(List) sublist_2\n        in(x: 30, y: 40, name: \"execute\") trigger() execute_3\n\n        out(x: 300, y: 0, name: \"out\") property(Bool) out_4\n        out(x: 300, y: 40, name: \"continue\") trigger() continue_5\n\n        instance(x: 100, y: 0) length_list_6 root.Std_k98ojb.List.Length {}\n        instance(x: 100, y: 40) length_sublist_7 root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 0) expression_8 root.Std_k98ojb.Math.Expression {\n            expression: \"list_length >= sublist_length\"\n        }\n        instance(x: 400, y: 0) if_9 root.Std_k98ojb.Std.If {}\n        instance(x: 600, y: 0) for_10 root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: 0) slice_11 root.Std_k98ojb.List.Slice {}\n        instance(x: 1000, y: 0) equal_12 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1200, y: 0) if_13 root.Std_k98ojb.Std.If {}\n\n        list_1 -> length_list_6.list\n        sublist_2 -> length_sublist_7.list\n        length_list_6.length -> expression_8.gen_0\n        length_sublist_7.length -> expression_8.gen_1\n        expression_8.result -> if_9.predicate\n        execute_3 -> if_9.execute\n        if_9.then -> for_10.trigger\n        length_list_6.length -> for_10.items\n        length_sublist_7.length -> for_10.index\n        for_10.index -> slice_11.start\n        length_sublist_7.length -> slice_11.end\n        list_1 -> slice_11.list\n        slice_11.slice -> equal_12.left\n        sublist_2 -> equal_12.right\n        equal_12.result -> if_13.predicate\n        for_10.onItem -> if_13.execute\n        if_13.then -> out_4\n        if_13.then -> continue_5\n        if_13.else -> for_10.next\n        for_10.done -> continue_5\n        if_9.else -> continue_5\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: 50, name: \"list1\") property(List) list1\n        in(x: 100, y: 100, name: \"list2\") property(List) list2\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 100, name: \"isSublist\") property(Bool) isSublist\n        out(x: 300, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 50) contains root.Std_k98ojb.List.Contains {}\n        instance(x: 200, y: 150) filter root.Std_k98ojb.Iteration.Filter {}\n\n        list1 -> filter.items\n        func() {\n            in(x: -50, y: 50, name: \"item\") property(Any) item\n\n            out(x: 50, y: 50, name: \"out\") property(Bool) out\n\n            instance(x: 0, y: 0) contains root.Std_k98ojb.List.Contains {}\n            item -> contains.item\n            list2 -> contains.list\n            contains.result -> out\n        } -> filter.handler\n\n        filter.output_list -> contains.list\n        list1 -> contains.item\n        contains.result -> isSublist\n        execute -> filter.execute\n        filter.output_list -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 64, y: -59, name: \"mainList\") property(List) mainList\n        in(x: 65, y: -25, name: \"subList\") property(List) subList\n        in(x: 66, y: 9, name: \"execute\") trigger() execute\n\n        out(x: 512, y: -27, name: \"isSublist\") property(Bool) isSublist\n        out(x: 513, y: 7, name: \"continue\") trigger() continue\n\n        instance(x: 244, y: -28) contains root.Std_k98ojb.List.Contains {}\n        instance(x: 246, y: 59) for root.Std_k98ojb.Std.For {}\n        instance(x: 428, y: -28) if root.Std_k98ojb.Std.If {}\n        instance(x: 250, y: 150) not root.Std_k98ojb.Logic.Not {}\n        instance(x: 429, y: 58) if2 root.Std_k98ojb.Std.If {}\n\n        execute -> for.reset\n        subList -> for.items\n        for.onItem -> contains.trigger\n        for.item -> contains.item\n        mainList -> contains.list\n        contains.result -> if.predicate\n        if.then -> for.next\n        if.else -> not.input\n        not.output -> if2.predicate\n        if2.then -> isSublist\n        if2.else -> not.output\n        not.output -> isSublist\n        if2.then -> continue\n        if2.else -> continue\n        for.done -> isSublist\n        for.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 354, y: -53, name: \"mainList\") property(List) mainList\n        in(x: 354, y: 53, name: \"subList\") property(List) subList\n        in(x: 161, y: -211, name: \"execute\") trigger() execute\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue\n\n        instance(x: 591, y: 74) contains root.Std_k98ojb.List.Contains {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) not root.Std_k98ojb.Logic.Not {}\n\n        subList -> for_8cb3f6.items\n        for_8cb3f6.item -> contains.item\n        mainList -> contains.list\n        contains.result -> not.input\n        not.output -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> out\n        execute -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 120, y: -40, name: \"list\") property(List) list_1\n        in(x: 120, y: 40, name: \"sublist\") property(List) sublist_1\n        in(x: 120, y: 120, name: \"execute\") trigger() execute_1\n\n        out(x: 400, y: 40, name: \"out\") property(Bool) out_1\n        out(x: 400, y: 120, name: \"continue\") trigger() continue_1\n\n        instance(x: 240, y: 0) contains_1 root.Std_k98ojb.List.Contains {}\n        instance(x: 240, y: 80) for_1 root.Std_k98ojb.Std.For {}\n        instance(x: 320, y: 40) if_1 root.Std_k98ojb.Std.If {}\n\n        sublist_1 -> for_1.items\n        for_1.item -> contains_1.item\n        list_1 -> contains_1.list\n        contains_1.result -> if_1.predicate\n        for_1.onItem -> if_1.execute\n        if_1.else -> out_1\n        if_1.else -> continue_1\n        if_1.then -> for_1.next\n        for_1.done -> out_1\n        for_1.done -> continue_1\n        execute_1 -> for_1.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 50, y: 50, name: \"list\") property(List) list_1\n        in(x: 50, y: 100, name: \"sublist\") property(List) sublist_1\n        in(x: 50, y: 150, name: \"execute\") trigger() execute_1\n\n        out(x: 400, y: 50, name: \"out\") property(Bool) out_1\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_1\n\n        instance(x: 200, y: 50) filter_1 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 200, y: 150) equal_1 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 200, y: 250) length_1 root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 350) lessthanorequal_1 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 200, y: 450) if_1 root.Std_k98ojb.Std.If {}\n\n        list_1 -> filter_1.items\n        func() {\n            in(x: -100, y: 50, name: \"item\") property(Any) item_1\n\n            out(x: 100, y: 50, name: \"out\") property(Bool) out_2\n\n            instance(x: 0, y: 50) contains_1 root.Std_k98ojb.List.Contains {}\n            item_1 -> contains_1.item\n            sublist_1 -> contains_1.list\n            contains_1.result -> out_2\n        } -> filter_1.handler\n\n        filter_1.output_list -> length_1.list\n        sublist_1 -> length_1.list\n        length_1.length -> lessthanorequal_1.left\n        length_1.length -> lessthanorequal_1.right\n        lessthanorequal_1.result -> if_1.predicate\n        if_1.then -> equal_1.left\n        filter_1.output_list -> equal_1.right\n        equal_1.result -> out_1\n        execute_1 -> if_1.execute\n        if_1.else -> continue_1\n    }\n}"
            ],
            "27": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 60, y: -30, name: \"numbers\") property(List<Number>) numbers_123abc\n        in(x: 60, y: 0, name: \"execute\") trigger() execute_456def\n\n        out(x: 500, y: 0, name: \"missingNumber\") property(Number) missingNumber_789ghi\n        out(x: 500, y: 30, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 150, y: -30) generaterange_345mno root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 0) find_678pqr root.Std_k98ojb.Iteration.Find {}\n        instance(x: 400, y: 0) getat_901stu root.Std_k98ojb.List.GetAt {}\n        instance(x: 400, y: 30) if_234vwx root.Std_k98ojb.Std.If {}\n\n        0 -> generaterange_345mno.from\n        numbers_123abc -> List.Length -> generaterange_345mno.to\n        generaterange_345mno.list -> find_678pqr.items\n\n        func() {\n            in(x: -100, y: 0, name: \"element\") property(Number) element_345yza\n            in(x: -100, y: 30, name: \"index\") property(Number) index_678bcd\n\n            out(x: 200, y: 0, name: \"result\") property(Bool) result_901efg\n\n            instance(x: 50, y: 0) getat_112hij root.Std_k98ojb.List.GetAt {}\n            instance(x: 150, y: 0) notequal_345klm root.Std_k98ojb.Logic.NotEqual {}\n\n            numbers_123abc -> getat_112hij.list\n            index_678bcd -> getat_112hij.index\n            getat_112hij.item -> notequal_345klm.left\n            element_345yza -> notequal_345klm.right\n            notequal_345klm.result -> result_901efg\n        } -> find_678pqr.predicate\n\n        find_678pqr.item -> getat_901stu.index\n        generaterange_345mno.list -> getat_901stu.list\n        getat_901stu.item -> if_234vwx.value\n        if_234vwx.value -> missingNumber_789ghi\n        if_234vwx.then -> continue_012jkl\n\n        execute_456def -> find_678pqr.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 154, y: -49, name: \"numbers\") property(List<Number>) numbers_ef7b9a\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 948, y: 29, name: \"missingNumber\") property(Number) missingNumber_3d9a4b\n        out(x: 1084, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 388, y: -57) length_7f3b5c root.Std_k98ojb.List.Length {}\n        instance(x: 620, y: -63) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 866, y: -45) find_3c2a7d root.Std_k98ojb.Iteration.Find {}\n        instance(x: 1340, y: -42) notEqual_2f7c4b root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1112, y: -249) getat_5d9f3b root.Std_k98ojb.List.GetAt {}\n        instance(x: 1572, y: -50) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        numbers_ef7b9a -> length_7f3b5c.list\n        0 -> generaterange_038fce.from\n        length_7f3b5c.length -> generaterange_038fce.to\n        generaterange_038fce.list -> find_3c2a7d.items\n        func() {\n            in(x: -76, y: 46, name: \"index\") property(Number) index_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) getat_2f9d09 root.Std_k98ojb.List.GetAt {}\n            instance(x: 350, y: 17) notEqual_f3a8b4 root.Std_k98ojb.Logic.NotEqual {}\n\n            numbers_ef7b9a -> getat_2f9d09.list\n            index_5f51f7 -> getat_2f9d09.index\n            index_5f51f7 -> notEqual_f3a8b4.left\n            getat_2f9d09.item -> notEqual_f3a8b4.right\n            notEqual_f3a8b4.result -> out_d0fd24\n        } -> find_3c2a7d.predicate\n        find_3c2a7d.item -> missingNumber_3d9a4b\n        find_3c2a7d.item -> if_07b8c7.value\n        find_3c2a7d.item -> notEqual_2f7c4b.left\n        -1 -> notEqual_2f7c4b.right\n        notEqual_2f7c4b.result -> if_07b8c7.predicate\n        if_07b8c7.then -> continue_8ba06b\n        execute_27b8c3 -> generaterange_038fce.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 154, y: -49, name: \"input_list\") property(List) input_list_7a1d34\n        in(x: 152, y: -230, name: \"execute\") trigger() execute_0f9a12\n\n        out(x: 1164, y: 0, name: \"out\") property(Number) out_5c3f4a\n        out(x: 1306, y: 125, name: \"continue\") trigger() continue_8d2f1c\n\n        instance(x: 424, y: -110) generaterange_8b9f5d root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 705, y: -75) find_4b2c1f root.Std_k98ojb.Iteration.Find {}\n        instance(x: 979, y: -46) if_2c1b7e root.Std_k98ojb.Std.If {}\n        instance(x: 1192, y: -234) not_equal_5f3d2e root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1190, y: -92) get_at_7e2b3f root.Std_k98ojb.List.GetAt {}\n        instance(x: 1190, y: -318) length_2a3f4e root.Std_k98ojb.List.Length {}\n\n        0 -> generaterange_8b9f5d.from\n        input_list_7a1d34 -> length_2a3f4e.list\n        length_2a3f4e.length -> generaterange_8b9f5d.to\n        generaterange_8b9f5d.list -> find_4b2c1f.items\n\n        func() {\n            in(x: -61, y: 23, name: \"index\") property(Number) index_5d1f7e\n\n            out(x: 282, y: 20, name: \"out\") property(Bool) out_9b2f1c\n\n            instance(x: 105, y: 0) get_at_1a3b5d root.Std_k98ojb.List.GetAt {}\n            instance(x: 112, y: 120) not_equal_7e2f1b root.Std_k98ojb.Logic.NotEqual {}\n\n            input_list_7a1d34 -> get_at_1a3b5d.list\n            index_5d1f7e -> get_at_1a3b5d.index\n            index_5d1f7e -> not_equal_7e2f1b.left\n            get_at_1a3b5d.item -> not_equal_7e2f1b.right\n            not_equal_7e2f1b.result -> out_9b2f1c\n        } -> find_4b2c1f.predicate\n\n        find_4b2c1f.item -> if_2c1b7e.predicate\n        find_4b2c1f.item -> out_5c3f4a\n        if_2c1b7e.then -> continue_8d2f1c\n        if_2c1b7e.else -> continue_8d2f1c\n        execute_0f9a12 -> find_4b2c1f.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 320, y: -51, name: \"numbers\") property(List) numbers_5f4c7d\n        in(x: 145, y: -188, name: \"execute\") trigger() execute_2b3d7f\n\n        out(x: 1603, y: 27, name: \"missing_number\") property(Number) missing_number_8f9d3e\n        out(x: 1752, y: 136, name: \"continue\") trigger() continue_3a2f1b\n\n        instance(x: 624, y: -64) generaterange_4f3c9a root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 937, y: 43) filter_8c7d9b root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1264, y: 120) firstitem_3d9f8c root.Std_k98ojb.List.FirstItem {}\n        instance(x: 1424, y: -70) if_2b7c3d root.Std_k98ojb.Std.If {}\n        instance(x: 470, y: -208) length_7f9b2e root.Std_k98ojb.List.Length {}\n        instance(x: 1624, y: -216) add_5b7c4f root.Std_k98ojb.Math.Add {}\n        instance(x: 197, y: -74) isEmpty_8d9f3c root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 804, y: -230) contains_3f9b7d root.Std_k98ojb.List.Contains {}\n        instance(x: 1057, y: -206) not_9b7c3d root.Std_k98ojb.Logic.Not {}\n        instance(x: 1424, y: 234) sub_2b3d7f root.Std_k98ojb.Math.Sub {}\n\n        numbers_5f4c7d -> length_7f9b2e.list\n        0 -> generaterange_4f3c9a.from\n        length_7f9b2e.length -> generaterange_4f3c9a.to\n        generaterange_4f3c9a.list -> filter_8c7d9b.items\n        func() {\n            in(x: -77, y: 32, name: \"element\") property(Number) element_9f3b7d\n\n            out(x: 364, y: 18, name: \"out\") property(Bool) out_5b7c4f\n\n            instance(x: 93, y: 16) contains_4f3c9a root.Std_k98ojb.List.Contains {}\n            instance(x: 209, y: 10) not_8c7d9b root.Std_k98ojb.Logic.Not {}\n            element_9f3b7d -> contains_4f3c9a.item\n            numbers_5f4c7d -> contains_4f3c9a.list\n            contains_4f3c9a.result -> not_8c7d9b.input\n            not_8c7d9b.result -> out_5b7c4f\n        } -> filter_8c7d9b.handler\n        filter_8c7d9b.output_list -> firstitem_3d9f8c.list\n        firstitem_3d9f8c.item -> if_2b7c3d.value\n        firstitem_3d9f8c.item -> missing_number_8f9d3e\n        if_2b7c3d.predicate -> continue_3a2f1b\n        isEmpty_8d9f3c.list -> numbers_5f4c7d\n        isEmpty_8d9f3c.isEmpty -> if_2b7c3d.predicate\n        if_2b7c3d.then -> sub_2b3d7f.execute\n        if_2b7c3d.else -> continue_3a2f1b\n        execute_2b3d7f -> generaterange_4f3c9a.reset\n        execute_2b3d7f -> isEmpty_8d9f3c.execute\n        length_7f9b2e.length -> sub_2b3d7f.first\n        1 -> sub_2b3d7f.second\n        sub_2b3d7f.result -> missing_number_8f9d3e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 50, y: 0, name: \"input_list\") property(List<Number>) input_list\n        in(x: 50, y: 50, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 0, name: \"missing_number\") property(Number) missing_number\n        out(x: 500, y: 50, name: \"continue\") trigger() continue\n\n        instance(x: 150, y: 0) generaterange root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 0) find root.Std_k98ojb.Iteration.Find {}\n        instance(x: 400, y: 0) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list -> generaterange.to\n        0 -> generaterange.from\n        generaterange.list -> find.items\n\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n            out(x: 200, y: 0, name: \"result\") property(Bool) result\n\n            instance(x: 100, y: 0) not_contains root.Std_k98ojb.List.Contains {}\n            input_list -> not_contains.list\n            item -> not_contains.item\n            not_contains.result -> result\n        } -> find.predicate\n\n        find.item -> missing_number\n        execute -> find.execute\n        find.item -> not_equal.left\n        null -> not_equal.right\n        not_equal.result -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 100, y: 50, name: \"input_list\") property(List<Number>) input_list_1a2b3c\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 600, y: 50, name: \"out\") property(Number) out_7g8h9i\n        out(x: 600, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 300, y: 50) for_3m4n5o root.Std_k98ojb.Std.For {}\n        instance(x: 450, y: 50) if_6p7q8r root.Std_k98ojb.Std.If {}\n        instance(x: 300, y: 150) add_9s0t1u root.Std_k98ojb.Math.Add {}\n        instance(x: 450, y: 150) not_equal_2v3w4x root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list_1a2b3c -> for_3m4n5o.items\n        for_3m4n5o.index -> add_9s0t1u.first\n        0 -> add_9s0t1u.second\n        add_9s0t1u.result -> not_equal_2v3w4x.left\n        for_3m4n5o.item -> not_equal_2v3w4x.right\n        not_equal_2v3w4x.result -> if_6p7q8r.predicate\n        for_3m4n5o.onItem -> if_6p7q8r.execute\n        if_6p7q8r.then -> continue_0j1k2l\n        if_6p7q8r.value -> out_7g8h9i\n        if_6p7q8r.else -> for_3m4n5o.next\n        for_3m4n5o.done -> continue_0j1k2l\n        execute_4d5e6f -> for_3m4n5o.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 100, y: 50, name: \"numbers\") property(List) numbers_1a2b3c\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 400, y: 50, name: \"missing_number\") property(Number) missing_number_7g8h9i\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 200, y: 50) generaterange_3m4n5o root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 50) find_6p7q8r root.Std_k98ojb.Iteration.Find {}\n        instance(x: 300, y: 150) not_equal_9s0t1u root.Std_k98ojb.Logic.NotEqual {}\n\n        0 -> generaterange_3m4n5o.from\n        numbers_1a2b3c -> generaterange_3m4n5o.to\n        generaterange_3m4n5o.list -> find_6p7q8r.items\n\n        func() {\n            in(x: 50, y: 50, name: \"element\") property(Number) element_2v3w4x\n            in(x: 50, y: 100, name: \"index\") property(Number) index_5y6z7a\n\n            out(x: 150, y: 75, name: \"out\") property(Bool) out_8b9c0d\n\n            instance(x: 100, y: 75) not_equal_1e2f3g root.Std_k98ojb.Logic.NotEqual {}\n            element_2v3w4x -> not_equal_1e2f3g.left\n            index_5y6z7a -> not_equal_1e2f3g.right\n            not_equal_1e2f3g.result -> out_8b9c0d\n        } -> find_6p7q8r.predicate\n\n        find_6p7q8r.item -> missing_number_7g8h9i\n        find_6p7q8r.found -> continue_0j1k2l\n\n        execute_4d5e6f -> generaterange_3m4n5o.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 100, name: \"out\") property(Number) output_missing_number\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 100) generaterange_1 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 200) filter_1 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 150) firstitem_1 root.Std_k98ojb.List.FirstItem {}\n\n        0 -> generaterange_1.from\n        input_list -> generaterange_1.to\n\n        func() {\n            in(x: -100, y: 50, name: \"element\") property(Number) element\n            out(x: 100, y: 50, name: \"out\") property(Bool) is_missing\n\n            instance(x: 0, y: 50) contains_1 root.Std_k98ojb.List.Contains {}\n            element -> contains_1.item\n            input_list -> contains_1.list\n            contains_1.isContained -> Logic.Not -> is_missing\n        } -> filter_1.handler\n\n        generaterange_1.list -> filter_1.items\n        filter_1.output_list -> firstitem_1.list\n        firstitem_1.item -> output_missing_number\n\n        execute_trigger -> generaterange_1.trigger\n        firstitem_1.item -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 100, y: 50, name: \"input_list\") property(List) input_list_1f2a3b\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_2b3c4d\n\n        out(x: 400, y: 50, name: \"missing_number\") property(Number) missing_number_3e4f5g\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_4f5g6h\n\n        instance(x: 200, y: 50) generate_range_5a6b7c root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 200, y: 150) find_missing_6b7c8d root.Std_k98ojb.Iteration.Find {}\n        instance(x: 300, y: 50) not_equal_7c8d9e root.Std_k98ojb.Logic.NotEqual {}\n\n        0 -> generate_range_5a6b7c.from\n        input_list_1f2a3b -> List.Length.list\n        List.Length.length -> generate_range_5a6b7c.to\n\n        generate_range_5a6b7c.list -> find_missing_6b7c8d.items\n\n        func() {\n            in(x: -50, y: 50, name: \"range_item\") property(Number) range_item_8d9e0f\n            in(x: -50, y: 100, name: \"index\") property(Number) index_9e0f1g\n\n            out(x: 100, y: 75, name: \"is_missing\") property(Bool) is_missing_0f1g2h\n\n            input_list_1f2a3b -> List.GetAt.list\n            index_9e0f1g -> List.GetAt.index\n            List.GetAt.item -> not_equal_7c8d9e.left\n            range_item_8d9e0f -> not_equal_7c8d9e.right\n            not_equal_7c8d9e.result -> is_missing_0f1g2h\n        } -> find_missing_6b7c8d.predicate\n\n        find_missing_6b7c8d.item -> missing_number_3e4f5g\n        execute_2b3c4d -> find_missing_6b7c8d.execute\n        find_missing_6b7c8d.done -> continue_4f5g6h\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 200, y: 100, name: \"input_list\") property(List) input_list\n        in(x: 200, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 600, y: 100, name: \"missing_number\") property(Number) missing_number\n        out(x: 600, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 400, y: 100) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 200) add_one root.Std_k98ojb.Math.Add {}\n        instance(x: 500, y: 200) if_missing root.Std_k98ojb.Std.If {}\n        instance(x: 400, y: 300) equal_check root.Std_k98ojb.Logic.Equal {}\n\n        input_list -> for_loop.items\n        for_loop.index -> add_one.first\n        1 -> add_one.second\n        add_one.result -> equal_check.left\n        for_loop.item -> equal_check.right\n        equal_check.result -> if_missing.predicate\n        for_loop.onItem -> if_missing.execute\n        if_missing.else -> for_loop.next\n        if_missing.then -> continue\n        add_one.result -> missing_number\n        for_loop.done -> continue\n        execute -> for_loop.reset\n    }\n}"
            ],
            "31": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 60, y: 60, name: \"input\") property(String) input_str\n        in(x: 60, y: 120, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 60, name: \"output\") property(String) output_str\n        out(x: 400, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 60) replace_space root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 200, y: 160) replace_comma root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 200, y: 260) replace_dot root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_trigger -> replace_space.execute\n        input_str -> replace_space.input\n        replace_space.output -> replace_comma.input\n        replace_comma.execute -> replace_dot.execute\n        replace_comma.output -> replace_dot.input\n        replace_dot.output -> output_str\n        replace_dot.execute -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_spaces_commas_dots {\n        in(x: 120, y: -30, name: \"input\") property(String) input_4f7b3c\n        in(x: 120, y: 40, name: \"execute\") trigger() execute_3a8b9c\n\n        out(x: 540, y: -30, name: \"output\") property(String) output_9f2b4d\n        out(x: 540, y: 40, name: \"continue\") trigger() continue_5d8c2e\n\n        instance(x: 300, y: -100) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 300, y: 0) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 300, y: 100) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_3a8b9c -> replace_spaces.execute\n        input_4f7b3c -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_9f2b4d\n        replace_dots.execute -> continue_5d8c2e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 250, y: -100, name: \"input\") property(String) input_string\n\n        out(x: 450, y: -100, name: \"output\") property(String) output_string\n\n        instance(x: 300, y: 0) replace_spaces root.Std_k98ojb.Strings.Replace {}\n        instance(x: 600, y: 0) replace_commas root.Std_k98ojb.Strings.Replace {}\n        instance(x: 900, y: 0) replace_dots root.Std_k98ojb.Strings.Replace {}\n\n        input_string -> replace_spaces.input\n        \" \" -> replace_spaces.search\n        \":\" -> replace_spaces.replace\n\n        replace_spaces.output -> replace_commas.input\n        \",\" -> replace_commas.search\n        \":\" -> replace_commas.replace\n\n        replace_commas.output -> replace_dots.input\n        \".\" -> replace_dots.search\n        \":\" -> replace_dots.replace\n\n        replace_dots.output -> output_string\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_special_chars {\n        in(x: 100, y: 100, name: \"input\") property(String) input_123abc\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 200, y: 200, name: \"output\") property(String) output_789ghi\n        out(x: 250, y: 250, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: 300) replace_space root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 350, y: 350) replace_comma root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 400, y: 400) replace_dot root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_456def -> replace_space.trigger\n        input_123abc -> replace_space.input\n        replace_space.output -> replace_comma.input\n        replace_comma.trigger -> replace_dot.trigger\n        replace_comma.output -> replace_dot.input\n        replace_dot.output -> output_789ghi\n        replace_dot.trigger -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 100, y: 50, name: \"input\") property(String) input_abc123\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_def456\n\n        out(x: 500, y: 50, name: \"output\") property(String) output_ghi789\n        out(x: 550, y: 100, name: \"continue\") trigger() continue_jkl012\n\n        instance(x: 300, y: 50) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 300, y: 150) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 300, y: 250) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_def456 -> replace_spaces.trigger\n        input_abc123 -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_ghi789\n        replace_dots.done -> continue_jkl012\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 200, y: 100, name: \"input\") property(String) input_str\n        in(x: 200, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"output\") property(String) output_str\n        out(x: 600, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 400, y: 100) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 400, y: 200) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 400, y: 300) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_trigger -> replace_spaces.trigger\n        input_str -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_str\n        replace_dots.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_special_chars {\n        in(x: 161, y: -211, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) replace_space root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 591, y: 74) replace_comma root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 933, y: 25) replace_dot root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        input_f5c03d -> replace_space.input\n        replace_space.output -> replace_comma.input\n        replace_comma.output -> replace_dot.input\n        replace_dot.output -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n\n        instance(x: 200, y: 100) replace_spaces root.Std_k98ojb.Strings.Replace {}\n        instance(x: 400, y: 100) replace_commas root.Std_k98ojb.Strings.Replace {}\n        instance(x: 600, y: 100) replace_dots root.Std_k98ojb.Strings.Replace {}\n\n        input_string -> replace_spaces.input\n        \" \" -> replace_spaces.search\n        \":\" -> replace_spaces.replace\n\n        replace_spaces.output -> replace_commas.input\n        \",\" -> replace_commas.search\n        \":\" -> replace_commas.replace\n\n        replace_commas.output -> replace_dots.input\n        \".\" -> replace_dots.search\n        \":\" -> replace_dots.replace\n\n        replace_dots.output -> output_string\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 50, y: 50, name: \"input\") property(String) input_str\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 50, name: \"output\") property(String) output_str\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 200, y: 150) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 200, y: 250) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_trigger -> replace_spaces.execute\n        input_str -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.execute -> replace_commas.execute\n        replace_commas.output -> replace_dots.input\n        replace_dots.execute -> replace_dots.execute\n        replace_dots.output -> output_str\n        replace_dots.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) replace_space root.Std_k98ojb.Strings.Replace {}\n        instance(x: 591, y: 74) replace_comma root.Std_k98ojb.Strings.Replace {}\n        instance(x: 933, y: 25) replace_dot root.Std_k98ojb.Strings.Replace {}\n\n        input_f5c03d -> replace_space.input\n        \" \" -> replace_space.search\n        \":\" -> replace_space.replace\n        replace_space.output -> replace_comma.input\n        \",\" -> replace_comma.search\n        \":\" -> replace_comma.replace\n        replace_comma.output -> replace_dot.input\n        \".\" -> replace_dot.search\n        \":\" -> replace_dot.replace\n        replace_dot.output -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}"
            ],
            "33": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 100, y: 50, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) all_same\n\n        instance(x: 150, y: 100) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 150) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 250, y: 200) is_empty_node root.Std_k98ojb.List.IsEmpty {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> filter_node.items\n\n        func() {\n            in(x: 50, y: 50, name: \"character\") property(Char) character\n            in(x: 50, y: 100, name: \"index\") property(Number) index\n\n            out(x: 150, y: 75, name: \"out\") property(Bool) out\n\n            instance(x: 100, y: 50) not_equal_node root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 100, y: 100) get_at_node root.Std_k98ojb.List.GetAt {}\n\n            characters_node.characters -> get_at_node.list\n            0 -> get_at_node.index\n            get_at_node.item -> not_equal_node.left\n            character -> not_equal_node.right\n            not_equal_node.result -> out\n        } -> filter_node.handler\n\n        filter_node.output_list -> is_empty_node.list\n        is_empty_node.isEmpty -> all_same\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) firstitem_038fce root.Std_k98ojb.List.FirstItem {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) notequal_f11fda root.Std_k98ojb.Logic.NotEqual {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> firstitem_038fce.list\n        characters_6030c9.characters -> for_8cb3f6.items\n        firstitem_038fce.item -> notequal_f11fda.left\n        for_8cb3f6.item -> notequal_f11fda.right\n        notequal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> out_f3db9f\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) result\n\n        instance(x: 150, y: 100) characters_1 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 100) first_item_1 root.Std_k98ojb.List.FirstItem {}\n        instance(x: 250, y: 100) filter_1 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) length_1 root.Std_k98ojb.List.Length {}\n        instance(x: 450, y: 100) equal_1 root.Std_k98ojb.Logic.Equal {}\n\n        input_string -> characters_1.input\n        characters_1.characters -> first_item_1.list\n        characters_1.characters -> filter_1.items\n\n        func() {\n            in(x: 50, y: 150, name: \"char\") property(Char) char\n            out(x: 150, y: 150, name: \"out\") property(Bool) is_same\n\n            instance(x: 100, y: 150) equal_2 root.Std_k98ojb.Logic.Equal {}\n\n            char -> equal_2.left\n            first_item_1.item -> equal_2.right\n            equal_2.result -> is_same\n        } -> filter_1.handler\n\n        filter_1.output_list -> length_1.list\n        characters_1.characters -> length_1.list\n        length_1.length -> equal_1.left\n        length_1.length -> equal_1.right\n\n        equal_1.result -> result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 50, y: 50, name: \"input\") property(String) input_string\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 350, y: 50, name: \"out\") property(Bool) result\n        out(x: 350, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 50) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 250, y: 50) is_empty_node root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 250, y: 150) first_item_node root.Std_k98ojb.List.FirstItem {}\n        instance(x: 450, y: 50) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 650, y: 50) is_empty_filtered_node root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 450, y: 150) not_equal_node root.Std_k98ojb.Logic.NotEqual {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> is_empty_node.list\n        characters_node.characters -> first_item_node.list\n        characters_node.characters -> filter_node.items\n        is_empty_node.isEmpty -> result\n        is_empty_node.isEmpty -> continue_trigger\n\n        func() {\n            in(x: -50, y: 50, name: \"item\") property(String) item\n            in(x: -50, y: 100, name: \"index\") property(Number) index\n            in(x: -50, y: 150, name: \"context\") property(Any) context\n\n            out(x: 250, y: 50, name: \"out\") property(Bool) out\n\n            instance(x: 50, y: 50) not_equal_instance root.Std_k98ojb.Logic.NotEqual {}\n\n            item -> not_equal_instance.left\n            context -> not_equal_instance.right\n            not_equal_instance.result -> out\n        } -> filter_node.handler\n\n        first_item_node.item -> filter_node.context\n        filter_node.output_list -> is_empty_filtered_node.list\n        is_empty_filtered_node.isEmpty -> result\n        is_empty_filtered_node.isEmpty -> continue_trigger\n\n        execute_trigger -> characters_node.trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 30, y: -40, name: \"input\") property(String) input_abc123\n        in(x: 30, y: -10, name: \"execute\") trigger() execute_def456\n\n        out(x: 180, y: -40, name: \"out\") property(Bool) out_ghi789\n        out(x: 180, y: -10, name: \"continue\") trigger() continue_jkl012\n\n        instance(x: 90, y: -100) characters_mno345 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 90, y: 50) firstitem_pqr678 root.Std_k98ojb.List.FirstItem {}\n        instance(x: 300, y: -100) filter_stu901 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 50) isempty_vwx234 root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 500, y: 0) not_yza567 root.Std_k98ojb.Logic.Not {}\n        instance(x: 700, y: 0) if_bcd890 root.Std_k98ojb.Std.If {}\n\n        input_abc123 -> characters_mno345.input\n        characters_mno345.characters -> firstitem_pqr678.list\n        characters_mno345.characters -> filter_stu901.items\n        firstitem_pqr678.item -> filter_stu901.handler {\n            in(x: 0, y: 0, name: \"character\") property(Char) character_def123\n            out(x: 200, y: 0, name: \"result\") property(Bool) result_ghi456\n\n            instance(x: 100, y: 0) equal_jkl789 root.Std_k98ojb.Logic.Equal {}\n            character_def123 -> equal_jkl789.left\n            firstitem_pqr678.item -> equal_jkl789.right\n            equal_jkl789.result -> result_ghi456\n        }\n        filter_stu901.output_list -> isempty_vwx234.list\n        isempty_vwx234.isEmpty -> not_yza567.input\n        not_yza567.output -> if_bcd890.predicate\n        if_bcd890.value -> out_ghi789\n        execute_def456 -> if_bcd890.execute\n        if_bcd890.then -> continue_jkl012\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all characters in the string are the same.\") all_characters_same {\n        in(x: 50, y: 50, name: \"input\") property(String) input_str\n        in(x: 50, y: 100, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 50, name: \"out\") property(Bool) all_same\n        out(x: 400, y: 100, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 50) characters root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 150) filter root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 50) length root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 150) equal root.Std_k98ojb.Logic.Equal {}\n\n        input_str -> characters.input\n        characters.characters -> filter.items\n\n        func() {\n            in(x: 50, y: 50, name: \"item\") property(String) item\n            in(x: 50, y: 100, name: \"index\") property(Number) index\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out\n\n            instance(x: 100, y: 50) equal_char root.Std_k98ojb.Logic.Equal {}\n\n            characters.characters[0] -> equal_char.left\n            item -> equal_char.right\n            equal_char.result -> out\n        } -> filter.handler\n\n        filter.output_list -> length.list\n        length.length -> equal.left\n        1 -> equal.right\n        equal.result -> all_same\n\n        execute -> characters.trigger\n        execute -> filter.trigger\n        execute -> length.trigger\n        execute -> equal.trigger\n\n        equal.result -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 500, y: 100, name: \"result\") property(Bool) result\n\n        instance(x: 200, y: 100) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 100) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) is_empty_node root.Std_k98ojb.List.IsEmpty {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> filter_node.items\n\n        func() {\n            in(x: 100, y: 200, name: \"char\") property(Char) char\n            out(x: 300, y: 200, name: \"output\") property(Bool) output\n\n            instance(x: 200, y: 200) equal_node root.Std_k98ojb.Logic.Equal {}\n\n            characters_node.characters[0] -> equal_node.left\n            char -> equal_node.right\n            equal_node.result -> output\n        } -> filter_node.handler\n\n        filter_node.output_list -> is_empty_node.list\n        is_empty_node.isEmpty -> result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) equal_f11fda root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) getat_b4554f root.Std_k98ojb.List.GetAt {}\n        instance(x: 1812, y: -319) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_f11fda.left\n        for_8cb3f6.index -> getat_b4554f.index\n        characters_6030c9.characters -> getat_b4554f.list\n        getat_b4554f.item -> equal_f11fda.right\n        equal_f11fda.result -> not_80a119.input\n        not_80a119.output -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> if_e19a62.execute\n        if_07b8c7.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_e19a62.else -> for_8cb3f6.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 120, y: -40, name: \"input\") property(String) input_3f5b6a\n        in(x: 120, y: 40, name: \"execute\") trigger() execute_2b7c4d\n\n        out(x: 480, y: -40, name: \"out\") property(Bool) out_7e4c2f\n        out(x: 480, y: 40, name: \"continue\") trigger() continue_5a8b7c\n\n        instance(x: 240, y: -40) characters_4d8e9f root.Std_k98ojb.Strings.Characters {}\n        instance(x: 240, y: 80) firstitem_1a2b3c root.Std_k98ojb.List.FirstItem {}\n        instance(x: 360, y: 0) filter_5f6e7d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 0) isEmpty_3c4d5e root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 720, y: 0) not_6e7f8g root.Std_k98ojb.Logic.Not {}\n\n        input_3f5b6a -> characters_4d8e9f.input\n        characters_4d8e9f.characters -> firstitem_1a2b3c.list\n        characters_4d8e9f.characters -> filter_5f6e7d.items\n        firstitem_1a2b3c.item -> filter_5f6e7d.handler {\n            in(x: -80, y: 0, name: \"character\") property(Char) character_8f9g0h\n            out(x: 80, y: 0, name: \"result\") property(Bool) result_1j2k3l\n\n            instance(x: 0, y: 0) equal_2b3c4d root.Std_k98ojb.Logic.Equal {}\n            character_8f9g0h -> equal_2b3c4d.left\n            firstitem_1a2b3c.item -> equal_2b3c4d.right\n            equal_2b3c4d.result -> result_1j2k3l\n        }\n        filter_5f6e7d.output_list -> isEmpty_3c4d5e.list\n        isEmpty_3c4d5e.isEmpty -> not_6e7f8g.input\n        not_6e7f8g.result -> out_7e4c2f\n        execute_2b7c4d -> continue_5a8b7c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 50, y: 50, name: \"input\") property(String) input_1a2b3c\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) out_7g8h9i\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 150, y: 50) characters_3m4n5o root.Std_k98ojb.Strings.Characters {}\n        instance(x: 150, y: 150) is_empty_6p7q8r root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 150, y: 250) first_item_9s0t1u root.Std_k98ojb.List.FirstItem {}\n        instance(x: 150, y: 350) filter_2v3w4x root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 150, y: 450) length_5y6z7a root.Std_k98ojb.List.Length {}\n        instance(x: 150, y: 550) equal_8b9c0d root.Std_k98ojb.Logic.Equal {}\n\n        input_1a2b3c -> characters_3m4n5o.input\n        characters_3m4n5o.characters -> is_empty_6p7q8r.list\n        characters_3m4n5o.characters -> first_item_9s0t1u.list\n        characters_3m4n5o.characters -> filter_2v3w4x.items\n\n        func() {\n            in(x: -50, y: 50, name: \"item\") property(Char) item_1e2f3g\n            in(x: -50, y: 100, name: \"index\") property(Number) index_4h5i6j\n            in(x: -50, y: 150, name: \"context\") property(Char) context_7k8l9m\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out_0n1o2p\n\n            instance(x: 50, y: 50) equal_3q4r5s root.Std_k98ojb.Logic.Equal {}\n            item_1e2f3g -> equal_3q4r5s.left\n            context_7k8l9m -> equal_3q4r5s.right\n            equal_3q4r5s.result -> out_0n1o2p\n        } -> filter_2v3w4x.handler\n\n        first_item_9s0t1u.item -> filter_2v3w4x.context\n        filter_2v3w4x.output_list -> length_5y6z7a.list\n        characters_3m4n5o.characters -> length_5y6z7a.list\n        length_5y6z7a.length -> equal_8b9c0d.left\n        length_5y6z7a.length -> equal_8b9c0d.right\n\n        is_empty_6p7q8r.isEmpty -> equal_8b9c0d.left\n        equal_8b9c0d.result -> out_7g8h9i\n        execute_4d5e6f -> continue_0j1k2l\n    }\n}"
            ],
            "37": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 161, y: -211, name: \"input\") property(String) input_4f7c1a\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 500, y: -10, name: \"out\") property(Number) out_5d9f1b\n        out(x: 600, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_1a2b3c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) filter_4d5e6f root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 933, y: 25) isnumeric_7g8h9i root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 1121, y: -54) length_0j1k2l root.Std_k98ojb.List.Length {}\n\n        input_4f7c1a -> characters_1a2b3c.input\n        characters_1a2b3c.characters -> filter_4d5e6f.items\n        func() {\n            in(x: -76, y: 46, name: \"character\") property(String) character_3m4n5o\n\n            out(x: 382, y: 19, name: \"isDigit\") property(Bool) isDigit_6p7q8r\n\n            character_3m4n5o -> isnumeric_7g8h9i.input\n            isnumeric_7g8h9i.isNumeric -> isDigit_6p7q8r\n        } -> filter_4d5e6f.handler\n        filter_4d5e6f.output_list -> length_0j1k2l.list\n        length_0j1k2l.length -> out_5d9f1b\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 120, y: -40, name: \"input\") property(String) input_4f3c7d\n        in(x: 120, y: 0, name: \"execute\") trigger() execute_1a3b2c\n\n        out(x: 720, y: -40, name: \"count\") property(Number) count_8b3f2e\n        out(x: 720, y: 0, name: \"continue\") trigger() continue_2b1c3d\n\n        instance(x: 320, y: -80) characters_5f3c7e root.Std_k98ojb.Strings.Characters {}\n        instance(x: 480, y: -80) filter_6a3b2d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 640, y: -80) length_7b3f2f root.Std_k98ojb.List.Length {}\n\n        input_4f3c7d -> characters_5f3c7e.input\n        characters_5f3c7e.characters -> filter_6a3b2d.items\n\n        func() {\n            in(x: -60, y: 20, name: \"char\") property(String) char_3c7d5f\n\n            out(x: 180, y: 20, name: \"is_digit\") property(Bool) is_digit_2d5f3c\n\n            instance(x: 60, y: 20) isnumeric_4b3c7d root.Std_k98ojb.Strings.IsNumeric {}\n\n            char_3c7d5f -> isnumeric_4b3c7d.input\n            isnumeric_4b3c7d.isNumeric -> is_digit_2d5f3c\n        } -> filter_6a3b2d.handler\n\n        filter_6a3b2d.output_list -> length_7b3f2f.list\n        length_7b3f2f.length -> count_8b3f2e\n\n        execute_1a3b2c -> characters_5f3c7e.execute\n        length_7b3f2f.length -> continue_2b1c3d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 64, y: 36, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 474, y: 136, name: \"digit_count\") property(Number) digit_count_4a3f9b\n        out(x: 594, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 192, y: -63) characters_6b3c9d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 512, y: -54) filter_5a8b7d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 852, y: 74) length_2b9c3e root.Std_k98ojb.List.Length {}\n\n        input_f5c03d -> characters_6b3c9d.input\n        characters_6b3c9d.characters -> filter_5a8b7d.items\n\n        func() {\n            in(x: -76, y: 46, name: \"char\") property(String) char_5f51f7\n\n            out(x: 382, y: 19, name: \"is_digit\") property(Bool) is_digit_d0fd24\n\n            instance(x: 106, y: 17) isnumeric_3f8d09 root.Std_k98ojb.Strings.IsNumeric {}\n            char_5f51f7 -> isnumeric_3f8d09.input\n            isnumeric_3f8d09.result -> is_digit_d0fd24\n        } -> filter_5a8b7d.handler\n\n        filter_5a8b7d.output_list -> length_2b9c3e.list\n        length_2b9c3e.length -> digit_count_4a3f9b\n        execute_27b8c3 -> characters_6b3c9d.execute\n        length_2b9c3e.length -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) filter_038fce root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 714, y: -155) length_8cb3f6 root.Std_k98ojb.List.Length {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> filter_038fce.items\n        func() {\n            in(x: -76, y: 46, name: \"char\") property(String) char_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) isnumeric_2f9d09 root.Std_k98ojb.Strings.IsNumeric {}\n            char_5f51f7 -> isnumeric_2f9d09.input\n            isnumeric_2f9d09.isNumeric -> out_d0fd24\n        } -> filter_038fce.handler\n        filter_038fce.output_list -> length_8cb3f6.list\n        length_8cb3f6.length -> out_f3db9f\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) count_digits_f0be66 root.main.count_digits {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 200, y: 100, name: \"input\") property(String) input_str\n        in(x: 200, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"out\") property(Number) out_digit_count\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 400, y: 50) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 400, y: 200) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 350) is_numeric_node root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 600, y: 300) length_node root.Std_k98ojb.List.Length {}\n\n        input_str -> characters_node.input\n        characters_node.characters -> filter_node.items\n\n        func() {\n            in(x: 50, y: 50, name: \"char\") property(String) char_input\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out_is_digit\n\n            char_input -> is_numeric_node.input\n            is_numeric_node.result -> out_is_digit\n        } -> filter_node.handler\n\n        filter_node.output_list -> length_node.list\n        length_node.length -> out_digit_count\n\n        execute_trigger -> characters_node.trigger\n        characters_node.done -> filter_node.trigger\n        filter_node.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 254, y: -12, name: \"input\") property(String) input_5f8d2c\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_3c9b7f\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_1a4b8f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_4a9f3d\n\n        instance(x: 452, y: -150) characters_8b3c5f root.Std_k98ojb.Strings.Characters {}\n        instance(x: 713, y: -48) filter_3a8b2d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1085, y: 45) length_5b7f4c root.Std_k98ojb.List.Length {}\n\n        input_5f8d2c -> characters_8b3c5f.input\n        characters_8b3c5f.characters -> filter_3a8b2d.items\n        func() {\n            in(x: -76, y: 46, name: \"char\") property(String) char_9f8c7d\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_4b9f8e\n\n            instance(x: 106, y: 17) isnumeric_3f8c9d root.Std_k98ojb.Strings.IsNumeric {}\n            char_9f8c7d -> isnumeric_3f8c9d.input\n            isnumeric_3f8c9d.result -> out_4b9f8e\n        } -> filter_3a8b2d.handler\n        filter_3a8b2d.output_list -> length_5b7f4c.list\n        length_5b7f4c.length -> out_1a4b8f\n        execute_3c9b7f -> continue_4a9f3d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 156, y: -82, name: \"input\") property(String) input_1a2b3c\n        in(x: 156, y: -32, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 536, y: -82, name: \"out\") property(Number) out_7g8h9i\n        out(x: 536, y: -32, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 368, y: -300) characters_3m4n5o root.Std_k98ojb.Strings.Characters {}\n        instance(x: 768, y: -150) filter_6p7q8r root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1168, y: -82) length_9s0t1u root.Std_k98ojb.List.Length {}\n\n        input_1a2b3c -> characters_3m4n5o.input\n        characters_3m4n5o.characters -> filter_6p7q8r.items\n\n        func() {\n            in(x: -76, y: 46, name: \"char\") property(String) char_2v3w4x\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_5y6z7a\n\n            instance(x: 106, y: 17) isnumeric_8b9c0d root.Std_k98ojb.Strings.IsNumeric {}\n            char_2v3w4x -> isnumeric_8b9c0d.input\n            isnumeric_8b9c0d.isNumeric -> out_5y6z7a\n        } -> filter_6p7q8r.handler\n\n        filter_6p7q8r.output_list -> length_9s0t1u.list\n        length_9s0t1u.length -> out_7g8h9i\n        execute_4d5e6f -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 154, y: -55, name: \"input\") property(String) input_2a9d3b\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_3d9f2c\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_60c9a3 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) filter_8cb3f6 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1121, y: -54) length_07b8c7 root.Std_k98ojb.List.Length {}\n\n        input_2a9d3b -> characters_60c9a3.input\n        characters_60c9a3.characters -> filter_8cb3f6.items\n        func() {\n            in(x: -76, y: 46, name: \"char\") property(String) char_5f51f7\n\n            out(x: 382, y: 19, name: \"is_digit\") property(Bool) is_digit_d0fd24\n\n            instance(x: 106, y: 17) isnumeric_2f9d09 root.Std_k98ojb.Strings.IsNumeric {}\n            char_5f51f7 -> isnumeric_2f9d09.input\n            isnumeric_2f9d09.result -> is_digit_d0fd24\n        } -> filter_8cb3f6.handler\n        filter_8cb3f6.output_list -> length_07b8c7.list\n        length_07b8c7.length -> out_3d9f2c\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 50, y: 50, name: \"input\") property(String) input_str\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 350, y: 50, name: \"digit_count\") property(Number) digit_count\n        out(x: 350, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 50) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 150, y: 150) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 250, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 250, y: 150) is_numeric_node root.Std_k98ojb.Strings.IsNumeric {}\n\n        input_str -> characters_node.input\n        characters_node.characters -> filter_node.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char\n\n            out(x: 150, y: 50, name: \"is_digit\") property(Bool) is_digit\n\n            char -> is_numeric_node.input\n            is_numeric_node.result -> is_digit\n        } -> filter_node.handler\n\n        filter_node.output_list -> length_node.list\n        length_node.length -> digit_count\n\n        execute_trigger -> characters_node.trigger\n        length_node.length -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 120, y: 40, name: \"input\") property(String) input_8c6f4d\n        in(x: 120, y: 80, name: \"execute\") trigger() execute_2a9f6c\n\n        out(x: 380, y: 40, name: \"digit_count\") property(Number) digit_count_5e8c3f\n        out(x: 380, y: 80, name: \"continue\") trigger() continue_3b2f7d\n\n        instance(x: 220, y: 40) characters_4d5f6a root.Std_k98ojb.Strings.Characters {}\n        instance(x: 220, y: 120) filter_3f7b9d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 320, y: 40) isnumeric_5d8f4b root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 320, y: 120) length_6f9e3c root.Std_k98ojb.List.Length {}\n\n        input_8c6f4d -> characters_4d5f6a.input\n        characters_4d5f6a.characters -> filter_3f7b9d.items\n        func() {\n            in(x: 60, y: 20, name: \"character\") property(String) character_1a2b3c\n\n            out(x: 180, y: 20, name: \"is_digit\") property(Bool) is_digit_4e5f6d\n\n            character_1a2b3c -> isnumeric_5d8f4b.input\n            isnumeric_5d8f4b.result -> is_digit_4e5f6d\n        } -> filter_3f7b9d.handler\n        filter_3f7b9d.output_list -> length_6f9e3c.list\n        length_6f9e3c.length -> digit_count_5e8c3f\n        execute_2a9f6c -> continue_3b2f7d\n    }\n}"
            ],
            "38": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 100, y: 100, name: \"n\") property(Number) n_input\n\n        out(x: 500, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 100) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 100) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) map_fourth_power root.Std_k98ojb.Iteration.Map {}\n        instance(x: 600, y: 100) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        generaterange_odd.list -> filter_odd.items\n\n        func() {\n            in(x: -100, y: 100, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 100, name: \"result\") property(Bool) result_output\n\n            instance(x: 0, y: 100) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 50, y: 100) equal_odd root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> equal_odd.left\n            1 -> equal_odd.right\n            equal_odd.result -> result_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_fourth_power.items\n\n        func() {\n            in(x: -100, y: 100, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 100, name: \"result\") property(Number) result_output\n\n            instance(x: 0, y: 100) pow_fourth root.Std_k98ojb.Math.Pow {}\n\n            item_input -> pow_fourth.x\n            4 -> pow_fourth.y\n            pow_fourth.result -> result_output\n        } -> map_fourth_power.handler\n\n        map_fourth_power.output_list -> reduce_sum.items\n\n        func() {\n            in(x: -100, y: 100, name: \"acc\") property(Number) acc_input\n            in(x: -100, y: 150, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 100, name: \"result\") property(Number) result_output\n\n            instance(x: 0, y: 100) add_sum root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_sum.first\n            item_input -> add_sum.second\n            add_sum.result -> result_output\n        } -> reduce_sum.handler\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 120, y: -30, name: \"n\") property(Number) n_input\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: -50) generaterange root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 0) filter_odds root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 50) pow_fourth root.Std_k98ojb.Iteration.Map {}\n        instance(x: 800, y: 100) sum_powers root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange.from\n        n_input -> generaterange.to\n        generaterange.list -> filter_odds.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n            out(x: 100, y: 0, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 0) modulo root.Std_k98ojb.Math.Modulo {}\n            instance(x: 200, y: 0) equal_zero root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo.value\n            2 -> modulo.divisor\n            modulo.result -> equal_zero.left\n            0 -> equal_zero.right\n            equal_zero.result -> is_odd_output\n        } -> filter_odds.handler\n\n        filter_odds.output_list -> pow_fourth.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n            out(x: 100, y: 0, name: \"fourth_power\") property(Number) fourth_power_output\n\n            instance(x: 0, y: 0) power root.Std_k98ojb.Math.Pow {}\n\n            item_input -> power.x\n            4 -> power.y\n            power.result -> fourth_power_output\n        } -> pow_fourth.handler\n\n        pow_fourth.output_list -> sum_powers.items\n\n        func() {\n            in(x: -100, y: 0, name: \"acc\") property(Number) acc_input\n            in(x: -100, y: 50, name: \"item\") property(Number) item_input\n            out(x: 100, y: 0, name: \"new_acc\") property(Number) new_acc_output\n\n            instance(x: 0, y: 0) add root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add.first\n            item_input -> add.second\n            add.result -> new_acc_output\n        } -> sum_powers.reducer\n\n        0 -> sum_powers.initial\n        sum_powers.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 100, y: 50, name: \"n\") property(Number) n_input\n\n        out(x: 700, y: 50, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 50) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 50) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 50) map_fourth_power root.Std_k98ojb.Iteration.Map {}\n        instance(x: 800, y: 50) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        generaterange_odd.list -> filter_odd.items\n\n        func() {\n            in(x: 50, y: 50, name: \"number\") property(Number) number_input\n\n            out(x: 200, y: 50, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 100, y: 50) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 150, y: 50) equal_one root.Std_k98ojb.Logic.Equal {}\n\n            number_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> equal_one.left\n            1 -> equal_one.right\n            equal_one.result -> is_odd_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_fourth_power.items\n\n        func() {\n            in(x: 50, y: 50, name: \"number\") property(Number) number_input\n\n            out(x: 200, y: 50, name: \"fourth_power\") property(Number) fourth_power_output\n\n            instance(x: 100, y: 50) power_four root.Std_k98ojb.Math.Pow {}\n\n            number_input -> power_four.x\n            4 -> power_four.y\n            power_four.result -> fourth_power_output\n        } -> map_fourth_power.handler\n\n        map_fourth_power.output_list -> reduce_sum.items\n\n        func() {\n            in(x: 50, y: 50, name: \"acc\") property(Number) acc_input\n            in(x: 50, y: 100, name: \"number\") property(Number) number_input\n\n            out(x: 200, y: 75, name: \"sum\") property(Number) sum_output\n\n            instance(x: 100, y: 75) add_numbers root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_numbers.first\n            number_input -> add_numbers.second\n            add_numbers.result -> sum_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 300, y: -50, name: \"n\") property(Number) n_input\n        in(x: 300, y: 0, name: \"execute\") trigger() execute_trigger\n\n        out(x: 800, y: 0, name: \"sum\") property(Number) sum_output\n        out(x: 800, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 500, y: -50) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 500, y: 50) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 700, y: -50) map_fourth_power root.Std_k98ojb.Iteration.Map {}\n        instance(x: 700, y: 50) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        generaterange_odd.list -> filter_odd.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n            out(x: 100, y: 0, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 0) modulo_check root.Std_k98ojb.Math.Modulo {}\n            instance(x: 50, y: 0) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n\n            item_input -> modulo_check.value\n            2 -> modulo_check.divisor\n            modulo_check.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> is_odd_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_fourth_power.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n            out(x: 100, y: 0, name: \"fourth_power\") property(Number) fourth_power_output\n\n            instance(x: 0, y: 0) power_four root.Std_k98ojb.Math.Pow {}\n\n            item_input -> power_four.x\n            4 -> power_four.y\n            power_four.result -> fourth_power_output\n        } -> map_fourth_power.handler\n\n        map_fourth_power.output_list -> reduce_sum.items\n\n        func() {\n            in(x: -100, y: 0, name: \"accumulated\") property(Number) accumulated_input\n            in(x: -100, y: 50, name: \"current\") property(Number) current_input\n            out(x: 100, y: 0, name: \"sum\") property(Number) sum_output\n\n            instance(x: 0, y: 0) add_numbers root.Std_k98ojb.Math.Add {}\n\n            accumulated_input -> add_numbers.first\n            current_input -> add_numbers.second\n            add_numbers.result -> sum_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n        execute_trigger -> generaterange_odd.reset\n        reduce_sum.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 72, y: 52, name: \"n\") property(Number) n_2c6a0f\n        in(x: 72, y: 120, name: \"execute\") trigger() execute_6f2a0f\n\n        out(x: 548, y: 120, name: \"sum\") property(Number) sum_3f7a0f\n        out(x: 548, y: 180, name: \"continue\") trigger() continue_7b2a0f\n\n        instance(x: 220, y: 50) generaterange_12b4f0 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 50) map_84c7f0 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 700, y: 50) reduce_91a8f0 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 920, y: 50) add_15d7f0 root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_12b4f0.from\n        n_2c6a0f -> generaterange_12b4f0.to\n        generaterange_12b4f0.list -> map_84c7f0.items\n\n        func() {\n            in(x: -80, y: 40, name: \"item\") property(Number) item_0a6f0f\n\n            out(x: 380, y: 40, name: \"out\") property(Number) out_1b7f0f\n\n            instance(x: 120, y: 40) mul_25f7f0 root.Std_k98ojb.Math.Mul {}\n            instance(x: 220, y: 40) mul_36g7f0 root.Std_k98ojb.Math.Mul {}\n            instance(x: 320, y: 40) mul_47h7f0 root.Std_k98ojb.Math.Mul {}\n\n            item_0a6f0f -> mul_25f7f0.first\n            item_0a6f0f -> mul_25f7f0.second\n            mul_25f7f0.result -> mul_36g7f0.first\n            item_0a6f0f -> mul_36g7f0.second\n            mul_36g7f0.result -> mul_47h7f0.first\n            item_0a6f0f -> mul_47h7f0.second\n            mul_47h7f0.result -> out_1b7f0f\n        } -> map_84c7f0.handler\n\n        map_84c7f0.output_list -> reduce_91a8f0.items\n\n        func() {\n            in(x: -80, y: 40, name: \"accumulated\") property(Number) accumulated_2c8f0f\n            in(x: -80, y: 100, name: \"item\") property(Number) item_3d9f0f\n\n            out(x: 380, y: 70, name: \"out\") property(Number) out_4eaf0f\n\n            instance(x: 120, y: 70) add_58f7f0 root.Std_k98ojb.Math.Add {}\n\n            accumulated_2c8f0f -> add_58f7f0.first\n            item_3d9f0f -> add_58f7f0.second\n            add_58f7f0.result -> out_4eaf0f\n        } -> reduce_91a8f0.reducer\n\n        0 -> reduce_91a8f0.initial\n        reduce_91a8f0.result -> sum_3f7a0f\n        execute_6f2a0f -> reduce_91a8f0.execute\n        reduce_91a8f0.done -> continue_7b2a0f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 154, y: -45, name: \"n\") property(Number) n_2a8f3b\n        in(x: 154, y: -145, name: \"execute\") trigger() execute_3b7f8d\n\n        out(x: 750, y: 120, name: \"sum\") property(Number) sum_4c9f3e\n        out(x: 900, y: 120, name: \"continue\") trigger() continue_9b8a6d\n\n        instance(x: 390, y: -75) generaterange_6b7d9f root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 590, y: -25) map_3f8b6e root.Std_k98ojb.Iteration.Map {}\n        instance(x: 800, y: 25) reduce_5f9c7e root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 600, y: 250) add_4f7b8d root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_6b7d9f.from\n        n_2a8f3b -> generaterange_6b7d9f.to\n        generaterange_6b7d9f.list -> map_3f8b6e.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_8f9d8e root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * i - 1) ^ 4\"\n            }\n            element_5f51f7 -> expression_8f9d8e.gen_0\n            expression_8f9d8e.result -> out_d0fd24\n        } -> map_3f8b6e.handler\n\n        map_3f8b6e.output_list -> reduce_5f9c7e.items\n\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 96, name: \"current\") property(Number) current_6f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) add_8f9d8e root.Std_k98ojb.Math.Add {}\n            accumulated_5f51f7 -> add_8f9d8e.first\n            current_6f51f7 -> add_8f9d8e.second\n            add_8f9d8e.result -> out_d0fd24\n        } -> reduce_5f9c7e.reducer\n\n        0 -> reduce_5f9c7e.initialValue\n        reduce_5f9c7e.result -> sum_4c9f3e\n        reduce_5f9c7e.done -> continue_9b8a6d\n        execute_3b7f8d -> reduce_5f9c7e.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 354, y: -53, name: \"n\") property(Number) n_input\n\n        out(x: 1748, y: -10, name: \"sum\") property(Number) sum_output\n\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) reduce_07b8c7 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1504, y: -400) pow_b720d7 root.Std_k98ojb.Math.Pow {}\n\n        1 -> generaterange_038fce.from\n        n_input -> generaterange_038fce.to\n        generaterange_038fce.list -> for_8cb3f6.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * i - 1)\"\n            }\n            element_5f51f7 -> expression_2f9d09.gen_0\n            expression_2f9d09.result -> out_d0fd24\n        } -> for_8cb3f6.handler\n\n        for_8cb3f6.item -> pow_b720d7.x\n        4 -> pow_b720d7.y\n        pow_b720d7.result -> reduce_07b8c7.item\n\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated\n            in(x: 76, y: 46, name: \"value\") property(Number) value\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            accumulated -> add_2f9d09.first\n            value -> add_2f9d09.second\n            add_2f9d09.result -> out_d0fd24\n        } -> reduce_07b8c7.reducer\n\n        0 -> reduce_07b8c7.initial\n        reduce_07b8c7.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 154, y: -51, name: \"n\") property(Number) n_1a5c1d\n        in(x: 150, y: -192, name: \"execute\") trigger() execute_8b3f9d\n\n        out(x: 1088, y: 46, name: \"sum\") property(Number) sum_2f9d3f\n        out(x: 1124, y: 177, name: \"continue\") trigger() continue_7c3f9d\n\n        instance(x: 362, y: -172) generaterange_4b3f9d root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 562, y: -48) map_8c3f9d root.Std_k98ojb.Iteration.Map {}\n        instance(x: 862, y: 51) reduce_9d3f9d root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 662, y: -182) expression_7c3f9d root.Std_k98ojb.Math.Expression {\n            expression: \"(2 * i - 1) ^ 4\"\n        }\n\n        1 -> generaterange_4b3f9d.from\n        n_1a5c1d -> generaterange_4b3f9d.to\n        generaterange_4b3f9d.list -> map_8c3f9d.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1) ^ 4\"\n            }\n            element_5f51f7 -> expression_2f9d09.gen_0\n            expression_2f9d09.result -> out_d0fd24\n        } -> map_8c3f9d.handler\n        map_8c3f9d.output_list -> reduce_9d3f9d.items\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 76, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) add_2f9d09 root.Std_k98ojb.Math.Add {}\n            acc_5f51f7 -> add_2f9d09.first\n            value_5f51f7 -> add_2f9d09.second\n            add_2f9d09.result -> out_d0fd24\n        } -> reduce_9d3f9d.reducer\n        0 -> reduce_9d3f9d.initial\n        reduce_9d3f9d.result -> sum_2f9d3f\n        execute_8b3f9d -> reduce_9d3f9d.reset\n        reduce_9d3f9d.done -> continue_7c3f9d\n    }\n\n    \n\n    instance(x: -189, y: 222) sum_of_fourth_power_of_odds_f0be66 root.main.sum_of_fourth_power_of_odds {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 50, y: 50, name: \"n\") property(Number) n_input\n\n        out(x: 400, y: 50, name: \"sum\") property(Number) sum_output\n\n        instance(x: 150, y: 50) generaterange_1 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 50) map_1 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 550, y: 50) reduce_1 root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_1.from\n        n_input -> generaterange_1.to\n        generaterange_1.list -> map_1.items\n\n        func() {\n            in(x: 50, y: 150, name: \"odd_number\") property(Number) odd_number\n\n            out(x: 200, y: 150, name: \"fourth_power\") property(Number) fourth_power\n\n            instance(x: 100, y: 150) expression_1 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * odd_number - 1) ^ 4\"\n            }\n\n            odd_number -> expression_1.gen_0\n            expression_1.result -> fourth_power\n        } -> map_1.handler\n\n        map_1.output_list -> reduce_1.items\n\n        func() {\n            in(x: 300, y: 150, name: \"acc\") property(Number) acc\n            in(x: 300, y: 200, name: \"val\") property(Number) val\n\n            out(x: 450, y: 175, name: \"sum\") property(Number) sum\n\n            instance(x: 350, y: 175) add_1 root.Std_k98ojb.Math.Add {}\n\n            acc -> add_1.first\n            val -> add_1.second\n            add_1.result -> sum\n        } -> reduce_1.reducer\n\n        0 -> reduce_1.initial\n        reduce_1.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 161, y: -211, name: \"n\") property(Number) n_7f8a9b\n        in(x: 161, y: -111, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"sum\") property(Number) sum_8d4f5e\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) reduce_1a9f6b root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) pow_4th_7f2b3c root.Std_k98ojb.Math.Pow {\n            y: 4\n        }\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_038fce.from\n        n_7f8a9b -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_odd_4e9b8f root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * n - 1)\"\n            }\n            element_5f51f7 -> expression_odd_4e9b8f.n\n            expression_odd_4e9b8f.result -> out_d0fd24\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_1a9f6b.items\n\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 146, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) add_reduce_4e9b8f root.Std_k98ojb.Math.Add {}\n\n            value_5f51f7 -> pow_4th_7f2b3c.x\n            pow_4th_7f2b3c.result -> add_reduce_4e9b8f.first\n            acc_5f51f7 -> add_reduce_4e9b8f.second\n            add_reduce_4e9b8f.result -> out_d0fd24\n        } -> reduce_1a9f6b.reducer\n\n        0 -> reduce_1a9f6b.initial\n        reduce_1a9f6b.result -> sum_8d4f5e\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) sum_of_fourth_power_of_odds_f0be66 root.main.sum_of_fourth_power_of_odds {}\n}"
            ],
            "46": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") cube_surface_area {\n        in(x: 154, y: -53, name: \"side_length\") property(Number) side_length_9c7f2d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 774, y: -10, name: \"surface_area\") property(Number) surface_area_7b9f1a\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 500, y: -50) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 500, y: 50) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        side_length_9c7f2d -> mul_1.first\n        side_length_9c7f2d -> mul_1.second\n        mul_1.result -> mul_2.first\n        6 -> mul_2.second\n        mul_2.result -> surface_area_7b9f1a\n\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 354, y: -53, name: \"side_length\") property(Number) side_length_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"surface_area\") property(Number) surface_area_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) expression_038fce root.Std_k98ojb.Math.Expression {\n            expression: \"6 * (side_length * side_length)\"\n        }\n\n        execute_27b8c3 -> expression_038fce.execute\n        side_length_f5c03d -> expression_038fce.side_length\n        expression_038fce.result -> surface_area_f3db9f\n        expression_038fce.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube of a given size.\") cube_surface_area {\n        in(x: 354, y: -53, name: \"side_length\") property(Number) side_length\n\n        out(x: 1748, y: -10, name: \"surface_area\") property(Number) surface_area\n\n        instance(x: 591, y: 74) expression_8f9c7d root.Std_k98ojb.Math.Expression {\n            expression: \"6 * a * a\"\n        }\n        side_length -> expression_8f9c7d.a\n        expression_8f9c7d.result -> surface_area\n    }\n}",
                "module() main {\n    func(doc: \"Finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length_123abc\n        in(x: 200, y: 100, name: \"execute\") trigger() execute_456def\n\n        out(x: 400, y: 100, name: \"surface_area\") property(Number) surface_area_789ghi\n        out(x: 500, y: 100, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: 100) mul_abc123 root.Std_k98ojb.Math.Mul {}\n        instance(x: 300, y: 200) mul_def456 root.Std_k98ojb.Math.Mul {}\n\n        side_length_123abc -> mul_abc123.first\n        side_length_123abc -> mul_abc123.second\n        mul_abc123.result -> mul_def456.first\n        6 -> mul_def456.second\n        mul_def456.result -> surface_area_789ghi\n\n        execute_456def -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 54, y: -53, name: \"side_length\") property(Number) side_length_9f1b0d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: -10, name: \"surface_area\") property(Number) surface_area_f3db9f\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -193) mul_1a2b3c root.Std_k98ojb.Math.Mul {}\n        instance(x: 512, y: -93) mul_4d5e6f root.Std_k98ojb.Math.Mul {}\n\n        side_length_9f1b0d -> mul_1a2b3c.first\n        side_length_9f1b0d -> mul_1a2b3c.second\n        mul_1a2b3c.result -> mul_4d5e6f.first\n        6 -> mul_4d5e6f.second\n        mul_4d5e6f.result -> surface_area_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "module() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 60, y: 30, name: \"side_length\") property(Number) side_length_1a2b3c\n        in(x: 60, y: 60, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 260, y: 30, name: \"surface_area\") property(Number) surface_area_7g8h9i\n        out(x: 260, y: 60, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 160, y: 30) expression_3m4n5o root.Std_k98ojb.Math.Expression {\n            expression: \"6 * side_length * side_length\"\n        }\n\n        execute_4d5e6f -> expression_3m4n5o.execute\n        side_length_1a2b3c -> expression_3m4n5o.gen_0\n        expression_3m4n5o.result -> surface_area_7g8h9i\n        expression_3m4n5o.done -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 354, y: -53, name: \"side_length\") property(Number) side_length_1a2b3c\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"surface_area\") property(Number) surface_area_4d5e6f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 933, y: 25) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        6 -> mul_1.first\n        side_length_1a2b3c -> mul_1.second\n        mul_1.result -> mul_2.first\n        side_length_1a2b3c -> mul_2.second\n        mul_2.result -> surface_area_4d5e6f\n\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 100, y: 50, name: \"side_length\") property(Number) side_length_1a2b3c\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 300, y: 50, name: \"surface_area\") property(Number) surface_area_7g8h9i\n        out(x: 350, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 200, y: 50) mul_3m4n5o root.Std_k98ojb.Math.Mul {}\n        instance(x: 250, y: 50) mul_6p7q8r root.Std_k98ojb.Math.Mul {}\n\n        side_length_1a2b3c -> mul_3m4n5o.first\n        side_length_1a2b3c -> mul_3m4n5o.second\n        mul_3m4n5o.result -> mul_6p7q8r.first\n        6 -> mul_6p7q8r.second\n        mul_6p7q8r.result -> surface_area_7g8h9i\n\n        execute_4d5e6f -> continue_0j1k2l\n    }\n}",
                "module() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") surface_area_of_cube {\n        in(x: 354, y: -53, name: \"side_length\") property(Number) side_length_abc123\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_xyz789\n\n        out(x: 1748, y: -10, name: \"surface_area\") property(Number) surface_area_def456\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_ghi012\n\n        instance(x: 714, y: -155) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 933, y: 25) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        side_length_abc123 -> mul_1.first\n        side_length_abc123 -> mul_1.second\n        mul_1.result -> mul_2.first\n        6 -> mul_2.second\n        mul_2.result -> surface_area_def456\n\n        execute_xyz789 -> continue_ghi012\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 150, y: 50, name: \"side_length\") property(Number) side_length_1a2b3c\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 350, y: 50, name: \"surface_area\") property(Number) surface_area_7g8h9i\n        out(x: 350, y: 100, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 250, y: 50) expression_3x4y5z root.Std_k98ojb.Math.Expression {\n            expression: \"6 * side_length * side_length\"\n        }\n\n        side_length_1a2b3c -> expression_3x4y5z.side_length\n        expression_3x4y5z.result -> surface_area_7g8h9i\n        execute_4d5e6f -> continue_0j1k2l\n    }\n}"
            ],
            "19": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 100, y: 100, name: \"input\") property(List) input_list\n\n        out(x: 500, y: 100, name: \"difference\") property(Number) difference\n\n        instance(x: 300, y: 50) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 300, y: 150) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 400, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_node.list\n        input_list -> min_node.list\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n        sub_node.result -> difference\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 154, y: -31, name: \"input_list\") property(List) input_list_f5c03d\n        in(x: 154, y: 70, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 440, y: 0, name: \"difference\") property(Number) difference_f3db9f\n        out(x: 440, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 320, y: -180) max_6030c9 root.Std_k98ojb.List.Max {}\n        instance(x: 320, y: -60) min_038fce root.Std_k98ojb.List.Min {}\n        instance(x: 600, y: -120) sub_f11fda root.Std_k98ojb.Math.Sub {}\n\n        input_list_f5c03d -> max_6030c9.list\n        input_list_f5c03d -> min_038fce.list\n        max_6030c9.max -> sub_f11fda.first\n        min_038fce.min -> sub_f11fda.second\n        sub_f11fda.result -> difference_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") difference_max_min {\n        in(x: 104, y: -54, name: \"input\") property(List<Number>) input_8f7b4e\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 348, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 494, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) max_6030c9 root.Std_k98ojb.List.Max {}\n        instance(x: 591, y: 74) min_038fce root.Std_k98ojb.List.Min {}\n        instance(x: 933, y: 25) sub_f11fda root.Std_k98ojb.Math.Sub {}\n\n        input_8f7b4e -> max_6030c9.list\n        input_8f7b4e -> min_038fce.list\n        max_6030c9.max -> sub_f11fda.first\n        min_038fce.min -> sub_f11fda.second\n        sub_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) difference_max_min_f0be66 root.main.difference_max_min {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 180, y: -30, name: \"input\") property(List) input_list\n\n        out(x: 620, y: -30, name: \"out\") property(Number) difference\n\n        instance(x: 300, y: -150) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 300, y: 0) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 480, y: -30) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_node.list\n        input_list -> min_node.list\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n        sub_node.result -> difference\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") difference_largest_smallest {\n        in(x: 72, y: 60, name: \"input\") property(List<Number>) input_list\n\n        out(x: 720, y: 60, name: \"out\") property(Number) output_difference\n\n        instance(x: 240, y: 60) max_instance root.Std_k98ojb.List.Max {}\n        instance(x: 240, y: 180) min_instance root.Std_k98ojb.List.Min {}\n        instance(x: 480, y: 120) sub_instance root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_instance.list\n        input_list -> min_instance.list\n        max_instance.max -> sub_instance.first\n        min_instance.min -> sub_instance.second\n        sub_instance.result -> output_difference\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") difference_max_min {\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) max_038fce root.Std_k98ojb.List.Max {}\n        instance(x: 933, y: 25) min_f11fda root.Std_k98ojb.List.Min {}\n        instance(x: 1121, y: -54) sub_07b8c7 root.Std_k98ojb.Math.Sub {}\n\n        input_f5c03d -> max_038fce.list\n        input_f5c03d -> min_f11fda.list\n        max_038fce.max -> sub_07b8c7.first\n        min_f11fda.min -> sub_07b8c7.second\n        sub_07b8c7.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 120, y: 60, name: \"input\") property(List) input_list\n\n        out(x: 460, y: 60, name: \"difference\") property(Number) difference\n\n        instance(x: 240, y: 20) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 240, y: 100) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 360, y: 60) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_node.list\n        input_list -> min_node.list\n\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n\n        sub_node.result -> difference\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 100, y: 50, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 500, y: 50, name: \"difference\") property(Number) difference\n\n        instance(x: 200, y: 100) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 200, y: 200) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 400, y: 150) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_node.list\n        input_list -> min_node.list\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n        sub_node.result -> difference\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 153, y: -62, name: \"input_list\") property(List<Number>) input_list_8cbb3e\n        in(x: 165, y: -225, name: \"execute\") trigger() execute_4f2c9a\n\n        out(x: 1834, y: -12, name: \"difference\") property(Number) difference_3f5a7b\n        out(x: 1990, y: 120, name: \"continue\") trigger() continue_6d5b2a\n\n        instance(x: 412, y: -186) max_9f7a4d root.Std_k98ojb.List.Max {}\n        instance(x: 633, y: -47) min_5b3e9c root.Std_k98ojb.List.Min {}\n        instance(x: 1056, y: -35) sub_7b8c4e root.Std_k98ojb.Math.Sub {}\n        input_list_8cbb3e -> max_9f7a4d.list\n        input_list_8cbb3e -> min_5b3e9c.list\n        max_9f7a4d.max -> sub_7b8c4e.first\n        min_5b3e9c.min -> sub_7b8c4e.second\n        sub_7b8c4e.result -> difference_3f5a7b\n        execute_4f2c9a -> continue_6d5b2a\n    }\n\n    \n\n    instance(x: -192, y: 214) find_difference_8f3a5b root.main.find_difference {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 150, y: 50, name: \"input\") property(List<Number>) input_list\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 550, y: 50, name: \"difference\") property(Number) difference\n        out(x: 550, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 350, y: 50) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 350, y: 150) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 450, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_node.list\n        input_list -> min_node.list\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n        sub_node.result -> difference\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "22": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_f5c03d\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_f3db9f\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 100) modulo_9fba8c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 100) equal_07b8c7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 275, y: 125) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> modulo_9fba8c.value\n        2 -> modulo_9fba8c.divisor\n        modulo_9fba8c.result -> equal_07b8c7.left\n        0 -> equal_07b8c7.right\n        equal_07b8c7.result -> if_e19a62.predicate\n        execute_27b8c3 -> if_e19a62.execute\n        if_e19a62.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_bool\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 200) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 400, y: 150) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.value -> output_bool\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 150) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 200, y: 200) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.predicate -> output_is_even\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n\n        equal_instance.result -> out_is_even\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 50, y: 50, name: \"input\") property(Number) input_number\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 200, y: 50, name: \"out\") property(Bool) out_result\n        out(x: 200, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 100, y: 50) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 150, y: 50) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 150, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.predicate -> out_result\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_1a2b3c\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_7g8h9i\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 200, y: 100) modulo_3m4n5o root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_6p7q8r root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_9s0t1u root.Std_k98ojb.Std.If {}\n\n        input_1a2b3c -> modulo_3m4n5o.value\n        2 -> modulo_3m4n5o.divisor\n        modulo_3m4n5o.result -> equal_6p7q8r.left\n        0 -> equal_6p7q8r.right\n        equal_6p7q8r.result -> if_9s0t1u.predicate\n        if_9s0t1u.value -> out_7g8h9i\n        execute_4d5e6f -> if_9s0t1u.execute\n        if_9s0t1u.then -> continue_0j1k2l\n        if_9s0t1u.else -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_bool\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.value -> output_bool\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_node root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_node root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_node.value\n        2 -> modulo_node.divisor\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n        equal_node.result -> if_node.predicate\n        if_node.value -> out_is_even\n        execute_trigger -> if_node.execute\n        if_node.then -> continue_trigger\n        if_node.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_bool\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 150) equal_instance root.Std_k98ojb.Logic.Equal {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> output_bool\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_f5c03d\n        in(x: 200, y: 200, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 300, name: \"out\") property(Bool) out_f3db9f\n        out(x: 400, y: 400, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 500, y: 500) modulo_038fce root.Std_k98ojb.Math.Modulo {}\n        instance(x: 600, y: 600) equal_8cb3f6 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 700, y: 700) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> modulo_038fce.value\n        2 -> modulo_038fce.divisor\n        modulo_038fce.result -> equal_8cb3f6.left\n        0 -> equal_8cb3f6.right\n        equal_8cb3f6.result -> if_07b8c7.predicate\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> continue_8ba06b\n    }\n}"
            ],
            "23": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) characters_038fce root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) contains_f11fda root.Std_k98ojb.List.Contains {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.List.Add {}\n        instance(x: 1504, y: -400) emptylist_b720d7 root.Std_k98ojb.List.Empty {}\n\n        input_f5c03d -> characters_038fce.input\n        characters_038fce.characters -> for_8cb3f6.items\n        emptylist_b720d7.list -> add_b4554f.list\n        emptylist_b720d7.list -> contains_f11fda.list\n        for_8cb3f6.item -> contains_f11fda.item\n        contains_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.item -> add_b4554f.item\n        add_b4554f.listWithItem -> emptylist_b720d7.list\n        execute_27b8c3 -> for_8cb3f6.reset\n        for_8cb3f6.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 40, y: 40, name: \"input\") property(String) input_0f9c8d\n        in(x: 40, y: 80, name: \"execute\") trigger() execute_1f9c8d\n\n        out(x: 340, y: 40, name: \"out\") property(String) out_2f9c8d\n        out(x: 340, y: 80, name: \"continue\") trigger() continue_3f9c8d\n\n        instance(x: 120, y: 40) characters_4f9c8d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 220, y: 40) find_5f9c8d root.Std_k98ojb.Iteration.Find {}\n        instance(x: 220, y: 120) notempty_6f9c8d root.Std_k98ojb.List.NotEmpty {}\n\n        input_0f9c8d -> characters_4f9c8d.input\n        characters_4f9c8d.characters -> find_5f9c8d.items\n\n        func() {\n            in(x: -80, y: 40, name: \"character\") property(String) character_7f9c8d\n            in(x: -80, y: 80, name: \"index\") property(Number) index_8f9c8d\n\n            out(x: 180, y: 60, name: \"out\") property(Bool) out_9f9c8d\n\n            instance(x: 20, y: 60) slice_af9c8d root.Std_k98ojb.List.Slice {}\n            instance(x: 100, y: 60) contains_bf9c8d root.Std_k98ojb.List.Contains {}\n\n            index_8f9c8d -> slice_af9c8d.start\n            -1 -> slice_af9c8d.end\n            characters_4f9c8d.characters -> slice_af9c8d.list\n            slice_af9c8d.list -> contains_bf9c8d.list\n            character_7f9c8d -> contains_bf9c8d.item\n            contains_bf9c8d.contains -> out_9f9c8d\n        } -> find_5f9c8d.predicate\n\n        find_5f9c8d.item -> out_2f9c8d\n        find_5f9c8d.item -> notempty_6f9c8d.list\n        notempty_6f9c8d.isEmpty -> continue_3f9c8d\n        execute_1f9c8d -> characters_4f9c8d.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") find_first_repeated_character {\n        in(x: 354, y: -53, name: \"input\") property(String) input_string\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_character\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 591, y: 74) characters_instance root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) for_instance root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) contains_instance root.Std_k98ojb.List.Contains {}\n        instance(x: 1121, y: -54) if_instance root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) add_instance root.Std_k98ojb.List.Add {}\n        instance(x: 1812, y: -319) empty_list_instance root.Std_k98ojb.List.Empty {}\n\n        input_string -> characters_instance.input\n        characters_instance.characters -> for_instance.items\n        for_instance.item -> contains_instance.item\n        empty_list_instance.list -> contains_instance.list\n        contains_instance.result -> if_instance.predicate\n        for_instance.onItem -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.value -> out_character\n        if_instance.else -> add_instance.item\n        for_instance.item -> add_instance.item\n        empty_list_instance.list -> add_instance.list\n        add_instance.listWithItem -> empty_list_instance.list\n        for_instance.done -> continue_trigger\n        execute_trigger -> for_instance.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 591, y: 74) is_empty_038fce root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) contains_f11fda root.Std_k98ojb.List.Contains {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) add_b720d7 root.Std_k98ojb.List.Add {}\n        instance(x: 1812, y: -319) is_empty_check_80a119 root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) empty_list_b4554f root.Std_k98ojb.List.Empty {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> for_8cb3f6.items\n        empty_list_b4554f.list -> is_empty_check_80a119.list\n        is_empty_check_80a119.isEmpty -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        for_8cb3f6.item -> contains_f11fda.item\n        is_empty_check_80a119.isEmpty -> contains_f11fda.list\n        contains_f11fda.result -> if_e19a62.predicate\n        if_07b8c7.then -> if_e19a62.execute\n        if_e19a62.then -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> add_b720d7.list\n        for_8cb3f6.item -> add_b720d7.item\n        add_b720d7.listWithItem -> is_empty_check_80a119.list\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -189, y: 222) first_repeated_character_f0be66 root.main.first_repeated_character {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 90, y: 0, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 600, y: 0, name: \"out\") property(String) out_f3db9f\n        out(x: 750, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 300, y: 0) characters_8cb3f6 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 450, y: 0) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 900, y: 0) contains_8cb3f6 root.Std_k98ojb.List.Contains {}\n        instance(x: 1050, y: 0) add_8cb3f6 root.Std_k98ojb.List.Add {}\n        instance(x: 1200, y: 0) if_8cb3f6 root.Std_k98ojb.Std.If {}\n        instance(x: 1350, y: 0) empty_8cb3f6 root.Std_k98ojb.List.Empty {}\n\n        input_f5c03d -> characters_8cb3f6.input\n        characters_8cb3f6.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> contains_8cb3f6.item\n        empty_8cb3f6.list -> contains_8cb3f6.list\n        contains_8cb3f6.result -> if_8cb3f6.predicate\n        for_8cb3f6.onItem -> if_8cb3f6.execute\n        if_8cb3f6.then -> out_f3db9f\n        if_8cb3f6.then -> continue_8ba06b\n        if_8cb3f6.else -> add_8cb3f6.item\n        for_8cb3f6.item -> add_8cb3f6.item\n        add_8cb3f6.listWithItem -> empty_8cb3f6.list\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 50, y: -50, name: \"input\") property(String) input_f5c03d\n        in(x: 100, y: -100, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 0, name: \"out\") property(String) out_f3db9f\n        out(x: 350, y: 50, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: -200) characters_038fce root.Std_k98ojb.Strings.Characters {}\n        instance(x: 400, y: -200) emptylist_8cb3f6 root.Std_k98ojb.List.Empty {}\n        instance(x: 600, y: -200) forloop_80a119 root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: -200) contains_e19a62 root.Std_k98ojb.List.Contains {}\n        instance(x: 1000, y: -200) addtolist_b4554f root.Std_k98ojb.List.Add {}\n        instance(x: 1200, y: -200) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> characters_038fce.input\n        characters_038fce.characters -> forloop_80a119.items\n        emptylist_8cb3f6.list -> forloop_80a119.reset\n        forloop_80a119.item -> contains_e19a62.item\n        emptylist_8cb3f6.list -> contains_e19a62.list\n        contains_e19a62.result -> if_07b8c7.predicate\n        forloop_80a119.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.else -> forloop_80a119.next\n        forloop_80a119.item -> addtolist_b4554f.item\n        emptylist_8cb3f6.list -> addtolist_b4554f.list\n        addtolist_b4554f.listWithItem -> emptylist_8cb3f6.list\n        forloop_80a119.done -> continue_8ba06b\n        execute_27b8c3 -> forloop_80a119.reset\n    }\n\n    \n\n    instance(x: -189, y: 222) first_repeated_character_f0be66 root.main.first_repeated_character {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) characters_038fce root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 933, y: 25) contains_f11fda root.Std_k98ojb.List.Contains {}\n        instance(x: 1504, y: -400) add_b720d7 root.Std_k98ojb.List.Add {}\n        instance(x: 1088, y: -256) empty_b4554f root.Std_k98ojb.List.Empty {}\n\n        input_f5c03d -> characters_038fce.input\n        characters_038fce.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> contains_f11fda.item\n        empty_b4554f.list -> contains_f11fda.list\n        contains_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> out_f3db9f\n        for_8cb3f6.item -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.item -> add_b720d7.item\n        empty_b4554f.list -> add_b720d7.list\n        add_b720d7.listWithItem -> empty_b4554f.list\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"out\") property(String) output_character\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) characters_instance root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 100) empty_list_instance root.Std_k98ojb.List.Empty {}\n        instance(x: 400, y: 100) for_loop_instance root.Std_k98ojb.Std.For {}\n        instance(x: 500, y: 100) contains_instance root.Std_k98ojb.List.Contains {}\n        instance(x: 500, y: 150) add_instance root.Std_k98ojb.List.Add {}\n        instance(x: 700, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_string -> characters_instance.input\n        characters_instance.characters -> for_loop_instance.items\n        empty_list_instance.list -> for_loop_instance.reset\n        empty_list_instance.list -> contains_instance.list\n        for_loop_instance.item -> contains_instance.item\n        contains_instance.result -> if_instance.predicate\n        if_instance.then -> continue_trigger\n        if_instance.value -> output_character\n        for_loop_instance.item -> add_instance.item\n        add_instance.listWithItem -> for_loop_instance.reset\n        if_instance.else -> for_loop_instance.next\n        execute_trigger -> for_loop_instance.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) contains_b720d7 root.Std_k98ojb.List.Contains {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.List.Add {}\n        instance(x: 1496, y: -187) equal_9fba8c root.Std_k98ojb.Logic.Equal {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> contains_b720d7.item\n        contains_b720d7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        for_8cb3f6.item -> out_f3db9f\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.item -> add_b4554f.item\n        add_b4554f.listWithItem -> contains_b720d7.list\n        execute_27b8c3 -> for_8cb3f6.reset\n        for_8cb3f6.done -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) first_repeated_character_f0be66 root.main.first_repeated_character {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 123, y: 45, name: \"input\") property(String) input_string\n\n        out(x: 456, y: 78, name: \"out\") property(String) out_character\n\n        instance(x: 200, y: 100) characters_01 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 150) for_02 root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 200) contains_03 root.Std_k98ojb.List.Contains {}\n        instance(x: 500, y: 250) if_04 root.Std_k98ojb.Std.If {}\n        instance(x: 600, y: 300) add_05 root.Std_k98ojb.List.Add {}\n\n        input_string -> characters_01.input\n        characters_01.characters -> for_02.items\n\n        func() {\n            in(x: -50, y: 0, name: \"character\") property(String) character\n\n            out(x: 150, y: 50, name: \"out\") property(String) out_character\n\n            instance(x: 50, y: 100) contains_06 root.Std_k98ojb.List.Contains {}\n            instance(x: 100, y: 150) if_07 root.Std_k98ojb.Std.If {}\n\n            character -> contains_06.item\n            contains_06.result -> if_07.predicate\n            if_07.then -> out_character\n            if_07.value -> out_character\n        } -> for_02.handler\n\n        for_02.item -> contains_03.item\n        contains_03.result -> if_04.predicate\n        if_04.then -> out_character\n        if_04.value -> out_character\n\n        for_02.item -> add_05.item\n        add_05.listWithItem -> contains_03.list\n\n        List.Empty() -> add_05.list\n    }\n}"
            ],
            "35": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 180, y: -100, name: \"list\") property(List) list_123abc\n        in(x: 180, y: -200, name: \"execute\") trigger() execute_456def\n\n        out(x: 600, y: 0, name: \"secondSmallest\") property(Number) secondSmallest_789ghi\n        out(x: 600, y: 100, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: -100) sort_234mno root.Std_k98ojb.List.Sort {}\n        instance(x: 450, y: -50) getAt_567pqr root.Std_k98ojb.List.GetAt {}\n\n        list_123abc -> sort_234mno.list\n        sort_234mno.sorted -> getAt_567pqr.list\n        1 -> getAt_567pqr.index\n        getAt_567pqr.item -> secondSmallest_789ghi\n        execute_456def -> sort_234mno.execute\n        sort_234mno.done -> getAt_567pqr.execute\n        getAt_567pqr.done -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 100, y: 100, name: \"input_list\") property(List) input_list\n\n        out(x: 500, y: 100, name: \"second_smallest\") property(Number) second_smallest\n\n        instance(x: 300, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 400, y: 100) get_second_item root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> get_second_item.list\n        1 -> get_second_item.index\n        get_second_item.item -> second_smallest\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 100, y: 100, name: \"input_list\") property(List<Number>) input_list\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"second_smallest\") property(Number) second_smallest\n        out(x: 400, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 300, y: 100) get_second_item root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> get_second_item.list\n        1 -> get_second_item.index\n        get_second_item.item -> second_smallest\n\n        execute -> sort_list.trigger\n        sort_list.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 100, y: 50, name: \"input\") property(List<Number>) input_list\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 50, name: \"secondSmallest\") property(Number) second_smallest_output\n        out(x: 500, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) sort_instance root.Std_k98ojb.List.Sort {}\n        instance(x: 350, y: 50) get_at_instance root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_instance.list\n        sort_instance.sorted -> get_at_instance.list\n        1 -> get_at_instance.index\n        get_at_instance.item -> second_smallest_output\n\n        execute_trigger -> sort_instance.execute\n        sort_instance.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 50, y: 50, name: \"list\") property(List<Number>) list_5f6a1c\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_1b2c3d\n\n        out(x: 300, y: 50, name: \"secondSmallest\") property(Number) secondSmallest_8d9e4f\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_9e8f7a\n\n        instance(x: 150, y: 50) sort_1a2b3c root.Std_k98ojb.List.Sort {}\n        instance(x: 200, y: 50) getAt_4d5e6f root.Std_k98ojb.List.GetAt {}\n\n        list_5f6a1c -> sort_1a2b3c.list\n        sort_1a2b3c.sorted -> getAt_4d5e6f.list\n        1 -> getAt_4d5e6f.index\n        getAt_4d5e6f.item -> secondSmallest_8d9e4f\n        execute_1b2c3d -> sort_1a2b3c.execute\n        sort_1a2b3c.done -> continue_9e8f7a\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 200, y: 100, name: \"list\") property(List<Number>) list_input\n        in(x: 200, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 800, y: 100, name: \"second_smallest\") property(Number) second_smallest_output\n        out(x: 800, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 400, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 600, y: 100) get_second_item root.Std_k98ojb.List.GetAt {}\n\n        list_input -> sort_list.list\n        sort_list.sorted -> get_second_item.list\n        1 -> get_second_item.index\n        get_second_item.item -> second_smallest_output\n\n        execute_trigger -> sort_list.trigger\n        sort_list.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 158, y: -64, name: \"input_list\") property(List<Number>) input_list_4a8c5d\n        in(x: 160, y: -182, name: \"execute\") trigger() execute_5f2c8e\n\n        out(x: 1202, y: -10, name: \"second_smallest\") property(Number) second_smallest_8c7f2b\n        out(x: 1348, y: 120, name: \"continue\") trigger() continue_9e7b6d\n\n        instance(x: 382, y: -93) sort_8d9f2c root.Std_k98ojb.List.Sort {}\n        instance(x: 750, y: -51) getat_4f8d3b root.Std_k98ojb.List.GetAt {}\n\n        input_list_4a8c5d -> sort_8d9f2c.list\n        sort_8d9f2c.sorted -> getat_4f8d3b.list\n        1 -> getat_4f8d3b.index\n        getat_4f8d3b.item -> second_smallest_8c7f2b\n        execute_5f2c8e -> continue_9e7b6d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) second_smallest_out\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 591, y: 74) get_second_smallest root.Std_k98ojb.List.GetAt {}\n        instance(x: 933, y: 25) length_check root.Std_k98ojb.List.Length {}\n        instance(x: 714, y: -155) if_length_check root.Std_k98ojb.Std.IfExpression {\n            expression: \"len > 1\"\n        }\n\n        input_list -> sort_list.list\n        sort_list.sorted -> get_second_smallest.list\n        1 -> get_second_smallest.index\n        get_second_smallest.item -> second_smallest_out\n\n        input_list -> length_check.list\n        length_check.length -> if_length_check.len\n        if_length_check.value -> second_smallest_out\n        if_length_check.then -> continue_trigger\n        execute_trigger -> if_length_check.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 100, y: 100, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 500, y: 100, name: \"second_smallest\") property(Number) second_smallest\n\n        instance(x: 200, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 300, y: 100) get_second_item root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> get_second_item.list\n        1 -> get_second_item.index\n        get_second_item.item -> second_smallest\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 250, y: -50, name: \"input\") property(List<Number>) input_list\n        in(x: 250, y: 50, name: \"execute\") trigger() execute_trigger\n\n        out(x: 700, y: 0, name: \"second_smallest\") property(Number) second_smallest\n        out(x: 700, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 450, y: -50) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 550, y: 0) get_second_item root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> get_second_item.list\n        1 -> get_second_item.index\n        get_second_item.item -> second_smallest\n\n        execute_trigger -> sort_list.trigger\n        sort_list.done -> continue_trigger\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "best_params_optimization": "semantic",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": -1,
        "seed": 346,
        "n_generations_per_task": 10,
        "model": "gpt-4o",
        "largest_context": 5183,
        "task_candidates": {
            "7": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element\") has_common_element {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 200, name: \"list2\") property(List) list2\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 200, name: \"result\") property(Bool) result\n        out(x: 400, y: 300, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 150) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 200) not_empty root.Std_k98ojb.List.NotEmpty {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> not_empty.list\n        not_empty.isEmpty -> result\n        execute -> intersection.trigger\n        intersection.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element\") have_common_element {\n        in(x: 134, y: -58, name: \"list1\") property(List) list1_1f9d2a\n        in(x: 134, y: 38, name: \"list2\") property(List) list2_2f9d3b\n        in(x: 134, y: 134, name: \"execute\") trigger() execute_3f9d4c\n\n        out(x: 734, y: 38, name: \"result\") property(Bool) result_4f9d5d\n        out(x: 734, y: 134, name: \"continue\") trigger() continue_5f9d6e\n\n        instance(x: 384, y: 38) intersection_6f9d7f root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 534, y: 38) notempty_7f9d8g root.Std_k98ojb.List.NotEmpty {}\n        instance(x: 634, y: 38) if_8f9d9h root.Std_k98ojb.Std.If {}\n\n        list1_1f9d2a -> intersection_6f9d7f.left\n        list2_2f9d3b -> intersection_6f9d7f.right\n        intersection_6f9d7f.intersect -> notempty_7f9d8g.list\n        notempty_7f9d8g.isEmpty -> if_8f9d9h.input\n        if_8f9d9h.value -> result_4f9d5d\n        execute_3f9d4c -> if_8f9d9h.then\n        if_8f9d9h.then -> continue_5f9d6e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element.\") has_common_element {\n        in(x: 150, y: 100, name: \"list1\") property(List) list1\n        in(x: 150, y: 150, name: \"list2\") property(List) list2\n        in(x: 150, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 150, name: \"result\") property(Bool) result\n        out(x: 500, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: 100) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 350, y: 150) is_not_empty root.Std_k98ojb.List.NotEmpty {}\n        instance(x: 400, y: 200) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"isNotEmpty ? true : false\"\n        }\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> is_not_empty.list\n        is_not_empty.isEmpty -> if_expression.isNotEmpty\n        if_expression.value -> result\n        execute -> if_expression.execute\n        if_expression.then -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element\") has_common_element {\n        in(x: 100, y: 50, name: \"list1\") property(List) list1_123abc\n        in(x: 100, y: 100, name: \"list2\") property(List) list2_456def\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 400, y: 100, name: \"out\") property(Bool) out_jklmno\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_pqrstu\n\n        instance(x: 250, y: 75) intersection_vwxyz root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 125) notempty_abcdef root.Std_k98ojb.List.NotEmpty {}\n\n        list1_123abc -> intersection_vwxyz.left\n        list2_456def -> intersection_vwxyz.right\n        intersection_vwxyz.intersect -> notempty_abcdef.list\n        notempty_abcdef.isEmpty -> out_jklmno\n        execute_789ghi -> intersection_vwxyz.execute\n        notempty_abcdef.isEmpty -> continue_pqrstu\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") has_common_element {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 150, name: \"list2\") property(List) list2\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"result\") property(Bool) result\n        out(x: 400, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 100) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 150) is_empty root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 350, y: 100) not root.Std_k98ojb.Logic.Not {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> is_empty.list\n        is_empty.isEmpty -> not.input\n        not.output -> result\n        execute -> intersection.trigger\n        is_empty.isEmpty -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element\") has_common_element {\n        in(x: 134, y: -53, name: \"list1\") property(List) list1_123abc\n        in(x: 134, y: 50, name: \"list2\") property(List) list2_456def\n        in(x: 134, y: 153, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 600, y: 50, name: \"out\") property(Bool) out_abc123\n        out(x: 600, y: 153, name: \"continue\") trigger() continue_def456\n\n        instance(x: 350, y: 50) intersection_abc123 root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 500, y: 50) isempty_456def root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 700, y: 50) not_789ghi root.Std_k98ojb.Logic.Not {}\n        instance(x: 800, y: 50) if_abc456 root.Std_k98ojb.Std.If {}\n\n        list1_123abc -> intersection_abc123.left\n        list2_456def -> intersection_abc123.right\n        intersection_abc123.intersect -> isempty_456def.list\n        isempty_456def.isEmpty -> not_789ghi.input\n        not_789ghi.output -> if_abc456.predicate\n        if_abc456.value -> out_abc123\n        execute_789ghi -> if_abc456.execute\n        if_abc456.then -> continue_def456\n        if_abc456.else -> continue_def456\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") has_common_element {\n        in(x: 100, y: 50, name: \"list1\") property(List) list1_8b3f5a\n        in(x: 100, y: 150, name: \"list2\") property(List) list2_8b3f5b\n        in(x: 100, y: 250, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 400, y: 100, name: \"out\") property(Bool) out_f3db9f\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 50) intersection_9f7c3a root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 50) notempty_7b2f4c root.Std_k98ojb.List.NotEmpty {}\n\n        list1_8b3f5a -> intersection_9f7c3a.left\n        list2_8b3f5b -> intersection_9f7c3a.right\n        intersection_9f7c3a.intersect -> notempty_7b2f4c.list\n        notempty_7b2f4c.isEmpty -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element.\") has_common_element {\n        in(x: 354, y: -53, name: \"list1\") property(List) list1_123456\n        in(x: 354, y: 47, name: \"list2\") property(List) list2_654321\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) contains_123abc root.Std_k98ojb.List.Contains {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        list1_123456 -> for_8cb3f6.items\n        for_8cb3f6.item -> contains_123abc.item\n        list2_654321 -> contains_123abc.list\n        contains_123abc.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if two lists have at least one common element.\") have_common_element {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1_123abc\n        in(x: 100, y: 150, name: \"list2\") property(List) list2_456def\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_789ghi\n\n        out(x: 400, y: 150, name: \"out\") property(Bool) out_abc123\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_def456\n\n        instance(x: 200, y: 150) intersection_789jkl root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 300, y: 150) notempty_012mno root.Std_k98ojb.List.NotEmpty {}\n\n        list1_123abc -> intersection_789jkl.left\n        list2_456def -> intersection_789jkl.right\n        intersection_789jkl.intersect -> notempty_012mno.list\n        notempty_012mno.isEmpty -> out_abc123\n        execute_789ghi -> intersection_789jkl.trigger\n        intersection_789jkl.done -> continue_def456\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"returns true if two lists have at least one common element\") has_common_element {\n        in(x: 120, y: 40, name: \"list1\") property(List) list1\n        in(x: 120, y: 80, name: \"list2\") property(List) list2\n        in(x: 120, y: 120, name: \"execute\") trigger() execute\n\n        out(x: 320, y: 80, name: \"result\") property(Bool) result\n        out(x: 320, y: 120, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 60) intersection root.Std_k98ojb.Sets.Intersection {}\n        instance(x: 260, y: 60) is_empty root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 300, y: 60) not root.Std_k98ojb.Logic.Not {}\n\n        list1 -> intersection.left\n        list2 -> intersection.right\n        intersection.intersect -> is_empty.list\n        is_empty.isEmpty -> not.input\n        not.output -> result\n        execute -> intersection.trigger\n        is_empty.isEmpty -> continue\n    }\n}"
            ],
            "11": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) sort_038fce root.Std_k98ojb.List.Sort {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(current + 1 != next)\"\n        }\n        instance(x: 2136, y: -356) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n        input_f5c03d -> sort_038fce.list\n        sort_038fce.list -> for_8cb3f6.items\n        for_8cb3f6.index -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> expression_b720d7.gen_1\n        for_8cb3f6.item -> expression_b720d7.gen_0\n        expression_b720d7.result -> not_80a119.input\n        not_80a119.output -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_07b8c7.value -> out_f3db9f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 160, y: -40, name: \"input\") property(List<Number>) input_list\n        in(x: 160, y: 0, name: \"execute\") trigger() execute_trigger\n\n        out(x: 580, y: -40, name: \"out\") property(Bool) out_is_consecutive\n        out(x: 580, y: 0, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 360, y: -80) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 360, y: 40) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 760, y: -80) sub_expr root.Std_k98ojb.Math.Sub {}\n        instance(x: 960, y: -80) equal_expr root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1160, y: -80) if_check root.Std_k98ojb.Std.If {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> for_loop.items\n        for_loop.index -> sub_expr.first\n        1 -> sub_expr.second\n        sub_expr.result -> equal_expr.left\n        for_loop.index -> equal_expr.right\n        equal_expr.result -> if_check.predicate\n        if_check.then -> continue_trigger\n        if_check.else -> out_is_consecutive\n        for_loop.onItem -> if_check.execute\n        execute_trigger -> for_loop.reset\n        false -> out_is_consecutive\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 174, y: -24, name: \"input\") property(List<Number>) input_abc123\n        in(x: 174, y: -124, name: \"execute\") trigger() execute_def456\n\n        out(x: 174, y: 100, name: \"out\") property(Bool) out_ghi789\n        out(x: 174, y: 200, name: \"continue\") trigger() continue_jkl012\n\n        instance(x: 350, y: -50) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 600, y: -50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 850, y: -50) sub_expression root.Std_k98ojb.Math.Sub {}\n        instance(x: 1100, y: -50) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1350, y: -50) if_check root.Std_k98ojb.Std.If {}\n\n        input_abc123 -> sort_list.list\n        sort_list.sorted -> for_loop.items\n        for_loop.item -> sub_expression.first\n        for_loop.index -> sub_expression.second\n        1 -> sub_expression.second\n        sub_expression.result -> equal_check.left\n        1 -> equal_check.right\n        equal_check.result -> if_check.predicate\n        for_loop.onItem -> if_check.execute\n        if_check.then -> for_loop.next\n        if_check.else -> continue_jkl012\n        for_loop.done -> out_ghi789\n        for_loop.done -> continue_jkl012\n        execute_def456 -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 354, y: -53, name: \"input\") property(List) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(current + 1 == next)\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) add_b4554f root.Std_k98ojb.Math.Add {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> for_8cb3f6.items\n        for_8cb3f6.index -> add_b4554f.first\n        1 -> add_b4554f.second\n        add_b4554f.result -> for_8cb3f6.index\n\n        for_8cb3f6.item -> expression_b720d7.gen_0\n        for_8cb3f6.index -> expression_b720d7.gen_1\n        expression_b720d7.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n\n        if_07b8c7.then -> if_e19a62.execute\n        if_07b8c7.value -> out_f3db9f\n        if_e19a62.then -> continue_8ba06b\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_e19a62.else -> for_8cb3f6.next\n    }\n\n    instance(x: -189, y: 222) is_consecutive_f0be66 root.main.is_consecutive {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 160, y: -180, name: \"input\") property(List<Number>) input_list\n\n        out(x: 560, y: -180, name: \"out\") property(Bool) out_is_consecutive\n\n        instance(x: 320, y: -280) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 480, y: -80) map_list root.Std_k98ojb.Iteration.Map {}\n        instance(x: 720, y: -180) filter_list root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 880, y: -180) is_empty root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 1040, y: -180) not_empty root.Std_k98ojb.Logic.Not {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> map_list.items\n\n        func() {\n            in(x: -100, y: 20, name: \"item\") property(Number) item\n            in(x: -100, y: 80, name: \"index\") property(Number) index\n\n            out(x: 300, y: 50, name: \"out\") property(Number) out\n\n            instance(x: 100, y: 50) sub_node root.Std_k98ojb.Math.Sub {}\n\n            item -> sub_node.first\n            index -> sub_node.second\n            sub_node.result -> out\n        } -> map_list.handler\n\n        map_list.output_list -> filter_list.items\n\n        func() {\n            in(x: -100, y: 20, name: \"item\") property(Number) item\n\n            out(x: 300, y: 20, name: \"out\") property(Bool) out\n\n            instance(x: 100, y: 20) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n            1 -> not_equal.left\n            item -> not_equal.right\n            not_equal.result -> out\n        } -> filter_list.handler\n\n        filter_list.output_list -> is_empty.list\n        is_empty.isEmpty -> not_empty.input\n        not_empty.output -> out_is_consecutive\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 20, y: 20, name: \"input_list\") property(List) input_list\n\n        out(x: 180, y: 20, name: \"out\") property(Bool) out\n\n        instance(x: 60, y: 60) sort_8b4f7a root.Std_k98ojb.List.Sort {}\n        instance(x: 300, y: 60) count_4a6d5b root.Std_k98ojb.Std.Count {}\n        instance(x: 120, y: 120) for_5d7c8e root.Std_k98ojb.Std.For {}\n        instance(x: 500, y: 60) if_9e8f6c root.Std_k98ojb.Std.If {}\n        instance(x: 240, y: 180) sub_1a2b3c root.Std_k98ojb.Math.Sub {}\n        instance(x: 420, y: 180) not_equal_2b3c4d root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list -> sort_8b4f7a.list\n        sort_8b4f7a.sorted -> for_5d7c8e.items\n        for_5d7c8e.item -> sub_1a2b3c.first\n        for_5d7c8e.index -> count_4a6d5b.count\n        count_4a6d5b.count -> sub_1a2b3c.second\n        sub_1a2b3c.result -> not_equal_2b3c4d.left\n        1 -> not_equal_2b3c4d.right\n        not_equal_2b3c4d.result -> if_9e8f6c.input\n        if_9e8f6c.then -> out\n        if_9e8f6c.else -> out\n        for_5d7c8e.done -> out\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 20, y: 0, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 700, y: 0, name: \"is_consecutive\") property(Bool) is_consecutive\n\n        instance(x: 150, y: 0) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 300, y: 0) map_indexes root.Std_k98ojb.Iteration.Map {}\n        instance(x: 450, y: 0) check_consecutive root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 600, y: 0) equal_to_length root.Std_k98ojb.Logic.Equal {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> map_indexes.items\n\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n            in(x: 0, y: 50, name: \"index\") property(Number) index\n\n            out(x: 200, y: 0, name: \"mapped_value\") property(Number) mapped_value\n\n            instance(x: 100, y: 0) add_index root.Std_k98ojb.Math.Add {}\n\n            item -> add_index.first\n            index -> add_index.second\n            add_index.result -> mapped_value\n        } -> map_indexes.handler\n\n        map_indexes.output_list -> check_consecutive.items\n\n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc\n            in(x: 0, y: 50, name: \"value\") property(Number) value\n\n            out(x: 200, y: 0, name: \"new_acc\") property(Number) new_acc\n\n            instance(x: 100, y: 0) equal_check root.Std_k98ojb.Logic.Equal {}\n\n            acc -> equal_check.left\n            value -> equal_check.right\n            equal_check.result -> new_acc\n        } -> check_consecutive.reducer\n\n        check_consecutive.result -> equal_to_length.left\n        map_indexes.output_list -> equal_to_length.right\n        equal_to_length.result -> is_consecutive\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 120, y: -50, name: \"input\") property(List<Number>) input_list\n        in(x: 120, y: 0, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: -50, name: \"out\") property(Bool) output_result\n        out(x: 300, y: 0, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: -200) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 400, y: -200) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 650, y: -200) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"a + 1 == b\"\n        }\n        instance(x: 900, y: -200) logic_and root.Std_k98ojb.Logic.And {}\n        instance(x: 1150, y: -200) logic_not root.Std_k98ojb.Logic.Not {}\n        instance(x: 1400, y: -200) if_check root.Std_k98ojb.Std.If {}\n\n        input_list -> sort_list.list\n        sort_list.list -> for_loop.items\n        for_loop.index -> if_expression.a\n        for_loop.item -> if_expression.b\n        if_expression.value -> logic_and.left\n        for_loop.index -> logic_and.right\n        logic_and.result -> logic_not.input\n        logic_not.output -> if_check.input\n        for_loop.onItem -> if_check.execute\n        if_check.then -> continue_trigger\n        if_check.else -> output_result\n        for_loop.done -> continue_trigger\n        execute_trigger -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 180, y: -150, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 600, y: -150, name: \"is_consecutive\") property(Bool) is_consecutive\n\n        instance(x: 300, y: -150) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 400, y: -150) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 500, y: -150) if_not_consecutive root.Std_k98ojb.Std.If {}\n        instance(x: 700, y: -150) sub_expression root.Std_k98ojb.Math.Expression {\n            expression: \"a - b\"\n        }\n        instance(x: 900, y: -150) equal_check root.Std_k98ojb.Logic.Equal {}\n\n        input_list -> sort_list.list\n        sort_list.list -> for_loop.items\n        for_loop.item -> sub_expression.a\n        for_loop.index -> sub_expression.b\n        sub_expression.result -> equal_check.left\n        1 -> equal_check.right\n        equal_check.result -> if_not_consecutive.input\n        if_not_consecutive.then -> is_consecutive\n        if_not_consecutive.else -> is_consecutive\n        for_loop.onItem -> if_not_consecutive.execute\n        for_loop.done -> is_consecutive\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given list contains consecutive numbers or not.\") is_consecutive {\n        in(x: 50, y: 50, name: \"input\") property(List<Number>) input_list\n\n        out(x: 200, y: 50, name: \"out\") property(Bool) is_consecutive\n\n        instance(x: 100, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 100, y: 200) map_index_diff root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 200) filter_diffs root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 500, y: 200) is_empty root.Std_k98ojb.List.IsEmpty {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> map_index_diff.items\n\n        func() {\n            in(x: -50, y: 50, name: \"current\") property(Number) current\n            in(x: -50, y: 100, name: \"index\") property(Number) index\n\n            out(x: 200, y: 75, name: \"out\") property(Number) diff\n\n            instance(x: 50, y: 75) get_next root.Std_k98ojb.List.GetAt {}\n            instance(x: 150, y: 75) sub_diff root.Std_k98ojb.Math.Sub {}\n\n            sort_list.sorted -> get_next.list\n            index -> get_next.index\n            get_next.item -> sub_diff.first\n            current -> sub_diff.second\n            sub_diff.result -> diff\n        } -> map_index_diff.handler\n\n        map_index_diff.output_list -> filter_diffs.items\n\n        func() {\n            in(x: -50, y: 50, name: \"diff\") property(Number) diff\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) is_not_one\n\n            instance(x: 50, y: 50) not_equal_one root.Std_k98ojb.Logic.NotEqual {}\n\n            diff -> not_equal_one.left\n            1 -> not_equal_one.right\n            not_equal_one.result -> is_not_one\n        } -> filter_diffs.handler\n\n        filter_diffs.output_list -> is_empty.list\n        is_empty.isEmpty -> is_consecutive\n    }\n}"
            ],
            "17": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: 50, name: \"mainList\") property(List) mainList\n        in(x: 100, y: 100, name: \"subList\") property(List) subList\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 100, name: \"isSublist\") property(Bool) isSublist\n        out(x: 300, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 50) length_mainList root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 100) length_subList root.Std_k98ojb.List.Length {}\n        instance(x: 400, y: 50) generate_range root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: 50) slice_list root.Std_k98ojb.List.Slice {}\n        instance(x: 1000, y: 50) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1200, y: 50) if_check root.Std_k98ojb.Std.If {}\n\n        mainList -> length_mainList.list\n        subList -> length_subList.list\n        length_mainList.length -> generate_range.to\n        length_subList.length -> generate_range.from\n        generate_range.list -> for_loop.items\n        for_loop.item -> slice_list.start\n        length_subList.length -> slice_list.end\n        mainList -> slice_list.list\n        slice_list.slice -> equal_check.left\n        subList -> equal_check.right\n        equal_check.equal -> if_check.input\n        for_loop.onItem -> if_check.execute\n        if_check.then -> continue\n        if_check.value -> isSublist\n        for_loop.done -> continue\n        execute -> for_loop.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 150, name: \"list2\") property(List) list2\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"isSublist\") property(Bool) isSublist\n        out(x: 400, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 100) filter root.Std_k98ojb.Query.Filter {\n            where: \"List.Contains(list2, it)\"\n        }\n        instance(x: 300, y: 100) equal root.Std_k98ojb.Logic.Equal {}\n\n        list1 -> filter.items\n        filter.list -> equal.left\n        list1 -> equal.right\n        equal.result -> isSublist\n        execute -> filter.execute\n        filter.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: -50, name: \"mainList\") property(List) mainList\n        in(x: 100, y: 0, name: \"subList\") property(List) subList\n        in(x: 100, y: 50, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 0, name: \"isSublist\") property(Bool) isSublist\n        out(x: 500, y: 50, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: -50) contains root.Std_k98ojb.List.Contains {}\n        instance(x: 300, y: 0) and root.Std_k98ojb.Logic.And {}\n        instance(x: 300, y: 50) if root.Std_k98ojb.Std.If {}\n\n        subList -> contains.item\n        mainList -> contains.list\n        contains.result -> and.left\n        and.result -> if.predicate\n        execute -> if.execute\n        if.then -> continue\n        if.value -> isSublist\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 300, y: -100, name: \"list1\") property(List) list1_abc123\n        in(x: 300, y: -50, name: \"list2\") property(List) list2_def456\n        in(x: 300, y: 0, name: \"execute\") trigger() execute_ghi789\n\n        out(x: 700, y: 0, name: \"isSublist\") property(Bool) isSublist_jkl012\n        out(x: 700, y: 50, name: \"continue\") trigger() continue_mno345\n\n        instance(x: 500, y: -100) contains_pqr678 root.Std_k98ojb.List.Contains {}\n        instance(x: 500, y: -50) for_stu901 root.Std_k98ojb.Std.For {}\n        instance(x: 500, y: 0) if_vwx234 root.Std_k98ojb.Std.If {}\n        instance(x: 500, y: 50) not_yza567 root.Std_k98ojb.Logic.Not {}\n\n        list1_abc123 -> for_stu901.items\n        for_stu901.item -> contains_pqr678.item\n        list2_def456 -> contains_pqr678.list\n        contains_pqr678.result -> not_yza567.input\n        not_yza567.result -> if_vwx234.predicate\n        for_stu901.onItem -> if_vwx234.execute\n        if_vwx234.then -> continue_mno345\n        if_vwx234.else -> isSublist_jkl012\n        for_stu901.done -> isSublist_jkl012\n        execute_ghi789 -> for_stu901.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 92, y: -49, name: \"mainList\") property(List) mainList_1a2b3c\n        in(x: 92, y: 10, name: \"subList\") property(List) subList_4d5e6f\n        in(x: 92, y: 69, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 330, y: 10, name: \"isSublist\") property(Bool) isSublist_0a1b2c\n        out(x: 330, y: 69, name: \"continue\") trigger() continue_3d4e5f\n\n        instance(x: 190, y: -80) listLengthMain_6g7h8i root.Std_k98ojb.List.Length {}\n        instance(x: 190, y: -30) listLengthSub_9j0k1l root.Std_k98ojb.List.Length {}\n        instance(x: 190, y: 30) forLoop_2m3n4o root.Std_k98ojb.Std.For {}\n        instance(x: 450, y: -30) slice_5p6q7r root.Std_k98ojb.List.Slice {}\n        instance(x: 610, y: 10) equal_8s9t0u root.Std_k98ojb.Logic.Equal {}\n        instance(x: 770, y: 10) if_1v2w3x root.Std_k98ojb.Std.If {}\n\n        mainList_1a2b3c -> listLengthMain_6g7h8i.list\n        subList_4d5e6f -> listLengthSub_9j0k1l.list\n        listLengthMain_6g7h8i.length -> forLoop_2m3n4o.items\n        forLoop_2m3n4o.index -> slice_5p6q7r.start\n        listLengthSub_9j0k1l.length -> slice_5p6q7r.end\n        mainList_1a2b3c -> slice_5p6q7r.list\n        slice_5p6q7r.slice -> equal_8s9t0u.left\n        subList_4d5e6f -> equal_8s9t0u.right\n        equal_8s9t0u.equal -> if_1v2w3x.predicate\n        if_1v2w3x.then -> continue_3d4e5f\n        if_1v2w3x.else -> forLoop_2m3n4o.next\n        execute_7g8h9i -> forLoop_2m3n4o.reset\n        if_1v2w3x.value -> isSublist_0a1b2c\n        forLoop_2m3n4o.done -> continue_3d4e5f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 180, y: 0, name: \"mainList\") property(List) mainList_0\n        in(x: 180, y: 60, name: \"subList\") property(List) subList_1\n        in(x: 180, y: 120, name: \"execute\") trigger() execute_2\n\n        out(x: 620, y: 0, name: \"isSublist\") property(Bool) isSublist_3\n        out(x: 620, y: 60, name: \"continue\") trigger() continue_4\n\n        instance(x: 400, y: 0) filter_5 root.Std_k98ojb.Query.Filter {\n            where: \"mainList.contains(it)\"\n        }\n        instance(x: 620, y: 0) equal_6 root.Std_k98ojb.Logic.Equal {}\n\n        subList_1 -> filter_5.items\n        mainList_0 -> filter_5.mainList\n        filter_5.output -> equal_6.left\n        subList_1 -> equal_6.right\n        equal_6.result -> isSublist_3\n        execute_2 -> filter_5.execute\n        filter_5.done -> continue_4\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: 50, name: \"list1\") property(List) list1\n        in(x: 100, y: 100, name: \"list2\") property(List) list2\n        in(x: 100, y: 150, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"out\") property(Bool) out\n        out(x: 400, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 50) filter root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 250, y: 150) length root.Std_k98ojb.List.Length {}\n        instance(x: 250, y: 100) equal root.Std_k98ojb.Logic.Equal {}\n\n        list1 -> filter.items\n        func() {\n            in(x: -100, y: 50, name: \"item\") property(Any) item\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out\n\n            instance(x: 50, y: 50) contains root.Std_k98ojb.List.Contains {}\n            item -> contains.item\n            list2 -> contains.list\n            contains.contains -> out\n        } -> filter.handler\n\n        filter.output_list -> length.list\n        length.length -> equal.left\n        list1 -> length.list\n        length.length -> equal.right\n        equal.result -> out\n        execute -> filter.execute\n        filter.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 354, y: -53, name: \"mainList\") property(List) mainList_1\n        in(x: 354, y: -103, name: \"subList\") property(List) subList_2\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) contains_b720d7 root.Std_k98ojb.List.Contains {}\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) not_b4554f root.Std_k98ojb.Logic.Not {}\n\n        subList_2 -> for_8cb3f6.items\n        for_8cb3f6.item -> contains_b720d7.item\n        mainList_1 -> contains_b720d7.list\n        contains_b720d7.result -> not_b4554f.input\n        not_b4554f.output -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> if_e19a62.execute\n        if_07b8c7.else -> for_8cb3f6.next\n        false -> if_e19a62.predicate\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> for_8cb3f6.next\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 150, y: -53, name: \"mainList\") property(List) mainList\n        in(x: 150, y: 47, name: \"subList\") property(List) subList\n        in(x: 150, y: 147, name: \"execute\") trigger() execute\n\n        out(x: 550, y: 47, name: \"isSublist\") property(Bool) isSublist\n        out(x: 550, y: 147, name: \"continue\") trigger() continue\n\n        instance(x: 350, y: -53) contains root.Std_k98ojb.List.Contains {}\n        instance(x: 350, y: 47) map root.Std_k98ojb.Iteration.Map {}\n        instance(x: 350, y: 147) and root.Std_k98ojb.Logic.And {}\n        instance(x: 550, y: 47) reduce root.Std_k98ojb.Iteration.Reduce {}\n\n        subList -> map.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Any) element\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out\n\n            element -> contains.item\n            mainList -> contains.list\n            contains.result -> out\n        } -> map.handler\n\n        map.output_list -> reduce.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Bool) accumulated\n            in(x: -76, y: 96, name: \"current\") property(Bool) current\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out\n\n            accumulated -> and.left\n            current -> and.right\n            and.result -> out\n        } -> reduce.reducer\n\n        reduce.result -> isSublist\n        execute -> map.execute\n        reduce.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether a list is a sublist of another list.\") is_sublist {\n        in(x: 100, y: 100, name: \"mainList\") property(List) mainList\n        in(x: 100, y: 200, name: \"subList\") property(List) subList\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 100, name: \"isSublist\") property(Bool) isSublist\n        out(x: 500, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: 100) contains root.Std_k98ojb.List.Contains {}\n        instance(x: 300, y: 200) forEach root.Std_k98ojb.Std.For {}\n        instance(x: 300, y: 300) ifExpression root.Std_k98ojb.Std.IfExpression {\n            expression: \"it\"\n        }\n        instance(x: 300, y: 400) not root.Std_k98ojb.Logic.Not {}\n\n        subList -> forEach.items\n        forEach.onItem -> contains.trigger\n        forEach.item -> contains.item\n        mainList -> contains.list\n        contains.result -> not.input\n        not.result -> ifExpression.input\n        ifExpression.then -> isSublist\n        ifExpression.else -> continue\n        execute -> forEach.reset\n        forEach.done -> continue\n    }\n}"
            ],
            "27": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 60, y: -30, name: \"numbers\") property(List<Number>) numbers_123abc\n        in(x: 60, y: 0, name: \"execute\") trigger() execute_456def\n\n        out(x: 500, y: 0, name: \"missingNumber\") property(Number) missingNumber_789ghi\n        out(x: 500, y: 30, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 150, y: -30) generaterange_345mno root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 0) find_678pqr root.Std_k98ojb.Iteration.Find {}\n        instance(x: 400, y: 0) getat_901stu root.Std_k98ojb.List.GetAt {}\n\n        0 -> generaterange_345mno.from\n        numbers_123abc -> List.Length.list\n        List.Length.length -> generaterange_345mno.to\n\n        generaterange_345mno.list -> find_678pqr.items\n        func() {\n            in(x: -100, y: 50, name: \"index\") property(Number) index_234vwx\n\n            out(x: 100, y: 50, name: \"out\") property(Bool) out_567yz\n\n            instance(x: 0, y: 50) getat_890abc root.Std_k98ojb.List.GetAt {}\n            instance(x: 200, y: 50) notequal_123def root.Std_k98ojb.Logic.NotEqual {}\n\n            numbers_123abc -> getat_890abc.list\n            index_234vwx -> getat_890abc.index\n            index_234vwx -> notequal_123def.left\n            getat_890abc.item -> notequal_123def.right\n            notequal_123def.result -> out_567yz\n        } -> find_678pqr.predicate\n\n        find_678pqr.item -> missingNumber_789ghi\n        execute_456def -> find_678pqr.execute\n        find_678pqr.item -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 50, y: 0, name: \"input\") property(List<Number>) input_list\n        in(x: 50, y: 50, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 0, name: \"out\") property(Number) smallest_missing\n        out(x: 300, y: 50, name: \"continue\") trigger() continue\n\n        instance(x: 150, y: 0) generaterange root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 200, y: 0) filter root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 250, y: 0) firstitem root.Std_k98ojb.List.FirstItem {}\n\n        0 -> generaterange.from\n        input_list -> generaterange.to\n        generaterange.list -> filter.items\n\n        func() {\n            in(x: -50, y: 0, name: \"element\") property(Number) element\n\n            out(x: 50, y: 0, name: \"out\") property(Bool) out\n\n            instance(x: 0, y: 0) contains root.Std_k98ojb.List.Contains {}\n            element -> contains.item\n            input_list -> contains.list\n            contains.isContained -> not -> out\n        } -> filter.handler\n\n        filter.output_list -> firstitem.list\n        firstitem.item -> smallest_missing\n        execute -> filter.execute\n        firstitem.item -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 150, y: 50, name: \"input\") property(List<Number>) input_3a5f2c\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_2a5f2c\n\n        out(x: 450, y: 50, name: \"out\") property(Number) out_3b5f2c\n        out(x: 450, y: 150, name: \"continue\") trigger() continue_4b5f2c\n\n        instance(x: 350, y: 50) generate_range_3a5f2c root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 250, y: 250) find_3c5f2c root.Std_k98ojb.Iteration.Find {}\n        instance(x: 550, y: 50) not_equal_3d5f2c root.Std_k98ojb.Logic.NotEqual {}\n\n        0 -> generate_range_3a5f2c.from\n        1000 -> generate_range_3a5f2c.to\n        generate_range_3a5f2c.list -> find_3c5f2c.items\n\n        func() {\n            in(x: -100, y: 50, name: \"element\") property(Number) element_4a5f2c\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out_4b5f2c\n\n            instance(x: 50, y: 50) contains_4c5f2c root.Std_k98ojb.List.Contains {}\n            element_4a5f2c -> contains_4c5f2c.item\n            input_3a5f2c -> contains_4c5f2c.list\n            contains_4c5f2c.isContained -> not_equal_3d5f2c.left\n            false -> not_equal_3d5f2c.right\n            not_equal_3d5f2c.result -> out_4b5f2c\n        } -> find_3c5f2c.predicate\n\n        find_3c5f2c.item -> out_3b5f2c\n        execute_2a5f2c -> find_3c5f2c.execute\n        find_3c5f2c.found -> continue_4b5f2c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing_number {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 591, y: 74) add_038fce root.Std_k98ojb.Math.Add {}\n        instance(x: 933, y: 25) not_equal_f11fda root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 714, y: -155) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1121, y: -54) add_b4554f root.Std_k98ojb.Math.Add {}\n\n        input_list -> for_8cb3f6.items\n        for_8cb3f6.index -> add_038fce.first\n        0 -> add_038fce.second\n        add_038fce.result -> not_equal_f11fda.left\n        for_8cb3f6.item -> not_equal_f11fda.right\n        not_equal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        add_038fce.result -> out_f3db9f\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n\n    instance(x: -189, y: 222) find_smallest_missing_number_f0be66 root.main.find_smallest_missing_number {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing_number {\n        in(x: 160, y: -160, name: \"numbers\") property(List) numbers_1a2b3c\n        in(x: 160, y: -120, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 400, y: -160, name: \"missing_number\") property(Number) missing_number_7g8h9i\n        out(x: 400, y: -120, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 240, y: -240) generate_range_3m4n5o root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 480, y: -240) find_missing_6p7q8r root.Std_k98ojb.Iteration.Find {}\n        instance(x: 720, y: -240) not_equal_9s0t1u root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 960, y: -240) if_v2w3x root.Std_k98ojb.Std.If {}\n\n        0 -> generate_range_3m4n5o.from\n        numbers_1a2b3c -> generate_range_3m4n5o.to\n        generate_range_3m4n5o.list -> find_missing_6p7q8r.items\n\n        func() {\n            in(x: -160, y: -160, name: \"element\") property(Number) element_a1b2c3\n            in(x: -160, y: -120, name: \"index\") property(Number) index_d4e5f6\n\n            out(x: 160, y: -160, name: \"is_missing\") property(Bool) is_missing_g7h8i9\n\n            instance(x: 0, y: -240) not_equal_j0k1l2 root.Std_k98ojb.Logic.NotEqual {}\n            element_a1b2c3 -> not_equal_j0k1l2.left\n            index_d4e5f6 -> not_equal_j0k1l2.right\n            not_equal_j0k1l2.result -> is_missing_g7h8i9\n        } -> find_missing_6p7q8r.predicate\n\n        find_missing_6p7q8r.item -> missing_number_7g8h9i\n        find_missing_6p7q8r.item -> if_v2w3x.predicate\n        find_missing_6p7q8r.done -> if_v2w3x.execute\n        if_v2w3x.then -> continue_0j1k2l\n        execute_4d5e6f -> find_missing_6p7q8r.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 60, y: 20, name: \"input_list\") property(List) input_list_2f1c3a\n        in(x: 60, y: 60, name: \"execute\") trigger() execute_4b8f7c\n\n        out(x: 580, y: 40, name: \"missing_number\") property(Number) missing_number_3d2a5b\n        out(x: 580, y: 80, name: \"continue\") trigger() continue_6e9d7f\n\n        instance(x: 240, y: 40) generaterange_5a3f4b root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 40) find_8d7f9c root.Std_k98ojb.Iteration.Find {}\n        instance(x: 720, y: 40) if_9b8d6e root.Std_k98ojb.Std.If {}\n        instance(x: 240, y: 100) length_7c3e4f root.Std_k98ojb.List.Length {}\n\n        0 -> generaterange_5a3f4b.from\n        length_7c3e4f.length -> generaterange_5a3f4b.to\n        input_list_2f1c3a -> length_7c3e4f.list\n        generaterange_5a3f4b.list -> find_8d7f9c.items\n\n        func() {\n            in(x: 0, y: 20, name: \"element\") property(Number) element_4f1b2a\n            in(x: 0, y: 60, name: \"index\") property(Number) index_3e2a1b\n\n            out(x: 180, y: 40, name: \"out\") property(Bool) out_5d2a4c\n\n            instance(x: 60, y: 40) not_equal_9c3e5f root.Std_k98ojb.Logic.NotEqual {}\n            element_4f1b2a -> not_equal_9c3e5f.left\n            List.GetAt(input_list_2f1c3a, index_3e2a1b) -> not_equal_9c3e5f.right\n            not_equal_9c3e5f.result -> out_5d2a4c\n        } -> find_8d7f9c.predicate\n\n        find_8d7f9c.item -> if_9b8d6e.value\n        find_8d7f9c.item -> if_9b8d6e.predicate\n        if_9b8d6e.then -> missing_number_3d2a5b\n        if_9b8d6e.else -> length_7c3e4f.length\n        execute_4b8f7c -> generaterange_5a3f4b.reset\n        if_9b8d6e.then -> continue_6e9d7f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing_number {\n        in(x: 50, y: 50, name: \"input\") property(List<Number>) input_1\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_1\n\n        out(x: 300, y: 50, name: \"missingNumber\") property(Number) missingNumber_1\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_1\n\n        instance(x: 150, y: 50) generaterange_1 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 150, y: 150) difference_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 150, y: 250) firstitem_1 root.Std_k98ojb.List.FirstItem {}\n\n        0 -> generaterange_1.from\n        input_1 -> generaterange_1.to\n        generaterange_1.list -> difference_1.left\n        input_1 -> difference_1.right\n        difference_1.difference -> firstitem_1.list\n        firstitem_1.item -> missingNumber_1\n        execute_1 -> firstitem_1.trigger\n        firstitem_1.done -> continue_1\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 150, y: -50, name: \"numbers\") property(List<Number>) numbers_1c9b7e\n        in(x: 150, y: -100, name: \"execute\") trigger() execute_2b8c3f\n\n        out(x: 400, y: -50, name: \"missing_number\") property(Number) missing_number_4f3b9f\n        out(x: 400, y: 0, name: \"continue\") trigger() continue_9ba06b\n\n        instance(x: 200, y: -200) generaterange_0f8cde root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 350, y: -150) difference_1f2a3d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 500, y: -100) firstitem_2f4c6e root.Std_k98ojb.List.FirstItem {}\n\n        0 -> generaterange_0f8cde.from\n        numbers_1c9b7e -> generaterange_0f8cde.to\n        generaterange_0f8cde.list -> difference_1f2a3d.left\n        numbers_1c9b7e -> difference_1f2a3d.right\n        difference_1f2a3d.difference -> firstitem_2f4c6e.list\n        firstitem_2f4c6e.item -> missing_number_4f3b9f\n        execute_2b8c3f -> continue_9ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 150, y: 100, name: \"numbers\") property(List) numbers_123abc\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 450, y: 100, name: \"missingNumber\") property(Number) missingNumber_789ghi\n        out(x: 450, y: 150, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: 50) generaterange_abc123 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 150) filter_456mno root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 100) firstitem_789pqr root.Std_k98ojb.List.FirstItem {}\n\n        0 -> generaterange_abc123.from\n        numbers_123abc -> generaterange_abc123.to\n        generaterange_abc123.list -> filter_456mno.items\n\n        func() {\n            in(x: 100, y: 100, name: \"number\") property(Number) number_abc456\n\n            out(x: 200, y: 100, name: \"out\") property(Bool) out_def789\n\n            instance(x: 150, y: 50) contains_123stu root.Std_k98ojb.List.Contains {}\n            number_abc456 -> contains_123stu.item\n            numbers_123abc -> contains_123stu.list\n            contains_123stu.isContained -> Logic.Not.result -> out_def789\n        } -> filter_456mno.handler\n\n        filter_456mno.output_list -> firstitem_789pqr.list\n        firstitem_789pqr.item -> missingNumber_789ghi\n\n        execute_456def -> generaterange_abc123.reset\n        execute_456def -> filter_456mno.execute\n        execute_456def -> firstitem_789pqr.execute\n\n        firstitem_789pqr.done -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the smallest missing number from a sorted list of natural numbers.\") find_smallest_missing {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 591, y: 74) add_b4554f root.Std_k98ojb.Math.Add {}\n        instance(x: 933, y: 25) notequal_f11fda root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> for_8cb3f6.items\n        for_8cb3f6.index -> add_b4554f.first\n        0 -> add_b4554f.second\n        add_b4554f.result -> notequal_f11fda.left\n        for_8cb3f6.item -> notequal_f11fda.right\n        notequal_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        add_b4554f.result -> out_f3db9f\n        if_07b8c7.else -> for_8cb3f6.next\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}"
            ],
            "31": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 150, y: 30, name: \"input\") property(String) input_abc123\n        in(x: 150, y: 80, name: \"execute\") trigger() execute_abc456\n\n        out(x: 600, y: 30, name: \"output\") property(String) output_def789\n        out(x: 600, y: 80, name: \"continue\") trigger() continue_def012\n\n        instance(x: 300, y: 30) replace_space root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 450, y: 30) replace_comma root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 450, y: 80) replace_dot root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_abc456 -> replace_space.execute\n        input_abc123 -> replace_space.input\n        replace_space.output -> replace_comma.input\n        replace_comma.output -> replace_dot.input\n        replace_dot.output -> output_def789\n        replace_dot.execute -> continue_def012\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 200, y: 100) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 200, y: 150) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_trigger -> replace_spaces.trigger\n        input_string -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_string\n        replace_dots.trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_spaces_commas_dots {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) replace_space root.Std_k98ojb.Strings.Replace {}\n        instance(x: 591, y: 74) replace_comma root.Std_k98ojb.Strings.Replace {}\n        instance(x: 933, y: 25) replace_dot root.Std_k98ojb.Strings.Replace {}\n\n        input_f5c03d -> replace_space.input\n        \" \" -> replace_space.search\n        \":\" -> replace_space.replace\n\n        replace_space.output -> replace_comma.input\n        \",\" -> replace_comma.search\n        \":\" -> replace_comma.replace\n\n        replace_comma.output -> replace_dot.input\n        \".\" -> replace_dot.search\n        \":\" -> replace_dot.replace\n\n        replace_dot.output -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) replace_spaces_commas_dots_f0be66 root.main.replace_spaces_commas_dots {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_spaces_commas_dots {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) replace_spaces root.Std_k98ojb.Strings.Replace {}\n        instance(x: 933, y: 25) replace_commas root.Std_k98ojb.Strings.Replace {}\n        instance(x: 714, y: -155) replace_dots root.Std_k98ojb.Strings.Replace {}\n\n        input_f5c03d -> replace_spaces.input\n        \" \" -> replace_spaces.search\n        \":\" -> replace_spaces.replace\n        replace_spaces.result -> replace_commas.input\n        \",\" -> replace_commas.search\n        \":\" -> replace_commas.replace\n        replace_commas.result -> replace_dots.input\n        \".\" -> replace_dots.search\n        \":\" -> replace_dots.replace\n        replace_dots.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 160, y: -210, name: \"input\") property(String) input_8b7f9c\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_5d9b8c\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 330, y: -110) replace_space root.Std_k98ojb.Strings.Replace {}\n        instance(x: 650, y: -110) replace_comma root.Std_k98ojb.Strings.Replace {}\n        instance(x: 970, y: -110) replace_dot root.Std_k98ojb.Strings.Replace {}\n\n        input_8b7f9c -> replace_space.input\n        \" \" -> replace_space.search\n        \":\" -> replace_space.replace\n        replace_space.output -> replace_comma.input\n        \",\" -> replace_comma.search\n        \":\" -> replace_comma.replace\n        replace_comma.output -> replace_dot.input\n        \".\" -> replace_dot.search\n        \":\" -> replace_dot.replace\n        replace_dot.output -> out_5d9b8c\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 300, y: 0, name: \"input\") property(String) input_2f6c9a\n        in(x: 300, y: 50, name: \"execute\") trigger() execute_4b8f7c\n\n        out(x: 800, y: 0, name: \"output\") property(String) output_5d8f2b\n        out(x: 800, y: 50, name: \"continue\") trigger() continue_6c9e3d\n\n        instance(x: 500, y: -100) replace_space root.Std_k98ojb.Strings.Replace {}\n        instance(x: 500, y: 0) replace_comma root.Std_k98ojb.Strings.Replace {}\n        instance(x: 500, y: 100) replace_dot root.Std_k98ojb.Strings.Replace {}\n\n        input_2f6c9a -> replace_space.input\n        \" \" -> replace_space.search\n        \":\" -> replace_space.replace\n\n        replace_space.output -> replace_comma.input\n        \",\" -> replace_comma.search\n        \":\" -> replace_comma.replace\n\n        replace_comma.output -> replace_dot.input\n        \".\" -> replace_dot.search\n        \":\" -> replace_dot.replace\n\n        replace_dot.output -> output_5d8f2b\n        execute_4b8f7c -> replace_space.execute\n        replace_dot.done -> continue_6c9e3d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_string\n\n        instance(x: 200, y: 100) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 300, y: 100) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 500, y: 100) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        input_string -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_string\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 100, y: 50, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 50, name: \"output\") property(String) output_string\n\n        instance(x: 150, y: 100) replace_spaces root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 400, y: 100) replace_commas root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 650, y: 100) replace_dots root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        input_string -> replace_spaces.input\n        replace_spaces.output -> replace_commas.input\n        replace_commas.output -> replace_dots.input\n        replace_dots.output -> output_string\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_with_colon {\n        in(x: 150, y: 0, name: \"input\") property(String) input_1a2b3c\n        in(x: 150, y: 50, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 550, y: 0, name: \"output\") property(String) output_7g8h9i\n        out(x: 550, y: 50, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 300, y: 0) replace_space root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 400, y: 0) replace_comma root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 500, y: 0) replace_dot root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute_4d5e6f -> replace_space.trigger\n        input_1a2b3c -> replace_space.input\n        replace_space.output -> replace_comma.input\n        replace_comma.output -> replace_dot.input\n        replace_dot.output -> output_7g8h9i\n        replace_dot.trigger -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces all occurrences of spaces, commas, or dots with a colon.\") replace_special_chars {\n        in(x: 180, y: 20, name: \"input\") property(String) input_str\n        in(x: 180, y: 60, name: \"execute\") trigger() execute\n\n        out(x: 540, y: 20, name: \"output\") property(String) output_str\n        out(x: 540, y: 60, name: \"continue\") trigger() continue\n\n        instance(x: 360, y: 20) replace_space root.Std_k98ojb.Strings.Replace {\n            search: \" \",\n            replace: \":\"\n        }\n        instance(x: 360, y: 80) replace_comma root.Std_k98ojb.Strings.Replace {\n            search: \",\",\n            replace: \":\"\n        }\n        instance(x: 360, y: 140) replace_dot root.Std_k98ojb.Strings.Replace {\n            search: \".\",\n            replace: \":\"\n        }\n\n        execute -> replace_space.trigger\n        input_str -> replace_space.input\n        replace_space.output -> replace_comma.input\n        replace_comma.output -> replace_dot.input\n        replace_dot.output -> output_str\n        replace_dot.trigger -> continue\n    }\n}"
            ],
            "33": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 100, y: 50, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) all_same\n\n        instance(x: 150, y: 100) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 150) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 250, y: 200) is_empty_node root.Std_k98ojb.List.IsEmpty {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> filter_node.items\n\n        func() {\n            in(x: 50, y: 50, name: \"character\") property(Char) character\n            in(x: 50, y: 100, name: \"index\") property(Number) index\n\n            out(x: 150, y: 75, name: \"out\") property(Bool) out\n\n            instance(x: 100, y: 50) not_equal_node root.Std_k98ojb.Logic.NotEqual {}\n            instance(x: 100, y: 100) get_at_node root.Std_k98ojb.List.GetAt {}\n\n            characters_node.characters -> get_at_node.list\n            0 -> get_at_node.index\n            get_at_node.item -> not_equal_node.left\n            character -> not_equal_node.right\n            not_equal_node.result -> out\n        } -> filter_node.handler\n\n        filter_node.output_list -> is_empty_node.list\n        is_empty_node.isEmpty -> all_same\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) equal_b720d7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 2136, y: -356) not_equal_e19a62 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1088, y: -256) first_item_b4554f root.Std_k98ojb.List.FirstItem {}\n        instance(x: 1300, y: -256) is_empty_9fba8c root.Std_k98ojb.List.IsEmpty {}\n\n        input_f5c03d -> characters_6030c9.input\n        characters_6030c9.characters -> is_empty_9fba8c.list\n        is_empty_9fba8c.isEmpty -> if_07b8c7.predicate\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        characters_6030c9.characters -> first_item_b4554f.list\n        first_item_b4554f.item -> for_8cb3f6.items\n        for_8cb3f6.item -> equal_b720d7.left\n        first_item_b4554f.item -> equal_b720d7.right\n        equal_b720d7.result -> not_equal_e19a62.left\n        not_equal_e19a62.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.else -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        if_07b8c7.then -> for_8cb3f6.next\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 400, y: 100, name: \"out\") property(Bool) out_result\n\n        instance(x: 200, y: 100) characters_4f5c6a root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 100) filter_5a7b8c root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 500, y: 100) is_empty_6c7d8e root.Std_k98ojb.List.IsEmpty {}\n\n        input_string -> characters_4f5c6a.input\n        characters_4f5c6a.characters -> filter_5a7b8c.items\n\n        func() {\n            in(x: 0, y: 0, name: \"char\") property(Char) char_input\n            in(x: 0, y: 50, name: \"first_char\") property(Char) first_char\n\n            out(x: 200, y: 0, name: \"result\") property(Bool) result\n\n            instance(x: 100, y: 0) equal_7d8e9f root.Std_k98ojb.Logic.Equal {}\n\n            char_input -> equal_7d8e9f.left\n            first_char -> equal_7d8e9f.right\n            equal_7d8e9f.result -> result\n        } -> filter_5a7b8c.handler\n\n        characters_4f5c6a.characters -> is_empty_6c7d8e.list\n        is_empty_6c7d8e.isEmpty -> out_result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 300, y: -100, name: \"input\") property(String) input_5f4c9d\n        in(x: 150, y: -200, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 600, y: 0, name: \"out\") property(Bool) out_f3db9f\n        out(x: 750, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 400, y: -300) characters_8f5c3b root.Std_k98ojb.Strings.Characters {}\n        instance(x: 500, y: -100) firstitem_3f7b6a root.Std_k98ojb.List.FirstItem {}\n        instance(x: 700, y: -100) filter_4c9d7f root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 900, y: 0) length_9d8f7c root.Std_k98ojb.List.Length {}\n        instance(x: 1100, y: 0) equal_5f6a3b root.Std_k98ojb.Logic.Equal {}\n\n        input_5f4c9d -> characters_8f5c3b.input\n        characters_8f5c3b.characters -> firstitem_3f7b6a.list\n        characters_8f5c3b.characters -> filter_4c9d7f.items\n        firstitem_3f7b6a.item -> filter_4c9d7f.handler\n\n        func() {\n            in(x: -50, y: 50, name: \"item\") property(String) item_4f5b3c\n            in(x: -50, y: 100, name: \"first_char\") property(String) first_char_6d7e8f\n\n            out(x: 150, y: 75, name: \"result\") property(Bool) result_7f8d9a\n\n            instance(x: 50, y: 75) equal_8f9b7c root.Std_k98ojb.Logic.Equal {}\n            item_4f5b3c -> equal_8f9b7c.left\n            first_char_6d7e8f -> equal_8f9b7c.right\n            equal_8f9b7c.result -> result_7f8d9a\n        } -> filter_4c9d7f.handler\n\n        filter_4c9d7f.output_list -> length_9d8f7c.list\n        characters_8f5c3b.characters -> length_9d8f7c.list\n        length_9d8f7c.length -> equal_5f6a3b.left\n        length_9d8f7c.length -> equal_5f6a3b.right\n\n        equal_5f6a3b.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") all_characters_same {\n        in(x: 354, y: -53, name: \"input\") property(String) input_string\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) all_same\n\n        instance(x: 714, y: -155) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) not_equal root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 1121, y: -54) if_condition root.Std_k98ojb.Std.If {}\n        instance(x: 352, y: -493) string_characters root.Std_k98ojb.Strings.Characters {}\n        instance(x: 1812, y: -319) not_operator root.Std_k98ojb.Logic.Not {}\n        instance(x: 1504, y: -400) list_first_item root.Std_k98ojb.List.FirstItem {}\n\n        input_string -> string_characters.input\n        string_characters.characters -> for_loop.items\n        for_loop.item -> not_equal.left\n        list_first_item.item -> not_equal.right\n        not_equal.result -> if_condition.predicate\n        for_loop.onItem -> if_condition.execute\n        if_condition.then -> not_operator.input\n        not_operator.result -> all_same\n        for_loop.done -> all_same\n        string_characters.characters -> list_first_item.list\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all characters in a string are the same.\") are_all_characters_same {\n        in(x: 90, y: -60, name: \"input\") property(String) input_str\n        in(x: 90, y: -20, name: \"execute\") trigger() execute_trigger\n\n        out(x: 290, y: -60, name: \"out\") property(Bool) out_result\n        out(x: 290, y: -20, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 180, y: -160) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 380, y: -160) first_item_node root.Std_k98ojb.List.FirstItem {}\n        instance(x: 580, y: -160) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 780, y: -160) is_empty_node root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 980, y: -160) not_node root.Std_k98ojb.Logic.Not {}\n        instance(x: 1180, y: -160) if_node root.Std_k98ojb.Std.If {}\n\n        input_str -> characters_node.input\n        characters_node.characters -> first_item_node.list\n        characters_node.characters -> filter_node.items\n        func() {\n            in(x: -60, y: 20, name: \"char\") property(Char) char_input\n            in(x: -60, y: 60, name: \"index\") property(Number) index_input\n\n            out(x: 140, y: 40, name: \"out\") property(Bool) out_result\n\n            instance(x: 20, y: 40) equal_node root.Std_k98ojb.Logic.Equal {}\n\n            char_input -> equal_node.left\n            first_item_node.item -> equal_node.right\n            equal_node.result -> out_result\n        } -> filter_node.handler\n        filter_node.output_list -> is_empty_node.list\n        is_empty_node.isEmpty -> not_node.input\n        not_node.output -> if_node.predicate\n        if_node.predicate -> out_result\n        execute_trigger -> if_node.execute\n        if_node.then -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 100, y: 50, name: \"input\") property(String) input_string\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) result\n\n        instance(x: 150, y: 150) characters_5d6a7c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 350, y: 150) firstitem_8c4f7d root.Std_k98ojb.List.FirstItem {}\n        instance(x: 550, y: 150) filter_1a2b3c root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 750, y: 150) length_4d5e6f root.Std_k98ojb.List.Length {}\n        instance(x: 950, y: 150) equal_7e8f9a root.Std_k98ojb.Logic.Equal {}\n\n        input_string -> characters_5d6a7c.input\n        characters_5d6a7c.characters -> firstitem_8c4f7d.list\n        characters_5d6a7c.characters -> filter_1a2b3c.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char\n            in(x: -50, y: 100, name: \"first\") property(String) first_char\n\n            out(x: 150, y: 75, name: \"out\") property(Bool) is_same\n\n            instance(x: 50, y: 75) equal_a1b2c3 root.Std_k98ojb.Logic.Equal {}\n            char -> equal_a1b2c3.left\n            first_char -> equal_a1b2c3.right\n            equal_a1b2c3.result -> is_same\n        } -> filter_1a2b3c.handler\n\n        firstitem_8c4f7d.item -> filter_1a2b3c.handler.first_char\n        filter_1a2b3c.output_list -> length_4d5e6f.list\n        characters_5d6a7c.characters -> length_4d5e6f.list\n        length_4d5e6f.length -> equal_7e8f9a.left\n        length_4d5e6f.length -> equal_7e8f9a.right\n        equal_7e8f9a.result -> result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 10, y: 10, name: \"input\") property(String) input_str\n        in(x: 10, y: 50, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 10, name: \"out\") property(Bool) output_bool\n        out(x: 300, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 150, y: 10) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 150, y: 100) first_item_node root.Std_k98ojb.List.FirstItem {}\n        instance(x: 150, y: 200) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 150, y: 300) is_empty_node root.Std_k98ojb.List.IsEmpty {}\n\n        input_str -> characters_node.input\n        characters_node.characters -> first_item_node.list\n        characters_node.characters -> filter_node.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(Char) char_input\n            in(x: -50, y: 100, name: \"index\") property(Number) index_input\n\n            out(x: 100, y: 75, name: \"out\") property(Bool) out_bool\n\n            instance(x: 0, y: 75) equal_node root.Std_k98ojb.Logic.Equal {}\n            char_input -> equal_node.left\n            first_item_node.item -> equal_node.right\n            equal_node.result -> out_bool\n        } -> filter_node.handler\n\n        filter_node.output_list -> is_empty_node.list\n        is_empty_node.isEmpty -> output_bool\n        execute_trigger -> characters_node.trigger\n        is_empty_node.isEmpty -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in the string are the same.\") are_all_characters_same {\n        in(x: 150, y: -53, name: \"input\") property(String) input_string\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_result\n\n        instance(x: 352, y: -493) characters_list root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 933, y: 25) equal_check root.Std_k98ojb.Logic.Equal {}\n        instance(x: 1121, y: -54) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) first_char root.Std_k98ojb.List.FirstItem {}\n        instance(x: 2136, y: -356) not_equal_check root.Std_k98ojb.Logic.NotEqual {}\n\n        input_string -> characters_list.input\n        characters_list.characters -> for_loop.items\n        characters_list.characters -> first_char.list\n        first_char.item -> equal_check.left\n        for_loop.item -> equal_check.right\n        equal_check.result -> not_equal_check.left\n        not_equal_check.result -> if_node.predicate\n        for_loop.onItem -> if_node.execute\n        if_node.then -> for_loop.next\n        if_node.else -> out_result\n        for_loop.done -> out_result\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether all the characters in a string are the same.\") are_all_characters_same {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n\n        out(x: 400, y: 100, name: \"out\") property(Bool) out_result\n\n        instance(x: 200, y: 100) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 300, y: 100) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 500, y: 100) is_empty_node root.Std_k98ojb.List.IsEmpty {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> filter_node.items\n\n        func() {\n            in(x: 0, y: 0, name: \"char\") property(Char) char\n            in(x: 0, y: 50, name: \"index\") property(Number) index\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) out\n\n            instance(x: 100, y: 0) equal_node root.Std_k98ojb.Logic.Equal {}\n\n            char -> equal_node.left\n            characters_node.characters[0] -> equal_node.right\n            equal_node.result -> out\n        } -> filter_node.handler\n\n        filter_node.output_list -> is_empty_node.list\n        is_empty_node.isEmpty -> out_result\n    }\n}"
            ],
            "37": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 161, y: -211, name: \"input\") property(String) input_4f7c2d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_9f2d1b\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) characters_6030c9 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 714, y: -155) filter_8cb3f6 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1121, y: -54) is_numeric_07b8c7 root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 1504, y: -400) length_b720d7 root.Std_k98ojb.List.Length {}\n\n        input_4f7c2d -> characters_6030c9.input\n        characters_6030c9.characters -> filter_8cb3f6.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            element_5f51f7 -> is_numeric_07b8c7.input\n            is_numeric_07b8c7.result -> out_d0fd24\n        } -> filter_8cb3f6.handler\n\n        filter_8cb3f6.output_list -> length_b720d7.list\n        length_b720d7.length -> out_9f2d1b\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 50, y: 0, name: \"input\") property(String) input_string\n\n        out(x: 400, y: 0, name: \"out\") property(Number) digit_count\n\n        instance(x: 150, y: 0) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 250, y: 0) filter_node root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 350, y: 0) length_node root.Std_k98ojb.List.Length {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> filter_node.items\n\n        func() {\n            in(x: 50, y: 0, name: \"char\") property(String) char\n\n            out(x: 150, y: 0, name: \"out\") property(Bool) is_digit\n\n            instance(x: 100, y: 0) is_numeric_node root.Std_k98ojb.Strings.IsNumeric {}\n\n            char -> is_numeric_node.input\n            is_numeric_node.result -> is_digit\n        } -> filter_node.handler\n\n        filter_node.output_list -> length_node.list\n        length_node.length -> digit_count\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 86, y: -21, name: \"input\") property(String) input_7f5c4d\n        in(x: 126, y: -121, name: \"execute\") trigger() execute_1f2b3c\n\n        out(x: 500, y: 10, name: \"digit_count\") property(Number) digit_count_3f9a1b\n        out(x: 650, y: 50, name: \"continue\") trigger() continue_2b7f8c\n\n        instance(x: 300, y: -50) characters_4b5c3d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 350, y: 150) filter_5c8f3e root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 450, y: 250) is_numeric_6a7b2c root.Std_k98ojb.Strings.IsNumeric {}\n        instance(x: 550, y: 350) length_7b8c4d root.Std_k98ojb.List.Length {}\n\n        input_7f5c4d -> characters_4b5c3d.input\n        characters_4b5c3d.characters -> filter_5c8f3e.items\n        func() {\n            in(x: -100, y: 50, name: \"char\") property(String) char_1a2b3c\n\n            out(x: 200, y: 50, name: \"is_digit\") property(Bool) is_digit_4d5e6f\n\n            instance(x: 50, y: 50) is_numeric_6a7b2c root.Std_k98ojb.Strings.IsNumeric {}\n            char_1a2b3c -> is_numeric_6a7b2c.input\n            is_numeric_6a7b2c.result -> is_digit_4d5e6f\n        } -> filter_5c8f3e.handler\n        filter_5c8f3e.output_list -> length_7b8c4d.list\n        length_7b8c4d.length -> digit_count_3f9a1b\n        execute_1f2b3c -> characters_4b5c3d.execute\n        length_7b8c4d.done -> continue_2b7f8c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 108, y: -95, name: \"input\") property(String) input_f5c03d\n        in(x: 99, y: -203, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 682, y: -96, name: \"digit_count\") property(Number) digit_count_8b7a3f\n        out(x: 833, y: -212, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 334, y: -123) characters_34f9a6 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 478, y: -110) filter_7b3f2e root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 622, y: -150) length_0b9f6d root.Std_k98ojb.List.Length {}\n        instance(x: 516, y: -297) isnumeric_9c8f2d root.Std_k98ojb.Strings.IsNumeric {}\n\n        input_f5c03d -> characters_34f9a6.input\n        characters_34f9a6.characters -> filter_7b3f2e.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(String) element_5f51f7\n\n            out(x: 154, y: 35, name: \"is_digit\") property(Bool) is_digit_8f2a4d\n\n            instance(x: 106, y: 17) isnumeric_2f9d09 root.Std_k98ojb.Strings.IsNumeric {}\n            element_5f51f7 -> isnumeric_2f9d09.input\n            isnumeric_2f9d09.isNumeric -> is_digit_8f2a4d\n        } -> filter_7b3f2e.handler\n        filter_7b3f2e.output_list -> length_0b9f6d.list\n        length_0b9f6d.length -> digit_count_8b7a3f\n        execute_27b8c3 -> characters_34f9a6.execute\n        length_0b9f6d.length -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 64, y: -35, name: \"input\") property(String) input_2b8c4e\n        in(x: 64, y: 11, name: \"execute\") trigger() execute_1f3b8d\n\n        out(x: 345, y: -10, name: \"out\") property(Number) out_8b9f2d\n        out(x: 345, y: 30, name: \"continue\") trigger() continue_3b7c9e\n\n        instance(x: 225, y: -140) characters_1a9b2c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 570, y: -75) filter_9f3d7a root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 845, y: -30) length_4c9d2f root.Std_k98ojb.List.Length {}\n\n        input_2b8c4e -> characters_1a9b2c.input\n        characters_1a9b2c.characters -> filter_9f3d7a.items\n        func() {\n            in(x: -85, y: 40, name: \"char\") property(String) char_7b2c4d\n\n            out(x: 270, y: 40, name: \"isDigit\") property(Bool) isDigit_9d8f2a\n\n            instance(x: 70, y: 40) isnumeric_2a3b9d root.Std_k98ojb.Strings.IsNumeric {}\n            char_7b2c4d -> isnumeric_2a3b9d.input\n            isnumeric_2a3b9d.result -> isDigit_9d8f2a\n        } -> filter_9f3d7a.handler\n        filter_9f3d7a.output_list -> length_4c9d2f.list\n        length_4c9d2f.length -> out_8b9f2d\n        execute_1f3b8d -> continue_3b7c9e\n    }\n\n    instance(x: -189, y: 222) count_digits_f0be66 root.main.count_digits {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 153, y: -20, name: \"input\") property(String) input_2c3f0d\n        in(x: 153, y: 60, name: \"execute\") trigger() execute_8a1f3c\n\n        out(x: 500, y: 0, name: \"digit_count\") property(Number) digit_count_9b8f4a\n        out(x: 500, y: 80, name: \"continue\") trigger() continue_1a2b3c\n\n        instance(x: 300, y: -100) characters_1a2f3d root.Std_k98ojb.Strings.Characters {}\n        instance(x: 700, y: -100) filter_2b3f4d root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 1100, y: -100) length_3c4f5e root.Std_k98ojb.List.Length {}\n\n        input_2c3f0d -> characters_1a2f3d.input\n        characters_1a2f3d.characters -> filter_2b3f4d.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char_4d5f6e\n\n            out(x: 200, y: 50, name: \"is_digit\") property(Bool) is_digit_5e6f7d\n\n            instance(x: 100, y: 50) isnumeric_5f6g7h root.Std_k98ojb.Strings.IsNumeric {}\n            char_4d5f6e -> isnumeric_5f6g7h.input\n            isnumeric_5f6g7h.result -> is_digit_5e6f7d\n        } -> filter_2b3f4d.handler\n\n        filter_2b3f4d.output_list -> length_3c4f5e.list\n        length_3c4f5e.length -> digit_count_9b8f4a\n\n        execute_8a1f3c -> characters_1a2f3d.execute\n        length_3c4f5e.length -> continue_1a2b3c\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 100, y: 100, name: \"input\") property(String) input_1a2b3c\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 600, y: 100, name: \"digit_count\") property(Number) digit_count_7g8h9i\n        out(x: 650, y: 150, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 300, y: 100) characters_3m4n5o root.Std_k98ojb.Strings.Characters {}\n        instance(x: 400, y: 100) filter_6p7q8r root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 500, y: 100) length_9s0t1u root.Std_k98ojb.List.Length {}\n\n        input_1a2b3c -> characters_3m4n5o.input\n        characters_3m4n5o.characters -> filter_6p7q8r.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char_2v3w4x\n\n            out(x: 150, y: 50, name: \"is_digit\") property(Bool) is_digit_5y6z7a\n\n            instance(x: 50, y: 50) isnumeric_8b9c0d root.Std_k98ojb.Strings.IsNumeric {}\n            char_2v3w4x -> isnumeric_8b9c0d.input\n            isnumeric_8b9c0d.isNumeric -> is_digit_5y6z7a\n        } -> filter_6p7q8r.handler\n\n        filter_6p7q8r.output_list -> length_9s0t1u.list\n        length_9s0t1u.length -> digit_count_7g8h9i\n\n        execute_4d5e6f -> characters_3m4n5o.trigger\n        length_9s0t1u.length -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts the number of digits in a given string.\") count_digits {\n        in(x: 78, y: 43, name: \"input\") property(String) input_123abc\n        in(x: 45, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 550, y: 60, name: \"out\") property(Number) out_789ghi\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 200, y: 50) characters_345mno root.Std_k98ojb.Strings.Characters {}\n        instance(x: 350, y: 100) filter_678pqr root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 500, y: 100) length_901stu root.Std_k98ojb.List.Length {}\n\n        input_123abc -> characters_345mno.input\n        characters_345mno.characters -> filter_678pqr.items\n\n        func() {\n            in(x: -50, y: 0, name: \"char\") property(String) char_234vwx\n\n            out(x: 150, y: 0, name: \"out\") property(Bool) out_567yz\n\n            instance(x: 50, y: 0) isnumeric_890abc root.Std_k98ojb.Strings.IsNumeric {}\n            char_234vwx -> isnumeric_890abc.input\n            isnumeric_890abc.isNumeric -> out_567yz\n        } -> filter_678pqr.handler\n\n        filter_678pqr.output_list -> length_901stu.list\n        length_901stu.length -> out_789ghi\n\n        execute_456def -> characters_345mno.trigger\n        length_901stu.length -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 200, y: 100, name: \"input\") property(String) input_5c03d\n        in(x: 200, y: 150, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 600, y: 100, name: \"out\") property(Number) out_f3db9f\n        out(x: 600, y: 150, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 400, y: 100) characters_5f51f7 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 400, y: 200) filter_2f9d09 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 600, y: 200) length_d0fd24 root.Std_k98ojb.List.Length {}\n\n        input_5c03d -> characters_5f51f7.input\n        characters_5f51f7.characters -> filter_2f9d09.items\n\n        func() {\n            in(x: -76, y: 46, name: \"character\") property(String) character_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) isnumeric_2f9d09 root.Std_k98ojb.Strings.IsNumeric {}\n            character_5f51f7 -> isnumeric_2f9d09.input\n            isnumeric_2f9d09.result -> out_d0fd24\n        } -> filter_2f9d09.handler\n\n        filter_2f9d09.output_list -> length_d0fd24.list\n        length_d0fd24.length -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"counts number of digits in a given string.\") count_digits {\n        in(x: 50, y: 50, name: \"input\") property(String) input_string\n\n        out(x: 350, y: 50, name: \"out\") property(Number) digit_count\n\n        instance(x: 150, y: 50) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 250, y: 50) filter_digits root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 450, y: 50) list_length root.Std_k98ojb.List.Length {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> filter_digits.items\n\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char\n\n            out(x: 150, y: 50, name: \"is_digit\") property(Bool) is_digit\n\n            instance(x: 50, y: 50) is_numeric_node root.Std_k98ojb.Strings.IsNumeric {}\n\n            char -> is_numeric_node.input\n            is_numeric_node.isNumeric -> is_digit\n        } -> filter_digits.handler\n\n        filter_digits.output_list -> list_length.list\n        list_length.length -> digit_count\n    }\n}"
            ],
            "38": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 100, y: 100, name: \"n\") property(Number) n_input\n\n        out(x: 500, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 100) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 300, y: 100) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 400, y: 100) map_fourth_power root.Std_k98ojb.Iteration.Map {}\n        instance(x: 600, y: 100) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        generaterange_odd.list -> filter_odd.items\n\n        func() {\n            in(x: -100, y: 100, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 100, name: \"result\") property(Bool) result_output\n\n            instance(x: 0, y: 100) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 50, y: 100) equal_odd root.Std_k98ojb.Logic.Equal {}\n\n            item_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> equal_odd.left\n            1 -> equal_odd.right\n            equal_odd.result -> result_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_fourth_power.items\n\n        func() {\n            in(x: -100, y: 100, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 100, name: \"result\") property(Number) result_output\n\n            instance(x: 0, y: 100) pow_fourth root.Std_k98ojb.Math.Pow {}\n\n            item_input -> pow_fourth.x\n            4 -> pow_fourth.y\n            pow_fourth.result -> result_output\n        } -> map_fourth_power.handler\n\n        map_fourth_power.output_list -> reduce_sum.items\n\n        func() {\n            in(x: -100, y: 100, name: \"acc\") property(Number) acc_input\n            in(x: -100, y: 150, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 100, name: \"result\") property(Number) result_output\n\n            instance(x: 0, y: 100) add_sum root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_sum.first\n            item_input -> add_sum.second\n            add_sum.result -> result_output\n        } -> reduce_sum.handler\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of the fourth power of the first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 100, y: 100, name: \"n\") property(Number) n_input\n\n        out(x: 400, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 200, y: 100) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 100) map_fourth_power root.Std_k98ojb.Iteration.Map {}\n        instance(x: 800, y: 100) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        2 -> generaterange_odd.step\n\n        generaterange_odd.list -> map_fourth_power.items\n\n        func() {\n            in(x: 0, y: 0, name: \"odd_number\") property(Number) odd_number_input\n            out(x: 200, y: 0, name: \"fourth_power\") property(Number) fourth_power_output\n\n            instance(x: 100, y: 0) pow_fourth root.Std_k98ojb.Math.Pow {}\n\n            odd_number_input -> pow_fourth.x\n            4 -> pow_fourth.y\n\n            pow_fourth.result -> fourth_power_output\n        } -> map_fourth_power.handler\n\n        map_fourth_power.output_list -> reduce_sum.items\n\n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_input\n            in(x: 0, y: 100, name: \"value\") property(Number) value_input\n            out(x: 200, y: 50, name: \"new_acc\") property(Number) new_acc_output\n\n            instance(x: 100, y: 50) add_values root.Std_k98ojb.Math.Add {}\n\n            acc_input -> add_values.first\n            value_input -> add_values.second\n\n            add_values.result -> new_acc_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial_value\n\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 90, y: -32, name: \"n\") property(Number) n_1a2b3c\n        in(x: 90, y: 32, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 420, y: 0, name: \"sum\") property(Number) sum_7g8h9i\n        out(x: 420, y: 64, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 300, y: -32) generaterange_3m4n5o root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: -32) map_6p7q8r root.Std_k98ojb.Iteration.Map {}\n        instance(x: 900, y: -32) reduce_9s0t1u root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 1200, y: -32) add_2v3w4x root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_3m4n5o.from\n        n_1a2b3c -> generaterange_3m4n5o.to\n        generaterange_3m4n5o.list -> map_6p7q8r.items\n\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_5y6z7a root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1) ^ 4\"\n            }\n            element_5f51f7 -> expression_5y6z7a.gen_0\n            expression_5y6z7a.result -> out_d0fd24\n        } -> map_6p7q8r.handler\n\n        map_6p7q8r.output_list -> reduce_9s0t1u.items\n\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_8b9c0d\n            in(x: -76, y: 92, name: \"value\") property(Number) value_1e2f3g\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_4h5i6j\n\n            instance(x: 106, y: 17) add_7k8l9m root.Std_k98ojb.Math.Add {}\n            acc_8b9c0d -> add_7k8l9m.first\n            value_1e2f3g -> add_7k8l9m.second\n            add_7k8l9m.result -> out_4h5i6j\n        } -> reduce_9s0t1u.reducer\n\n        0 -> reduce_9s0t1u.initial\n        reduce_9s0t1u.result -> sum_7g8h9i\n        execute_4d5e6f -> generaterange_3m4n5o.reset\n        reduce_9s0t1u.done -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 150, y: -50, name: \"n\") property(Number) n_input\n\n        out(x: 850, y: -50, name: \"sum\") property(Number) sum_output\n\n        instance(x: 350, y: -150) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 550, y: -50) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 750, y: -50) reduce_9fba8c root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 950, y: -150) pow_2f9d09 root.Std_k98ojb.Math.Pow {}\n\n        1 -> generaterange_038fce.from\n        n_input -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n\n        func() {\n            in(x: -50, y: 50, name: \"element\") property(Number) element_input\n\n            out(x: 150, y: 50, name: \"out\") property(Number) out_output\n\n            instance(x: 50, y: 50) expression_b720d7 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1)\"\n            }\n            element_input -> expression_b720d7.gen_0\n            expression_b720d7.result -> out_output\n        } -> map_6030c9.handler\n\n        map_6030c9.output_list -> reduce_9fba8c.items\n\n        func() {\n            in(x: -50, y: 50, name: \"accumulated\") property(Number) accumulated_input\n            in(x: -50, y: 150, name: \"current\") property(Number) current_input\n\n            out(x: 150, y: 100, name: \"out\") property(Number) out_output\n\n            current_input -> pow_2f9d09.x\n            4 -> pow_2f9d09.y\n            pow_2f9d09.result -> expression_9fba8c.gen_0\n            accumulated_input -> expression_9fba8c.gen_1\n            expression_9fba8c.result -> out_output\n        } -> reduce_9fba8c.reducer\n\n        0 -> reduce_9fba8c.initial\n        reduce_9fba8c.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 50, y: 0, name: \"n\") property(Number) n_0\n        in(x: 50, y: 50, name: \"execute\") trigger() execute_1\n\n        out(x: 300, y: 0, name: \"sum\") property(Number) sum_0\n        out(x: 300, y: 50, name: \"continue\") trigger() continue_1\n\n        instance(x: 150, y: 0) generaterange_0 root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 150, y: 100) map_0 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 300, y: 100) reduce_0 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 450, y: 0) add_0 root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_0.from\n        n_0 -> generaterange_0.to\n        generaterange_0.list -> map_0.items\n\n        func() {\n            in(x: 0, y: 0, name: \"element\") property(Number) element_0\n\n            out(x: 200, y: 0, name: \"out\") property(Number) out_0\n\n            instance(x: 100, y: 0) expression_0 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * element - 1) ^ 4\"\n            }\n\n            element_0 -> expression_0.gen_0\n            expression_0.result -> out_0\n        } -> map_0.handler\n\n        map_0.output_list -> reduce_0.items\n\n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc_0\n            in(x: 0, y: 50, name: \"value\") property(Number) value_0\n\n            out(x: 200, y: 0, name: \"out\") property(Number) out_0\n\n            instance(x: 100, y: 0) add_0 root.Std_k98ojb.Math.Add {}\n\n            acc_0 -> add_0.first\n            value_0 -> add_0.second\n            add_0.result -> out_0\n        } -> reduce_0.reducer\n\n        0 -> reduce_0.initial\n        reduce_0.result -> sum_0\n        execute_1 -> generaterange_0.reset\n        reduce_0.done -> continue_1\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 300, y: -50, name: \"n\") property(Number) n_3b5a6f\n        in(x: 300, y: -100, name: \"execute\") trigger() execute_1a2b3c\n\n        out(x: 800, y: 0, name: \"sum\") property(Number) sum_4c5d6e\n        out(x: 800, y: 50, name: \"continue\") trigger() continue_7f8g9h\n\n        instance(x: 500, y: -200) generate_range_5d6e7f root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: -150) filter_odds_8g9h0i root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 700, y: -100) map_fourth_power_1j2k3l root.Std_k98ojb.Iteration.Map {}\n        instance(x: 900, y: -50) reduce_sum_4m5n6o root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generate_range_5d6e7f.from\n        n_3b5a6f -> generate_range_5d6e7f.to\n        generate_range_5d6e7f.list -> filter_odds_8g9h0i.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_1a2b3c\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) out_4d5e6f\n\n            instance(x: 50, y: 0) modulo_7g8h9i root.Std_k98ojb.Math.Modulo {}\n            instance(x: 100, y: 0) not_equal_0j1k2l root.Std_k98ojb.Logic.NotEqual {}\n\n            item_1a2b3c -> modulo_7g8h9i.value\n            2 -> modulo_7g8h9i.divisor\n            modulo_7g8h9i.result -> not_equal_0j1k2l.left\n            0 -> not_equal_0j1k2l.right\n            not_equal_0j1k2l.result -> out_4d5e6f\n        } -> filter_odds_8g9h0i.handler\n\n        filter_odds_8g9h0i.output_list -> map_fourth_power_1j2k3l.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_7g8h9i\n\n            out(x: 200, y: 0, name: \"out\") property(Number) out_0j1k2l\n\n            instance(x: 50, y: 0) pow_3l4m5n root.Std_k98ojb.Math.Pow {}\n\n            item_7g8h9i -> pow_3l4m5n.x\n            4 -> pow_3l4m5n.y\n            pow_3l4m5n.result -> out_0j1k2l\n        } -> map_fourth_power_1j2k3l.handler\n\n        map_fourth_power_1j2k3l.output_list -> reduce_sum_4m5n6o.items\n\n        func() {\n            in(x: -100, y: 0, name: \"accumulated\") property(Number) accumulated_2l3m4n\n            in(x: -100, y: 50, name: \"current\") property(Number) current_5n6o7p\n\n            out(x: 200, y: 0, name: \"out\") property(Number) out_8q9r0s\n\n            instance(x: 50, y: 0) add_1t2u3v root.Std_k98ojb.Math.Add {}\n\n            accumulated_2l3m4n -> add_1t2u3v.first\n            current_5n6o7p -> add_1t2u3v.second\n            add_1t2u3v.result -> out_8q9r0s\n        } -> reduce_sum_4m5n6o.reducer\n\n        0 -> reduce_sum_4m5n6o.initial_value\n        reduce_sum_4m5n6o.result -> sum_4c5d6e\n        execute_1a2b3c -> reduce_sum_4m5n6o.execute\n        reduce_sum_4m5n6o.done -> continue_7f8g9h\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of the fourth power of the first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 154, y: -37, name: \"n\") property(Number) n_8c3d6f\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1789, y: -10, name: \"sum\") property(Number) sum_1a2b3c\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 591, y: 74) map_6030c9 root.Std_k98ojb.Iteration.Map {}\n        instance(x: 1121, y: -54) reduce_07b8c7 root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 714, y: -155) mul_2f9d09 root.Std_k98ojb.Math.Mul {}\n        instance(x: 1504, y: -400) pow_b720d7 root.Std_k98ojb.Math.Pow {}\n\n        1 -> generaterange_038fce.from\n        n_8c3d6f -> generaterange_038fce.to\n        generaterange_038fce.list -> map_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(2 * i - 1)\"\n            }\n            element_5f51f7 -> expression_2f9d09.gen_0\n            expression_2f9d09.result -> out_d0fd24\n        } -> map_6030c9.handler\n        map_6030c9.output_list -> reduce_07b8c7.items\n        func() {\n            in(x: -76, y: 46, name: \"acc\") property(Number) acc_5f51f7\n            in(x: -76, y: 46, name: \"value\") property(Number) value_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            value_5f51f7 -> pow_b720d7.x\n            4 -> pow_b720d7.y\n            pow_b720d7.result -> mul_2f9d09.first\n            acc_5f51f7 -> mul_2f9d09.second\n            mul_2f9d09.result -> out_d0fd24\n        } -> reduce_07b8c7.reducer\n        0 -> reduce_07b8c7.initial\n        reduce_07b8c7.result -> sum_1a2b3c\n        execute_27b8c3 -> reduce_07b8c7.reset\n        reduce_07b8c7.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power {\n        in(x: 150, y: -50, name: \"n\") property(Number) n_123456\n        in(x: 150, y: 50, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 750, y: 0, name: \"sum\") property(Number) sum_789abc\n        out(x: 750, y: 100, name: \"continue\") trigger() continue_123abc\n\n        instance(x: 350, y: 0) generaterange_abcdef root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 550, y: 0) filter_abcdef root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 750, y: 0) map_abcdef root.Std_k98ojb.Iteration.Map {}\n        instance(x: 950, y: 0) reduce_abcdef root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_abcdef.from\n        n_123456 -> generaterange_abcdef.to\n        generaterange_abcdef.list -> filter_abcdef.items\n\n        func() {\n            in(x: -50, y: 0, name: \"number\") property(Number) number_abcdef\n\n            out(x: 150, y: 0, name: \"is_odd\") property(Bool) is_odd_abcdef\n\n            instance(x: 50, y: 0) modulo_abcdef root.Std_k98ojb.Math.Modulo {}\n            instance(x: 100, y: 0) equal_abcdef root.Std_k98ojb.Logic.Equal {}\n\n            number_abcdef -> modulo_abcdef.value\n            2 -> modulo_abcdef.divisor\n            modulo_abcdef.result -> equal_abcdef.left\n            1 -> equal_abcdef.right\n            equal_abcdef.result -> is_odd_abcdef\n        } -> filter_abcdef.handler\n\n        filter_abcdef.output_list -> map_abcdef.items\n\n        func() {\n            in(x: -50, y: 0, name: \"odd_number\") property(Number) odd_number_abcdef\n\n            out(x: 150, y: 0, name: \"fourth_power\") property(Number) fourth_power_abcdef\n\n            instance(x: 50, y: 0) pow_abcdef root.Std_k98ojb.Math.Pow {}\n\n            odd_number_abcdef -> pow_abcdef.x\n            4 -> pow_abcdef.y\n            pow_abcdef.result -> fourth_power_abcdef\n        } -> map_abcdef.handler\n\n        map_abcdef.output_list -> reduce_abcdef.items\n\n        func() {\n            in(x: -50, y: 0, name: \"acc\") property(Number) acc_abcdef\n            in(x: -50, y: 50, name: \"value\") property(Number) value_abcdef\n\n            out(x: 150, y: 0, name: \"sum\") property(Number) sum_abcdef\n\n            instance(x: 50, y: 0) add_abcdef root.Std_k98ojb.Math.Add {}\n\n            acc_abcdef -> add_abcdef.first\n            value_abcdef -> add_abcdef.second\n            add_abcdef.result -> sum_abcdef\n        } -> reduce_abcdef.reducer\n\n        0 -> reduce_abcdef.initial\n        reduce_abcdef.result -> sum_789abc\n        execute_abcdef -> generaterange_abcdef.reset\n        reduce_abcdef.done -> continue_123abc\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 200, y: 100, name: \"n\") property(Number) n_input\n\n        out(x: 600, y: 100, name: \"sum\") property(Number) sum_output\n\n        instance(x: 300, y: 100) generaterange_odd root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 400, y: 100) filter_odd root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 500, y: 100) map_fourth_power root.Std_k98ojb.Iteration.Map {}\n        instance(x: 700, y: 100) reduce_sum root.Std_k98ojb.Iteration.Reduce {}\n\n        1 -> generaterange_odd.from\n        n_input -> generaterange_odd.to\n        generaterange_odd.list -> filter_odd.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 0, name: \"is_odd\") property(Bool) is_odd_output\n\n            instance(x: 0, y: 0) modulo_odd root.Std_k98ojb.Math.Modulo {}\n            instance(x: 50, y: 0) not_equal_zero root.Std_k98ojb.Logic.NotEqual {}\n\n            item_input -> modulo_odd.value\n            2 -> modulo_odd.divisor\n            modulo_odd.result -> not_equal_zero.left\n            0 -> not_equal_zero.right\n            not_equal_zero.result -> is_odd_output\n        } -> filter_odd.handler\n\n        filter_odd.output_list -> map_fourth_power.items\n\n        func() {\n            in(x: -100, y: 0, name: \"item\") property(Number) item_input\n\n            out(x: 100, y: 0, name: \"fourth_power\") property(Number) fourth_power_output\n\n            instance(x: 0, y: 0) pow_fourth root.Std_k98ojb.Math.Pow {}\n\n            item_input -> pow_fourth.x\n            4 -> pow_fourth.y\n            pow_fourth.result -> fourth_power_output\n        } -> map_fourth_power.handler\n\n        map_fourth_power.output_list -> reduce_sum.items\n\n        func() {\n            in(x: -100, y: 0, name: \"accumulated\") property(Number) accumulated_input\n            in(x: -100, y: 50, name: \"current\") property(Number) current_input\n\n            out(x: 100, y: 0, name: \"sum\") property(Number) sum_output\n\n            instance(x: 0, y: 0) add_sum root.Std_k98ojb.Math.Add {}\n\n            accumulated_input -> add_sum.first\n            current_input -> add_sum.second\n            add_sum.result -> sum_output\n        } -> reduce_sum.reducer\n\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum_output\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of fourth power of first n odd natural numbers.\") sum_of_fourth_power_of_odds {\n        in(x: 180, y: -45, name: \"n\") property(Number) n_0a5b6c\n        in(x: 180, y: 45, name: \"execute\") trigger() execute_1a2b3c\n\n        out(x: 780, y: 0, name: \"sum\") property(Number) sum_4d5e6f\n        out(x: 780, y: 60, name: \"continue\") trigger() continue_7g8h9i\n\n        instance(x: 360, y: 0) generaterange_123abc root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 540, y: 0) filter_456def root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 540, y: 120) map_789ghi root.Std_k98ojb.Iteration.Map {}\n        instance(x: 720, y: 0) reduce_101jkl root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 360, y: 120) expression_112mno root.Std_k98ojb.Math.Expression {\n            expression: \"(it % 2 != 0)\"\n        }\n        instance(x: 540, y: 240) pow_131pqr root.Std_k98ojb.Math.Pow {}\n        instance(x: 720, y: 120) add_141stu root.Std_k98ojb.Math.Add {}\n\n        1 -> generaterange_123abc.from\n        n_0a5b6c -> generaterange_123abc.to\n        generaterange_123abc.list -> filter_456def.items\n        func() {\n            in(x: -60, y: 0, name: \"it\") property(Number) it_151vwx\n\n            out(x: 240, y: 0, name: \"out\") property(Bool) out_161yz\n\n            it_151vwx -> expression_112mno.gen_0\n            expression_112mno.result -> out_161yz\n        } -> filter_456def.handler\n        filter_456def.output_list -> map_789ghi.items\n        func() {\n            in(x: -60, y: 0, name: \"it\") property(Number) it_171abc\n\n            out(x: 240, y: 0, name: \"out\") property(Number) out_181def\n\n            it_171abc -> pow_131pqr.x\n            4 -> pow_131pqr.y\n            pow_131pqr.result -> out_181def\n        } -> map_789ghi.handler\n        map_789ghi.output_list -> reduce_101jkl.items\n        func() {\n            in(x: -60, y: 0, name: \"acc\") property(Number) acc_191ghi\n            in(x: -60, y: 60, name: \"it\") property(Number) it_201jkl\n\n            out(x: 240, y: 0, name: \"out\") property(Number) out_211mno\n\n            acc_191ghi -> add_141stu.first\n            it_201jkl -> add_141stu.second\n            add_141stu.result -> out_211mno\n        } -> reduce_101jkl.reducer\n        0 -> reduce_101jkl.initial\n        reduce_101jkl.result -> sum_4d5e6f\n        execute_1a2b3c -> generaterange_123abc.reset\n        reduce_101jkl.done -> continue_7g8h9i\n    }\n}"
            ],
            "46": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") cube_surface_area {\n        in(x: 154, y: 37, name: \"side_length\") property(Number) side_length_9c7f2d\n        in(x: 154, y: 67, name: \"execute\") trigger() execute_0f7c1e\n\n        out(x: 354, y: 37, name: \"surface_area\") property(Number) surface_area_2d7a9b\n        out(x: 354, y: 67, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 554, y: 37) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n            expression: \"6 * side_length * side_length\"\n        }\n        \n        execute_0f7c1e -> expression_2f9d09.execute\n        side_length_9c7f2d -> expression_2f9d09.side_length\n        expression_2f9d09.result -> surface_area_2d7a9b\n        expression_2f9d09.done -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length_123456\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_654321\n\n        out(x: 300, y: 100, name: \"surface_area\") property(Number) surface_area_abcdef\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 200, y: 100) expression_789abc root.Std_k98ojb.Math.Expression {\n            expression: \"6 * side_length * side_length\"\n        }\n\n        side_length_123456 -> expression_789abc.side_length\n        expression_789abc.result -> surface_area_abcdef\n        execute_654321 -> expression_789abc.execute\n        expression_789abc.done -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") cube_surface_area {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"surface_area\") property(Number) surface_area_output\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 200, y: 150) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        6 -> mul_1.first\n        side_length_input -> mul_1.second\n        mul_1.result -> mul_2.first\n        side_length_input -> mul_2.second\n        mul_2.result -> surface_area_output\n\n        execute_trigger -> continue_trigger\n    }\n}",
                "module() main {\n    func(doc: \"Finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 160, y: 40, name: \"side_length\") property(Number) side_length_1a2b3c\n        in(x: 160, y: 80, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 360, y: 40, name: \"surface_area\") property(Number) surface_area_7g8h9i\n        out(x: 360, y: 80, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 260, y: 40) expression_3m4n5o root.Std_k98ojb.Math.Expression {\n            expression: \"6 * side_length * side_length\"\n        }\n\n        execute_4d5e6f -> expression_3m4n5o.execute\n        side_length_1a2b3c -> expression_3m4n5o.gen_0\n        expression_3m4n5o.result -> surface_area_7g8h9i\n        expression_3m4n5o.done -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") cube_surface_area {\n        in(x: 50, y: 50, name: \"side_length\") property(Number) side_length_123456\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_abcdef\n\n        out(x: 300, y: 50, name: \"surface_area\") property(Number) surface_area_654321\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 150, y: 50) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 200, y: 50) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        side_length_123456 -> mul_1.first\n        side_length_123456 -> mul_1.second\n        mul_1.result -> mul_2.first\n        6 -> mul_2.second\n        mul_2.result -> surface_area_654321\n        execute_abcdef -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the surface area of a cube given its side length.\") cube_surface_area {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length_1a2b3c\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 300, y: 100, name: \"surface_area\") property(Number) surface_area_7g8h9i\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 200, y: 100) expression_3m4n5o root.Std_k98ojb.Math.Expression {\n            expression: \"6 * side * side\"\n        }\n\n        side_length_1a2b3c -> expression_3m4n5o.side\n        expression_3m4n5o.result -> surface_area_7g8h9i\n        execute_4d5e6f -> continue_0j1k2l\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 100, y: 100, name: \"side_length\") property(Number) side_length_123abc\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_456def\n\n        out(x: 300, y: 100, name: \"surface_area\") property(Number) surface_area_789ghi\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 200, y: 100) mul_abc123 root.Std_k98ojb.Math.Mul {}\n        instance(x: 200, y: 150) mul_def456 root.Std_k98ojb.Math.Mul {}\n\n        6 -> mul_def456.first\n        side_length_123abc -> mul_abc123.first\n        side_length_123abc -> mul_abc123.second\n        mul_abc123.result -> mul_def456.second\n        mul_def456.result -> surface_area_789ghi\n\n        execute_456def -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the surface area of a cube of a given size.\") surface_area_of_cube {\n        in(x: 200, y: 100, name: \"side_length\") property(Number) side_length\n\n        out(x: 600, y: 100, name: \"surface_area\") property(Number) surface_area\n\n        instance(x: 400, y: 100) mul_1 root.Std_k98ojb.Math.Mul {}\n        instance(x: 500, y: 100) mul_2 root.Std_k98ojb.Math.Mul {}\n\n        side_length -> mul_1.first\n        side_length -> mul_1.second\n\n        mul_1.result -> mul_2.first\n        6 -> mul_2.second\n\n        mul_2.result -> surface_area\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube of a given size.\") cube_surface_area {\n        in(x: 60, y: 60, name: \"side_length\") property(Number) side_length\n\n        out(x: 300, y: 60, name: \"surface_area\") property(Number) surface_area\n\n        instance(x: 180, y: 60) expression_4b7f1a root.Std_k98ojb.Math.Expression {\n            expression: \"6 * a * a\"\n        }\n        side_length -> expression_4b7f1a.a\n        expression_4b7f1a.result -> surface_area\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the surface area of a cube given its side length.\") surface_area_of_cube {\n        in(x: 354, y: -53, name: \"side_length\") property(Number) side_length_123abc\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_456def\n\n        out(x: 1748, y: -10, name: \"surface_area\") property(Number) surface_area_789ghi\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 591, y: 74) mul_abc123 root.Std_k98ojb.Math.Mul {}\n        instance(x: 933, y: 25) mul_def456 root.Std_k98ojb.Math.Mul {}\n\n        side_length_123abc -> mul_abc123.first\n        side_length_123abc -> mul_abc123.second\n        mul_abc123.result -> mul_def456.first\n        6 -> mul_def456.second\n        mul_def456.result -> surface_area_789ghi\n        execute_456def -> continue_012jkl\n    }\n}"
            ],
            "19": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 100, y: 100, name: \"input\") property(List) input_list\n\n        out(x: 500, y: 100, name: \"difference\") property(Number) difference\n\n        instance(x: 300, y: 50) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 300, y: 150) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 400, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_node.list\n        input_list -> min_node.list\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n        sub_node.result -> difference\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between the largest and smallest value in a given list.\") find_difference {\n        in(x: 134, y: -58, name: \"input_list\") property(List) input_list_1f3d2a\n        in(x: 134, y: -158, name: \"execute\") trigger() execute_5a3b9c\n\n        out(x: 534, y: -58, name: \"difference\") property(Number) difference_3e4f1b\n        out(x: 534, y: 42, name: \"continue\") trigger() continue_7d4e2b\n\n        instance(x: 334, y: -258) max_8f3c1d root.Std_k98ojb.List.Max {}\n        instance(x: 334, y: -158) min_7b2d3c root.Std_k98ojb.List.Min {}\n        instance(x: 434, y: -58) sub_9c4e5f root.Std_k98ojb.Math.Sub {}\n\n        input_list_1f3d2a -> max_8f3c1d.list\n        input_list_1f3d2a -> min_7b2d3c.list\n        max_8f3c1d.max -> sub_9c4e5f.first\n        min_7b2d3c.min -> sub_9c4e5f.second\n        sub_9c4e5f.result -> difference_3e4f1b\n        execute_5a3b9c -> continue_7d4e2b\n    }\n}",
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"find the difference between largest and smallest value in a given list.\") difference_largest_smallest {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) max_6030c9 root.Std_k98ojb.List.Max {}\n        instance(x: 591, y: 74) min_038fce root.Std_k98ojb.List.Min {}\n        instance(x: 933, y: 25) sub_f11fda root.Std_k98ojb.Math.Sub {}\n\n        input_f5c03d -> max_6030c9.list\n        input_f5c03d -> min_038fce.list\n        max_6030c9.max -> sub_f11fda.first\n        min_038fce.min -> sub_f11fda.second\n        sub_f11fda.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) difference_largest_smallest_f0be66 root.main.difference_largest_smallest {}\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") difference_between_largest_and_smallest {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n\n        out(x: 300, y: 100, name: \"difference\") property(Number) difference\n\n        instance(x: 200, y: 50) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 200, y: 150) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 400, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_node.list\n        input_list -> min_node.list\n\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n\n        sub_node.result -> difference\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 180, y: -160, name: \"input_list\") property(List) input_list_1c3d4b\n        in(x: 180, y: -80, name: \"execute\") trigger() execute_7f9c1a\n\n        out(x: 180, y: 160, name: \"difference\") property(Number) difference_2a3b5c\n        out(x: 180, y: 240, name: \"continue\") trigger() continue_8e1d3f\n\n        instance(x: 360, y: -160) max_4f7b9e root.Std_k98ojb.List.Max {}\n        instance(x: 360, y: -80) min_6a8d2f root.Std_k98ojb.List.Min {}\n        instance(x: 540, y: -40) sub_5b3e7d root.Std_k98ojb.Math.Sub {}\n\n        input_list_1c3d4b -> max_4f7b9e.list\n        input_list_1c3d4b -> min_6a8d2f.list\n        max_4f7b9e.max -> sub_5b3e7d.first\n        min_6a8d2f.min -> sub_5b3e7d.second\n        sub_5b3e7d.result -> difference_2a3b5c\n        execute_7f9c1a -> continue_8e1d3f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between the largest and smallest value in a given list.\") find_difference {\n        in(x: 150, y: 50, name: \"input_list\") property(List<Number>) input_list_3b5a6f\n        in(x: 150, y: 100, name: \"execute\") trigger() execute_1a2b3c\n\n        out(x: 450, y: 50, name: \"difference\") property(Number) difference_4c5d6e\n        out(x: 450, y: 100, name: \"continue\") trigger() continue_7e8f9g\n\n        instance(x: 300, y: 50) max_2a3b4c root.Std_k98ojb.List.Max {}\n        instance(x: 300, y: 100) min_5d6e7f root.Std_k98ojb.List.Min {}\n        instance(x: 600, y: 75) sub_8g9h0i root.Std_k98ojb.Math.Sub {}\n\n        input_list_3b5a6f -> max_2a3b4c.list\n        input_list_3b5a6f -> min_5d6e7f.list\n        max_2a3b4c.max -> sub_8g9h0i.first\n        min_5d6e7f.min -> sub_8g9h0i.second\n        sub_8g9h0i.result -> difference_4c5d6e\n\n        execute_1a2b3c -> max_2a3b4c.execute\n        execute_1a2b3c -> min_5d6e7f.execute\n        sub_8g9h0i.result -> continue_7e8f9g\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between the largest and smallest value in a given list.\") find_difference {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n\n        out(x: 500, y: 100, name: \"difference\") property(Number) difference\n\n        instance(x: 300, y: 50) max_node root.Std_k98ojb.List.Max {}\n        instance(x: 300, y: 150) min_node root.Std_k98ojb.List.Min {}\n        instance(x: 400, y: 100) sub_node root.Std_k98ojb.Math.Sub {}\n\n        input_list -> max_node.list\n        input_list -> min_node.list\n\n        max_node.max -> sub_node.first\n        min_node.min -> sub_node.second\n\n        sub_node.result -> difference\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 54, y: 34, name: \"input_list\") property(List) input_list_2a3b4c\n        in(x: 54, y: 64, name: \"execute\") trigger() execute_1a2b3c\n\n        out(x: 354, y: 34, name: \"difference\") property(Number) difference_3b4c5d\n        out(x: 354, y: 64, name: \"continue\") trigger() continue_4c5d6e\n\n        instance(x: 154, y: 134) max_5d6e7f root.Std_k98ojb.List.Max {}\n        instance(x: 154, y: 234) min_6e7f8g root.Std_k98ojb.List.Min {}\n        instance(x: 254, y: 184) sub_7f8g9h root.Std_k98ojb.Math.Sub {}\n\n        input_list_2a3b4c -> max_5d6e7f.list\n        input_list_2a3b4c -> min_6e7f8g.list\n        max_5d6e7f.max -> sub_7f8g9h.first\n        min_6e7f8g.min -> sub_7f8g9h.second\n        sub_7f8g9h.result -> difference_3b4c5d\n        execute_1a2b3c -> continue_4c5d6e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the difference between the largest and smallest value in a given list.\") find_difference {\n        in(x: 150, y: -50, name: \"input_list\") property(List) input_list_123456\n        in(x: 150, y: 0, name: \"execute\") trigger() execute_654321\n\n        out(x: 450, y: -50, name: \"difference\") property(Number) difference_abcdef\n        out(x: 450, y: 0, name: \"continue\") trigger() continue_fedcba\n\n        instance(x: 300, y: -100) max_1a2b3c root.Std_k98ojb.List.Max {}\n        instance(x: 300, y: -50) min_4d5e6f root.Std_k98ojb.List.Min {}\n        instance(x: 300, y: 0) sub_7g8h9i root.Std_k98ojb.Math.Sub {}\n\n        input_list_123456 -> max_1a2b3c.list\n        input_list_123456 -> min_4d5e6f.list\n        max_1a2b3c.max -> sub_7g8h9i.first\n        min_4d5e6f.min -> sub_7g8h9i.second\n        sub_7g8h9i.result -> difference_abcdef\n\n        execute_654321 -> max_1a2b3c.execute\n        max_1a2b3c.done -> min_4d5e6f.execute\n        min_4d5e6f.done -> sub_7g8h9i.execute\n        sub_7g8h9i.done -> continue_fedcba\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the difference between largest and smallest value in a given list.\") find_difference {\n        in(x: 240, y: -90, name: \"input\") property(List) input_0a2b3c\n        in(x: 160, y: -240, name: \"execute\") trigger() execute_1b2c3d\n\n        out(x: 840, y: -90, name: \"difference\") property(Number) difference_3d4e5f\n        out(x: 960, y: 120, name: \"continue\") trigger() continue_4e5f6g\n\n        instance(x: 480, y: -240) max_5f6g7h root.Std_k98ojb.List.Max {}\n        instance(x: 480, y: -90) min_6g7h8i root.Std_k98ojb.List.Min {}\n        instance(x: 720, y: -150) sub_7h8i9j root.Std_k98ojb.Math.Sub {}\n\n        input_0a2b3c -> max_5f6g7h.list\n        input_0a2b3c -> min_6g7h8i.list\n        max_5f6g7h.max -> sub_7h8i9j.first\n        min_6g7h8i.min -> sub_7h8i9j.second\n        sub_7h8i9j.result -> difference_3d4e5f\n        execute_1b2c3d -> continue_4e5f6g\n    }\n}"
            ],
            "22": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_result\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_node root.Std_k98ojb.Logic.Equal {}\n\n        input_number -> modulo_node.value\n        2 -> modulo_node.divisor\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n        equal_node.result -> out_result\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.value -> out_is_even\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_result\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_node root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_node root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_node.value\n        2 -> modulo_node.divisor\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n        equal_node.result -> if_node.predicate\n        if_node.predicate -> out_result\n        execute_trigger -> if_node.execute\n        if_node.then -> continue_trigger\n        if_node.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 150) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 250, y: 150) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.predicate -> output_is_even\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_f5c03d\n        in(x: 200, y: 100, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_f3db9f\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 150, y: 200) modulo_038fce root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 200) equal_07b8c7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 350, y: 200) if_8cb3f6 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> modulo_038fce.value\n        2 -> modulo_038fce.divisor\n        modulo_038fce.result -> equal_07b8c7.left\n        0 -> equal_07b8c7.right\n        equal_07b8c7.result -> if_8cb3f6.predicate\n        if_8cb3f6.value -> out_f3db9f\n        execute_27b8c3 -> if_8cb3f6.execute\n        if_8cb3f6.then -> continue_8ba06b\n        if_8cb3f6.else -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 50, name: \"input\") property(Number) input_number\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) is_even_output\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 50) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 50) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.predicate -> is_even_output\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 150) equal_node root.Std_k98ojb.Logic.Equal {}\n\n        input_number -> modulo_node.value\n        2 -> modulo_node.divisor\n        modulo_node.result -> equal_node.left\n        0 -> equal_node.right\n        equal_node.result -> out_is_even\n        execute_trigger -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 50, name: \"input\") property(Number) input_8a7b3d\n        in(x: 150, y: 50, name: \"execute\") trigger() execute_3b9f6a\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) out_4c5d2e\n        out(x: 350, y: 50, name: \"continue\") trigger() continue_6d7e8f\n\n        instance(x: 200, y: 100) modulo_9a8b7c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 250, y: 150) equal_5f6e7d root.Std_k98ojb.Logic.Equal {}\n        instance(x: 300, y: 200) if_1a2b3c root.Std_k98ojb.Std.If {}\n\n        input_8a7b3d -> modulo_9a8b7c.value\n        2 -> modulo_9a8b7c.divisor\n        modulo_9a8b7c.result -> equal_5f6e7d.left\n        0 -> equal_5f6e7d.right\n        equal_5f6e7d.result -> if_1a2b3c.predicate\n        execute_3b9f6a -> if_1a2b3c.execute\n        if_1a2b3c.value -> out_4c5d2e\n        if_1a2b3c.then -> continue_6d7e8f\n        if_1a2b3c.else -> continue_6d7e8f\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_is_even\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.predicate -> output_is_even\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is even or not.\") is_even {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_is_even\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        2 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.predicate -> out_is_even\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n    }\n}"
            ],
            "23": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 162, y: -66, name: \"input\") property(String) input_f5c03d\n        in(x: 162, y: -212, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 400, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 600, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 350, y: -300) characters_9fba8c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 700, y: -100) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1000, y: -100) contains_f11fda root.Std_k98ojb.List.Contains {}\n        instance(x: 1300, y: -100) add_6030c9 root.Std_k98ojb.List.Add {}\n        instance(x: 1600, y: -100) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1900, y: -100) empty_038fce root.Std_k98ojb.List.Empty {}\n\n        input_f5c03d -> characters_9fba8c.input\n        characters_9fba8c.characters -> for_8cb3f6.items\n        for_8cb3f6.item -> contains_f11fda.item\n        empty_038fce.list -> contains_f11fda.list\n        contains_f11fda.result -> if_07b8c7.predicate\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.value -> out_f3db9f\n        for_8cb3f6.item -> add_6030c9.item\n        empty_038fce.list -> add_6030c9.list\n        add_6030c9.listWithItem -> empty_038fce.list\n        for_8cb3f6.done -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 160, y: -40, name: \"input\") property(String) input_abc123\n        in(x: 160, y: 40, name: \"execute\") trigger() execute_abc123\n\n        out(x: 560, y: 0, name: \"out\") property(String) out_def456\n        out(x: 560, y: 80, name: \"continue\") trigger() continue_def456\n\n        instance(x: 360, y: -40) characters_ghi789 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 360, y: 40) empty_list_jkl012 root.Std_k98ojb.List.Empty {}\n        instance(x: 360, y: 120) for_mno345 root.Std_k98ojb.Std.For {}\n        instance(x: 760, y: -40) contains_pqr678 root.Std_k98ojb.List.Contains {}\n        instance(x: 960, y: -40) if_stu901 root.Std_k98ojb.Std.If {}\n        instance(x: 760, y: 40) add_vwx234 root.Std_k98ojb.List.Add {}\n\n        input_abc123 -> characters_ghi789.input\n        characters_ghi789.characters -> for_mno345.items\n        empty_list_jkl012.list -> add_vwx234.list\n        empty_list_jkl012.list -> for_mno345.onItem\n        for_mno345.item -> contains_pqr678.item\n        add_vwx234.listWithItem -> contains_pqr678.list\n        contains_pqr678.result -> if_stu901.predicate\n        for_mno345.onItem -> if_stu901.execute\n        if_stu901.then -> out_def456\n        if_stu901.then -> continue_def456\n        for_mno345.item -> out_def456\n        if_stu901.else -> add_vwx234.item\n        if_stu901.else -> add_vwx234.listWithItem\n        for_mno345.done -> continue_def456\n        execute_abc123 -> for_mno345.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 174, y: -24, name: \"input\") property(String) input_5b2f3d\n        in(x: 174, y: 74, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 874, y: 74, name: \"out\") property(String) out_f3db9f\n        out(x: 874, y: 174, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 374, y: 74) characters_038fce root.Std_k98ojb.Strings.Characters {}\n        instance(x: 574, y: 74) find_8cb3f6 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 774, y: -24) contains_f11fda root.Std_k98ojb.List.Contains {}\n        instance(x: 774, y: 174) add_b4554f root.Std_k98ojb.List.Add {}\n        instance(x: 574, y: -74) emptylist_5f51f7 root.Std_k98ojb.List.Empty {}\n\n        input_5b2f3d -> characters_038fce.input\n        characters_038fce.characters -> find_8cb3f6.items\n        emptylist_5f51f7.list -> find_8cb3f6.context\n        func() {\n            in(x: -76, y: 46, name: \"character\") property(String) character_5f51f7\n            in(x: -76, y: 146, name: \"index\") property(Number) index_5f51f7\n            in(x: -76, y: 246, name: \"seen\") property(List) seen_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n            out(x: 382, y: 119, name: \"updated_seen\") property(List) updated_seen_d0fd24\n\n            instance(x: 106, y: 17) contains_2f9d09 root.Std_k98ojb.List.Contains {}\n            instance(x: 106, y: 117) add_2f9d09 root.Std_k98ojb.List.Add {}\n\n            character_5f51f7 -> contains_2f9d09.item\n            seen_5f51f7 -> contains_2f9d09.list\n            contains_2f9d09.contains -> out_d0fd24\n\n            character_5f51f7 -> add_2f9d09.item\n            seen_5f51f7 -> add_2f9d09.list\n            add_2f9d09.listWithItem -> updated_seen_d0fd24\n        } -> find_8cb3f6.predicate\n\n        find_8cb3f6.item -> out_f3db9f\n        find_8cb3f6.itemFound -> continue_8ba06b\n        execute_27b8c3 -> find_8cb3f6.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 105, y: -45, name: \"input\") property(String) input_6d8f4b\n        in(x: 99, y: 10, name: \"execute\") trigger() execute_9f7d2c\n\n        out(x: 1778, y: 20, name: \"out\") property(String) out_3c9f6e\n        out(x: 1944, y: 180, name: \"continue\") trigger() continue_1a7c4e\n\n        instance(x: 315, y: -53) characters_0b2d5e root.Std_k98ojb.Strings.Characters {}\n        instance(x: 554, y: 75) isEmpty_7a4b5c root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 793, y: 172) if_5f9b8d root.Std_k98ojb.Std.If {}\n        instance(x: 1032, y: 93) contains_3d9b6f root.Std_k98ojb.List.Contains {}\n        instance(x: 1271, y: 31) if_8c7f3e root.Std_k98ojb.Std.If {}\n        instance(x: 1509, y: 141) add_5b9f7c root.Std_k98ojb.List.Add {}\n        instance(x: 1212, y: -164) empty_9f7c8d root.Std_k98ojb.List.Empty {}\n\n        input_6d8f4b -> characters_0b2d5e.input\n        characters_0b2d5e.characters -> isEmpty_7a4b5c.list\n        isEmpty_7a4b5c.isEmpty -> if_5f9b8d.predicate\n        execute_9f7d2c -> if_5f9b8d.execute\n        if_5f9b8d.then -> continue_1a7c4e\n        empty_9f7c8d.list -> contains_3d9b6f.list\n        characters_0b2d5e.characters -> contains_3d9b6f.item\n        contains_3d9b6f.result -> if_8c7f3e.predicate\n        if_5f9b8d.else -> if_8c7f3e.execute\n        if_8c7f3e.then -> continue_1a7c4e\n        if_8c7f3e.value -> out_3c9f6e\n        empty_9f7c8d.list -> add_5b9f7c.list\n        characters_0b2d5e.characters -> add_5b9f7c.item\n        add_5b9f7c.listWithItem -> empty_9f7c8d.list\n        if_8c7f3e.else -> continue_1a7c4e\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 160, y: 80, name: \"input\") property(String) input_string\n        in(x: 160, y: 120, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 80, name: \"out\") property(String) out_character\n        out(x: 500, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 320, y: 80) characters_abc123 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 320, y: 160) first_item_def456 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 320, y: 240) contains_ghi789 root.Std_k98ojb.List.Contains {}\n        instance(x: 320, y: 320) add_to_list_jkl012 root.Std_k98ojb.List.Add {}\n        instance(x: 320, y: 400) empty_list_mno345 root.Std_k98ojb.List.Empty {}\n\n        input_string -> characters_abc123.input\n        characters_abc123.characters -> first_item_def456.items\n\n        func() {\n            in(x: -60, y: 80, name: \"character\") property(String) character\n\n            out(x: 200, y: 80, name: \"out\") property(Bool) out_bool\n\n            instance(x: 60, y: 80) contains_check_pqr678 root.Std_k98ojb.List.Contains {}\n            character -> contains_check_pqr678.item\n            contains_check_pqr678.result -> out_bool\n        } -> first_item_def456.predicate\n\n        empty_list_mno345.list -> contains_ghi789.list\n        first_item_def456.item -> contains_ghi789.item\n\n        first_item_def456.item -> add_to_list_jkl012.item\n        empty_list_mno345.list -> add_to_list_jkl012.list\n\n        add_to_list_jkl012.listWithItem -> empty_list_mno345.list\n\n        first_item_def456.item -> out_character\n        first_item_def456.item -> continue_trigger\n\n        execute_trigger -> empty_list_mno345.list\n        execute_trigger -> first_item_def456.execute\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") find_first_repeated_char {\n        in(x: 90, y: 60, name: \"input\") property(String) input_str\n        in(x: 90, y: 100, name: \"execute\") trigger() execute_trigger\n\n        out(x: 700, y: 60, name: \"out\") property(String) out_char\n        out(x: 700, y: 100, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 60) characters_8b9c7a root.Std_k98ojb.Strings.Characters {}\n        instance(x: 500, y: 60) for_3a7d5f root.Std_k98ojb.Std.For {}\n        instance(x: 500, y: 160) if_6c3f7d root.Std_k98ojb.Std.If {}\n        instance(x: 600, y: 60) contains_2b8f6a root.Std_k98ojb.List.Contains {}\n        instance(x: 400, y: 160) add_5f7d8e root.Std_k98ojb.List.Add {}\n\n        input_str -> characters_8b9c7a.input\n        characters_8b9c7a.characters -> for_3a7d5f.items\n        for_3a7d5f.item -> contains_2b8f6a.item\n        add_5f7d8e.listWithItem -> contains_2b8f6a.list\n        contains_2b8f6a.contains -> if_6c3f7d.predicate\n        for_3a7d5f.onItem -> if_6c3f7d.execute\n        if_6c3f7d.then -> out_char\n        if_6c3f7d.then -> continue_trigger\n        for_3a7d5f.item -> out_char\n        if_6c3f7d.else -> add_5f7d8e.item\n        add_5f7d8e.listWithItem -> add_5f7d8e.list\n        for_3a7d5f.next -> add_5f7d8e.list\n        execute_trigger -> for_3a7d5f.reset\n        for_3a7d5f.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 20, y: 0, name: \"input\") property(String) input_string\n        in(x: 20, y: 40, name: \"execute\") trigger() execute_trigger\n\n        out(x: 220, y: 0, name: \"character\") property(String) character\n        out(x: 220, y: 40, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 80, y: 0) characters_node root.Std_k98ojb.Strings.Characters {}\n        instance(x: 80, y: 100) for_node root.Std_k98ojb.Std.For {}\n        instance(x: 160, y: 0) contains_node root.Std_k98ojb.List.Contains {}\n        instance(x: 160, y: 100) add_node root.Std_k98ojb.List.Add {}\n        instance(x: 240, y: 0) if_node root.Std_k98ojb.Std.If {}\n        instance(x: 240, y: 100) empty_list_node root.Std_k98ojb.List.Empty {}\n\n        input_string -> characters_node.input\n        characters_node.characters -> for_node.items\n        for_node.item -> contains_node.item\n        empty_list_node.list -> contains_node.list\n        contains_node.result -> if_node.predicate\n        if_node.then -> continue_trigger\n        if_node.value -> character\n        for_node.onItem -> if_node.execute\n        for_node.item -> add_node.item\n        empty_list_node.list -> add_node.list\n        add_node.listWithItem -> empty_list_node.list\n        execute_trigger -> for_node.reset\n        for_node.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 120, y: -60, name: \"input\") property(String) input_string\n        in(x: 120, y: -120, name: \"execute\") trigger() execute_trigger\n\n        out(x: 120, y: 60, name: \"out\") property(String) out_character\n        out(x: 120, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 320, y: -60) characters_9c6f3e root.Std_k98ojb.Strings.Characters {}\n        instance(x: 540, y: -60) for_3a7f4e root.Std_k98ojb.Std.For {}\n        instance(x: 760, y: -60) contains_7d8c3f root.Std_k98ojb.List.Contains {}\n        instance(x: 980, y: -60) add_2a3f5e root.Std_k98ojb.List.Add {}\n        instance(x: 1200, y: -60) if_5b8c4f root.Std_k98ojb.Std.If {}\n        instance(x: 1440, y: -60) list_empty_6d7f3e root.Std_k98ojb.List.Empty {}\n\n        input_string -> characters_9c6f3e.input\n        characters_9c6f3e.characters -> for_3a7f4e.items\n        for_3a7f4e.item -> contains_7d8c3f.item\n        list_empty_6d7f3e.list -> contains_7d8c3f.list\n        contains_7d8c3f.contains -> if_5b8c4f.predicate\n        for_3a7f4e.onItem -> if_5b8c4f.execute\n        if_5b8c4f.then -> continue_trigger\n        if_5b8c4f.value -> out_character\n        for_3a7f4e.item -> add_2a3f5e.item\n        list_empty_6d7f3e.list -> add_2a3f5e.list\n        add_2a3f5e.listWithItem -> list_empty_6d7f3e.list\n        for_3a7f4e.done -> continue_trigger\n        execute_trigger -> for_3a7f4e.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 180, y: -150, name: \"input\") property(String) input_7f3c1d\n        in(x: 180, y: -90, name: \"execute\") trigger() execute_8f3a2b\n\n        out(x: 180, y: 180, name: \"character\") property(String) character_2f3b1c\n        out(x: 180, y: 240, name: \"continue\") trigger() continue_4b3d1e\n\n        instance(x: 400, y: -150) characters_5a1b2c root.Std_k98ojb.Strings.Characters {}\n        instance(x: 600, y: -150) is_empty_6c3d4e root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 800, y: -150) first_item_7e4f5g root.Std_k98ojb.List.FirstItem {}\n        instance(x: 1000, y: -150) contains_8g5h6i root.Std_k98ojb.List.Contains {}\n        instance(x: 1200, y: -150) add_9i6j7k root.Std_k98ojb.List.Add {}\n        instance(x: 1400, y: -150) if_aj7k8l root.Std_k98ojb.Std.If {}\n        instance(x: 1600, y: -150) for_bk8l9m root.Std_k98ojb.Std.For {}\n        instance(x: 1800, y: -150) empty_list_cl9m0n root.Std_k98ojb.List.Empty {}\n\n        input_7f3c1d -> characters_5a1b2c.input\n        characters_5a1b2c.characters -> for_bk8l9m.items\n        for_bk8l9m.item -> contains_8g5h6i.item\n        empty_list_cl9m0n.list -> contains_8g5h6i.list\n        contains_8g5h6i.result -> if_aj7k8l.predicate\n        for_bk8l9m.onItem -> if_aj7k8l.execute\n        if_aj7k8l.then -> first_item_7e4f5g.item\n        first_item_7e4f5g.item -> character_2f3b1c\n        if_aj7k8l.then -> continue_4b3d1e\n        if_aj7k8l.else -> add_9i6j7k.item\n        for_bk8l9m.item -> add_9i6j7k.item\n        empty_list_cl9m0n.list -> add_9i6j7k.list\n        add_9i6j7k.listWithItem -> empty_list_cl9m0n.list\n        for_bk8l9m.done -> continue_4b3d1e\n        execute_8f3a2b -> for_bk8l9m.reset\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the first repeated character in a given string.\") first_repeated_character {\n        in(x: 50, y: 50, name: \"input\") property(String) input_9a8f7c\n        in(x: 50, y: 100, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 400, y: 50, name: \"out\") property(String) out_f3db9f\n        out(x: 400, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 50) characters_8cb3f6 root.Std_k98ojb.Strings.Characters {}\n        instance(x: 200, y: 150) filter_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 150) find_038fce root.Std_k98ojb.Iteration.Find {}\n        instance(x: 200, y: 250) contains_7a6f9b root.Std_k98ojb.List.Contains {}\n        instance(x: 300, y: 250) add_b4554f root.Std_k98ojb.List.Add {}\n        instance(x: 100, y: 250) emptylist_0f4a6d root.Std_k98ojb.List.Empty {}\n\n        input_9a8f7c -> characters_8cb3f6.input\n        characters_8cb3f6.characters -> filter_6030c9.items\n        emptylist_0f4a6d.list -> filter_6030c9.handler.context\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char_5f51f7\n            in(x: -50, y: 100, name: \"seen\") property(List) seen_3e4b9c\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out_d0fd24\n            out(x: 200, y: 100, name: \"new_seen\") property(List) new_seen_1b4f9a\n\n            instance(x: 50, y: 50) contains_7a6f9b root.Std_k98ojb.List.Contains {}\n            instance(x: 50, y: 100) add_b4554f root.Std_k98ojb.List.Add {}\n\n            char_5f51f7 -> contains_7a6f9b.item\n            seen_3e4b9c -> contains_7a6f9b.list\n            contains_7a6f9b.result -> out_d0fd24\n\n            char_5f51f7 -> add_b4554f.item\n            seen_3e4b9c -> add_b4554f.list\n            add_b4554f.listWithItem -> new_seen_1b4f9a\n        } -> filter_6030c9.handler\n\n        filter_6030c9.output_list -> find_038fce.items\n        func() {\n            in(x: -50, y: 50, name: \"char\") property(String) char_5f51f7\n\n            out(x: 200, y: 50, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 50, y: 50) contains_7a6f9b root.Std_k98ojb.List.Contains {}\n\n            char_5f51f7 -> contains_7a6f9b.item\n            emptylist_0f4a6d.list -> contains_7a6f9b.list\n            contains_7a6f9b.result -> out_d0fd24\n        } -> find_038fce.predicate\n\n        find_038fce.item -> out_f3db9f\n        execute_27b8c3 -> characters_8cb3f6.input\n        find_038fce.item -> continue_8ba06b\n    }\n}"
            ],
            "35": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 180, y: 0, name: \"list\") property(List) list_123abc\n        in(x: 180, y: 50, name: \"execute\") trigger() execute_456def\n\n        out(x: 600, y: 0, name: \"secondSmallest\") property(Number) secondSmallest_789ghi\n        out(x: 600, y: 50, name: \"continue\") trigger() continue_012jkl\n\n        instance(x: 300, y: 0) sort_234mno root.Std_k98ojb.List.Sort {}\n        instance(x: 450, y: 0) getAt_567pqr root.Std_k98ojb.List.GetAt {}\n\n        list_123abc -> sort_234mno.list\n        sort_234mno.sorted -> getAt_567pqr.list\n        1 -> getAt_567pqr.index\n        getAt_567pqr.item -> secondSmallest_789ghi\n        execute_456def -> getAt_567pqr.trigger\n        getAt_567pqr.done -> continue_012jkl\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 20, y: 20, name: \"input_list\") property(List<Number>) input_list\n        in(x: 20, y: 60, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 20, name: \"second_smallest\") property(Number) second_smallest\n        out(x: 400, y: 60, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 20) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 300, y: 20) get_second_smallest root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> get_second_smallest.list\n        1 -> get_second_smallest.index\n        get_second_smallest.item -> second_smallest\n        execute -> sort_list.execute\n        sort_list.done -> continue\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the second smallest number in a list.\") second_smallest {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 591, y: 74) sort_038fce root.Std_k98ojb.List.Sort {}\n        instance(x: 933, y: 25) getat_f11fda root.Std_k98ojb.List.GetAt {}\n\n        input_f5c03d -> sort_038fce.list\n        sort_038fce.sorted -> getat_f11fda.list\n        1 -> getat_f11fda.index\n        getat_f11fda.item -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 10, y: 10, name: \"list\") property(List<Number>) list_input\n        in(x: 10, y: 50, name: \"execute\") trigger() execute_trigger\n\n        out(x: 200, y: 10, name: \"second_smallest\") property(Number) second_smallest_output\n        out(x: 200, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 50, y: 100) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 150, y: 100) get_second_smallest root.Std_k98ojb.List.GetAt {}\n\n        list_input -> sort_list.list\n        sort_list.sorted -> get_second_smallest.list\n        1 -> get_second_smallest.index\n\n        get_second_smallest.item -> second_smallest_output\n        execute_trigger -> sort_list.execute\n        sort_list.done -> continue_trigger\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 0, y: 0, name: \"list\") property(List<Number>) list_0\n        in(x: 0, y: 50, name: \"execute\") trigger() execute_1\n\n        out(x: 300, y: 0, name: \"second_smallest\") property(Number) second_smallest_0\n        out(x: 300, y: 50, name: \"continue\") trigger() continue_1\n\n        instance(x: 100, y: 0) sort_0 root.Std_k98ojb.List.Sort {}\n        instance(x: 200, y: 0) getat_0 root.Std_k98ojb.List.GetAt {}\n\n        list_0 -> sort_0.list\n        sort_0.sorted -> getat_0.list\n        1 -> getat_0.index\n        getat_0.item -> second_smallest_0\n        execute_1 -> getat_0.trigger\n        getat_0.done -> continue_1\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 120, y: 80, name: \"input_list\") property(List<Number>) input_list\n\n        out(x: 480, y: 80, name: \"second_smallest\") property(Number) second_smallest\n\n        instance(x: 240, y: 80) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 360, y: 80) get_second_item root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> get_second_item.list\n        1 -> get_second_item.index\n        get_second_item.item -> second_smallest\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 150, y: -100, name: \"input\") property(List<Number>) input_list\n\n        out(x: 750, y: -100, name: \"out\") property(Number) second_smallest_out\n\n        instance(x: 350, y: -200) sort_list root.Std_k98ojb.List.Sort {}\n        instance(x: 550, y: -100) get_second_item root.Std_k98ojb.List.GetAt {}\n\n        input_list -> sort_list.list\n        sort_list.sorted -> get_second_item.list\n        1 -> get_second_item.index\n        get_second_item.item -> second_smallest_out\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the second smallest number in a list.\") second_smallest {\n        in(x: 110, y: -10, name: \"list\") property(List) list_8f7a2d\n        in(x: 110, y: 70, name: \"execute\") trigger() execute_2b3f6a\n\n        out(x: 110, y: 200, name: \"secondSmallest\") property(Number) secondSmallest_7d9c3b\n        out(x: 110, y: 280, name: \"continue\") trigger() continue_3f8b1d\n\n        instance(x: 320, y: 40) sort_4f8b2d root.Std_k98ojb.List.Sort {}\n        instance(x: 560, y: 40) getat_9f7a3d root.Std_k98ojb.List.GetAt {}\n\n        list_8f7a2d -> sort_4f8b2d.list\n        sort_4f8b2d.sorted -> getat_9f7a3d.list\n        1 -> getat_9f7a3d.index\n        getat_9f7a3d.item -> secondSmallest_7d9c3b\n        execute_2b3f6a -> getat_9f7a3d.trigger\n        getat_9f7a3d.triggered -> continue_3f8b1d\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 100, y: 100, name: \"input_list\") property(List) input_list_1\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_1\n\n        out(x: 500, y: 100, name: \"second_smallest\") property(Number) second_smallest_1\n        out(x: 500, y: 200, name: \"continue\") trigger() continue_1\n\n        instance(x: 200, y: 100) sort_1 root.Std_k98ojb.List.Sort {}\n        instance(x: 300, y: 100) get_at_1 root.Std_k98ojb.List.GetAt {}\n\n        input_list_1 -> sort_1.list\n        sort_1.sorted -> get_at_1.list\n        1 -> get_at_1.index\n        get_at_1.item -> second_smallest_1\n        execute_1 -> get_at_1.trigger\n        get_at_1.done -> continue_1\n    }\n}",
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the second smallest number in a list.\") second_smallest {\n        in(x: 126, y: -32, name: \"input_list\") property(List) input_list_1a2b3c\n        in(x: 126, y: -82, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 640, y: -32, name: \"second_smallest\") property(Number) second_smallest_7g8h9i\n        out(x: 640, y: 18, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 360, y: -60) sort_3m4n5o root.Std_k98ojb.List.Sort {}\n        instance(x: 500, y: -60) getat_6p7q8r root.Std_k98ojb.List.GetAt {}\n\n        input_list_1a2b3c -> sort_3m4n5o.list\n        sort_3m4n5o.sorted -> getat_6p7q8r.list\n        1 -> getat_6p7q8r.index\n        getat_6p7q8r.item -> second_smallest_7g8h9i\n\n        execute_4d5e6f -> sort_3m4n5o.trigger\n        sort_3m4n5o.done -> continue_0j1k2l\n    }\n}"
            ]
        }
    }
]