[
    {
        "experiment_name": "regular_coverage_1_shot",
        "temperature": 0.2,
        "top_p": 0.2,
        "top_k": -1,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "gpt-4o",
        "largest_context": 3170,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: 100, y: 100, name: \"first\") property(Number) first_1a2b3c\n        in(x: 100, y: 150, name: \"second\") property(Number) second_4d5e6f\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_j1k2l3\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 200, y: 100) expression_p7q8r9 root.Std_k98ojb.Math.Expression {\n            expression: \"(a * b) < 0\"\n        }\n\n        execute_7g8h9i -> expression_p7q8r9.execute\n        first_1a2b3c -> expression_p7q8r9.a\n        second_4d5e6f -> expression_p7q8r9.b\n        expression_p7q8r9.result -> out_j1k2l3\n        execute_7g8h9i -> continue_m4n5o6\n    }\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_result\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        11 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.value -> output_result\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces characters in a string.\") replace_characters {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"search\") property(String) search_char\n        in(x: 100, y: 200, name: \"replace\") property(String) replace_char\n        in(x: 100, y: 250, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"output\") property(String) output_string\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 125) replace_instance root.Std_k98ojb.Strings.Replace {}\n\n        input_string -> replace_instance.input\n        search_char -> replace_instance.search\n        replace_char -> replace_instance.replace\n        replace_instance.output -> output_string\n        execute_trigger -> replace_instance.execute\n        replace_instance.done -> continue_trigger\n    }\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts the given string to lower case.\") to_lower_case {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) tolower_123abc root.Std_k98ojb.Strings.ToLower {}\n\n        input_string -> tolower_123abc.input\n        tolower_123abc.output -> output_string\n\n        execute_trigger -> tolower_123abc.execute\n        tolower_123abc.done -> continue_trigger\n    }\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the product of the unique numbers in a given list.\") product_of_unique_numbers {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n\n        out(x: 500, y: 100, name: \"out\") property(Number) product\n\n        instance(x: 200, y: 100) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 100) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 400, y: 100) mul root.Std_k98ojb.Math.Mul {}\n\n        input_list -> filter_unique.items\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n            out(x: 100, y: 0, name: \"out\") property(Bool) is_unique\n\n            instance(x: 50, y: 0) contains root.Std_k98ojb.List.Contains {}\n            instance(x: 150, y: 0) not root.Std_k98ojb.Logic.Not {}\n\n            input_list -> contains.list\n            item -> contains.item\n            contains.result -> not.input\n            not.output -> is_unique\n        } -> filter_unique.handler\n\n        filter_unique.output_list -> reduce_product.items\n        func() {\n            in(x: 0, y: 0, name: \"accumulated\") property(Number) accumulated\n            in(x: 0, y: 50, name: \"item\") property(Number) item\n            out(x: 100, y: 25, name: \"out\") property(Number) result\n\n            accumulated -> mul.first\n            item -> mul.second\n            mul.result -> result\n        } -> reduce_product.reducer\n\n        1 -> reduce_product.initial\n        reduce_product.result -> product\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the dissimilar elements in the given two lists.\") find_dissimilar_elements {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 150, name: \"list2\") property(List) list2\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 150, name: \"dissimilar\") property(List) dissimilar\n        out(x: 400, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 100) difference_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: 150) difference_2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 150) concat root.Std_k98ojb.List.Concat {}\n\n        list1 -> difference_1.left\n        list2 -> difference_1.right\n        list2 -> difference_2.left\n        list1 -> difference_2.right\n\n        difference_1.difference -> concat.list1\n        difference_2.difference -> concat.list2\n\n        concat.list -> dissimilar\n        execute -> difference_1.execute\n        execute -> difference_2.execute\n        execute -> concat.execute\n        concat.done -> continue\n    }\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_list {\n        in(x: 100, y: 100, name: \"list\") property(List) list_input\n        in(x: 100, y: 150, name: \"rotate_by\") property(Number) rotate_by_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_input\n\n        out(x: 500, y: 100, name: \"rotated_list\") property(List) rotated_list_output\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_output\n\n        instance(x: 300, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 150) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 200) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 100) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_input -> length_node.list\n        length_node.length -> modulo_node.value\n        rotate_by_input -> modulo_node.divisor\n        modulo_node.result -> slice_first_part.start\n        length_node.length -> slice_first_part.end\n        list_input -> slice_first_part.list\n\n        0 -> slice_second_part.start\n        modulo_node.result -> slice_second_part.end\n        list_input -> slice_second_part.list\n\n        slice_first_part.slice -> concat_node.left\n        slice_second_part.slice -> concat_node.right\n\n        concat_node.list -> rotated_list_output\n        execute_input -> slice_first_part.reset\n        execute_input -> slice_second_part.reset\n        execute_input -> continue_output\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") sum_of_array {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_array\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) reduce_instance root.Std_k98ojb.Iteration.Reduce {\n            handler: func() {\n                in(x: 0, y: 0, name: \"accumulated\") property(Number) accumulated\n                in(x: 0, y: 50, name: \"current\") property(Number) current\n\n                out(x: 200, y: 25, name: \"result\") property(Number) result\n\n                instance(x: 100, y: 25) add_instance root.Std_k98ojb.Math.Add {}\n                accumulated -> add_instance.first\n                current -> add_instance.second\n                add_instance.result -> result\n            }\n        }\n\n        input_array -> reduce_instance.items\n        0 -> reduce_instance.initial\n        reduce_instance.result -> sum_output\n        execute_trigger -> reduce_instance.execute\n        reduce_instance.done -> continue_trigger\n    }\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the given integer is a prime number.\") is_prime {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_1a2b3c\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_4d5e6f\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_7g8h9i\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_0j1k2l\n\n        instance(x: 200, y: 50) if_3m4n5o root.Std_k98ojb.Std.If {}\n        instance(x: 200, y: 200) for_6p7q8r root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 50) mod_9s0t1u root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_2v3w4x root.Std_k98ojb.Logic.Equal {}\n        instance(x: 400, y: 150) if_5y6z7a root.Std_k98ojb.Std.If {}\n        instance(x: 600, y: 50) generaterange_8b9c0d root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 150) lessthanorequal_1e2f3g root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 800, y: 50) floor_4h5i6j root.Std_k98ojb.Math.Floor {}\n        instance(x: 800, y: 100) expression_7k8l9m root.Std_k98ojb.Math.Expression {\n            expression: \"sqrt(n)\"\n        }\n\n        input_1a2b3c -> if_3m4n5o.predicate\n        2 -> if_3m4n5o.value\n        if_3m4n5o.then -> continue_0j1k2l\n        if_3m4n5o.else -> generaterange_8b9c0d.from\n        2 -> generaterange_8b9c0d.to\n        generaterange_8b9c0d.list -> for_6p7q8r.items\n        for_6p7q8r.item -> mod_9s0t1u.value\n        input_1a2b3c -> mod_9s0t1u.divisor\n        mod_9s0t1u.result -> equal_2v3w4x.left\n        0 -> equal_2v3w4x.right\n        equal_2v3w4x.result -> if_5y6z7a.predicate\n        if_5y6z7a.then -> continue_0j1k2l\n        if_5y6z7a.else -> for_6p7q8r.next\n        for_6p7q8r.done -> out_7g8h9i\n        execute_4d5e6f -> for_6p7q8r.reset\n        input_1a2b3c -> expression_7k8l9m.gen_0\n        expression_7k8l9m.result -> floor_4h5i6j.input\n        floor_4h5i6j.result -> lessthanorequal_1e2f3g.right\n        for_6p7q8r.index -> lessthanorequal_1e2f3g.left\n        lessthanorequal_1e2f3g.result -> if_5y6z7a.execute\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "temperature": 0.2,
        "top_p": 0.6,
        "top_k": -1,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "gpt-4o",
        "largest_context": 3170,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_sign {\n        in(x: 100, y: 100, name: \"first\") property(Number) first_1a2b3c\n        in(x: 100, y: 150, name: \"second\") property(Number) second_4d5e6f\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_j1k2l3\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 200, y: 100) expression_p7q8r9 root.Std_k98ojb.Math.Expression {\n            expression: \"(a * b) < 0\"\n        }\n        \n        first_1a2b3c -> expression_p7q8r9.a\n        second_4d5e6f -> expression_p7q8r9.b\n        expression_p7q8r9.result -> out_j1k2l3\n        execute_7g8h9i -> continue_m4n5o6\n    }\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"out\") property(Bool) output_result\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 350, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        11 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.value -> output_result\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces characters in a string.\") replace_characters {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"search\") property(String) search_char\n        in(x: 100, y: 200, name: \"replace\") property(String) replace_char\n        in(x: 100, y: 250, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 150, name: \"output\") property(String) output_string\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 150) replace_instance root.Std_k98ojb.Strings.Replace {}\n\n        input_string -> replace_instance.input\n        search_char -> replace_instance.search\n        replace_char -> replace_instance.replace\n\n        replace_instance.output -> output_string\n        execute_trigger -> replace_instance.trigger\n        replace_instance.done -> continue_trigger\n    }\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts the given string to lower case.\") to_lower_case {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) tolower_123abc root.Std_k98ojb.Strings.ToLower {}\n        \n        input_string -> tolower_123abc.input\n        tolower_123abc.output -> output_string\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the product of the unique numbers in a given list.\") product_of_unique_numbers {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) output_product\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 933, y: 25) equal_check root.Std_k98ojb.Logic.Equal {}\n\n        input_list -> filter_unique.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element\n            out(x: 382, y: 19, name: \"out\") property(Bool) is_unique\n\n            instance(x: 106, y: 17) count_occurrences root.Std_k98ojb.Iteration.Filter {}\n            instance(x: 106, y: 117) length_check root.Std_k98ojb.List.Length {}\n            instance(x: 106, y: 217) equal_one root.Std_k98ojb.Logic.Equal {}\n\n            input_list -> count_occurrences.items\n            func() {\n                in(x: -76, y: 46, name: \"item\") property(Number) item\n                out(x: 382, y: 19, name: \"out\") property(Bool) is_equal\n\n                instance(x: 106, y: 17) equal_item root.Std_k98ojb.Logic.Equal {}\n                element -> equal_item.left\n                item -> equal_item.right\n                equal_item.result -> is_equal\n            } -> count_occurrences.handler\n\n            count_occurrences.output_list -> length_check.list\n            length_check.length -> equal_one.left\n            1 -> equal_one.right\n            equal_one.result -> is_unique\n        } -> filter_unique.handler\n\n        filter_unique.output_list -> reduce_product.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated\n            in(x: 106, y: 46, name: \"current\") property(Number) current\n            out(x: 382, y: 19, name: \"out\") property(Number) product\n\n            instance(x: 106, y: 17) multiply root.Std_k98ojb.Math.Mul {}\n            accumulated -> multiply.first\n            current -> multiply.second\n            multiply.result -> product\n        } -> reduce_product.reducer\n\n        1 -> reduce_product.initial\n        reduce_product.result -> output_product\n        execute_trigger -> filter_unique.execute\n        filter_unique.done -> reduce_product.execute\n        reduce_product.done -> continue_trigger\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the dissimilar elements in the given two lists.\") find_dissimilar_elements {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 150, name: \"list2\") property(List) list2\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 150, name: \"dissimilar\") property(List) dissimilar\n        out(x: 400, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 100) difference_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: 150) difference_2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 150) concat root.Std_k98ojb.List.Concat {}\n\n        list1 -> difference_1.left\n        list2 -> difference_1.right\n        list2 -> difference_2.left\n        list1 -> difference_2.right\n\n        difference_1.difference -> concat.left\n        difference_2.difference -> concat.right\n\n        concat.list -> dissimilar\n        execute -> difference_1.execute\n        difference_1.done -> difference_2.execute\n        difference_2.done -> continue\n    }\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_list {\n        in(x: 100, y: 100, name: \"list\") property(List) list_input\n        in(x: 100, y: 150, name: \"rotate_by\") property(Number) rotate_by_input\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 500, y: 100, name: \"rotated_list\") property(List) rotated_list_output\n        out(x: 500, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 100) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 150) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 200) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 125) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_input -> length_node.list\n        rotate_by_input -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        modulo_node.result -> slice_first_part.start\n        length_node.length -> slice_first_part.end\n        list_input -> slice_first_part.list\n\n        0 -> slice_second_part.start\n        modulo_node.result -> slice_second_part.end\n        list_input -> slice_second_part.list\n\n        slice_first_part.slice -> concat_node.left\n        slice_second_part.slice -> concat_node.right\n\n        concat_node.list -> rotated_list_output\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of an array.\") sum_of_array {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_array\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) reduce_instance root.Std_k98ojb.Iteration.Reduce {\n            handler: func() {\n                in(x: 0, y: 0, name: \"accumulator\") property(Number) accumulator\n                in(x: 0, y: 50, name: \"current\") property(Number) current\n\n                out(x: 200, y: 25, name: \"result\") property(Number) result\n\n                instance(x: 100, y: 25) add_instance root.Std_k98ojb.Math.Add {}\n                accumulator -> add_instance.first\n                current -> add_instance.second\n                add_instance.result -> result\n            }\n        }\n\n        input_array -> reduce_instance.items\n        0 -> reduce_instance.initial\n        reduce_instance.result -> sum_output\n        execute_trigger -> reduce_instance.execute\n        reduce_instance.done -> continue_trigger\n    }\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the given integer is a prime number.\") is_prime {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"isPrime\") property(Bool) is_prime_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) if_less_than_2 root.Std_k98ojb.Std.IfExpression {\n            expression: \"n <= 1 ? false : true\"\n        }\n        instance(x: 200, y: 150) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 400, y: 100) if_divisible root.Std_k98ojb.Std.IfExpression {\n            expression: \"n % i == 0 ? false : true\"\n        }\n        instance(x: 600, y: 100) not_prime root.Std_k98ojb.Std.If {}\n\n        input_number -> if_less_than_2.n\n        if_less_than_2.value -> is_prime_output\n        if_less_than_2.value -> for_loop.reset\n        execute_trigger -> for_loop.trigger\n\n        2 -> for_loop.items.from\n        input_number -> for_loop.items.to\n\n        for_loop.item -> if_divisible.i\n        input_number -> if_divisible.n\n        if_divisible.value -> not_prime.input\n\n        for_loop.onItem -> not_prime.execute\n        not_prime.then -> continue_trigger\n        not_prime.else -> for_loop.next\n\n        for_loop.done -> continue_trigger\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "temperature": 0.2,
        "top_p": 0.9,
        "top_k": -1,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "gpt-4o",
        "largest_context": 3170,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_sign {\n        in(x: 100, y: 100, name: \"first\") property(Number) first_1a2b3c\n        in(x: 200, y: 100, name: \"second\") property(Number) second_4d5e6f\n        in(x: 150, y: 200, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_j1k2l3\n        out(x: 350, y: 200, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 250, y: 50) expression_p7q8r9 root.Std_k98ojb.Math.Expression {\n            expression: \"(a * b) < 0\"\n        }\n        execute_7g8h9i -> expression_p7q8r9.execute\n        first_1a2b3c -> expression_p7q8r9.a\n        second_4d5e6f -> expression_p7q8r9.b\n        expression_p7q8r9.result -> out_j1k2l3\n        execute_7g8h9i -> continue_m4n5o6\n    }\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 100, name: \"out\") property(Bool) output_result\n        out(x: 400, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 350, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        11 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        execute_trigger -> if_instance.execute\n        if_instance.value -> output_result\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces characters in a string.\") replace_characters {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"search\") property(String) search_char\n        in(x: 100, y: 200, name: \"replace\") property(String) replace_char\n        in(x: 100, y: 250, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 150, name: \"output\") property(String) output_string\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 150) replace_instance root.Std_k98ojb.Strings.Replace {}\n        \n        input_string -> replace_instance.input\n        search_char -> replace_instance.search\n        replace_char -> replace_instance.replace\n        replace_instance.output -> output_string\n\n        execute_trigger -> replace_instance.execute\n        replace_instance.done -> continue_trigger\n    }\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts the given string to lower case.\") to_lower_case {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 150) tolower_instance root.Std_k98ojb.Strings.ToLower {}\n\n        execute_trigger -> tolower_instance.execute\n        input_string -> tolower_instance.input\n        tolower_instance.output -> output_string\n        tolower_instance.continue -> continue_trigger\n    }\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the product of the unique numbers in a given list.\") product_of_unique_numbers {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_list\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) product_output\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 352, y: -493) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 933, y: 25) not_equal root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 714, y: -155) list_contains root.Std_k98ojb.List.Contains {}\n        instance(x: 1121, y: -54) empty_list root.Std_k98ojb.List.Empty {}\n        instance(x: 1504, y: -400) add_to_list root.Std_k98ojb.List.Add {}\n        instance(x: 1496, y: -187) mul_expression root.Std_k98ojb.Math.Expression {\n            expression: \"a * b\"\n        }\n        instance(x: 2136, y: -356) if_not_contains root.Std_k98ojb.Std.If {}\n\n        empty_list.list -> filter_unique.items\n        input_list -> filter_unique.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) is_unique\n\n            instance(x: 106, y: 17) not_in_list root.Std_k98ojb.Logic.Not {}\n            element -> list_contains.item\n            filter_unique.items -> list_contains.list\n            list_contains.result -> not_in_list.input\n            not_in_list.result -> is_unique\n        } -> filter_unique.handler\n\n        filter_unique.output_list -> reduce_product.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulator\") property(Number) accumulator\n            in(x: 106, y: 17, name: \"value\") property(Number) value\n\n            out(x: 382, y: 19, name: \"out\") property(Number) product\n\n            accumulator -> mul_expression.a\n            value -> mul_expression.b\n            mul_expression.result -> product\n        } -> reduce_product.reducer\n\n        1 -> reduce_product.initial\n        reduce_product.result -> product_output\n        execute_trigger -> filter_unique.execute\n        filter_unique.done -> continue_trigger\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the dissimilar elements in the given two lists.\") find_dissimilar_elements {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 150, name: \"list2\") property(List) list2\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 150, name: \"dissimilar\") property(List) dissimilar\n        out(x: 400, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 100) difference_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 250, y: 150) difference_2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 125) concat root.Std_k98ojb.List.Concat {}\n\n        list1 -> difference_1.left\n        list2 -> difference_1.right\n        list2 -> difference_2.left\n        list1 -> difference_2.right\n\n        difference_1.difference -> concat.left\n        difference_2.difference -> concat.right\n\n        concat.list -> dissimilar\n        execute -> difference_1.execute\n        difference_1.done -> difference_2.execute\n        difference_2.done -> continue\n    }\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_list {\n        in(x: 100, y: 100, name: \"list\") property(List) list_input\n        in(x: 100, y: 200, name: \"rotate_by\") property(Number) rotate_by_input\n        in(x: 100, y: 300, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 100, name: \"rotated_list\") property(List) rotated_list_output\n        out(x: 600, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 100) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 200) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 300) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 400) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 500, y: 300) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_input -> length_node.list\n        length_node.length -> modulo_node.value\n        rotate_by_input -> modulo_node.divisor\n\n        modulo_node.result -> slice_first_part.start\n        length_node.length -> slice_first_part.end\n        list_input -> slice_first_part.list\n\n        0 -> slice_second_part.start\n        modulo_node.result -> slice_second_part.end\n        list_input -> slice_second_part.list\n\n        slice_first_part.slice -> concat_node.left\n        slice_second_part.slice -> concat_node.right\n\n        concat_node.list -> rotated_list_output\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") sum_of_array {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_array\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) reduce_instance root.Std_k98ojb.Iteration.Reduce {\n            handler: func() {\n                in(x: 0, y: 0, name: \"accumulator\") property(Number) accumulator\n                in(x: 0, y: 50, name: \"current\") property(Number) current\n\n                out(x: 200, y: 25, name: \"result\") property(Number) result\n\n                instance(x: 100, y: 25) add_instance root.Std_k98ojb.Math.Add {}\n                accumulator -> add_instance.first\n                current -> add_instance.second\n                add_instance.result -> result\n            }\n        }\n\n        input_array -> reduce_instance.items\n        0 -> reduce_instance.initial\n        reduce_instance.result -> sum_output\n        execute_trigger -> reduce_instance.execute\n        reduce_instance.done -> continue_trigger\n    }\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the given integer is a prime number.\") is_prime {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_123abc\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_456def\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_789ghi\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_jkl012\n\n        instance(x: 200, y: 50) lessthanorequal_345mno root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 200, y: 100) mod_678pqr root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 150) equal_901stu root.Std_k98ojb.Logic.Equal {}\n        instance(x: 200, y: 200) if_234vwx root.Std_k98ojb.Std.If {}\n        instance(x: 400, y: 100) for_567yz root.Std_k98ojb.Std.For {}\n        instance(x: 600, y: 100) not_890abc root.Std_k98ojb.Logic.Not {}\n        instance(x: 600, y: 150) if_123def root.Std_k98ojb.Std.If {}\n\n        2 -> lessthanorequal_345mno.left\n        input_123abc -> lessthanorequal_345mno.right\n        lessthanorequal_345mno.result -> if_234vwx.predicate\n        if_234vwx.then -> continue_jkl012\n        if_234vwx.else -> for_567yz.trigger\n\n        2 -> for_567yz.items\n        input_123abc -> for_567yz.items\n\n        for_567yz.item -> mod_678pqr.value\n        input_123abc -> mod_678pqr.divisor\n        mod_678pqr.result -> equal_901stu.left\n        0 -> equal_901stu.right\n        equal_901stu.result -> if_123def.predicate\n        if_123def.then -> continue_jkl012\n        if_123def.else -> for_567yz.next\n\n        for_567yz.done -> not_890abc.input\n        not_890abc.output -> out_789ghi\n\n        execute_456def -> for_567yz.reset\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "temperature": 0.6,
        "top_p": 0.2,
        "top_k": -1,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "gpt-4o",
        "largest_context": 3170,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_sign {\n        in(x: 100, y: 100, name: \"first\") property(Number) first_1a2b3c\n        in(x: 100, y: 150, name: \"second\") property(Number) second_4d5e6f\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_j1k2l3\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 200, y: 100) expression_p7q8r9 root.Std_k98ojb.Math.Expression {\n            expression: \"(a * b) < 0\"\n        }\n\n        first_1a2b3c -> expression_p7q8r9.a\n        second_4d5e6f -> expression_p7q8r9.b\n        expression_p7q8r9.result -> out_j1k2l3\n        execute_7g8h9i -> continue_m4n5o6\n    }\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_result\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        11 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.value -> output_result\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replaces characters in a string.\") replace_characters {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"search\") property(String) search_char\n        in(x: 100, y: 200, name: \"replace\") property(String) replace_char\n        in(x: 100, y: 250, name: \"execute\") trigger() execute_trigger\n\n        out(x: 400, y: 150, name: \"output\") property(String) output_string\n        out(x: 400, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 250, y: 150) replace_instance root.Std_k98ojb.Strings.Replace {}\n\n        input_string -> replace_instance.input\n        search_char -> replace_instance.search\n        replace_char -> replace_instance.replace\n        replace_instance.output -> output_string\n\n        execute_trigger -> replace_instance.execute\n        replace_instance.done -> continue_trigger\n    }\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts the given string to lower case.\") to_lower_case {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) tolower_8f7b9c root.Std_k98ojb.Strings.ToLower {}\n        \n        input_string -> tolower_8f7b9c.input\n        tolower_8f7b9c.output -> output_string\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the product of the unique numbers in a given list.\") product_of_unique_numbers {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n\n        out(x: 500, y: 100, name: \"out\") property(Number) product\n\n        instance(x: 200, y: 100) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 100) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 400, y: 100) mul root.Std_k98ojb.Math.Mul {}\n\n        input_list -> filter_unique.items\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n            in(x: 0, y: 50, name: \"index\") property(Number) index\n            in(x: 0, y: 100, name: \"context\") property(List<Number>) context\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) is_unique\n\n            instance(x: 100, y: 0) count_occurrences root.Std_k98ojb.Query.Filter {}\n            instance(x: 150, y: 0) equal_to_one root.Std_k98ojb.Logic.Equal {}\n\n            context -> count_occurrences.items\n            func() {\n                in(x: 0, y: 0, name: \"it\") property(Number) it\n\n                out(x: 100, y: 0, name: \"out\") property(Bool) is_equal\n\n                instance(x: 50, y: 0) equal root.Std_k98ojb.Logic.Equal {}\n\n                it -> equal.left\n                item -> equal.right\n                equal.result -> is_equal\n            } -> count_occurrences.handler\n            count_occurrences.output_list -> equal_to_one.left\n            1 -> equal_to_one.right\n            equal_to_one.result -> is_unique\n        } -> filter_unique.handler\n        filter_unique.output_list -> reduce_product.items\n        func() {\n            in(x: 0, y: 0, name: \"accumulated\") property(Number) accumulated\n            in(x: 0, y: 50, name: \"item\") property(Number) item\n\n            out(x: 100, y: 0, name: \"out\") property(Number) result\n\n            accumulated -> mul.first\n            item -> mul.second\n            mul.result -> result\n        } -> reduce_product.reducer\n        1 -> reduce_product.initial\n        reduce_product.result -> product\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the dissimilar elements in the given two lists.\") find_dissimilar_elements {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 150, name: \"list2\") property(List) list2\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 100, name: \"dissimilar\") property(List) dissimilar\n        out(x: 400, y: 150, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 100) difference_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 150) difference_2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 125) concat root.Std_k98ojb.List.Concat {}\n\n        list1 -> difference_1.left\n        list2 -> difference_1.right\n        list2 -> difference_2.left\n        list1 -> difference_2.right\n\n        difference_1.difference -> concat.list1\n        difference_2.difference -> concat.list2\n\n        concat.list -> dissimilar\n        execute -> difference_1.execute\n        execute -> difference_2.execute\n        difference_1.done -> concat.execute\n        difference_2.done -> concat.execute\n        concat.done -> continue\n    }\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_list {\n        in(x: 150, y: -50, name: \"list\") property(List) list_input\n        in(x: 150, y: 0, name: \"rotate_by\") property(Number) rotate_by_input\n        in(x: 150, y: 50, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 0, name: \"rotated_list\") property(List) rotated_list_output\n        out(x: 600, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: -50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) slice_node_1 root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 100) slice_node_2 root.Std_k98ojb.List.Slice {}\n        instance(x: 450, y: 0) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_input -> length_node.list\n        length_node.length -> modulo_node.divisor\n        rotate_by_input -> modulo_node.value\n        modulo_node.result -> slice_node_1.start\n        list_input -> slice_node_1.list\n        modulo_node.result -> slice_node_2.end\n        list_input -> slice_node_2.list\n        slice_node_1.slice -> concat_node.right\n        slice_node_2.slice -> concat_node.left\n        concat_node.list -> rotated_list_output\n\n        execute_trigger -> length_node.trigger\n        length_node.done -> modulo_node.trigger\n        modulo_node.done -> slice_node_1.trigger\n        slice_node_1.done -> slice_node_2.trigger\n        slice_node_2.done -> concat_node.trigger\n        concat_node.done -> continue_trigger\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") sum_of_array {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_array\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) reduce_instance root.Std_k98ojb.Iteration.Reduce {\n            handler: func() {\n                in(x: 0, y: 0, name: \"accumulated\") property(Number) accumulated\n                in(x: 0, y: 50, name: \"current\") property(Number) current\n\n                out(x: 200, y: 25, name: \"result\") property(Number) result\n\n                instance(x: 100, y: 25) add_instance root.Std_k98ojb.Math.Add {}\n                accumulated -> add_instance.first\n                current -> add_instance.second\n                add_instance.result -> result\n            }\n        }\n\n        input_array -> reduce_instance.items\n        0 -> reduce_instance.initial\n        reduce_instance.result -> sum_output\n        execute_trigger -> reduce_instance.execute\n        reduce_instance.done -> continue_trigger\n    }\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the given integer is a prime number.\") is_prime {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) is_prime_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"n <= 1 ? false : true\"\n        }\n        instance(x: 400, y: 50) generate_range root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: 50) modulo_expression root.Std_k98ojb.Math.Expression {\n            expression: \"n % i == 0\"\n        }\n        instance(x: 1000, y: 50) if_modulo root.Std_k98ojb.Std.If {}\n\n        input_number -> if_expression.n\n        if_expression.value -> is_prime_output\n        if_expression.result -> generate_range.from\n        2 -> generate_range.to\n        generate_range.list -> for_loop.items\n        for_loop.item -> modulo_expression.i\n        input_number -> modulo_expression.n\n        modulo_expression.result -> if_modulo.predicate\n        for_loop.onItem -> if_modulo.execute\n        if_modulo.then -> continue_trigger\n        if_modulo.else -> for_loop.next\n        for_loop.done -> continue_trigger\n        execute_trigger -> for_loop.reset\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "temperature": 0.6,
        "top_p": 0.6,
        "top_k": -1,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "gpt-4o",
        "largest_context": 3170,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") is_opposite_sign {\n        in(x: 154, y: -53, name: \"first\") property(Number) first_8b9c3d\n        in(x: 354, y: -53, name: \"second\") property(Number) second_7f8c2a\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) expression_5f4d9a root.Std_k98ojb.Math.Expression {\n            expression: \"(a < 0 && b > 0) || (a > 0 && b < 0)\"\n        }\n        instance(x: 612, y: -312) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        first_8b9c3d -> expression_5f4d9a.a\n        second_7f8c2a -> expression_5f4d9a.b\n        expression_5f4d9a.result -> if_07b8c7.predicate\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n        execute_27b8c3 -> if_07b8c7.execute\n    }\n\n    instance(x: -189, y: 222) is_opposite_sign_f0be66 root.main.is_opposite_sign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_f5c03d\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_f3db9f\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 100) modulo_9fba8c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 200) equal_07b8c7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 200, y: 300) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> modulo_9fba8c.value\n        11 -> modulo_9fba8c.divisor\n        modulo_9fba8c.result -> equal_07b8c7.left\n        0 -> equal_07b8c7.right\n        equal_07b8c7.result -> if_e19a62.predicate\n        if_e19a62.value -> out_f3db9f\n        execute_27b8c3 -> if_e19a62.execute\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> continue_8ba06b\n    }\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Replaces characters in a string.\") replace_characters {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"search\") property(String) search_27b8c3\n        in(x: 161, y: -211, name: \"replace\") property(String) replace_27b8c3\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) replace_6030c9 root.Std_k98ojb.Strings.Replace {}\n        \n        input_f5c03d -> replace_6030c9.input\n        search_27b8c3 -> replace_6030c9.search\n        replace_27b8c3 -> replace_6030c9.replace\n        replace_6030c9.result -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) replace_characters_f0be66 root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts the given string to lower case.\") to_lower_case {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 150) tolower_instance root.Std_k98ojb.Strings.ToLower {}\n\n        execute_trigger -> tolower_instance.execute\n        input_string -> tolower_instance.input\n        tolower_instance.output -> output_string\n        tolower_instance.continue -> continue_trigger\n    }\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the product of the unique numbers in a given list.\") product_of_unique_numbers {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n        in(x: 100, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 100, name: \"out\") property(Number) out\n        out(x: 500, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: 50) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 150) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 200, y: 50) not_equal root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 200, y: 150) list_contains root.Std_k98ojb.List.Contains {}\n        instance(x: 400, y: 50) list_empty root.Std_k98ojb.List.Empty {}\n\n        input_list -> filter_unique.items\n        func() {\n            in(x: 50, y: 50, name: \"item\") property(Number) item\n            out(x: 150, y: 50, name: \"out\") property(Bool) out\n\n            instance(x: 100, y: 50) contains root.Std_k98ojb.List.Contains {}\n            instance(x: 100, y: 100) not root.Std_k98ojb.Logic.Not {}\n\n            item -> contains.item\n            list_empty.list -> contains.list\n            contains.result -> not.input\n            not.result -> out\n        } -> filter_unique.handler\n\n        filter_unique.output_list -> reduce_product.items\n        func() {\n            in(x: 50, y: 50, name: \"accumulated\") property(Number) accumulated\n            in(x: 50, y: 100, name: \"item\") property(Number) item\n            out(x: 150, y: 75, name: \"out\") property(Number) out\n\n            instance(x: 100, y: 75) mul root.Std_k98ojb.Math.Mul {}\n\n            accumulated -> mul.first\n            item -> mul.second\n            mul.result -> out\n        } -> reduce_product.reducer\n\n        1 -> reduce_product.initial\n        reduce_product.result -> out\n        execute -> filter_unique.execute\n        reduce_product.done -> continue\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the dissimilar elements in the given two lists.\") find_dissimilar_elements {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 200, name: \"list2\") property(List) list2\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 500, y: 200, name: \"dissimilar_elements\") property(List) dissimilar_elements\n        out(x: 500, y: 300, name: \"continue\") trigger() continue\n\n        instance(x: 300, y: 100) difference_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 200) difference_2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 150) concat root.Std_k98ojb.List.Concat {}\n\n        list1 -> difference_1.left\n        list2 -> difference_1.right\n        list2 -> difference_2.left\n        list1 -> difference_2.right\n\n        difference_1.difference -> concat.left\n        difference_2.difference -> concat.right\n\n        concat.list -> dissimilar_elements\n        execute -> difference_1.execute\n        difference_1.done -> difference_2.execute\n        difference_2.done -> continue\n    }\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_list {\n        in(x: 150, y: -50, name: \"list\") property(List) list_input\n        in(x: 150, y: 0, name: \"rotate_by\") property(Number) rotate_by_input\n        in(x: 150, y: 50, name: \"execute\") trigger() execute_trigger\n\n        out(x: 650, y: 0, name: \"rotated_list\") property(List) rotated_list_output\n        out(x: 650, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 350, y: -50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 350, y: 50) slice_node root.Std_k98ojb.List.Slice {}\n        instance(x: 500, y: -50) concat_node root.Std_k98ojb.List.Concat {}\n        instance(x: 350, y: 150) sub_node root.Std_k98ojb.Math.Sub {}\n        instance(x: 500, y: 150) mod_node root.Std_k98ojb.Math.Modulo {}\n\n        list_input -> length_node.list\n        length_node.length -> sub_node.first\n        rotate_by_input -> mod_node.value\n        length_node.length -> mod_node.divisor\n        mod_node.result -> sub_node.second\n        sub_node.result -> slice_node.start\n        list_input -> slice_node.list\n        -1 -> slice_node.end\n        slice_node.slice -> concat_node.left\n        list_input -> slice_node.list\n        0 -> slice_node.start\n        sub_node.result -> slice_node.end\n        slice_node.slice -> concat_node.right\n        concat_node.list -> rotated_list_output\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") sum_of_array {\n        in(x: 100, y: 100, name: \"input_array\") property(List<Number>) input_array\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum\n\n        instance(x: 200, y: 100) reduce_sum root.Std_k98ojb.Iteration.Reduce {\n            handler: func() {\n                in(x: 100, y: 100, name: \"accumulated\") property(Number) accumulated\n                in(x: 100, y: 150, name: \"current\") property(Number) current\n\n                out(x: 300, y: 125, name: \"result\") property(Number) result\n\n                instance(x: 200, y: 125) add root.Std_k98ojb.Math.Add {}\n                accumulated -> add.first\n                current -> add.second\n                add.result -> result\n            }\n        }\n\n        input_array -> reduce_sum.items\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum\n    }\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the given integer is a prime number.\") is_prime {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(n % i == 0)\"\n        }\n        instance(x: 1504, y: -400) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1496, y: -187) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 2136, y: -356) not_07b8c7 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1088, y: -256) lessthanorequal_80a119 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1812, y: -319) and_80a119 root.Std_k98ojb.Logic.And {}\n        2 -> generaterange_038fce.from\n        input_f5c03d -> generaterange_038fce.to\n        generaterange_038fce.list -> for_8cb3f6.items\n        for_8cb3f6.item -> expression_b720d7.gen_1\n        input_f5c03d -> expression_b720d7.gen_0\n        expression_b720d7.result -> not_80a119.input\n        not_80a119.output -> if_e19a62.predicate\n        for_8cb3f6.onItem -> if_e19a62.execute\n        if_e19a62.else -> continue_8ba06b\n        if_e19a62.then -> for_8cb3f6.next\n        for_8cb3f6.done -> not_07b8c7.input\n        not_07b8c7.output -> out_f3db9f\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n        execute_27b8c3 -> for_8cb3f6.reset\n        2 -> lessthanorequal_80a119.right\n        input_f5c03d -> lessthanorequal_80a119.left\n        lessthanorequal_80a119.result -> if_07b8c7.predicate\n        execute_27b8c3 -> if_07b8c7.execute\n    }\n\n    \n\n    instance(x: -189, y: 222) is_prime_f0be66 root.main.is_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "temperature": 0.6,
        "top_p": 0.9,
        "top_k": -1,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "gpt-4o",
        "largest_context": 3170,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") is_opposite_sign {\n        in(x: 154, y: -53, name: \"first\") property(Number) first_8b9c3d\n        in(x: 354, y: -53, name: \"second\") property(Number) second_8b9c3d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) not_equal_6030c9 root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 591, y: 74) expression_038fce root.Std_k98ojb.Math.Expression {\n            expression: \"(a * b) < 0\"\n        }\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        first_8b9c3d -> expression_038fce.a\n        second_8b9c3d -> expression_038fce.b\n        expression_038fce.result -> not_equal_6030c9.left\n        false -> not_equal_6030c9.right\n        not_equal_6030c9.result -> if_07b8c7.predicate\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n    }\n\n    instance(x: -189, y: 222) is_opposite_sign_f0be66 root.main.is_opposite_sign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: 100, y: 50, name: \"input\") property(Number) input_f5c03d\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) out_f3db9f\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 50) modulo_9fba8c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 100) equal_07b8c7 root.Std_k98ojb.Logic.Equal {}\n        instance(x: 300, y: 100) if_e19a62 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> modulo_9fba8c.value\n        11 -> modulo_9fba8c.divisor\n        modulo_9fba8c.result -> equal_07b8c7.left\n        0 -> equal_07b8c7.right\n        equal_07b8c7.result -> if_e19a62.predicate\n        if_e19a62.value -> out_f3db9f\n        execute_27b8c3 -> if_e19a62.execute\n        if_e19a62.then -> continue_8ba06b\n    }\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"replace characters in a string.\") replace_characters {\n        in(x: 100, y: 100, name: \"inputString\") property(String) inputString\n        in(x: 100, y: 150, name: \"searchChar\") property(String) searchChar\n        in(x: 100, y: 200, name: \"replaceChar\") property(String) replaceChar\n        in(x: 100, y: 250, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 150, name: \"outputString\") property(String) outputString\n        out(x: 400, y: 200, name: \"continue\") trigger() continue\n\n        instance(x: 250, y: 150) replace_1 root.Std_k98ojb.Strings.Replace {}\n        execute -> replace_1.trigger\n        inputString -> replace_1.input\n        searchChar -> replace_1.search\n        replaceChar -> replace_1.replace\n        replace_1.output -> outputString\n        replace_1.done -> continue\n    }\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts the given string to lower case.\") to_lower_case {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 350, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) tolower_instance root.Std_k98ojb.Strings.ToLower {}\n\n        execute_trigger -> tolower_instance.execute\n        input_string -> tolower_instance.input\n        tolower_instance.output -> output_string\n        tolower_instance.done -> continue_trigger\n    }\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") product_of_unique_numbers {\n        in(x: 354, y: -53, name: \"input\") property(List<Number>) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) filter_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) reduce_038fce root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 933, y: 25) contains_f11fda root.Std_k98ojb.List.Contains {}\n        instance(x: 714, y: -155) empty_8cb3f6 root.Std_k98ojb.List.Empty {}\n        instance(x: 1121, y: -54) add_b4554f root.Std_k98ojb.List.Add {}\n        instance(x: 1504, y: -400) mul_b720d7 root.Std_k98ojb.Math.Mul {}\n        instance(x: 1088, y: -256) not_80a119 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1812, y: -319) isEmpty_07b8c7 root.Std_k98ojb.List.IsEmpty {}\n\n        input_f5c03d -> filter_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            element_5f51f7 -> contains_f11fda.item\n            empty_8cb3f6.list -> contains_f11fda.list\n            contains_f11fda.result -> not_80a119.input\n            not_80a119.output -> out_d0fd24\n        } -> filter_6030c9.handler\n        filter_6030c9.output_list -> add_b4554f.list\n        filter_6030c9.output_list -> isEmpty_07b8c7.list\n        input_f5c03d -> reduce_038fce.items\n        func() {\n            in(x: -76, y: 46, name: \"accumulated\") property(Number) accumulated_5f51f7\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Number) out_d0fd24\n\n            accumulated_5f51f7 -> mul_b720d7.first\n            element_5f51f7 -> mul_b720d7.second\n            mul_b720d7.result -> out_d0fd24\n        } -> reduce_038fce.reducer\n        1 -> reduce_038fce.initial\n        reduce_038fce.result -> out_f3db9f\n        execute_27b8c3 -> isEmpty_07b8c7.isEmpty\n        isEmpty_07b8c7.isEmpty -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) product_of_unique_numbers_f0be66 root.main.product_of_unique_numbers {}\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the dissimilar elements in the given two lists.\") find_dissimilar_elements {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 200, name: \"list2\") property(List) list2\n\n        out(x: 500, y: 150, name: \"dissimilar\") property(List) dissimilar\n\n        instance(x: 300, y: 100) difference_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 200) difference_2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 150) concat root.Std_k98ojb.List.Concat {}\n\n        list1 -> difference_1.left\n        list2 -> difference_1.right\n        list2 -> difference_2.left\n        list1 -> difference_2.right\n\n        difference_1.difference -> concat.left\n        difference_2.difference -> concat.right\n\n        concat.list -> dissimilar\n    }\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_list {\n        in(x: 60, y: -30, name: \"list\") property(List) list_input\n        in(x: 60, y: 30, name: \"rotate_by\") property(Number) rotate_by\n        in(x: 60, y: 90, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 30, name: \"rotated_list\") property(List) rotated_list_output\n        out(x: 400, y: 90, name: \"done\") trigger() done\n\n        instance(x: 200, y: -30) length_calculator root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 30) modulo_calculator root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 90) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 200, y: 150) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 90) concat_parts root.Std_k98ojb.List.Concat {}\n\n        list_input -> length_calculator.list\n        length_calculator.length -> modulo_calculator.divisor\n        rotate_by -> modulo_calculator.value\n        modulo_calculator.result -> slice_first_part.start\n        length_calculator.length -> slice_first_part.end\n        list_input -> slice_first_part.list\n\n        0 -> slice_second_part.start\n        modulo_calculator.result -> slice_second_part.end\n        list_input -> slice_second_part.list\n\n        slice_first_part.slice -> concat_parts.left\n        slice_second_part.slice -> concat_parts.right\n\n        concat_parts.list -> rotated_list_output\n        execute -> length_calculator.execute\n        length_calculator.done -> modulo_calculator.execute\n        modulo_calculator.done -> slice_first_part.execute\n        slice_first_part.done -> slice_second_part.execute\n        slice_second_part.done -> concat_parts.execute\n        concat_parts.done -> done\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") sum_of_array {\n        in(x: 100, y: 50, name: \"input_array\") property(List<Number>) input_array\n\n        out(x: 500, y: 50, name: \"sum\") property(Number) sum\n\n        instance(x: 300, y: 50) reduce_sum root.Std_k98ojb.Iteration.Reduce {\n            handler: func() {\n                in(name: \"accumulated\") property(Number) accumulated\n                in(name: \"current\") property(Number) current\n\n                out(name: \"sum\") property(Number) sum\n\n                instance() add root.Std_k98ojb.Math.Add {\n                    first: accumulated\n                    second: current\n                } -> sum\n            }\n        }\n\n        input_array -> reduce_sum.items\n        0 -> reduce_sum.initial\n        reduce_sum.result -> sum\n    }\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the given integer is a prime number.\") is_prime {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) sqrt_6030c9 root.Std_k98ojb.Math.Expression {\n            expression: \"Math.sqrt(n)\"\n        }\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"n % i == 0\"\n        }\n        instance(x: 2136, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1088, y: -256) lessthanorequal_f11fda root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 933, y: 25) greaterthan_f11fda root.Std_k98ojb.Math.GreaterThan {}\n        instance(x: 1812, y: -319) not_80a119 root.Std_k98ojb.Logic.Not {}\n\n        2 -> generaterange_038fce.from\n        sqrt_6030c9.result -> generaterange_038fce.to\n        generaterange_038fce.list -> for_8cb3f6.items\n\n        for_8cb3f6.item -> expression_b720d7.gen_1\n        input_f5c03d -> expression_b720d7.gen_0\n\n        for_8cb3f6.onItem -> if_07b8c7.execute\n        expression_b720d7.result -> if_07b8c7.predicate\n        if_07b8c7.then -> not_80a119.input\n        not_80a119.output -> out_f3db9f\n\n        if_07b8c7.else -> for_8cb3f6.next\n        if_e19a62.then -> continue_8ba06b\n        if_e19a62.else -> for_8cb3f6.next\n\n        input_f5c03d -> sqrt_6030c9.gen_0\n        1 -> lessthanorequal_f11fda.right\n        input_f5c03d -> lessthanorequal_f11fda.left\n        lessthanorequal_f11fda.result -> greaterthan_f11fda.left\n        1 -> greaterthan_f11fda.right\n        greaterthan_f11fda.result -> if_e19a62.predicate\n\n        execute_27b8c3 -> for_8cb3f6.reset\n        for_8cb3f6.done -> continue_8ba06b\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "temperature": 0.9,
        "top_p": 0.2,
        "top_k": -1,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "gpt-4o",
        "largest_context": 3170,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") opposite_signs {\n        in(x: 100, y: 100, name: \"first\") property(Number) first_1a2b3c\n        in(x: 100, y: 150, name: \"second\") property(Number) second_4d5e6f\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_7g8h9i\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) out_j1k2l3\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_m4n5o6\n\n        instance(x: 200, y: 100) expression_p7q8r9 root.Std_k98ojb.Math.Expression {\n            expression: \"(a * b) < 0\"\n        }\n\n        execute_7g8h9i -> expression_p7q8r9.execute\n        first_1a2b3c -> expression_p7q8r9.a\n        second_4d5e6f -> expression_p7q8r9.b\n        expression_p7q8r9.result -> out_j1k2l3\n        execute_7g8h9i -> continue_m4n5o6\n    }\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) output_result\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 100) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 100) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        11 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.value -> output_result\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"replaces characters in a string.\") replace_characters {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"search\") property(String) search_27b8c3\n        in(x: 161, y: -311, name: \"replace\") property(String) replace_27b8c3\n        in(x: 161, y: -411, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) replace_6030c9 root.Std_k98ojb.Strings.Replace {}\n        \n        input_f5c03d -> replace_6030c9.input\n        search_27b8c3 -> replace_6030c9.search\n        replace_27b8c3 -> replace_6030c9.replace\n        replace_6030c9.output -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) replace_characters_f0be66 root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts the given string to lower case.\") to_lower_case {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) to_lower root.Std_k98ojb.Strings.ToLower {}\n\n        input_string -> to_lower.input\n        to_lower.output -> output_string\n        execute_trigger -> to_lower.execute\n        to_lower.continue -> continue_trigger\n    }\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the product of the unique numbers in a given list.\") product_of_unique_numbers {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_list\n\n        out(x: 500, y: 100, name: \"out\") property(Number) product\n\n        instance(x: 200, y: 100) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 300, y: 100) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 200, y: 200) not_equal root.Std_k98ojb.Logic.NotEqual {}\n\n        input_list -> filter_unique.items\n        func() {\n            in(x: 0, y: 0, name: \"item\") property(Number) item\n            in(x: 0, y: 50, name: \"index\") property(Number) index\n\n            out(x: 200, y: 0, name: \"out\") property(Bool) is_unique\n\n            instance(x: 100, y: 0) count_occurrences root.Std_k98ojb.Iteration.Reduce {}\n            instance(x: 100, y: 100) equal_to_one root.Std_k98ojb.Logic.Equal {}\n\n            input_list -> count_occurrences.items\n            func() {\n                in(x: 0, y: 0, name: \"acc\") property(Number) acc\n                in(x: 0, y: 50, name: \"current\") property(Number) current\n\n                out(x: 200, y: 0, name: \"out\") property(Number) new_acc\n\n                instance(x: 100, y: 0) add_if_equal root.Std_k98ojb.Std.IfExpression {\n                    expression: \"current == item ? acc + 1 : acc\"\n                }\n\n                acc -> add_if_equal.a\n                current -> add_if_equal.b\n                item -> add_if_equal.c\n                add_if_equal.value -> new_acc\n            } -> count_occurrences.handler\n\n            count_occurrences.result -> equal_to_one.left\n            1 -> equal_to_one.right\n            equal_to_one.result -> is_unique\n        } -> filter_unique.handler\n\n        filter_unique.output_list -> reduce_product.items\n        func() {\n            in(x: 0, y: 0, name: \"acc\") property(Number) acc\n            in(x: 0, y: 50, name: \"current\") property(Number) current\n\n            out(x: 200, y: 0, name: \"out\") property(Number) new_acc\n\n            instance(x: 100, y: 0) multiply root.Std_k98ojb.Math.Mul {}\n\n            acc -> multiply.first\n            current -> multiply.second\n            multiply.result -> new_acc\n        } -> reduce_product.handler\n\n        1 -> reduce_product.initial\n        reduce_product.result -> product\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the dissimilar elements in the given two lists.\") find_dissimilar_elements {\n        in(x: 100, y: 100, name: \"list1\") property(List) list1\n        in(x: 100, y: 200, name: \"list2\") property(List) list2\n        in(x: 100, y: 300, name: \"execute\") trigger() execute\n\n        out(x: 400, y: 200, name: \"dissimilar\") property(List) dissimilar\n        out(x: 400, y: 300, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 100) difference_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 200, y: 200) difference_2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 300, y: 150) concat root.Std_k98ojb.List.Concat {}\n\n        list1 -> difference_1.left\n        list2 -> difference_1.right\n        list2 -> difference_2.left\n        list1 -> difference_2.right\n\n        difference_1.difference -> concat.list1\n        difference_2.difference -> concat.list2\n\n        concat.list -> dissimilar\n        execute -> difference_1.execute\n        difference_1.done -> difference_2.execute\n        difference_2.done -> continue\n    }\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_list {\n        in(x: 150, y: -50, name: \"list\") property(List) list_input\n        in(x: 150, y: 0, name: \"rotate_by\") property(Number) rotate_by_input\n        in(x: 150, y: 50, name: \"execute\") trigger() execute_trigger\n\n        out(x: 600, y: 0, name: \"rotated_list\") property(List) rotated_list_output\n        out(x: 600, y: 50, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: -50) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 300, y: 0) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 300, y: 50) slice_node_1 root.Std_k98ojb.List.Slice {}\n        instance(x: 300, y: 100) slice_node_2 root.Std_k98ojb.List.Slice {}\n        instance(x: 450, y: 0) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_input -> length_node.list\n        length_node.length -> modulo_node.divisor\n        rotate_by_input -> modulo_node.value\n        modulo_node.result -> slice_node_1.start\n        list_input -> slice_node_1.list\n        modulo_node.result -> slice_node_2.end\n        list_input -> slice_node_2.list\n        slice_node_1.slice -> concat_node.left\n        slice_node_2.slice -> concat_node.right\n        concat_node.list -> rotated_list_output\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") sum_of_array {\n        in(x: 100, y: 100, name: \"input\") property(List<Number>) input_array\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"sum\") property(Number) sum_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 100) reduce_instance root.Std_k98ojb.Iteration.Reduce {\n            handler: func() {\n                in(x: 0, y: 0, name: \"accumulated\") property(Number) accumulated\n                in(x: 0, y: 50, name: \"current\") property(Number) current\n\n                out(x: 200, y: 25, name: \"result\") property(Number) result\n\n                instance(x: 100, y: 25) add_instance root.Std_k98ojb.Math.Add {}\n                accumulated -> add_instance.first\n                current -> add_instance.second\n                add_instance.result -> result\n            }\n        }\n\n        input_array -> reduce_instance.items\n        0 -> reduce_instance.initial\n        reduce_instance.result -> sum_output\n        execute_trigger -> reduce_instance.execute\n        reduce_instance.done -> continue_trigger\n    }\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the given integer is a prime number.\") is_prime {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 100, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"out\") property(Bool) is_prime_output\n        out(x: 300, y: 150, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 50) if_expression root.Std_k98ojb.Std.IfExpression {\n            expression: \"n <= 1 ? false : true\"\n        }\n        instance(x: 400, y: 50) generate_range root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 600, y: 50) for_loop root.Std_k98ojb.Std.For {}\n        instance(x: 800, y: 50) modulo_check root.Std_k98ojb.Math.Modulo {}\n        instance(x: 1000, y: 50) if_modulo root.Std_k98ojb.Std.If {}\n        instance(x: 1200, y: 50) not_prime root.Std_k98ojb.Std.If {}\n\n        input_number -> if_expression.n\n        if_expression.value -> is_prime_output\n        if_expression.result -> generate_range.to\n        2 -> generate_range.from\n        generate_range.list -> for_loop.items\n        for_loop.item -> modulo_check.value\n        input_number -> modulo_check.divisor\n        modulo_check.result -> if_modulo.input\n        if_modulo.then -> not_prime.execute\n        false -> not_prime.input\n        not_prime.then -> continue_trigger\n        for_loop.done -> continue_trigger\n        execute_trigger -> for_loop.reset\n        execute_trigger -> if_expression.execute\n        if_modulo.else -> for_loop.next\n    }\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "temperature": 0.9,
        "top_p": 0.6,
        "top_k": -1,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "gpt-4o",
        "largest_context": 3170,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") is_opposite_sign {\n        in(x: 154, y: -53, name: \"first\") property(Number) first_8b9d7c\n        in(x: 354, y: -53, name: \"second\") property(Number) second_8b9d7c\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 450, y: -100) mul_5f9d09 root.Std_k98ojb.Math.Mul {}\n        instance(x: 650, y: -50) lessthan_7f9d09 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 850, y: 0) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        first_8b9d7c -> mul_5f9d09.first\n        second_8b9d7c -> mul_5f9d09.second\n        mul_5f9d09.result -> lessthan_7f9d09.left\n        0 -> lessthan_7f9d09.right\n        lessthan_7f9d09.result -> if_07b8c7.predicate\n        if_07b8c7.value -> out_f3db9f\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n    }\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: 100, y: 100, name: \"input\") property(Number) input_number\n        in(x: 150, y: 150, name: \"execute\") trigger() execute_trigger\n\n        out(x: 200, y: 200, name: \"out\") property(Bool) output_result\n        out(x: 250, y: 250, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 300, y: 300) modulo_instance root.Std_k98ojb.Math.Modulo {}\n        instance(x: 400, y: 400) equal_instance root.Std_k98ojb.Logic.Equal {}\n        instance(x: 500, y: 500) if_instance root.Std_k98ojb.Std.If {}\n\n        input_number -> modulo_instance.value\n        11 -> modulo_instance.divisor\n        modulo_instance.result -> equal_instance.left\n        0 -> equal_instance.right\n        equal_instance.result -> if_instance.predicate\n        if_instance.value -> output_result\n        execute_trigger -> if_instance.execute\n        if_instance.then -> continue_trigger\n        if_instance.else -> continue_trigger\n    }\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Replaces characters in a string.\") replace_characters {\n        in(x: 354, y: -53, name: \"input\") property(String) input_f5c03d\n        in(x: 161, y: -211, name: \"search\") property(String) search_27b8c3\n        in(x: 161, y: -211, name: \"replace\") property(String) replace_9d7c3b\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(String) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) replace_6030c9 root.Std_k98ojb.Strings.Replace {}\n        \n        input_f5c03d -> replace_6030c9.input\n        search_27b8c3 -> replace_6030c9.search\n        replace_9d7c3b -> replace_6030c9.replace\n        replace_6030c9.output -> out_f3db9f\n        execute_27b8c3 -> continue_8ba06b\n    }\n\n    \n\n    instance(x: -189, y: 222) replace_characters_f0be66 root.main.replace_characters {}\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Converts the given string to lower case.\") to_lower_case {\n        in(x: 100, y: 100, name: \"input\") property(String) input_string\n        in(x: 100, y: 200, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 100, name: \"output\") property(String) output_string\n        out(x: 300, y: 200, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 200, y: 150) tolower_instance root.Std_k98ojb.Strings.ToLower {}\n        \n        input_string -> tolower_instance.input\n        tolower_instance.output -> output_string\n\n        execute_trigger -> continue_trigger\n    }\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"calculates the product of the unique numbers in a given list.\") product_of_unique_numbers {\n        in(x: 100, y: 100, name: \"input\") property(List) input_list\n\n        out(x: 500, y: 100, name: \"output\") property(Number) output_product\n\n        instance(x: 200, y: 100) filter_unique root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 350, y: 100) reduce_product root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 200, y: 200) is_empty root.Std_k98ojb.List.IsEmpty {}\n\n        input_list -> filter_unique.items\n        func() {\n            in(x: 100, y: 100, name: \"item\") property(Number) item\n            out(x: 300, y: 100, name: \"output\") property(Bool) is_unique\n\n            instance(x: 200, y: 100) contains root.Std_k98ojb.List.Contains {}\n\n            item -> contains.item\n            input_list -> contains.list\n            contains.result -> is_unique\n        } -> filter_unique.handler\n\n        filter_unique.output_list -> reduce_product.items\n        func() {\n            in(x: 100, y: 100, name: \"acc\") property(Number) acc\n            in(x: 100, y: 200, name: \"value\") property(Number) value\n            out(x: 300, y: 150, name: \"output\") property(Number) product\n\n            instance(x: 200, y: 150) multiply root.Std_k98ojb.Math.Mul {}\n\n            acc -> multiply.first\n            value -> multiply.second\n            multiply.result -> product\n        } -> reduce_product.reducer\n\n        1 -> reduce_product.initialValue\n        reduce_product.result -> output_product\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the dissimilar elements in the given two lists.\") find_dissimilar_elements {\n        in(x: 160, y: -60, name: \"list1\") property(List) list1_0d9c7f\n        in(x: 160, y: 20, name: \"list2\") property(List) list2_8b2f4d\n        in(x: 160, y: 100, name: \"execute\") trigger() execute_9c2d7a\n\n        out(x: 480, y: 20, name: \"dissimilar_elements\") property(List) dissimilar_elements_3a1f6d\n        out(x: 480, y: 100, name: \"continue\") trigger() continue_1b3f4c\n\n        instance(x: 320, y: -60) difference_1b7c8d root.Std_k98ojb.Sets.Difference {}\n        instance(x: 320, y: 20) difference_2c8d9f root.Std_k98ojb.Sets.Difference {}\n        instance(x: 640, y: 20) concat_4a3b2c root.Std_k98ojb.List.Concat {}\n\n        list1_0d9c7f -> difference_1b7c8d.left\n        list2_8b2f4d -> difference_1b7c8d.right\n        list2_8b2f4d -> difference_2c8d9f.left\n        list1_0d9c7f -> difference_2c8d9f.right\n\n        difference_1b7c8d.difference -> concat_4a3b2c.first\n        difference_2c8d9f.difference -> concat_4a3b2c.second\n\n        concat_4a3b2c.list -> dissimilar_elements_3a1f6d\n        execute_9c2d7a -> continue_1b3f4c\n    }\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by specified number of items to the right direction.\") rotate_list {\n        in(x: 60, y: -30, name: \"list\") property(List) list_input\n        in(x: 60, y: 30, name: \"rotate_by\") property(Number) rotate_by_input\n        in(x: 60, y: 90, name: \"execute\") trigger() execute_trigger\n\n        out(x: 300, y: 0, name: \"rotated_list\") property(List) rotated_list_output\n        out(x: 300, y: 60, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 120, y: -30) length_node root.Std_k98ojb.List.Length {}\n        instance(x: 120, y: 30) modulo_node root.Std_k98ojb.Math.Modulo {}\n        instance(x: 180, y: -30) slice_first_part root.Std_k98ojb.List.Slice {}\n        instance(x: 180, y: 30) slice_second_part root.Std_k98ojb.List.Slice {}\n        instance(x: 240, y: 0) concat_node root.Std_k98ojb.List.Concat {}\n\n        list_input -> length_node.list\n        rotate_by_input -> modulo_node.value\n        length_node.length -> modulo_node.divisor\n\n        list_input -> slice_first_part.list\n        modulo_node.result -> slice_first_part.start\n        -1 -> slice_first_part.end\n\n        list_input -> slice_second_part.list\n        0 -> slice_second_part.start\n        modulo_node.result -> slice_second_part.end\n\n        slice_first_part.slice -> concat_node.left\n        slice_second_part.slice -> concat_node.right\n\n        concat_node.list -> rotated_list_output\n        execute_trigger -> length_node.execute\n        length_node.done -> modulo_node.execute\n        modulo_node.done -> slice_first_part.execute\n        slice_first_part.done -> slice_second_part.execute\n        slice_second_part.done -> concat_node.execute\n        concat_node.done -> continue_trigger\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Finds the sum of an array.\") sum_of_array {\n        in(x: 160, y: -90, name: \"input\") property(List<Number>) input_array\n        in(x: 160, y: -30, name: \"execute\") trigger() execute_trigger\n\n        out(x: 480, y: -60, name: \"sum\") property(Number) sum_output\n        out(x: 480, y: 0, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 320, y: -60) reduce_instance root.Std_k98ojb.Iteration.Reduce {\n            initial: 0\n        }\n        instance(x: 640, y: -60) add_instance root.Std_k98ojb.Math.Add {}\n\n        input_array -> reduce_instance.items\n        reduce_instance.result -> sum_output\n        reduce_instance.done -> continue_trigger\n        execute_trigger -> reduce_instance.execute\n\n        func() {\n            in(x: -80, y: 0, name: \"accumulated\") property(Number) accumulated\n            in(x: -80, y: 60, name: \"current\") property(Number) current\n\n            out(x: 240, y: 30, name: \"result\") property(Number) result\n\n            accumulated -> add_instance.first\n            current -> add_instance.second\n            add_instance.result -> result\n        } -> reduce_instance.reducer\n    }\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks if the given integer is a prime number.\") is_prime {\n        in(x: 54, y: 0, name: \"input\") property(Number) input_f5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 748, y: -10, name: \"out\") property(Bool) out_f3db9f\n        out(x: 894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) filter_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 933, y: 25) isempty_f11fda root.Std_k98ojb.List.IsEmpty {}\n        instance(x: 714, y: -155) if_07b8c7 root.Std_k98ojb.Std.If {}\n        instance(x: 504, y: -400) expression_b720d7 root.Std_k98ojb.Math.Expression {\n            expression: \"(n % i == 0)\"\n        }\n        instance(x: 136, y: -256) lessthanorequal_b4554f root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 1212, y: -356) not_e19a62 root.Std_k98ojb.Logic.Not {}\n        instance(x: 1388, y: -356) if_e19a62 root.Std_k98ojb.Std.If {}\n        instance(x: 1028, y: -356) not_equal_e19a62 root.Std_k98ojb.Logic.NotEqual {}\n        \n        2 -> generaterange_038fce.from\n        input_f5c03d -> generaterange_038fce.to\n        generaterange_038fce.list -> filter_6030c9.items\n        func() {\n            in(x: -76, y: 46, name: \"element\") property(Number) element_5f51f7\n\n            out(x: 382, y: 19, name: \"out\") property(Bool) out_d0fd24\n\n            instance(x: 106, y: 17) expression_2f9d09 root.Std_k98ojb.Math.Expression {\n                expression: \"(n % element == 0)\"\n            }\n            element_5f51f7 -> expression_2f9d09.gen_1\n            input_f5c03d -> expression_2f9d09.gen_0\n            expression_2f9d09.result -> out_d0fd24\n        } -> filter_6030c9.handler\n        filter_6030c9.output_list -> isempty_f11fda.list\n        isempty_f11fda.isEmpty -> not_e19a62.input\n        not_e19a62.output -> if_07b8c7.predicate\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.then -> continue_8ba06b\n        if_07b8c7.else -> if_e19a62.execute\n        input_f5c03d -> not_equal_e19a62.left\n        1 -> not_equal_e19a62.right\n        not_equal_e19a62.output -> if_e19a62.predicate\n        if_e19a62.then -> out_f3db9f\n        if_e19a62.else -> continue_8ba06b\n    }\n    \n    instance(x: -189, y: 222) is_prime_f0be66 root.main.is_prime {}\n}"
            ]
        }
    },
    {
        "experiment_name": "regular_coverage_1_shot",
        "temperature": 0.9,
        "top_p": 0.9,
        "top_k": -1,
        "seed": 9,
        "n_generations_per_task": 1,
        "model": "gpt-4o",
        "largest_context": 3170,
        "task_candidates": {
            "1": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"checks whether the given two integers have opposite sign or not.\") has_opposite_sign {\n        in(x: 138, y: -92, name: \"first\") property(Number) first_b248f8\n        in(x: 381, y: -92, name: \"second\") property(Number) second_b248f8\n        in(x: 264, y: 47, name: \"execute\") trigger() execute_28f1f8\n\n        out(x: 648, y: -92, name: \"out\") property(Bool) out_25d3a1\n        out(x: 708, y: 47, name: \"continue\") trigger() continue_6a2b98\n\n        instance(x: 530, y: -280) lessthan_b72d23 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 249, y: -280) lessthanorequal_1c44f7 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 474, y: -480) expression_f1124c root.Std_k98ojb.Math.Expression {\n            expression: \"(a < 0) != (b < 0)\"\n        }\n        instance(x: 470, y: -166) if_5078e1 root.Std_k98ojb.Std.If {}\n        first_b248f8 -> expression_f1124c.a\n        second_b248f8 -> expression_f1124c.b\n        expression_f1124c.result -> if_5078e1.predicate\n        execute_28f1f8 -> if_5078e1.execute\n        if_5078e1.value -> out_25d3a1\n        if_5078e1.then -> continue_6a2b98\n    }\n\n    instance(x: -158, y: 200) has_opposite_sign_58d4b8 root.main.has_opposite_sign {}\n}"
            ],
            "3": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is divisible by 11.\") is_divisible_by_11 {\n        in(x: 100, y: 50, name: \"input\") property(Number) input_f5c03d\n        in(x: 100, y: 100, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 300, y: 50, name: \"out\") property(Bool) out_f3db9f\n        out(x: 300, y: 100, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 200, y: 50) modulo_9fba8c root.Std_k98ojb.Math.Modulo {}\n        instance(x: 200, y: 100) equal_f11fda root.Std_k98ojb.Logic.Equal {}\n        instance(x: 250, y: 75) if_07b8c7 root.Std_k98ojb.Std.If {}\n\n        input_f5c03d -> modulo_9fba8c.value\n        11 -> modulo_9fba8c.divisor\n        modulo_9fba8c.result -> equal_f11fda.left\n        0 -> equal_f11fda.right\n        equal_f11fda.result -> if_07b8c7.predicate\n        execute_27b8c3 -> if_07b8c7.execute\n        if_07b8c7.value -> out_f3db9f\n        if_07b8c7.then -> continue_8ba06b\n    }\n}"
            ],
            "12": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Replaces characters in a string.\") replace_characters {\n        in(x: 66, y: -82, name: \"input\") property(String) input_f5c03d\n        in(x: 66, y: -39, name: \"search\") property(String) search_f6d0ab\n        in(x: 66, y: 4, name: \"replace\") property(String) replace_27b8c3\n        in(x: 66, y: 47, name: \"execute\") trigger() execute_8ba06b\n\n        out(x: 284, y: 72, name: \"output\") property(String) output_4b8c9d\n        out(x: 284, y: 114, name: \"continue\") trigger() continue_f3db9f\n\n        instance(x: 174, y: 18) replace_9fba8c root.Std_k98ojb.Strings.Replace {}\n        input_f5c03d -> replace_9fba8c.input\n        search_f6d0ab -> replace_9fba8c.search\n        replace_27b8c3 -> replace_9fba8c.replace\n        replace_9fba8c.output -> output_4b8c9d\n        execute_8ba06b -> continue_f3db9f\n        execute_8ba06b -> replace_9fba8c.execute\n    }\n}"
            ],
            "13": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func() to_lower_case {\n        in(x: 120, y: 40, name: \"input\") property(String) input_string\n        in(x: 120, y: 80, name: \"execute\") trigger() execute_trigger\n\n        out(x: 320, y: 40, name: \"output\") property(String) output_string\n        out(x: 320, y: 80, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 220, y: 60) to_lower_instance root.Std_k98ojb.Strings.ToLower {}\n\n        input_string -> to_lower_instance.input\n        to_lower_instance.output -> output_string\n\n        execute_trigger -> to_lower_instance.execute\n        to_lower_instance.done -> continue_trigger\n    }\n}"
            ],
            "16": [
                "import(\"std\", Std_k98ojb)\nimport(\"http\", Http_q7o96c)\n\nmodule() main {\n    func(doc: \"Calculates the product of the unique numbers in a given list.\") unique_product {\n        in(x: 354, y: -53, name: \"list\") property(List<Number>) list_5c03d\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_27b8c3\n\n        out(x: 1748, y: -10, name: \"out\") property(Number) out_f3db9f\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_8ba06b\n\n        instance(x: 352, y: -493) filter_6030c9 root.Std_k98ojb.Iteration.Filter {}\n        instance(x: 591, y: 74) reduce_038fce root.Std_k98ojb.Iteration.Reduce {}\n        instance(x: 933, y: 25) not_equal_f11fda root.Std_k98ojb.Logic.NotEqual {}\n        instance(x: 714, y: -155) list_empty_8cb3f6 root.Std_k98ojb.List.Empty {}\n        instance(x: 1812, y: -319) find_80a119 root.Std_k98ojb.Iteration.Find {}\n        instance(x: 1121, y: -54) mul_07b8c7 root.Std_k98ojb.Math.Mul {}\n        \n        list_5c03d -> filter_6030c9.items\n        filter_6030c9.output_list -> reduce_038fce.items\n        func() {\n            in(x: -76, y: 46, name: \"item\") property(Number) item_5f51f7\n\n            out(x: 382, y: 19, name: \"unique\") property(Bool) unique_d0fd24\n\n            instance(x: 106, y: 17) contains_2f9d09 root.Std_k98ojb.List.Contains {}\n            list_5c03d -> contains_2f9d09.list\n            item_5f51f7 -> contains_2f9d09.item\n            contains_2f9d09.result -> unique_d0fd24\n        } -> filter_6030c9.handler\n        func() {\n            in(x: 93, y: 45, name: \"accumulated\") property(Number) accumulated_2d0d2b\n            in(x: 93, y: 75, name: \"current\") property(Number) current_2f0d2b\n\n            out(x: 382, y: 19, name: \"product\") property(Number) product_d0fd24\n\n            accumulated_2d0d2b -> mul_07b8c7.first\n            current_2f0d2b -> mul_07b8c7.second\n            mul_07b8c7.result -> product_d0fd24\n        } -> reduce_038fce.reducer\n        1 -> reduce_038fce.initial\n        reduce_038fce.result -> out_f3db9f\n        execute_27b8c3 -> list_empty_8cb3f6.execute\n        list_empty_8cb3f6.list -> find_80a119.items\n        find_80a119.item -> continue_8ba06b\n    }\n}"
            ],
            "18": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Find the dissimilar elements in the given two lists.\") find_dissimilar_elements {\n        in(x: 160, y: -60, name: \"list1\") property(List) list1_0bc9d7\n        in(x: 160, y: 40, name: \"list2\") property(List) list2_0bc9d8\n        in(x: 160, y: 140, name: \"execute\") trigger() execute_1c9ef0\n\n        out(x: 720, y: 40, name: \"dissimilar_elements\") property(List) dissimilar_elements_f7c3e9\n        out(x: 720, y: 140, name: \"continue\") trigger() continue_1a6f99\n\n        instance(x: 400, y: -30) difference_1 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 400, y: 80) difference_2 root.Std_k98ojb.Sets.Difference {}\n        instance(x: 560, y: 40) concat_1 root.Std_k98ojb.List.Concat {}\n\n        list1_0bc9d7 -> difference_1.left\n        list2_0bc9d8 -> difference_1.right\n        list2_0bc9d8 -> difference_2.left\n        list1_0bc9d7 -> difference_2.right\n        difference_1.difference -> concat_1.left\n        difference_2.difference -> concat_1.right\n        concat_1.list -> dissimilar_elements_f7c3e9\n        execute_1c9ef0 -> difference_1\n        execute_1c9ef0 -> difference_2\n        execute_1c9ef0 -> concat_1\n        concat_1 -> continue_1a6f99\n    }\n}"
            ],
            "34": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"Rotates a given list by a specified number of items to the right direction.\") rotate_list {\n        in(x: 50, y: 0, name: \"list\") property(List<Any>) input_list\n        in(x: 50, y: 100, name: \"positions\") property(Number) input_positions\n        in(x: 50, y: 200, name: \"execute\") trigger() execute\n\n        out(x: 300, y: 0, name: \"rotatedList\") property(List<Any>) output_list\n        out(x: 300, y: 100, name: \"continue\") trigger() continue\n\n        instance(x: 200, y: 0) length_calc root.Std_k98ojb.List.Length {}\n        instance(x: 200, y: 100) slice_part1 root.Std_k98ojb.List.Slice {}\n        instance(x: 200, y: 200) slice_part2 root.Std_k98ojb.List.Slice {}\n        instance(x: 400, y: 100) concat_parts root.Std_k98ojb.List.Concat {}\n        instance(x: 100, y: 150) modulo_calc root.Std_k98ojb.Math.Modulo {}\n\n        input_list -> length_calc.list\n        length_calc.length -> modulo_calc.value\n        input_positions -> modulo_calc.divisor\n        modulo_calc.result -> slice_part1.start\n        length_calc.length -> slice_part1.end\n        input_list -> slice_part1.list\n\n        0 -> slice_part2.start\n        modulo_calc.result -> slice_part2.end\n        input_list -> slice_part2.list\n\n        slice_part1.list -> concat_parts.left\n        slice_part2.list -> concat_parts.right\n        concat_parts.list -> output_list\n\n        execute -> length_calc.execute\n        execute -> modulo_calc.execute\n        execute -> slice_part1.execute\n        execute -> slice_part2.execute\n        concat_parts.execute -> continue\n    }\n}"
            ],
            "42": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"finds the sum of an array\") sum_of_array {\n        in(x: 225, y: -90, name: \"input_array\") property(List) input_array_b73c7f\n        in(x: 209, y: -204, name: \"execute\") trigger() execute_b42d9f\n\n        out(x: 593, y: -81, name: \"sum\") property(Number) sum_9f7e32\n        out(x: 613, y: 28, name: \"continue\") trigger() continue_2f9ad4\n\n        instance(x: 366, y: -192) reduce_f21e8b root.Std_k98ojb.Iteration.Reduce {}\n\n        0 -> reduce_f21e8b.initial\n        input_array_b73c7f -> reduce_f21e8b.items\n        func() {\n            in(x: 59, y: -50, name: \"accumulator\") property(Number) accumulator_97dc4b\n            in(x: 46, y: 21, name: \"current_value\") property(Number) current_value_a3d7f6\n\n            out(x: 366, y: -30, name: \"result\") property(Number) result_9e5fbd\n\n            instance(x: 192, y: -47) add_51cb07 root.Std_k98ojb.Math.Add {}\n            accumulator_97dc4b -> add_51cb07.first\n            current_value_a3d7f6 -> add_51cb07.second\n            add_51cb07.result -> result_9e5fbd\n        } -> reduce_f21e8b.reducer\n\n        reduce_f21e8b.result -> sum_9f7e32\n        execute_b42d9f -> reduce_f21e8b.execute\n        reduce_f21e8b.done -> continue_2f9ad4\n    }\n}"
            ],
            "48": [
                "import(\"std\", Std_k98ojb)\n\nmodule() main {\n    func(doc: \"checks whether the given number is a prime number or not.\") is_prime_number {\n        in(x: 354, y: -53, name: \"input\") property(Number) input_number\n        in(x: 161, y: -211, name: \"execute\") trigger() execute_trigger\n\n        out(x: 1748, y: -10, name: \"out\") property(Bool) out_is_prime\n        out(x: 1894, y: 120, name: \"continue\") trigger() continue_trigger\n\n        instance(x: 342, y: 90) lessthan_2 root.Std_k98ojb.Math.LessThanOrEqual {}\n        instance(x: 593, y: 74) generaterange_038fce root.Std_k98ojb.List.GenerateRange {}\n        instance(x: 714, y: -155) for_8cb3f6 root.Std_k98ojb.Std.For {}\n        instance(x: 1121, y: -54) if_not_prime root.Std_k98ojb.Std.If {}\n        instance(x: 1504, y: -400) expression_mod_zero root.Std_k98ojb.Math.Expression {\n            expression: \"(n % i == 0)\"\n        }\n        instance(x: 2136, y: -356) if_prime root.Std_k98ojb.Std.If {}\n        instance(x: 1142, y: -256) expression_sqrt root.Std_k98ojb.Math.Expression {\n            expression: \"sqrt(n)\"\n        }\n\n        instance(x: 1250, y: -345) if_less_than_two root.Std_k98ojb.Std.If {}\n        instance(x: 1350, y: -300) logic_equal_two root.Std_k98ojb.Logic.Equal {}\n\n        instance(x: 1450, y: -250) if_equal_two root.Std_k98ojb.Std.If {}\n\n        input_number -> if_less_than_two.value\n        2 -> logic_equal_two.right\n        input_number -> logic_equal_two.left\n        logic_equal_two.result -> if_equal_two.value\n\n        if_less_than_two.then -> continue_trigger\n        if_less_than_two.predicate -> logic_equal_two.result\n        logic_equal_two.result -> if_equal_two.predicate\n\n        2 -> generaterange_038fce.from\n        expression_sqrt.result -> generaterange_038fce.to\n        generaterange_038fce.list -> for_8cb3f6.items\n        for_8cb3f6.item -> expression_mod_zero.gen_1\n        input_number -> expression_mod_zero.gen_0\n        expression_mod_zero.result -> if_not_prime.predicate\n        for_8cb3f6.onItem -> if_not_prime.execute\n        if_not_prime.then -> continue_trigger\n        if_not_prime.else -> for_8cb3f6.next\n        if_prime.else -> continue_trigger\n        execute_trigger -> if_less_than_two.execute\n        execute_trigger -> expression_sqrt.gen_0\n        expression_sqrt.result -> lessthan_2.right\n        2 -> lessthan_2.left\n        lessthan_2.result -> if_prime.predicate\n        if_prime.then -> continue_trigger\n        for_8cb3f6.done -> out_is_prime\n    }\n\n    instance(x: -189, y: 222) is_prime_number_instance root.main.is_prime_number {}\n}"
            ]
        }
    }
]