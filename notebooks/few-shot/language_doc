# The Midio Language  
Midio is a visual, general-purpose programming language. Its building blocks, composed of functions and events, are similar to those found in standard textual languages. Functions are entities that process input and produce output. Events, on the other hand, enable triggering of flows based on specific conditions such as incoming HTTP requests. Midio also includes data types and modules for organizing the code.  
The term **node** is used to describe instances of both functions and events, which are visually represented as nodes connected by **arrows** to form flows. Both functions and modules can contain **flows**, but only modules can utilize event nodes.

## Syntax  
### The anatomy of a node  
A node represents an **instance** of a function or event, with the original function or event being its **declaration**. Each node has input and output properties, as well as input and output triggers. Properties handle data acceptance and production, while triggers determine when a node is called.  
Nodes without triggers are called on demand.

### Execution order  
Understanding the difference between triggers and properties is crucial. Properties pull data from their connected sources, while triggers pushes the flow of execution to the next trigger.  
#### Example of execution order  
1. When a request is received matching the `/hello` endpoint with method `GET` and a query parameter `name`, the `HttpEndpoint` event is triggered.
2. The `Template` node is then called, because the `Log` node depends on its result, and it doesn't have any triggers.
3. The `Log` node is executed, with input from the `Template` node.
4. The `Template` node is called again, since the `HttpResponse` node also depends on it.
5. The `HttpResponse` node is called with input from the `Template` node.  
#### Functions without triggers  
Functions without any trigger inputs or outputs are called 'on demand', and don't cache their results, meaning that if several nodes depend on the output of a single non-triggerable node, it is called several times, like in the example above.  
Function with triggers can only be called by triggering it from a previous function or event, or by clicking the 'play'-button. They do cache their results, meaning that as long as a triggered node has been called, any node that depends on it will use the cached result. If a node depends on a triggered node which has not yet been called, the result will be `null`.

## Data types  
Midio supports a variety of data types that allow you to work with different kinds of information. These data types include:  
* **Number**: Represents both integers and floating-point values.
* **String**: Represents a sequence of characters.
* **Boolean**: Represents a true or false value.
* **Null**: Represents a lack of value
* **Array**: Represents an ordered collection of elements, which can be of any data type.
* **Object**: Represents a collection of key-value pairs, where keys are strings and values can be of any data type.
* **Buffer**: An efficient representation of binary data as a sequence of bytes.
* **Opaque**: A type used to hide a native value, used by certain native functions to manage native data types.

### User defined types  (currently not exposed in the editor)  
One can define custom types to a module by clicking the + button next to a module. A user defined type is, by default, a record type, with fields, each with their own name and type.  
#### Union types  
Types can also be unions of multiple types, meaning that it is valid for values of multiple different types to be assigned to that type.  
> This is currently not exposed in the editor, but available by editing the .midio file and using the `or` keyword between types, like `type Foo { field1: Number or String }`.

## Modules  
Modules in Midio serve as an organizational tool for structuring your code, separating different parts of the program into distinct and manageable units.  
A module can contain other modules, function definitions, and type definitions, allowing for a hierarchical organization of your program. In addition to these structural elements, modules can also contain flows.  
Modules can also have instances of events, which is not possible inside functions.

## Functions  
Functions in Midio provide a way to group reusable flows together. By defining a function, you can encapsulate a specific behavior or operation that can be invoked multiple times throughout your program. Functions can have both inputs and outputs in the form of triggers and properties, allowing them to accept data, process it, and produce results. Unlike modules, functions cannot contain events.

### External functions  
External functions in Midio are functions with a native implementation in Rust. These functions generally provide better performance and access to lower-level system features compared to functions written directly in Midio. Most of the functions in the Midio standard library are external functions, which form a foundation of useful and efficient building blocks for your programs.  
> You currently cannot create your own external functions, but this will be possible in the future.

## Local Variables  
Variables lets us assign data to a named key, which can then later be retrieved or changed.  
You can use the 'variable setter' node to assign a value to a variable name.  
And get the value of a variable using the 'variable setter' node.  
Variables being **local** means changing a variable in one module or function doesn't affect a variable with the same name in a different module or function. This means that you can more easily reason about what changes changing a variable has, and don't have to worry too much about naming colisions.  
{% hint style="warning" %}
Note that a variables value does not persist between processes.
{% endhint %}  
Here is an example of setting a variable and immediately retrieving it again.

## Data node  
Data nodes can be used to create both primitive values and complex data structures easily. You can add one by pressing space, and searching for `data object`, `string`, `number` and so on, or just paste a string into the search bar and press enter to get a string object. You can also paste JSON data from the clipboard directly onto the node graph, and it will import it as a data node.  
Data nodes are connected by the socket in their top-right corner, and can be used as input to any function.  
Data nodes can also depend on other data nodes or the result of function calls, by converting a field to an input field. This can be done by clicking the input icon which appear when hovering a field.

## Waypoint node  
Waypoint nodes serve two purposes:  
1. Gives us a way of specifying the pathing of an arrow more accurately.
2. Gives us an easy way to access fields on objects and items in lists by index.

## Portals  
Portals allows you to split an arrow in two, disconnecting them visually. This can be achieved by right clicking the arrow and selecting the 'split' option. This can be very useful for cleaning up a messy node graph, and lets you avoid very long arrows, or arrows that loop back.

# Partial function application  
Midio functions can take other functions as input by using the top-right socket as illustrated bellow. The `Std.CallFunction`function can be used to call functions passed as input.  
When the function being used as input has any inputs set, like the `Math.Add`function above, which has its `first`input set to _123,_ the function acts as a . This means the `Math.Add`function above now only takes one input instead of two. This input can either be supplied as an object with the input name set, as above, or as a list with only one input, like we show below.  
Partial function application can be very useful in situations when one needs to be able to pass a function which captures certain data only available in the scope where the function instance is created, and can act as a limited kind of ).

# Contexts  
## # What is it?  
Contexts are a way for nodes to implicitly pass along values along a path of execution. It for example allows the `Http.Endpoint` node to implicitly pass along an implicit http request handle to the `Http.Response` node, without you having to do this with a separate arrow.

## How it works  
Some triggers attach one or more contexts to a flow when they activate. Examples are the `Http.Endpoint.onRequest` trigger, which produces an `EndpointContext` context, and `Testing.Test.onRun`, which produces a `TestContext` context. You can see what contexts an output trigger produces, if any, by hovering it.  
Some input triggers either "consumes" or "borrows" one or several contexts. The `Http.Response.execute` input trigger for example consumes a `EndpointContext`. A context can only be consumed once, but borrowed multiple times. The `Testing.AssertEqual.execute` trigger for example only borrows the `TestContext` context, which lets us perform several asserts during the same test.  
A Http request can only be responded to once, which is why the `Http.Response.execute` trigger consumes the context.  
{% hint style="info" %}
Contexts are currently only partially exposed to user defined functions, in that you can define which contexts your functions consumes, but they are not allowed to borrow contexts yet. This limitation will be relaxed in the future, and should ideally be inferred. You can make your input trigger consume a context by pressing the + button under the consumes section on the input trigger node:  
<img src="../.gitbook/assets/Cursor_and_Midio_ðŸ”Š (2).png" alt="" data-size="original">
{% endhint %}

# Map, filter, reduce  
The functions in the `Iteration` module can be used for functional style transformation of data structures. `Iteration.Map` for example takes in a list, and a function handler, and applies the function to every item in the list, returning a new list of transformed values.

## Anonymous functions  
One can assign an anonymous function to the handler property by right clicking it, and selecting 'Add inline function' from the context menu.  
You can then click the 'Edit function' button on the node to edit the function.  
Add an input property and output property and connect them with whatever logic you need.  
You can also add a single input and output trigger to the function if you need to use triggable functions.

# Writing tests  
## Adding a new test  
Midio comes with a simple interface for writing and running tests, found in the .  
To add a test, first add a `Testing.Test` event node, and give it a name.  
If you open the 'Services' panel and click the 'refresh services list' button, you will get a new item called 'Testing'. Click it to get an overview of all your tests, and buttons to execute them.

## Assertions  
The Testing module contains several functions which can be used to perform assertions during a test, like `Testing.AssertEqual`. These functions can only be used in the context of a test, and will report to the testing service whether they pass or fail.  
You can then click on the 'run all' button to run all tests, or the individual 'run' buttons to run a single test.

## Tips  
Clicking on a test in the services panel will make the editor jump directly to where that test is defined.