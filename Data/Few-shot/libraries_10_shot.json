[
    {
        "type": "function",
        "function_name": "Std.If",
        "module_path": "Std",
        "doc": "If `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.",
        "body": "extern func(doc: \"If `input` is true, the `then` trigger is executed, otherwise the `else` trigger is executed. `value` contains the value of `input`.\") If {\n\n        in(x: 0, y: 0, name: \"execute\") trigger() execute\n\n        in(x: 0, y: 0, name: \"input\") property(Bool) predicate\n\n        out(x: 0, y: 0, name: \"then\") trigger() then\n\n        out(x: 0, y: 0, name: \"else\") trigger() else\n\n        out(x: 0, y: 0, name: \"value\") property(Bool) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.IfExpression",
        "module_path": "Std",
        "doc": "",
        "body": "extern func IfExpression {\n\n        parameter(\n\n            compilerPlugin: \"Expression\",\n\n            defaultValue: \"\",\n\n        ) expression\n\n\n\n        in trigger execute\n\n        out trigger then\n\n        out trigger else\n\n        out property(Bool) value\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.Count",
        "module_path": "Std",
        "doc": "Count can be used to make sure a loop in a flow only runs for a certain number of iteartions. The `reset` input trigger resets the count, and the `count` trigger is used to increment it.",
        "body": "extern func(doc: \"Count can be used to make sure a loop in a flow only runs for a certain number of iteartions. The `reset` input trigger resets the count, and the `count` trigger is used to increment it.\") Count {\n\n        in(x: 0, y: 0, name: \"reset\") trigger() reset\n\n        in(x: 0, y: 0, name: \"count\") trigger(consumes: Std.CountContext, ) count\n\n        in(x: 0, y: 0, name: \"iterations\") property(Number) iterations\n\n        out(x: 0, y: 0, name: \"on count\") trigger(produces: Std.CountContext) onCount\n\n        out(x: 0, y: 0, name: \"done\") trigger() done\n\n        out(x: 0, y: 0, name: \"interation\") property(Number) interation\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Std.For",
        "module_path": "Std",
        "doc": "",
        "body": "extern func For {\n\n        in trigger() reset\n\n        in trigger(consumes: Number) next\n\n        in property(List) items\n\n        out(name: \"on item\") trigger(produces: Number) onItem\n\n        out trigger done\n\n        out property(Any) item\n\n        out property(Number) index\n\n    }",
        "types": "type CountContext Number\ntype AnyContext Any"
    },
    {
        "type": "function",
        "function_name": "Strings.ToLower",
        "module_path": "Strings",
        "doc": "Returns the string `input` with all characters converted to lowercase.",
        "body": "extern func(doc: \"Returns the string `input` with all characters converted to lowercase.\") ToLower {\n\n        in(x: 0, y: 0, name: \"input\") property(String) input\n\n        out(x: 0, y: 0, name: \"output\") property(String) output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Strings.Characters",
        "module_path": "Strings",
        "doc": "",
        "body": "extern func Characters {\n\n        in property(String) input\n\n        out property(List) characters\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Empty",
        "module_path": "List",
        "doc": "Creates an empty list",
        "body": "extern func(doc: \"Creates an empty list\") Empty {\n\n        out(x: 0, y: 0, name: \"empty list\") property(List) list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.GetAt",
        "module_path": "List",
        "doc": "Gets the item at `index` from `list`, returning Null if the index is out of bounds.",
        "body": "extern func(doc: \"Gets the item at `index` from `list`, returning Null if the index is out of bounds.\") GetAt {\n\n        in(x: 0, y: 0, name: \"list\") property(List) list\n\n        in(x: 0, y: 0, name: \"index\") property(Number) index\n\n        out(x: 0, y: 0, name: \"itemAtIndex\") property(Any) itemAtIndex\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Add",
        "module_path": "List",
        "doc": "Adds `item` to the `list` by creating a new list with the item added, available on the `listWithItem` output.",
        "body": "extern func(doc: \"Adds `item` to the `list` by creating a new list with the item added, available on the `listWithItem` output.\") Add {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in(x: 0, y: 0, name: \"item\") property item\n\n        out(x: 0, y: 0, name: \"listWithItem\") property listWithItem\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Length",
        "module_path": "List",
        "doc": "Returns the number of items in `list`.",
        "body": "extern func(doc: \"Returns the number of items in `list`.\") Length {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"length\") property length\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Contains",
        "module_path": "List",
        "doc": "Returns true if `item` is contained in `list`.",
        "body": "extern func(doc: \"Returns true if `item` is contained in `list`.\") Contains {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        in(x: 0, y: 0, name: \"item\") property(Any) item\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) is_contained\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Sort",
        "module_path": "List",
        "doc": "Returns a sorted version of `list`",
        "body": "extern func(doc: \"Returns a sorted version of `list`\") Sort {\n\n        in(x: 0, y: 0, name: \"list\") property list\n\n        out(x: 0, y: 0, name: \"sorted list\") property sorted_list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.GenerateRange",
        "module_path": "List",
        "doc": "A list containing number from `from` to `to`.",
        "body": "extern func(doc: \"A list containing number from `from` to `to`.\") GenerateRange {\n\n        in(x: 0, y: 0, name: \"from\") property from\n\n        in(x: 0, y: 0, name: \"to\") property to\n\n        out(x: 0, y: 0, name: \"list\") property list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Slice",
        "module_path": "List",
        "doc": "Gets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1",
        "body": "extern func(doc: \"Gets a slice of the list from `start` to, but not including, `end`. Gets the rest of the list if end == -1\") Slice {\n\n        in(x: 0, y: 0, name: \"items\") property(List) list\n\n        in property(Number) start\n\n        in property(Number) end\n\n        out property(List) slice\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.FirstItem",
        "module_path": "List",
        "doc": "",
        "body": "extern func FirstItem {\n\n        in property(List) list\n\n        out property(Any) item\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.LastItem",
        "module_path": "List",
        "doc": "",
        "body": "extern func LastItem {\n\n        in property(List) list\n\n        out property(Any) item\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.IsEmpty",
        "module_path": "List",
        "doc": "",
        "body": "extern func IsEmpty {\n\n        in property(List) list\n\n        out(name: \"is empty\") property(Bool) isEmpty\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "List.Concat",
        "module_path": "List",
        "doc": "Concatenates two lists",
        "body": "extern func(doc: \"Concatenates two lists\") Concat {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Query.Filter",
        "module_path": "Query",
        "doc": "Filters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.",
        "body": "extern func(doc: \"Filters a list of items with the `where` expression is true. If the list items are objects, fields on the object can be accessed using the field names directly. If the values are primitives, like number of bool, the value can be accessed using the variable name 'it'.\") Filter {\n\n          parameter(defaultValue: \"it < 10\") where\n\n          in property(List) list\n\n          out property(List) result\n\n      }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.Map",
        "module_path": "Iteration",
        "doc": "Calls the given function instance (`handler`) once for each item in `items` returning a new list with the mapped values (`output_list`). Handle is expected to be a function which takes in at least one input (the item), and returns a single item, the mapped value. It can also take a second input, which is the index of the value, and a third value, an optional context value passed from the outside.",
        "body": "extern func(doc: \"Calls the given function instance (`handler`) once for each item in `items` returning a new list with the mapped values (`output_list`). Handle is expected to be a function which takes in at least one input (the item), and returns a single item, the mapped value. It can also take a second input, which is the index of the value, and a third value, an optional context value passed from the outside.\") Map {\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"output list\") property output_list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.Filter",
        "module_path": "Iteration",
        "doc": "",
        "body": "extern func Filter {\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(x: 0, y: 0, name: \"handler\") property(Any) handler\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"output list\") property output_list\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Iteration.Reduce",
        "module_path": "Iteration",
        "doc": "Reduces the list `item` using the provided reducer function, which is expected to accept 2-4 inputs, the first being the accumulated value, and the second the value being accumulated. A third optional input will contain the current index, while the fourth optional input will contain the context input.",
        "body": "extern func(doc: \"Reduces the list `item` using the provided reducer function, which is expected to accept 2-4 inputs, the first being the accumulated value, and the second the value being accumulated. A third optional input will contain the current index, while the fourth optional input will contain the context input.\") Reduce {\n\n        in(x: 0, y: 0, name: \"items\") property items\n\n        in(name: \"initial value\") property initialValue\n\n        in(x: 0, y: 0, name: \"reducer\") property(Any) reducer\n\n        in(x: 0, y: 0, name: \"context\") property(Any) context\n\n        out(x: 0, y: 0, name: \"output\") property output\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Add",
        "module_path": "Math",
        "doc": "Adds `first` and `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Adds `first` and `second` making the result avilable on the `result` output.\") Add {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Sub",
        "module_path": "Math",
        "doc": "Subtracts `first` and `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Subtracts `first` and `second` making the result avilable on the `result` output.\") Sub {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Mul",
        "module_path": "Math",
        "doc": "Multiplies `first` and `second` making the result avilable on the `result` output.",
        "body": "extern func(doc: \"Multiplies `first` and `second` making the result avilable on the `result` output.\") Mul {\n\n        in(x: 0, y: 0, name: \"first\") property(Number) first\n\n        in(x: 0, y: 0, name: \"second\") property(Number) second\n\n        out(x: 0, y: 0, name: \"result\") property(Number) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Expression",
        "module_path": "Math",
        "doc": "Creates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.",
        "body": "extern func(doc: \"Creates a mathematical expression using a simple expression language provided through the `expression` parameter. Example: `a + b / 10` creates two inputs, `a` and `b`. The expression is executed using the provided inputs, and the result is available on the `result` output.\") Expression {\n\n        parameter(\n\n            compilerPlugin: \"Expression\",\n\n            defaultValue: \"\",\n\n            aiSystemPrompt: \"You will generate math expressions based on a user prompt. The expression you generate will consist only of the following operators:\n\n                            - + (plus)\n\n                            - - (minus)\n\n                            - * (multiply)\n\n                            - / (divide)\n\n                            - % (modulo)\n\n\n\n                            Inputs that must be provided by the user are represented by valid C identifiers, and should prefer to be as short as possible, without confusing the user about what the input represents.\n\n\n\n                            Here are a few examples:\n\n\n\n                            Prompt: Calcualte the average of three number\n\n                            Response: (a + b + c) / 3\n\n\n\n                            Prompt: Calculate the area of a circle of radius r\n\n                            Response: 3.14 * r * r\n\n\n\n                            Prompt: Calculate the area of a rectangle\n\n                            Response: a * b\n\n                            \",\n\n        ) expression\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Math.Modulo",
        "module_path": "Math",
        "doc": "",
        "body": "extern func Modulo {\n\n        in(x: 0, y: 0, name: \"value\") property value\n\n        in(x: 0, y: 0, name: \"divisor\") property divisor\n\n        out(x: 0, y: 0, name: \"result\") property result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Logic.Equal",
        "module_path": "Logic",
        "doc": "Checks if `left` and `right` are equal by performing a deep scan of the objects.",
        "body": "extern func(doc: \"Checks if `left` and `right` are equal by performing a deep scan of the objects.\") Equal {\n\n        in(x: 0, y: 0, name: \"left\") property(Any) left\n\n        in(x: 0, y: 0, name: \"right\") property(Any) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Logic.NotEqual",
        "module_path": "Logic",
        "doc": "Checks if `left` and `right` are not equal by performing a deep scan of the objects.",
        "body": "extern func(doc: \"Checks if `left` and `right` are not equal by performing a deep scan of the objects.\") NotEqual {\n\n        in(x: 0, y: 0, name: \"left\") property(Any) left\n\n        in(x: 0, y: 0, name: \"right\") property(Any) right\n\n        out(x: 0, y: 0, name: \"result\") property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Logic.Not",
        "module_path": "Logic",
        "doc": "The logic not operator",
        "body": "extern func(doc: \"The logic not operator\") Not {\n\n        in property(Bool) input\n\n        out property(Bool) result\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Sets.Intersection",
        "module_path": "Sets",
        "doc": "",
        "body": "extern func Intersection {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) intersect\n\n    }",
        "types": ""
    },
    {
        "type": "function",
        "function_name": "Sets.Difference",
        "module_path": "Sets",
        "doc": "",
        "body": "extern func Difference {\n\n        in property(List) left\n\n        in property(List) right\n\n        out property(List) difference\n\n    }",
        "types": ""
    }
]