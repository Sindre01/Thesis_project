@midio_version("0.1.0")
@version("0.1.0")
import("std", Std_k98ojb)
import("http", Http_q7o96c)

module() main {

    // Creates a user-defined function named "opposite_signs".
    func(doc: "checks whether the given two integers have opposite sign or not.") opposite_signs {
    
        // Two input properties named x and y of type number
        in(x: -426.75106687766726, y: -248.6672781623361, name: "x") property(Number) x_853326
        in(x: -420.9177240472398, y: -107.83359783106482, name: "y") property(Number) y_5390f5

        // One output property named output of type boolean
        out(x: 159.11126708984375, y: -219.88885498046875, name: "output") property(Bool) output_3339a3

        // Creates a visual Function node using the textual instance type "instance" and the std library function "Math.Expression", with the expression "(x < 0 && y > 0) || (x > 0 && y < 0)".
        instance(x: -208.8202290039062, y: -217.13977099609372) expression_ea12d8 root.Std_k98ojb.Math.Expression {
            expression: "(x < 0 && y > 0) || (x > 0 && y < 0)"
        }

        // Send the input and output properties to the Math.Expression function node, using arrows.
        x_853326 -> expression_ea12d8.gen_0
        y_5390f5 -> expression_ea12d8.gen_1

        // Sends the result of the Math.Expression function node to the output property.
        expression_ea12d8.result -> output_3339a3
    }

    // Creates a visual Function node using the textual instance type "instance" with the user-defined function "main.opposite_signs".
    instance(x: -1091.7776489257813, y: -509.4445495605469) opposite_signs_77805a root.main.opposite_signs {}

   
}


        
        